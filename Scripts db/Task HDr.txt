GO
/****** Object:  UserDefinedFunction [dbo].[FN_GET_APPROVAL_ABBR_NO]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[FN_GET_APPROVAL_ABBR_NO]
(
	@PROJECT_Mkey numeric (10,0),
	@SR_NO nvarchar(100)	
)
Returns varchar(100)
as
begin

declare @ReturnVal varchar(30)

set  @ReturnVal = @PROJECT_Mkey
declare @dCount int 
select 	@dCount = count(*) from PROJECT_TRL_APPROVAL_ABBR where isnull(SEQ_PARENT_ID,0) = @SR_NO and mkey != isnull(SEQ_PARENT_ID,0)

return @ReturnVal+'.'+ cast((@dCount+1) as varchar)
end
GO
/****** Object:  UserDefinedFunction [dbo].[FN_GET_APPROVAL_SUBTASK_NO]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[FN_GET_APPROVAL_SUBTASK_NO]
(
	@APPROVAL_MKEY numeric (10,0),
	@SEQ_NO nvarchar(100)	
)
Returns varchar(100)
as
begin

declare @ReturnVal varchar(30)

set  @ReturnVal = @SEQ_NO
declare @dCount int 
select 	@dCount = count(*) from APPROVAL_TEMPLATE_TRL_SUBTASK where isnull(APRROVAL_PARENT_ID,0) = @APPROVAL_MKEY and mkey != isnull(APRROVAL_PARENT_ID,0)

return @ReturnVal+'.'+ cast((@dCount+1) as varchar)
end
GO
/****** Object:  UserDefinedFunction [dbo].[FN_GET_TASK_NO]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE function [dbo].[FN_GET_TASK_NO]
(
	@Task_Mkey numeric (10,0),
	@Task_No nvarchar(100)	
)
Returns varchar(100)
as
begin

declare @ReturnVal varchar(30)

set  @ReturnVal=@Task_No
declare @dCount int 
select 	@dCount =count(*) from Task_hdr where isnull(TASK_PARENT_ID,0)=@Task_Mkey and mkey!=isnull(TASK_PARENT_ID,0)

return @ReturnVal+'.'+ cast((@dCount+1) as varchar)
end
--select [dbo].[FN_GET_TASK_NO](1,'2.0')

GO
/****** Object:  Table [dbo].[APPROVAL_TEMPLATE_HDR]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[APPROVAL_TEMPLATE_HDR](
	[MKEY] [int] IDENTITY(1,1) NOT NULL,
	[BUILDING_TYPE] [int] NULL,
	[BUILDING_STANDARD] [int] NULL,
	[STATUTORY_AUTHORITY] [int] NULL,
	[MAIN_ABBR] [nvarchar](200) NULL,
	[SHORT_DESCRIPTION] [nvarchar](500) NULL,
	[LONG_DESCRIPTION] [nvarchar](max) NULL,
	[AUTHORITY_DEPARTMENT] [nvarchar](200) NULL,
	[RESPOSIBLE_EMP_MKEY] [int] NULL,
	[JOB_ROLE] [int] NULL,
	[DAYS_REQUIERD] [nvarchar](200) NULL,
	[SANCTIONING_DEPARTMENT_MKEY] [int] NULL,
	[SANCTION_AUTHORITY] [int] NULL,
	[SANCTION_DEPARTMENT] [nvarchar](200) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NOT NULL,
	[CREATION_DATE] [datetime] NOT NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[END_RESULT_DOC] [nvarchar](max) NULL,
	[CHECKLIST_DOC] [nvarchar](max) NULL,
	[DELETE_FLAG] [char](1) NOT NULL,
	[TAGS] [nvarchar](max) NULL,
	[IS_NODE] [nchar](2) NULL,
	[SEQ_ORDER] [nvarchar](10) NULL,
 CONSTRAINT [PK_APPROVAL_TEMPLATE_HDR] PRIMARY KEY CLUSTERED 
(
	[MKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[APPROVAL_TEMPLATE_HDR_H]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[APPROVAL_TEMPLATE_HDR_H](
	[HISTSEQ_NO] [int] IDENTITY(1,1) NOT NULL,
	[HIST_DATE] [datetime] NOT NULL,
	[MKEY] [int] NULL,
	[BUILDING_TYPE] [int] NULL,
	[BUILDING_STANDARD] [int] NULL,
	[STATUTORY_AUTHORITY] [int] NULL,
	[MAIN_ABBR] [nvarchar](200) NULL,
	[SHORT_DESCRIPTION] [nvarchar](500) NULL,
	[LONG_DESCRIPTION] [nvarchar](max) NULL,
	[AUTHORITY_DEPARTMENT] [nvarchar](200) NULL,
	[RESPOSIBLE_EMP_MKEY] [int] NULL,
	[JOB_ROLE] [int] NULL,
	[DAYS_REQUIERD] [nvarchar](200) NULL,
	[SANCTIONING_DEPARTMENT_MKEY] [int] NULL,
	[SANCTION_AUTHORITY] [int] NULL,
	[SANCTION_DEPARTMENT] [nvarchar](200) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NOT NULL,
	[CREATION_DATE] [datetime] NOT NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[END_RESULT_DOC] [nvarchar](max) NULL,
	[CHECKLIST_DOC] [nvarchar](max) NULL,
	[DELETE_FLAG] [char](1) NOT NULL,
	[TAGS] [nvarchar](max) NULL,
	[IS_NODE] [nchar](2) NULL,
	[SEQ_ORDER] [nvarchar](10) NULL,
 CONSTRAINT [PK_APPROVAL_TEMPLATE_HDR_H] PRIMARY KEY CLUSTERED 
(
	[HISTSEQ_NO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[APPROVAL_TEMPLATE_TAGS]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[APPROVAL_TEMPLATE_TAGS](
	[MKEY] [int] NOT NULL,
	[SR_NO] [int] NOT NULL,
	[APPROVAL_TEMPLATE_MKEY] [int] NOT NULL,
	[TAGS_DESC] [nvarchar](100) NOT NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NOT NULL,
	[CREATION_DATE] [datetime] NOT NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[APPROVAL_TEMPLATE_TRL_CHECKLIST]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[APPROVAL_TEMPLATE_TRL_CHECKLIST](
	[MKEY] [int] NOT NULL,
	[SR_NO] [int] NULL,
	[DOCUMENT_NAME] [nvarchar](500) NULL,
	[DOCUMENT_CATEGORY] [nvarchar](500) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NULL,
	[CREATION_DATE] [datetime] NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL,
	[APP_CHECK] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[APPROVAL_TEMPLATE_TRL_CHECKLIST_H]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[APPROVAL_TEMPLATE_TRL_CHECKLIST_H](
	[HistSeq_No] [int] IDENTITY(1,1) NOT NULL,
	[Hist_date] [datetime] NULL,
	[MKEY] [int] NULL,
	[SR_NO] [int] NULL,
	[DOCUMENT_NAME] [nvarchar](500) NULL,
	[DOCUMENT_CATEGORY] [nvarchar](500) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NULL,
	[CREATION_DATE] [datetime] NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL,
	[APP_CHECK] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[APPROVAL_TEMPLATE_TRL_ENDRESULT]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[APPROVAL_TEMPLATE_TRL_ENDRESULT](
	[MKEY] [int] NOT NULL,
	[SR_NO] [int] NULL,
	[DOCUMENT_NAME] [nvarchar](500) NULL,
	[DOCUMENT_CATEGORY] [nvarchar](500) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NULL,
	[CREATION_DATE] [datetime] NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[APPROVAL_TEMPLATE_TRL_ENDRESULT_H]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[APPROVAL_TEMPLATE_TRL_ENDRESULT_H](
	[HistSeq_No] [int] IDENTITY(1,1) NOT NULL,
	[Hist_date] [datetime] NULL,
	[MKEY] [int] NOT NULL,
	[SR_NO] [int] NOT NULL,
	[DOCUMENT_NAME] [nvarchar](500) NULL,
	[DOCUMENT_CATEGORY] [nvarchar](500) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NULL,
	[CREATION_DATE] [datetime] NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT](
	[MKEY] [int] NOT NULL,
	[SR_NO] [int] NOT NULL,
	[LEVEL] [varchar](100) NULL,
	[SANCTIONING_DEPARTMENT] [varchar](200) NULL,
	[SANCTIONING_AUTHORITY] [varchar](200) NULL,
	[START_DATE] [datetime] NULL,
	[END_DATE] [datetime] NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NULL,
	[CREATION_DATE] [datetime] NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL,
	[STATUS] [nvarchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT_H]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT_H](
	[HISTSEQ_NO] [int] IDENTITY(1,1) NOT NULL,
	[HIST_DATE] [datetime] NOT NULL,
	[MKEY] [int] NULL,
	[SR_NO] [int] NULL,
	[LEVEL] [varchar](100) NULL,
	[SANCTIONING_DEPARTMENT] [varchar](200) NULL,
	[SANCTIONING_AUTHORITY] [varchar](200) NULL,
	[START_DATE] [datetime] NOT NULL,
	[END_DATE] [datetime] NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NULL,
	[CREATION_DATE] [datetime] NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NULL,
	[STATUS] [nvarchar](100) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[APPROVAL_TEMPLATE_TRL_SUBTASK]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[APPROVAL_TEMPLATE_TRL_SUBTASK](
	[HEADER_MKEY] [int] NOT NULL,
	[SEQ_NO] [nvarchar](50) NULL,
	[SUBTASK_ABBR] [nvarchar](200) NULL,
	[SUBTASK_MKEY] [int] NULL,
	[SUBTASK_PARENT_ID] [int] NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[ATTRIBUTE6] [nvarchar](100) NULL,
	[ATTRIBUTE7] [nvarchar](100) NULL,
	[ATTRIBUTE8] [nvarchar](100) NULL,
	[CREATED_BY] [int] NULL,
	[CREATION_DATE] [datetime] NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[APPROVAL_TEMPLATE_TRL_SUBTASK_H]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[APPROVAL_TEMPLATE_TRL_SUBTASK_H](
	[HistSeq_No] [int] IDENTITY(1,1) NOT NULL,
	[Hist_date] [datetime] NULL,
	[HEADER_MKEY] [int] NULL,
	[SEQ_NO] [nvarchar](50) NULL,
	[SUBTASK_ABBR] [nvarchar](200) NULL,
	[SUBTASK_MKEY] [int] NULL,
	[SUBTASK_PARENT_ID] [int] NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[ATTRIBUTE6] [nvarchar](100) NULL,
	[ATTRIBUTE7] [nvarchar](100) NULL,
	[ATTRIBUTE8] [nvarchar](100) NULL,
	[CREATED_BY] [int] NULL,
	[CREATION_DATE] [datetime] NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[COMPLIANCE_HDR]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[COMPLIANCE_HDR](
	[MKEY] [int] IDENTITY(1,1) NOT NULL,
	[PROPERTY] [int] NULL,
	[BUILDING] [int] NULL,
	[TASK_NO_MKEY] [int] NULL,
	[SHORT_DESCRIPTION] [nvarchar](max) NULL,
	[LONG_DESCRIPTION] [nvarchar](max) NULL,
	[RAISED_AT] [nvarchar](100) NULL,
	[RAISED_AT_BEFORE] [nvarchar](100) NULL,
	[RESPONSIBLE_DEPARTMENT] [int] NULL,
	[JOB_ROLE] [int] NULL,
	[RESPONSIBLE_PERSON] [int] NULL,
	[TO_BE_COMPLETED_BY] [datetime] NULL,
	[NO_DAYS] [int] NULL,
	[STATUS] [nchar](1) NULL,
	[TASK_TYPE] [int] NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NOT NULL,
	[CREATION_DATE] [datetime] NOT NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL,
 CONSTRAINT [PK_COMPLIANCE_HDR] PRIMARY KEY CLUSTERED 
(
	[MKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[COMPLIANCE_HDR_H]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[COMPLIANCE_HDR_H](
	[HISTSEQ_NO] [int] IDENTITY(1,1) NOT NULL,
	[HIST_DATE] [datetime] NOT NULL,
	[MKEY] [int] NOT NULL,
	[PROPERTY] [int] NULL,
	[BUILDING] [int] NULL,
	[TASK_NO_MKEY] [int] NULL,
	[SHORT_DESCRIPTION] [nvarchar](max) NULL,
	[LONG_DESCRIPTION] [nvarchar](max) NULL,
	[RAISED_AT] [nvarchar](100) NULL,
	[RAISED_AT_BEFORE] [nvarchar](100) NULL,
	[RESPONSIBLE_DEPARTMENT] [int] NULL,
	[JOB_ROLE] [int] NULL,
	[RESPONSIBLE_PERSON] [int] NULL,
	[TO_BE_COMPLETED_BY] [datetime] NULL,
	[NO_DAYS] [int] NULL,
	[STATUS] [nchar](1) NULL,
	[TASK_TYPE] [int] NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NULL,
	[CREATION_DATE] [datetime] NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[COMPLIANCE_TRL_TAGS]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[COMPLIANCE_TRL_TAGS](
	[MKEY] [int] NOT NULL,
	[SR_NO] [int] NOT NULL,
	[COMPLIANCE_MKEY] [int] NOT NULL,
	[TAGS_NAME] [nvarchar](500) NOT NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NOT NULL,
	[CREATION_DATE] [datetime] NOT NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[COMPLIANCE_TRL_TAGS_H]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[COMPLIANCE_TRL_TAGS_H](
	[HISTSEQ_NO] [int] IDENTITY(1,1) NOT NULL,
	[HIST_DATE] [datetime] NOT NULL,
	[MKEY] [int] NULL,
	[SR_NO] [int] NULL,
	[COMPLIANCE_MKEY] [int] NULL,
	[TAGS_NAME] [nvarchar](500) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NULL,
	[CREATION_DATE] [datetime] NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DOC_TEMPLATE_HDR]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DOC_TEMPLATE_HDR](
	[MKEY] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
	[TYPE_MST_DOC_TYPE_MKEY] [int] NULL,
	[DOC_CATEGORY] [int] NULL,
	[DOC_NAME] [nvarchar](200) NULL,
	[DOC_ABBR] [nvarchar](50) NULL,
	[DOC_NUM_FIELD_NAME] [nvarchar](50) NULL,
	[DOC_NUM_DATE_NAME] [nvarchar](50) NULL,
	[DOC_NUM_APP_FLAG] [nchar](1) NULL,
	[DOC_NUM_VALID_FLAG] [nchar](1) NULL,
	[DOC_NUM_DATE_APP_FLAG] [nchar](1) NULL,
	[DOC_ATTACH_APP_FLAG] [nchar](1) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [numeric](18, 0) NOT NULL,
	[CREATION_DATE] [datetime] NOT NULL,
	[LAST_UPDATED_BY] [numeric](18, 0) NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL,
 CONSTRAINT [PK_DOC_TEMPLATE_HDR] PRIMARY KEY CLUSTERED 
(
	[MKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DOC_TEMPLATE_HDR_H]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DOC_TEMPLATE_HDR_H](
	[HISTSEQ_NO] [int] IDENTITY(1,1) NOT NULL,
	[HIST_DATE] [datetime] NOT NULL,
	[MKEY] [numeric](18, 0) NOT NULL,
	[TYPE_MST_DOC_TYPE_MKEY] [int] NULL,
	[DOC_CATEGORY] [int] NULL,
	[DOC_NAME] [nvarchar](200) NULL,
	[DOC_ABBR] [nvarchar](50) NULL,
	[DOC_NUM_FIELD_NAME] [nvarchar](50) NULL,
	[DOC_NUM_DATE_NAME] [nvarchar](50) NULL,
	[DOC_NUM_APP_FLAG] [nchar](1) NULL,
	[DOC_NUM_VALID_FLAG] [nchar](1) NULL,
	[DOC_NUM_DATE_APP_FLAG] [nchar](1) NULL,
	[DOC_ATTACH_APP_FLAG] [nchar](1) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [numeric](18, 0) NOT NULL,
	[CREATION_DATE] [datetime] NOT NULL,
	[LAST_UPDATED_BY] [numeric](18, 0) NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL,
 CONSTRAINT [PK_DOC_TEMPLATE_HDR_H] PRIMARY KEY CLUSTERED 
(
	[HISTSEQ_NO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PROJECT_DOC_DEPOSITORY_HDR]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PROJECT_DOC_DEPOSITORY_HDR](
	[MKEY] [int] IDENTITY(1,1) NOT NULL,
	[BUILDING_TYPE] [int] NULL,
	[PROPERTY_TYPE] [int] NULL,
	[DOC_MKEY] [int] NULL,
	[DOC_NUMBER] [nvarchar](200) NULL,
	[DOC_DATE] [nvarchar](100) NULL,
	[VALIDITY_DATE] [nvarchar](50) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [numeric](18, 0) NOT NULL,
	[CREATION_DATE] [datetime] NOT NULL,
	[LAST_UPDATED_BY] [numeric](18, 0) NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL,
 CONSTRAINT [PK_PROJECT_DOC_DEPOSITORY_HDR] PRIMARY KEY CLUSTERED 
(
	[MKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PROJECT_DOC_DEPOSITORY_HDR_H]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PROJECT_DOC_DEPOSITORY_HDR_H](
	[HISTSEQ_NO] [int] IDENTITY(1,1) NOT NULL,
	[HIST_DATE] [datetime] NOT NULL,
	[MKEY] [int] NOT NULL,
	[BUILDING_TYPE] [int] NULL,
	[PROPERTY_TYPE] [int] NULL,
	[DOC_MKEY] [int] NULL,
	[DOC_NUMBER] [nvarchar](200) NULL,
	[DOC_DATE] [nvarchar](100) NULL,
	[VALIDITY_DATE] [nvarchar](50) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [numeric](18, 0) NOT NULL,
	[CREATION_DATE] [datetime] NOT NULL,
	[LAST_UPDATED_BY] [numeric](18, 0) NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL,
 CONSTRAINT [PK_PROJECT_DOC_DEPOSITORY_HDR_H] PRIMARY KEY CLUSTERED 
(
	[HISTSEQ_NO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PROJECT_DOC_DEPOSITORY_TRL_MEDIA]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PROJECT_DOC_DEPOSITORY_TRL_MEDIA](
	[MKEY] [int] NOT NULL,
	[SR_NO] [int] NOT NULL,
	[PROJECT_DOC_MKEY] [int] NOT NULL,
	[FILE_NAME] [nvarchar](200) NOT NULL,
	[FILE_PATH] [nvarchar](max) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NULL,
	[CREATION_DATE] [datetime] NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PROJECT_DOC_DEPOSITORY_TRL_MEDIA_H]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PROJECT_DOC_DEPOSITORY_TRL_MEDIA_H](
	[HISTSEQ_NO] [int] IDENTITY(1,1) NOT NULL,
	[HIST_DATE] [datetime] NOT NULL,
	[MKEY] [int] NULL,
	[SR_NO] [int] NULL,
	[PROJECT_DOC_MKEY] [int] NULL,
	[FILE_NAME] [nvarchar](200) NULL,
	[FILE_PATH] [nvarchar](max) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NULL,
	[CREATION_DATE] [datetime] NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NULL,
 CONSTRAINT [PK_PROJECT_DOC_DEPOSITORY_TRL_MEDIA_H] PRIMARY KEY CLUSTERED 
(
	[HISTSEQ_NO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PROJECT_HDR]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PROJECT_HDR](
	[MKEY] [int] IDENTITY(1,1) NOT NULL,
	[PROPERTY] [int] NOT NULL,
	[BUILDING_MKEY] [int] NOT NULL,
	[PROJECT_ABBR] [nvarchar](200) NULL,
	[LEGAL_ENTITY] [nvarchar](500) NULL,
	[PROJECT_ADDRESS] [nvarchar](max) NULL,
	[BUILDING_CLASSIFICATION] [numeric](18, 0) NULL,
	[BUILDING_STANDARD] [numeric](18, 0) NULL,
	[STATUTORY_AUTHORITY] [numeric](18, 0) NULL,
	[INITIATOR] [nvarchar](200) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [decimal](18, 0) NOT NULL,
	[CREATION_DATE] [smalldatetime] NOT NULL,
	[LAST_UPDATED_BY] [decimal](18, 0) NULL,
	[LAST_UPDATE_DATE] [smalldatetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL,
 CONSTRAINT [PK_PROJECT_HDR] PRIMARY KEY CLUSTERED 
(
	[MKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PROJECT_HDR_H]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PROJECT_HDR_H](
	[HistSeq_No] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
	[Hist_date] [datetime] NULL,
	[MKEY] [int] NOT NULL,
	[PROPERTY] [int] NULL,
	[BUILDING_MKEY] [int] NOT NULL,
	[PROJECT_ABBR] [nvarchar](200) NULL,
	[LEGAL_ENTITY] [nvarchar](500) NULL,
	[PROJECT_ADDRESS] [nvarchar](max) NULL,
	[BUILDING_CLASSIFICATION] [numeric](18, 0) NULL,
	[BUILDING_STANDARD] [numeric](18, 0) NULL,
	[STATUTORY_AUTHORITY] [numeric](18, 0) NULL,
	[INITIATOR] [nvarchar](200) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [decimal](18, 0) NOT NULL,
	[CREATION_DATE] [smalldatetime] NOT NULL,
	[LAST_UPDATED_BY] [decimal](18, 0) NULL,
	[LAST_UPDATE_DATE] [smalldatetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PROJECT_TRL_APPROVAL_ABBR]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PROJECT_TRL_APPROVAL_ABBR](
	[HEADER_MKEY] [int] NOT NULL,
	[APPROVAL_MKEY] [int] NULL,
	[SEQ_NO] [varchar](100) NULL,
	[TASK_NO_MKEY] [nvarchar](100) NULL,
	[APPROVAL_ABBRIVATION] [nvarchar](200) NULL,
	[APPROVAL_DESCRIPTION] [nvarchar](max) NULL,
	[DAYS_REQUIRED] [int] NULL,
	[DEPARTMENT] [int] NULL,
	[JOB_ROLE] [int] NULL,
	[RESPOSIBLE_EMP_MKEY] [int] NULL,
	[OUTPUT_DOCUMENT] [nvarchar](max) NULL,
	[TENTATIVE_START_DATE] [datetime] NULL,
	[TENTATIVE_END_DATE] [datetime] NULL,
	[STATUS] [varchar](100) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NOT NULL,
	[CREATION_DATE] [datetime] NOT NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[PROJECT_TRL_APPROVAL_ABBR_H]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PROJECT_TRL_APPROVAL_ABBR_H](
	[HISTSEQ_NO] [int] IDENTITY(1,1) NOT NULL,
	[HIST_DATE] [datetime] NOT NULL,
	[HEADER_MKEY] [int] NOT NULL,
	[APPROVAL_MKEY] [int] NULL,
	[SEQ_NO] [varchar](100) NULL,
	[TASK_NO_MKEY] [nvarchar](100) NULL,
	[APPROVAL_ABBRIVATION] [nvarchar](200) NULL,
	[APPROVAL_DESCRIPTION] [nvarchar](max) NULL,
	[DAYS_REQUIRED] [int] NULL,
	[DEPARTMENT] [int] NULL,
	[JOB_ROLE] [int] NULL,
	[RESPOSIBLE_EMP_MKEY] [int] NULL,
	[OUTPUT_DOCUMENT] [nvarchar](max) NULL,
	[TENTATIVE_START_DATE] [datetime] NULL,
	[TENTATIVE_END_DATE] [datetime] NULL,
	[STATUS] [varchar](100) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NOT NULL,
	[CREATION_DATE] [datetime] NOT NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL,
 CONSTRAINT [PK_PROJECT_TRL_APPROVALS_H] PRIMARY KEY CLUSTERED 
(
	[HISTSEQ_NO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_ACTION_TRL]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_ACTION_TRL](
	[MKEY] [decimal](18, 0) NOT NULL,
	[SR_NO] [decimal](18, 0) NOT NULL,
	[TASK_MKEY] [decimal](18, 0) NOT NULL,
	[TASK_PARENT_ID] [decimal](18, 0) NULL,
	[TASK_MAIN_NODE_ID] [decimal](18, 0) NULL,
	[ACTION_TYPE] [nvarchar](50) NOT NULL,
	[DESCRIPTION_COMMENT] [nvarchar](500) NULL,
	[PROGRESS_PERC] [decimal](18, 2) NOT NULL,
	[STATUS] [nvarchar](50) NULL,
	[FILE_NAME] [nvarchar](50) NULL,
	[FILE_PATH] [nvarchar](500) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [decimal](18, 0) NOT NULL,
	[CREATION_DATE] [smalldatetime] NOT NULL,
	[LAST_UPDATED_BY] [decimal](18, 0) NULL,
	[LAST_UPDATE_DATE] [smalldatetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_CHECKLIST_TRL]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_CHECKLIST_TRL](
	[MKEY] [int] NOT NULL,
	[SR_NO] [int] NULL,
	[DOCUMENT_MKEY] [int] NULL,
	[DOCUMENT_NAME] [nvarchar](500) NULL,
	[DOCUMENT_CATEGORY] [nvarchar](500) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NULL,
	[CREATION_DATE] [datetime] NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL,
	[APP_CHECK] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_CHECKLIST_TRL_H]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_CHECKLIST_TRL_H](
	[HISTSEQ_NO] [int] IDENTITY(1,1) NOT NULL,
	[HIST_DATE] [smalldatetime] NOT NULL,
	[MKEY] [int] NOT NULL,
	[SR_NO] [int] NULL,
	[DOCUMENT_MKEY] [int] NULL,
	[DOCUMENT_NAME] [nvarchar](500) NULL,
	[DOCUMENT_CATEGORY] [nvarchar](500) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NULL,
	[CREATION_DATE] [datetime] NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL,
	[APP_CHECK] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_ENDLIST_MEDIA_TRL]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_ENDLIST_MEDIA_TRL](
	[MKEY] [int] NOT NULL,
	[SR_NO] [int] NOT NULL,
	[DOC_CATEGORY_MKEY] [int] NULL,
	[FILE_NAME] [nvarchar](500) NULL,
	[FILE_PATH] [nvarchar](max) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NULL,
	[CREATION_DATE] [datetime] NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_ENDLIST_MEDIA_TRL_H]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_ENDLIST_MEDIA_TRL_H](
	[HISTSEQ_NO] [int] IDENTITY(1,1) NOT NULL,
	[HIST_DATE] [date] NOT NULL,
	[MKEY] [int] NULL,
	[SR_NO] [int] NULL,
	[DOC_CATEGORY_MKEY] [int] NULL,
	[FILE_NAME] [nvarchar](500) NULL,
	[FILE_PATH] [nvarchar](max) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NULL,
	[CREATION_DATE] [datetime] NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NULL,
 CONSTRAINT [PK_TASK_ENDLIST_MEDIA_TRL_H] PRIMARY KEY CLUSTERED 
(
	[HISTSEQ_NO] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_ENDLIST_TRL]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_ENDLIST_TRL](
	[MKEY] [int] NOT NULL,
	[SR_NO] [int] NOT NULL,
	[DOCUMENT_MKEY] [int] NULL,
	[DOCUMENT_NAME] [nvarchar](500) NULL,
	[DOCUMENT_CATEGORY_MKEY] [int] NULL,
	[DOCUMENT_CATEGORY] [nvarchar](200) NULL,
	[DOC_NUM_APP_FLAG] [nchar](1) NULL,
	[DOC_NUM_VALID_FLAG] [nchar](1) NULL,
	[DOC_NUM_DATE_APP_FLAG] [nchar](1) NULL,
	[DOC_ATTACH_APP_FLAG] [nchar](1) NULL,
	[DOC_NUMBER] [nvarchar](200) NULL,
	[DOC_DATE] [nvarchar](100) NULL,
	[VALIDITY_DATE] [nvarchar](50) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NULL,
	[CREATION_DATE] [datetime] NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_ENDLIST_TRL_H]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_ENDLIST_TRL_H](
	[HISTSEQ_NO] [int] IDENTITY(1,1) NOT NULL,
	[HIST_DATE] [datetime] NOT NULL,
	[MKEY] [int] NULL,
	[SR_NO] [int] NULL,
	[DOCUMENT_MKEY] [int] NULL,
	[DOCUMENT_NAME] [nvarchar](500) NULL,
	[DOCUMENT_CATEGORY_MKEY] [int] NULL,
	[DOCUMENT_CATEGORY] [nvarchar](200) NULL,
	[DOC_NUM_APP_FLAG] [nchar](1) NULL,
	[DOC_NUM_VALID_FLAG] [nchar](1) NULL,
	[DOC_NUM_DATE_APP_FLAG] [nchar](1) NULL,
	[DOC_ATTACH_APP_FLAG] [nchar](1) NULL,
	[DOC_NUMBER] [nvarchar](200) NULL,
	[DOC_DATE] [nvarchar](100) NULL,
	[VALIDITY_DATE] [nvarchar](50) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NULL,
	[CREATION_DATE] [datetime] NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_HDR]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_HDR](
	[MKEY] [decimal](18, 0) IDENTITY(1,1) NOT NULL,
	[TASK_NO] [nvarchar](50) NOT NULL,
	[TASK_NAME] [nvarchar](150) NOT NULL,
	[TASK_DESCRIPTION] [nvarchar](1000) NOT NULL,
	[CAREGORY] [decimal](18, 0) NOT NULL,
	[PROJECT_ID] [decimal](18, 0) NULL,
	[SUB_PROJECT_ID] [decimal](18, 0) NULL,
	[START_DATE] [smalldatetime] NULL,
	[COMPLETION_DATE] [smalldatetime] NOT NULL,
	[CLOSE_DATE] [smalldatetime] NULL,
	[DUE_DATE] [smalldatetime] NULL,
	[ASSIGNED_TO] [decimal](18, 0) NULL,
	[TAGS] [nvarchar](100) NULL,
	[ISNODE] [nchar](1) NOT NULL,
	[TASK_PARENT_ID] [decimal](18, 0) NULL,
	[TASK_MAIN_NODE_ID] [decimal](18, 0) NULL,
	[STATUS] [nvarchar](50) NULL,
	[STATUS_PERC] [decimal](18, 1) NOT NULL,
	[TASK_CREATED_BY] [decimal](18, 0) NOT NULL,
	[APPROVER_ID] [decimal](18, 0) NULL,
	[APPROVE_ACTION_DATE] [smalldatetime] NULL,
	[TASK_TYPE] [int] NULL,
	[IS_ARCHIVE] [nchar](1) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [decimal](18, 0) NOT NULL,
	[CREATION_DATE] [smalldatetime] NOT NULL,
	[LAST_UPDATED_BY] [decimal](18, 0) NULL,
	[LAST_UPDATE_DATE] [smalldatetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL,
	[RESPOSIBLE_EMP_MKEY] [decimal](18, 0) NULL,
	[Is_Scheduled] [nchar](1) NULL,
	[WBS] [nvarchar](50) NULL,
	[Duration] [nvarchar](50) NULL,
	[Sch_Start_Date] [smalldatetime] NULL,
	[Finish_Date] [smalldatetime] NULL,
	[Predecessors] [nvarchar](100) NULL,
	[Resource_Names] [nvarchar](100) NULL,
	[Text1] [nvarchar](100) NULL,
	[Outline_Level] [int] NULL,
	[Number1] [int] NULL,
	[Unique_ID] [decimal](18, 0) NULL,
	[Percent_Complete] [nvarchar](50) NULL,
	[Status_Flag] [nchar](10) NULL,
	[Recursive_Id] [int] NULL,
	[Recursive_Created_For] [int] NULL,
 CONSTRAINT [PK_TASK_HDR] PRIMARY KEY CLUSTERED 
(
	[MKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_HDR_H]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_HDR_H](
	[HISTSEQ_NO] [int] IDENTITY(1,1) NOT NULL,
	[HIST_DATE] [smalldatetime] NOT NULL,
	[MKEY] [decimal](18, 0) NULL,
	[TASK_NO] [nvarchar](50) NULL,
	[TASK_NAME] [nvarchar](150) NULL,
	[TASK_DESCRIPTION] [nvarchar](1000) NULL,
	[CAREGORY] [decimal](18, 0) NULL,
	[PROJECT_ID] [decimal](18, 0) NULL,
	[SUB_PROJECT_ID] [decimal](18, 0) NULL,
	[START_DATE] [smalldatetime] NULL,
	[COMPLETION_DATE] [smalldatetime] NULL,
	[CLOSE_DATE] [smalldatetime] NULL,
	[DUE_DATE] [smalldatetime] NULL,
	[ASSIGNED_TO] [decimal](18, 0) NULL,
	[TAGS] [nvarchar](100) NULL,
	[ISNODE] [nchar](1) NULL,
	[TASK_PARENT_ID] [decimal](18, 0) NULL,
	[TASK_MAIN_NODE_ID] [decimal](18, 0) NULL,
	[STATUS] [nvarchar](50) NULL,
	[STATUS_PERC] [decimal](18, 1) NULL,
	[TASK_CREATED_BY] [decimal](18, 0) NULL,
	[APPROVER_ID] [decimal](18, 0) NULL,
	[APPROVE_ACTION_DATE] [smalldatetime] NULL,
	[TASK_TYPE] [int] NULL,
	[IS_ARCHIVE] [nchar](1) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [decimal](18, 0) NULL,
	[CREATION_DATE] [smalldatetime] NULL,
	[LAST_UPDATED_BY] [decimal](18, 0) NULL,
	[LAST_UPDATE_DATE] [smalldatetime] NULL,
	[DELETE_FLAG] [char](1) NULL,
	[RESPOSIBLE_EMP_MKEY] [decimal](18, 0) NULL,
	[Is_Scheduled] [nchar](1) NULL,
	[WBS] [nvarchar](50) NULL,
	[Duration] [nvarchar](50) NULL,
	[Sch_Start_Date] [smalldatetime] NULL,
	[Finish_Date] [smalldatetime] NULL,
	[Predecessors] [nvarchar](100) NULL,
	[Resource_Names] [nvarchar](100) NULL,
	[Text1] [nvarchar](100) NULL,
	[Outline_Level] [int] NULL,
	[Number1] [int] NULL,
	[Unique_ID] [decimal](18, 0) NULL,
	[Percent_Complete] [nvarchar](50) NULL,
	[Status_Flag] [nchar](10) NULL,
	[Recursive_Id] [int] NULL,
	[Recursive_Created_For] [int] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_HDR_PC]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_HDR_PC](
	[MKEY] [decimal](18, 0) NOT NULL,
	[TASK_NO] [nvarchar](50) NOT NULL,
	[TASK_NAME] [nvarchar](150) NOT NULL,
	[TASK_PARENT_ID] [decimal](18, 0) NULL,
	[TASK_MAIN_NODE_ID] [decimal](18, 0) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_HDR_PC_TMP]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_HDR_PC_TMP](
	[MKEY] [decimal](18, 0) NOT NULL,
	[TASK_NO] [nvarchar](50) NOT NULL,
	[TASK_NAME] [nvarchar](150) NOT NULL,
	[TASK_PARENT_ID] [decimal](18, 0) NULL,
	[TASK_MAIN_NODE_ID] [decimal](18, 0) NULL,
	[TASK_DESCRIPTION] [nvarchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_LOGS_TRL]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_LOGS_TRL](
	[MKEY] [decimal](18, 0) NOT NULL,
	[SR_NO] [decimal](18, 0) NOT NULL,
	[TASK_MKEY] [decimal](18, 0) NOT NULL,
	[TASK_PARENT_ID] [decimal](18, 0) NULL,
	[TASK_MAIN_NODE_ID] [decimal](18, 0) NULL,
	[MESG_TYPE] [nvarchar](50) NOT NULL,
	[MESG_DESCRIPTION_COMMENT] [nvarchar](500) NULL,
	[MSG_REF_SEQ_NO] [decimal](18, 0) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [decimal](18, 0) NOT NULL,
	[CREATION_DATE] [smalldatetime] NOT NULL,
	[LAST_UPDATED_BY] [decimal](18, 0) NULL,
	[LAST_UPDATE_DATE] [smalldatetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_LOGS_TRL_tmp]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_LOGS_TRL_tmp](
	[MKEY] [decimal](18, 0) NOT NULL,
	[SR_NO] [decimal](18, 0) NOT NULL,
	[TASK_MKEY] [decimal](18, 0) NOT NULL,
	[TASK_PARENT_ID] [decimal](18, 0) NULL,
	[TASK_MAIN_NODE_ID] [decimal](18, 0) NULL,
	[MESG_TYPE] [nvarchar](50) NOT NULL,
	[MESG_DESCRIPTION_COMMENT] [nvarchar](500) NULL,
	[MSG_REF_SEQ_NO] [decimal](18, 0) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [decimal](18, 0) NOT NULL,
	[CREATION_DATE] [smalldatetime] NOT NULL,
	[LAST_UPDATED_BY] [decimal](18, 0) NULL,
	[LAST_UPDATE_DATE] [smalldatetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_MEDIA_TRL]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_MEDIA_TRL](
	[MKEY] [numeric](18, 0) NOT NULL,
	[SR_NO] [numeric](18, 0) NOT NULL,
	[TASK_MKEY] [numeric](18, 0) NOT NULL,
	[TASK_PARENT_ID] [numeric](18, 0) NULL,
	[TASK_MAIN_NODE_ID] [numeric](18, 0) NULL,
	[FILE_NAME] [nvarchar](50) NOT NULL,
	[FILE_PATH] [nvarchar](500) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [numeric](18, 0) NOT NULL,
	[CREATION_DATE] [datetime] NOT NULL,
	[LAST_UPDATED_BY] [numeric](18, 0) NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_MEDIA_TRL_H]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_MEDIA_TRL_H](
	[HISTSEQ_NO] [int] IDENTITY(1,1) NOT NULL,
	[HIST_DATE] [datetime] NOT NULL,
	[MKEY] [numeric](18, 0) NOT NULL,
	[SR_NO] [numeric](18, 0) NOT NULL,
	[TASK_MKEY] [numeric](18, 0) NOT NULL,
	[TASK_PARENT_ID] [numeric](18, 0) NULL,
	[TASK_MAIN_NODE_ID] [numeric](18, 0) NULL,
	[FILE_NAME] [nvarchar](50) NOT NULL,
	[FILE_PATH] [nvarchar](500) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [numeric](18, 0) NOT NULL,
	[CREATION_DATE] [datetime] NOT NULL,
	[LAST_UPDATED_BY] [numeric](18, 0) NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_NOTIFICATIONS_TRL]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_NOTIFICATIONS_TRL](
	[MKEY] [decimal](18, 0) NOT NULL,
	[SR_NO] [decimal](18, 0) NOT NULL,
	[TASK_MKEY] [decimal](18, 0) NOT NULL,
	[TASK_PARENT_ID] [decimal](18, 0) NULL,
	[TASK_MAIN_NODE_ID] [decimal](18, 0) NULL,
	[NOTIFY_TYPE] [nvarchar](50) NULL,
	[NOTIFY_DESCRIPTION_COMMENT] [nvarchar](500) NULL,
	[RESP_EMP_MKEY] [decimal](18, 0) NULL,
	[READ_FLAG] [char](1) NULL,
	[ACK_EMP_MKEY] [decimal](18, 0) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [decimal](18, 0) NOT NULL,
	[CREATION_DATE] [smalldatetime] NOT NULL,
	[LAST_UPDATED_BY] [decimal](18, 0) NULL,
	[LAST_UPDATE_DATE] [smalldatetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_NOTIFICATIONS_TRL_tmp]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_NOTIFICATIONS_TRL_tmp](
	[MKEY] [decimal](18, 0) NOT NULL,
	[SR_NO] [decimal](18, 0) NOT NULL,
	[TASK_MKEY] [decimal](18, 0) NOT NULL,
	[TASK_PARENT_ID] [decimal](18, 0) NULL,
	[TASK_MAIN_NODE_ID] [decimal](18, 0) NULL,
	[NOTIFY_TYPE] [nvarchar](50) NULL,
	[NOTIFY_DESCRIPTION_COMMENT] [nvarchar](500) NULL,
	[RESP_EMP_MKEY] [decimal](18, 0) NULL,
	[READ_FLAG] [char](1) NULL,
	[ACK_EMP_MKEY] [decimal](18, 0) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [decimal](18, 0) NOT NULL,
	[CREATION_DATE] [smalldatetime] NOT NULL,
	[LAST_UPDATED_BY] [decimal](18, 0) NULL,
	[LAST_UPDATE_DATE] [smalldatetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_RECURSIVE_HDR]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_RECURSIVE_HDR](
	[MKEY] [numeric](18, 0) IDENTITY(1,1) NOT NULL,
	[TASK_NAME] [nvarchar](1000) NULL,
	[TASK_DESCRIPTION] [nvarchar](max) NULL,
	[TERM] [nvarchar](100) NULL,
	[CAREGORY] [decimal](18, 0) NULL,
	[PROJECT_ID] [decimal](18, 0) NULL,
	[SUB_PROJECT_ID] [decimal](18, 0) NULL,
	[START_DATE] [smalldatetime] NULL,
	[ENDS] [nvarchar](50) NULL,
	[END_DATE] [smalldatetime] NULL,
	[STATUS] [nvarchar](100) NULL,
	[ASSIGNED_TO] [decimal](18, 0) NULL,
	[TAGS] [nvarchar](100) NULL,
	[NO_DAYS] [numeric](18, 0) NULL,
	[CREATED_BY] [decimal](18, 0) NULL,
	[CREATION_DATE] [smalldatetime] NULL,
	[LAST_UPDATED_BY] [decimal](18, 0) NULL,
	[LAST_UPDATE_DATE] [smalldatetime] NULL,
	[DELETE_FLAG] [char](1) NULL,
	[IS_SCHEDULED] [nchar](2) NULL,
	[ATTRIBUTE1] [nvarchar](200) NULL,
	[ATTRIBUTE2] [nvarchar](200) NULL,
	[ATTRIBUTE3] [nvarchar](200) NULL,
	[ATTRIBUTE4] [nvarchar](200) NULL,
	[ATTRIBUTE5] [nvarchar](200) NULL,
	[ATTRIBUTE6] [nvarchar](200) NULL,
	[ATTRIBUTE7] [nvarchar](200) NULL,
	[ATTRIBUTE8] [nvarchar](200) NULL,
	[ATTRIBUTE9] [nvarchar](200) NULL,
	[ATTRIBUTE10] [nvarchar](200) NULL,
	[ATTRIBUTE11] [nvarchar](200) NULL,
	[ATTRIBUTE12] [nvarchar](200) NULL,
	[ATTRIBUTE13] [nvarchar](200) NULL,
	[ATTRIBUTE14] [nvarchar](200) NULL,
	[ATTRIBUTE15] [nvarchar](200) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_RECURSIVE_HDR_H]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_RECURSIVE_HDR_H](
	[HistSeq_No] [numeric](18, 0) IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[Hist_date] [datetime] NULL,
	[MKEY] [numeric](18, 0) NULL,
	[TASK_NAME] [nvarchar](1000) NULL,
	[TASK_DESCRIPTION] [nvarchar](max) NULL,
	[TERM] [nvarchar](100) NULL,
	[CAREGORY] [decimal](18, 0) NULL,
	[PROJECT_ID] [decimal](18, 0) NULL,
	[SUB_PROJECT_ID] [decimal](18, 0) NULL,
	[ASSIGNED_TO] [decimal](18, 0) NULL,
	[TAGS] [nvarchar](max) NULL,
	[NO_DAYS] [numeric](18, 0) NULL,
	[START_DATE] [smalldatetime] NULL,
	[ENDS] [nvarchar](50) NULL,
	[END_DATE] [smalldatetime] NULL,
	[STATUS] [nvarchar](100) NULL,
	[CREATED_BY] [decimal](18, 0) NULL,
	[CREATION_DATE] [smalldatetime] NULL,
	[LAST_UPDATED_BY] [decimal](18, 0) NULL,
	[LAST_UPDATE_DATE] [smalldatetime] NULL,
	[DELETE_FLAG] [char](1) NULL,
	[IS_SCHEDULED] [nchar](2) NULL,
	[ATTRIBUTE1] [nvarchar](200) NULL,
	[ATTRIBUTE2] [nvarchar](200) NULL,
	[ATTRIBUTE3] [nvarchar](200) NULL,
	[ATTRIBUTE4] [nvarchar](200) NULL,
	[ATTRIBUTE5] [nvarchar](200) NULL,
	[ATTRIBUTE6] [nvarchar](200) NULL,
	[ATTRIBUTE7] [nvarchar](200) NULL,
	[ATTRIBUTE8] [nvarchar](200) NULL,
	[ATTRIBUTE9] [nvarchar](200) NULL,
	[ATTRIBUTE10] [nvarchar](200) NULL,
	[ATTRIBUTE11] [nvarchar](200) NULL,
	[ATTRIBUTE12] [nvarchar](200) NULL,
	[ATTRIBUTE13] [nvarchar](200) NULL,
	[ATTRIBUTE14] [nvarchar](200) NULL,
	[ATTRIBUTE15] [nvarchar](200) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_RECURSIVE_MEDIA_TRL]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_RECURSIVE_MEDIA_TRL](
	[MKEY] [decimal](18, 0) IDENTITY(1,1) NOT NULL,
	[SR_NO] [decimal](18, 0) NOT NULL,
	[TASK_MKEY] [decimal](18, 0) NOT NULL,
	[FILE_NAME] [nvarchar](50) NOT NULL,
	[FILE_PATH] [nvarchar](500) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [decimal](18, 0) NULL,
	[CREATION_DATE] [smalldatetime] NULL,
	[LAST_UPDATED_BY] [decimal](18, 0) NULL,
	[LAST_UPDATE_DATE] [smalldatetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL,
 CONSTRAINT [PK_TASK_RECURSIVE_MEDIA_TRL] PRIMARY KEY CLUSTERED 
(
	[MKEY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_RECURSIVE_MEDIA_TRL_H]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_RECURSIVE_MEDIA_TRL_H](
	[HISTSEQ_NO] [int] IDENTITY(1,1) NOT NULL,
	[HIST_DATE] [datetime] NOT NULL,
	[MKEY] [decimal](18, 0) NOT NULL,
	[SR_NO] [decimal](18, 0) NOT NULL,
	[TASK_MKEY] [decimal](18, 0) NOT NULL,
	[FILE_NAME] [nvarchar](50) NOT NULL,
	[FILE_PATH] [nvarchar](500) NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [decimal](18, 0) NOT NULL,
	[CREATION_DATE] [smalldatetime] NOT NULL,
	[LAST_UPDATED_BY] [decimal](18, 0) NULL,
	[LAST_UPDATE_DATE] [smalldatetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_RECURSIVE_TRL]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_RECURSIVE_TRL](
	[MKEY] [numeric](18, 0) NOT NULL,
	[SR_NO] [numeric](18, 0) NOT NULL,
	[TERM_TYPE] [nvarchar](100) NULL,
	[CREATED_BY] [decimal](18, 0) NULL,
	[CREATION_DATE] [smalldatetime] NULL,
	[LAST_UPDATED_BY] [decimal](18, 0) NULL,
	[LAST_UPDATE_DATE] [smalldatetime] NULL,
	[DELETE_FLAG] [char](1) NULL,
	[ATTRIBUTE1] [nvarchar](200) NULL,
	[ATTRIBUTE2] [nvarchar](200) NULL,
	[ATTRIBUTE3] [nvarchar](200) NULL,
	[ATTRIBUTE4] [nvarchar](200) NULL,
	[ATTRIBUTE5] [nvarchar](200) NULL,
	[ATTRIBUTE6] [nvarchar](200) NULL,
	[ATTRIBUTE7] [nvarchar](200) NULL,
	[ATTRIBUTE8] [nvarchar](200) NULL,
	[ATTRIBUTE9] [nvarchar](200) NULL,
	[ATTRIBUTE10] [nvarchar](200) NULL,
	[ATTRIBUTE11] [nvarchar](200) NULL,
	[ATTRIBUTE12] [nvarchar](200) NULL,
	[ATTRIBUTE13] [nvarchar](200) NULL,
	[ATTRIBUTE14] [nvarchar](200) NULL,
	[ATTRIBUTE15] [nvarchar](200) NULL,
	[ATTRIBUTE16] [nvarchar](200) NULL,
	[ATTRIBUTE17] [nvarchar](200) NULL,
	[ATTRIBUTE18] [nvarchar](200) NULL,
	[ATTRIBUTE19] [nvarchar](200) NULL,
	[ATTRIBUTE20] [nvarchar](200) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_RECURSIVE_TRL_H]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_RECURSIVE_TRL_H](
	[HistSeq_No] [numeric](18, 0) IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[Hist_date] [datetime] NULL,
	[MKEY] [numeric](18, 0) NULL,
	[SR_NO] [numeric](18, 0) NULL,
	[TERM_TYPE] [nvarchar](100) NULL,
	[CREATED_BY] [decimal](18, 0) NULL,
	[CREATION_DATE] [smalldatetime] NULL,
	[LAST_UPDATED_BY] [decimal](18, 0) NULL,
	[LAST_UPDATE_DATE] [smalldatetime] NULL,
	[DELETE_FLAG] [char](1) NULL,
	[ATTRIBUTE1] [nvarchar](200) NULL,
	[ATTRIBUTE2] [nvarchar](200) NULL,
	[ATTRIBUTE3] [nvarchar](200) NULL,
	[ATTRIBUTE4] [nvarchar](200) NULL,
	[ATTRIBUTE5] [nvarchar](200) NULL,
	[ATTRIBUTE6] [nvarchar](200) NULL,
	[ATTRIBUTE7] [nvarchar](200) NULL,
	[ATTRIBUTE8] [nvarchar](200) NULL,
	[ATTRIBUTE9] [nvarchar](200) NULL,
	[ATTRIBUTE10] [nvarchar](200) NULL,
	[ATTRIBUTE11] [nvarchar](200) NULL,
	[ATTRIBUTE12] [nvarchar](200) NULL,
	[ATTRIBUTE13] [nvarchar](200) NULL,
	[ATTRIBUTE14] [nvarchar](200) NULL,
	[ATTRIBUTE15] [nvarchar](200) NULL,
	[ATTRIBUTE16] [nvarchar](200) NULL,
	[ATTRIBUTE17] [nvarchar](200) NULL,
	[ATTRIBUTE18] [nvarchar](200) NULL,
	[ATTRIBUTE19] [nvarchar](200) NULL,
	[ATTRIBUTE20] [nvarchar](200) NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_SANCTIONING_DEPARTMENT_TRL]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_SANCTIONING_DEPARTMENT_TRL](
	[MKEY] [int] NOT NULL,
	[SR_NO] [int] NOT NULL,
	[LEVEL] [varchar](100) NULL,
	[SANCTIONING_DEPARTMENT] [varchar](200) NULL,
	[SANCTIONING_AUTHORITY_MKEY] [int] NULL,
	[SANCTIONING_AUTHORITY] [varchar](200) NULL,
	[STATUS] [nvarchar](100) NULL,
	[START_DATE] [datetime] NULL,
	[END_DATE] [datetime] NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NULL,
	[CREATION_DATE] [datetime] NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_SANCTIONING_DEPARTMENT_TRL_H]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_SANCTIONING_DEPARTMENT_TRL_H](
	[HISTSEQ_NO] [int] IDENTITY(1,1) NOT NULL,
	[HIST_DATE] [datetime] NOT NULL,
	[MKEY] [int] NOT NULL,
	[SR_NO] [int] NOT NULL,
	[LEVEL] [varchar](100) NULL,
	[SANCTIONING_DEPARTMENT] [varchar](200) NULL,
	[SANCTIONING_AUTHORITY_MKEY] [int] NULL,
	[SANCTIONING_AUTHORITY] [varchar](200) NULL,
	[STATUS] [nvarchar](100) NULL,
	[START_DATE] [datetime] NULL,
	[END_DATE] [datetime] NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [int] NULL,
	[CREATION_DATE] [datetime] NULL,
	[LAST_UPDATED_BY] [int] NULL,
	[LAST_UPDATE_DATE] [datetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TASK_TAGS_TRL]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TASK_TAGS_TRL](
	[MKEY] [decimal](18, 0) NOT NULL,
	[SR_NO] [decimal](18, 0) NOT NULL,
	[TASK_MKEY] [decimal](18, 0) NOT NULL,
	[TASK_PARENT_ID] [decimal](18, 0) NULL,
	[TASK_MAIN_NODE_ID] [decimal](18, 0) NULL,
	[TAGS_NAME] [nvarchar](500) NOT NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[CREATED_BY] [decimal](18, 0) NOT NULL,
	[CREATION_DATE] [smalldatetime] NOT NULL,
	[LAST_UPDATED_BY] [decimal](18, 0) NULL,
	[LAST_UPDATE_DATE] [smalldatetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TMS_P_ERROR_LOG]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TMS_P_ERROR_LOG](
	[MKEY] [int] IDENTITY(1,1) NOT NULL,
	[USER_ID] [varchar](250) NULL,
	[MODULE] [varchar](250) NULL,
	[FORM_NAME] [varchar](250) NULL,
	[ERROR_DESCRIPTION] [varchar](max) NULL,
	[ERROR_DATETIME] [datetime] NULL,
	[ATTRIBUTE1] [nvarchar](250) NULL,
	[ATTRIBUTE2] [varchar](250) NULL,
	[ATTRIBUTE3] [varchar](250) NULL,
	[ATTRIBUTE4] [varchar](250) NULL,
	[ATTRIBUTE5] [varchar](250) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TYPE_MST]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TYPE_MST](
	[MKEY] [decimal](18, 0) NOT NULL,
	[COMPANY_ID] [decimal](18, 0) NOT NULL,
	[TYPE_CODE] [nvarchar](50) NOT NULL,
	[TYPE_DESC] [nvarchar](100) NOT NULL,
	[TYPE_ABBR] [nvarchar](50) NOT NULL,
	[PARENT_ID] [decimal](18, 0) NULL,
	[MASTER_MKEY] [decimal](18, 0) NOT NULL,
	[EFFECTIVE_START_DATE] [smalldatetime] NOT NULL,
	[EFFECTIVE_END_DATE] [smalldatetime] NULL,
	[ENABLE_FLAG] [char](1) NOT NULL,
	[ATTRIBUTE1] [nvarchar](100) NULL,
	[ATTRIBUTE2] [nvarchar](100) NULL,
	[ATTRIBUTE3] [nvarchar](100) NULL,
	[ATTRIBUTE4] [nvarchar](100) NULL,
	[ATTRIBUTE5] [nvarchar](100) NULL,
	[ATTRIBUTE6] [decimal](18, 0) NULL,
	[ATTRIBUTE7] [decimal](18, 0) NULL,
	[ATTRIBUTE8] [decimal](18, 0) NULL,
	[ATTRIBUTE9] [decimal](18, 0) NULL,
	[ATTRIBUTE10] [decimal](18, 0) NULL,
	[CREATED_BY] [decimal](18, 0) NOT NULL,
	[CREATION_DATE] [smalldatetime] NOT NULL,
	[LAST_UPDATED_BY] [decimal](18, 0) NULL,
	[LAST_UPDATE_DATE] [smalldatetime] NULL,
	[DELETE_FLAG] [char](1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[V_APPROVAL_SUBTASK_DETAILS]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[V_APPROVAL_SUBTASK_DETAILS]      
AS       
SELECT HEADER_MKEY,CASE WHEN TASK_NO_MKEY IS NULL THEN SEQ_NO ELSE (select task_no from task_hdr where mkey = TASK_NO_MKEY) END as TASK_NO      
,APPROVAL_MKEY,APPROVAL_ABBRIVATION,APPROVAL_DESCRIPTION,DAYS_REQUIRED,DEPARTMENT,JOB_ROLE        
,RESPOSIBLE_EMP_MKEY        
,OUTPUT_DOCUMENT,TENTATIVE_START_DATE,TENTATIVE_END_DATE        
,CASE 
	WHEN [STATUS] IS NULL THEN LOWER('Created')
	WHEN LOWER([STATUS]) = LOWER('Created') THEN 'Ready to Initiate' else [STATUS] END [STATUS]        
FROM PROJECT_TRL_APPROVAL_ABBR where DELETE_FLAG = 'N';
GO
/****** Object:  View [dbo].[V_APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[V_APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT]  
AS SELECT  MKEY,SR_NO,LEVEL,SANCTIONING_DEPARTMENT,SANCTIONING_AUTHORITY,START_DATE,END_DATE,CREATED_BY,CREATION_DATE,DELETE_FLAG FROM APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT with(nolock) 
GO
/****** Object:  View [dbo].[V_Before_RaisedAT]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[V_Before_RaisedAT] AS
SELECT 
    AHDR.MKEY,
    'RaisedAT' AS TYPE_CODE,
    'RaisedAT' AS TYPE_ABBR,
    
    CAST(CASE 
            WHEN SUBTASK.SUBTASK_PARENT_ID = AHDR.MKEY THEN 
                CONVERT(VARCHAR(50), PABBR.SEQ_NO) + '-' + MAIN_ABBR + ' ' + SHORT_DESCRIPTION
            ELSE 
                MAIN_ABBR + ' ' + SHORT_DESCRIPTION 
        END AS VARCHAR(500)) AS TYPE_DESC,  -- Explicitly cast to VARCHAR(255)
		PHDR.BUILDING_MKEY,
    PHDR.PROPERTY,
    PHDR.CREATED_BY AS CREATED_BY_ID,
    createdby.EMP_FULL_NAME AS CREATED_BY_NAME,
    CASE 
        WHEN PHDR.CREATION_DATE IS NULL THEN '' 
        ELSE FORMAT(PHDR.CREATION_DATE, 'yyyy-MM-dd HH:mm:ss') 
    END AS CREATION_DATE,
    ISNULL(CONVERT(VARCHAR(50), PHDR.LAST_UPDATED_BY), '') AS LAST_UPDATED_BY,
    ISNULL(updatedby.EMP_FULL_NAME, '') AS UPDATED_BY_NAME,
    CASE 
        WHEN PHDR.LAST_UPDATE_DATE IS NULL THEN '' 
        ELSE FORMAT(PHDR.LAST_UPDATE_DATE, 'yyyy-MM-dd HH:mm:ss') 
    END AS LAST_UPDATE_DATE
FROM 
    PROJECT_HDR PHDR
INNER JOIN 
    PROJECT_TRL_APPROVAL_ABBR PABBR ON PHDR.MKEY = PABBR.HEADER_MKEY
INNER JOIN 
    APPROVAL_TEMPLATE_HDR AHDR ON AHDR.MKEY = PABBR.APPROVAL_MKEY
LEFT JOIN 
    APPROVAL_TEMPLATE_TRL_SUBTASK SUBTASK ON AHDR.MKEY = SUBTASK.HEADER_MKEY
INNER JOIN 
    EMPLOYEE_MST createdby ON PHDR.CREATED_BY = createdby.MKEY    
LEFT JOIN 
    EMPLOYEE_MST updatedby ON PHDR.LAST_UPDATED_BY = updatedby.MKEY
WHERE PABBR.DELETE_FLAG = 'N' 
AND AHDR.DELETE_FLAG = 'N'
AND SUBTASK.DELETE_FLAG = 'N'
AND  createdby.DELETE_FLAG = 'N'
AND updatedby.DELETE_FLAG = 'N';
GO
/****** Object:  View [dbo].[V_Building_Classification]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[V_Building_Classification] as   
select * from  TYPE_MST where TYPE_CODE='BUILDCLASS'  
AND DELETE_FLAG = 'N'
GO
/****** Object:  View [dbo].[V_COMPLIANCE_STATUS]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[V_COMPLIANCE_STATUS] AS
	SELECT HDR.MKEY,HDR.TYPE_CODE, HDR.TYPE_ABBR,HDR.TYPE_DESC,
	HDR.CREATED_BY AS CREATED_BY_ID     
  ,createdby.EMP_FULL_NAME AS CREATED_BY_NAME     
 ,CASE WHEN HDR.CREATION_DATE IS NULL THEN '' ELSE FORMAT(HDR.CREATION_DATE, 'yyyy-MM-dd HH:mm:ss') END AS CREATION_DATE  
 ,ISNULL(CONVERT(VARCHAR(50),HDR.LAST_UPDATED_BY),'') AS LAST_UPDATED_BY    
 ,ISNULL(updatedby.EMP_FULL_NAME,'') UPDATED_BY_NAME     
 ,CASE WHEN HDR.LAST_UPDATE_DATE IS NULL THEN '' ELSE FORMAT(HDR.LAST_UPDATE_DATE, 'yyyy-MM-dd HH:mm:ss') END AS LAST_UPDATE_DATE 
	FROM TYPE_MST HDR INNER JOIN  EMPLOYEE_MST createdby ON HDR.CREATED_BY = createdby.MKEY    
	LEFT JOIN  EMPLOYEE_MST updatedby ON HDR.LAST_UPDATED_BY = updatedby.MKEY
	where TYPE_CODE = 'COMPLIANCE_STATUS'
	AND HDR.DELETE_FLAG = 'N'
	AND createdby.DELETE_FLAG = 'N';
GO
/****** Object:  View [dbo].[V_Compliance_TRL_TAGS]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[V_Compliance_TRL_TAGS] AS
SELECT MKEY,SR_NO,COMPLIANCE_MKEY,TAGS_NAME,DELETE_FLAG FROM Compliance_TRL_TAGS where DELETE_FLAG = 'N';
GO
/****** Object:  View [dbo].[V_Department]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[V_Department] as   
select * from  TYPE_MST where TYPE_CODE='DEPARTMENT'  
and ENABLE_FLAG='Y'  AND DELETE_FLAG = 'N'
GO
/****** Object:  View [dbo].[V_Doc_Category]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	    
CREATE VIEW [dbo].[V_Doc_Category]        
AS        
SELECT        MKEY, COMPANY_ID, TYPE_CODE, TYPE_DESC, TYPE_ABBR, PARENT_ID, MASTER_MKEY, EFFECTIVE_START_DATE, EFFECTIVE_END_DATE, ENABLE_FLAG,     
ATTRIBUTE1, ATTRIBUTE2, ATTRIBUTE3, ATTRIBUTE4,         
                         ATTRIBUTE5, ATTRIBUTE6, ATTRIBUTE7, ATTRIBUTE8, ATTRIBUTE9, ATTRIBUTE10, CREATED_BY, CREATION_DATE, LAST_UPDATED_BY,     
       LAST_UPDATE_DATE, DELETE_FLAG        
FROM            dbo.TYPE_MST        
WHERE        (TYPE_CODE IN ('DOC_CATEGORY'))  AND DELETE_FLAG = 'N';
GO
/****** Object:  View [dbo].[V_Doc_Type]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[V_Doc_Type] AS       
SELECT HDR.MKEY,HDR.DOC_CATEGORY AS ATTRIBUTE1, MST.TYPE_DESC AS ATTRIBUTE2, HDR.DOC_NAME as [TYPE_DESC]            
FROM TYPE_MST MST INNER JOIN DOC_TEMPLATE_HDR HDR ON MST.MKEY = HDR.DOC_CATEGORY          
WHERE  (TYPE_CODE = N'DOC_CATEGORY') AND HDR.DELETE_FLAG = 'N' AND MST.DELETE_FLAG = 'N';
GO
/****** Object:  View [dbo].[V_Doc_Type_CHECK_LIST]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[V_Doc_Type_CHECK_LIST]      as  
SELECT HDR.TYPE_MST_DOC_TYPE_MKEY as MKEY,HDR.DOC_CATEGORY AS ATTRIBUTE1, MST.TYPE_DESC AS ATTRIBUTE2, HDR.DOC_NAME as [TYPE_DESC]                  
FROM TYPE_MST MST INNER JOIN DOC_TEMPLATE_HDR HDR ON MST.MKEY = HDR.DOC_CATEGORY                
WHERE  (TYPE_CODE = N'DOC_CATEGORY') AND HDR.DELETE_FLAG = 'N' AND MST.DELETE_FLAG = 'N' 
UNION ALL
SELECT MST.MKEY,MST.PARENT_ID AS ATTRIBUTE1, MST.TYPE_CODE AS ATTRIBUTE2, MST.TYPE_DESC [TYPE_DESC]                  
FROM TYPE_MST MST WHERE TYPE_CODE = 'INSTR' AND DELETE_FLAG = 'N' AND TYPE_DESC NOT IN ('INSTR');
--SELECT HDR.MKEY,HDR.DOC_CATEGORY AS ATTRIBUTE1, MST.TYPE_DESC AS ATTRIBUTE2, HDR.DOC_NAME as [TYPE_DESC]                  
--FROM TYPE_MST MST INNER JOIN DOC_TEMPLATE_HDR HDR ON MST.MKEY = HDR.DOC_CATEGORY                
--WHERE  (TYPE_CODE = N'DOC_CATEGORY') AND HDR.DELETE_FLAG = 'N' AND MST.DELETE_FLAG = 'N'      
--UNION       
--SELECT MST.MKEY ,MST.MKEY AS ATTRIBUTE1, MST.TYPE_CODE AS ATTRIBUTE2, MST.TYPE_DESC [TYPE_DESC]                  
--FROM TYPE_MST MST WHERE TYPE_CODE = 'INSTR' AND DELETE_FLAG = 'N';   
GO
/****** Object:  View [dbo].[V_Instruction]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[V_Instruction] AS           
SELECT  MST.MKEY ,mst.TYPE_CODE,MST.TYPE_CODE as ATTRIBUTE2, MST.[TYPE_DESC], MST.CREATED_BY CREATED_BY_ID ,createdby.EMP_FULL_NAME CREATED_BY_NAME 
,mst.CREATION_DATE  ,MST.LAST_UPDATED_BY ,ISNULL(updatedby.EMP_FULL_NAME,'') UPDATED_BY_NAME ,ISNULL(mst.LAST_UPDATE_DATE,'') AS LAST_UPDATE_DATE   
FROM TYPE_MST mst  join EMPLOYEE_MST createdby on MST.CREATED_BY=createdby.MKEY 
left join EMPLOYEE_MST updatedby  on MST.LAST_UPDATED_BY = updatedby.MKEY 
where LOWER(TYPE_CODE) = LOWER('INSTR') and LOWER(TYPE_DESC) NOT IN ('INSTR') AND MST.DELETE_FLAG = 'N';
GO
/****** Object:  View [dbo].[V_JOB_ROLE]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[V_JOB_ROLE] as   
select * from  TYPE_MST where TYPE_CODE='JOBROLE'  
and ENABLE_FLAG='Y'  AND DELETE_FLAG = 'N'
GO
/****** Object:  View [dbo].[V_RaisedAT]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[V_RaisedAT] AS  
SELECT        -1 AS MKEY, 'RaisedAT' AS TYPE_CODE, 'RaisedAT' AS TYPE_ABBR, CAST('General' AS VARCHAR(500)) AS TYPE_DESC, '-1' AS BUILDING_MKEY, '-1' AS PROPERTY, '-1' AS CREATED_BY_ID,   
                         'JAGDISH GALVANKAR' AS CREATED_BY_NAME, '' AS CREATION_DATE, '' AS LAST_UPDATED_BY, '' AS UPDATED_BY_NAME, '' AS LAST_UPDATE_DATE  
UNION ALL  
SELECT        AHDR.MKEY, 'RaisedAT' AS TYPE_CODE, 'RaisedAT' AS TYPE_ABBR, CAST(CASE WHEN SUBTASK.SUBTASK_PARENT_ID = AHDR.MKEY THEN CONVERT(VARCHAR(50), PABBR.SEQ_NO)   
                         + '-' + MAIN_ABBR + ' ' + SHORT_DESCRIPTION ELSE MAIN_ABBR + ' ' + SHORT_DESCRIPTION END AS VARCHAR(500)) AS TYPE_DESC, /* Explicitly cast to VARCHAR(255)*/ PHDR.BUILDING_MKEY, PHDR.PROPERTY,   
                         PHDR.CREATED_BY AS CREATED_BY_ID, createdby.EMP_FULL_NAME AS CREATED_BY_NAME, CASE WHEN PHDR.CREATION_DATE IS NULL THEN '' ELSE FORMAT(PHDR.CREATION_DATE, 'yyyy-MM-dd HH:mm:ss')   
                         END AS CREATION_DATE, ISNULL(CONVERT(VARCHAR(50), PHDR.LAST_UPDATED_BY), '') AS LAST_UPDATED_BY, ISNULL(updatedby.EMP_FULL_NAME, '') AS UPDATED_BY_NAME,   
                         CASE WHEN PHDR.LAST_UPDATE_DATE IS NULL THEN '' ELSE FORMAT(PHDR.LAST_UPDATE_DATE, 'yyyy-MM-dd HH:mm:ss') END AS LAST_UPDATE_DATE  
FROM            PROJECT_HDR PHDR INNER JOIN  
                         PROJECT_TRL_APPROVAL_ABBR PABBR ON PHDR.MKEY = PABBR.HEADER_MKEY INNER JOIN  
                         APPROVAL_TEMPLATE_HDR AHDR ON AHDR.MKEY = PABBR.APPROVAL_MKEY LEFT JOIN  
                         APPROVAL_TEMPLATE_TRL_SUBTASK SUBTASK ON AHDR.MKEY = SUBTASK.HEADER_MKEY INNER JOIN  
                         EMPLOYEE_MST createdby ON PHDR.CREATED_BY = createdby.MKEY LEFT JOIN  
                         EMPLOYEE_MST updatedby ON PHDR.LAST_UPDATED_BY = updatedby.MKEY  
WHERE PABBR.DELETE_FLAG = 'N'   
AND AHDR.DELETE_FLAG = 'N'  
AND SUBTASK.DELETE_FLAG = 'N'  
AND  createdby.DELETE_FLAG = 'N'  
AND updatedby.DELETE_FLAG = 'N';
GO
/****** Object:  View [dbo].[V_ResponsibleDepartment]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  CREATE view [dbo].[V_ResponsibleDepartment] as         
select HDR.MKEY,HDR.COMPANY_ID,HDR.TYPE_CODE,HDR.TYPE_DESC,HDR.TYPE_ABBR,HDR.PARENT_ID,HDR.MASTER_MKEY,HDR.EFFECTIVE_START_DATE,HDR.EFFECTIVE_END_DATE  
,HDR.ENABLE_FLAG,HDR.ATTRIBUTE1,HDR.ATTRIBUTE2,HDR.ATTRIBUTE3,HDR.ATTRIBUTE4,HDR.ATTRIBUTE5,HDR.ATTRIBUTE6,HDR.ATTRIBUTE7,HDR.ATTRIBUTE8,HDR.ATTRIBUTE9  
,HDR.ATTRIBUTE10,HDR.CREATED_BY AS CREATED_BY_ID ,ISNULL(createdby.EMP_FULL_NAME,'') AS CREATED_BY_NAME   
 ,CASE WHEN HDR.CREATION_DATE IS NULL THEN '' ELSE FORMAT(HDR.CREATION_DATE, 'yyyy-MM-dd HH:mm:ss') END AS CREATION_DATE 
 ,ISNULL(CONVERT(VARCHAR(50),HDR.LAST_UPDATED_BY),'') AS LAST_UPDATED_BY  
 ,ISNULL(updatedby.EMP_FULL_NAME,'') UPDATED_BY_NAME   
 ,CASE WHEN HDR.LAST_UPDATE_DATE IS NULL THEN '' ELSE FORMAT(HDR.LAST_UPDATE_DATE, 'yyyy-MM-dd HH:mm:ss') END AS LAST_UPDATE_DATE
 from  TYPE_MST HDR LEFT join EMPLOYEE_MST createdby on HDR.CREATED_BY=createdby.MKEY  
left join EMPLOYEE_MST updatedby  on HDR.LAST_UPDATED_BY = updatedby.MKEY  
where TYPE_CODE='SDEPARTMENT'    
AND HDR.DELETE_FLAG = 'N';
GO
/****** Object:  View [dbo].[V_Sanctioning_Authority]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[V_Sanctioning_Authority] as     
select HDR.MKEY,HDR.COMPANY_ID,HDR.TYPE_CODE,HDR.TYPE_DESC,HDR.TYPE_ABBR,HDR.PARENT_ID,HDR.MASTER_MKEY,HDR.EFFECTIVE_START_DATE,HDR.EFFECTIVE_END_DATE
,HDR.ENABLE_FLAG,HDR.DELETE_FLAG,HDR.CREATED_BY AS CREATED_BY_ID 
,ISNULL(createdby.EMP_FULL_NAME,'') AS CREATED_BY_NAME     
 ,CASE WHEN HDR.CREATION_DATE IS NULL THEN '' ELSE FORMAT(HDR.CREATION_DATE, 'yyyy-MM-dd HH:mm:ss') END AS CREATION_DATE   
 ,ISNULL(CONVERT(VARCHAR(50),HDR.LAST_UPDATED_BY),'') AS LAST_UPDATED_BY    
 ,ISNULL(updatedby.EMP_FULL_NAME,'') UPDATED_BY_NAME     
 ,CASE WHEN HDR.LAST_UPDATE_DATE IS NULL THEN '' ELSE FORMAT(HDR.LAST_UPDATE_DATE, 'yyyy-MM-dd HH:mm:ss') END AS LAST_UPDATE_DATE 
from  TYPE_MST HDR  INNER JOIN EMPLOYEE_MST createdby on HDR.CREATED_BY=createdby.MKEY  
left join EMPLOYEE_MST updatedby  on HDR.LAST_UPDATED_BY = updatedby.MKEY  
where TYPE_CODE='SAUTHORITY' AND HDR.DELETE_FLAG = 'N';
GO
/****** Object:  View [dbo].[V_Sanctioning_DEPARTMENT]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create view [dbo].[V_Sanctioning_DEPARTMENT] as 
select * from  TYPE_MST where TYPE_CODE='SDEPARTMENT'
and ENABLE_FLAG='Y'
GO
/****** Object:  View [dbo].[V_SR_NO_APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[V_SR_NO_APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT] AS
SELECT isnull(max(t.SR_NO),0) + 1 AS SR_NO,MKEY FROM APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT t WHERE DELETE_FLAG = 'N'
GROUP BY MKEY;
GO
/****** Object:  View [dbo].[V_Standard_Type]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE view [dbo].[V_Standard_Type] as   
select * from  TYPE_MST where TYPE_CODE='STND'  
AND DELETE_FLAG = 'N'
GO
/****** Object:  View [dbo].[V_Statutory_Auth]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE view [dbo].[V_Statutory_Auth] as   
select * from  TYPE_MST where TYPE_CODE='STAAUTH'  
AND DELETE_FLAG = 'N'
GO
/****** Object:  View [dbo].[V_SUBTASK_PARENT]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[V_SUBTASK_PARENT] AS    
SELECT MKEY,ATTRIBUTE4 FROM TASK_HDR HDR  
WHERE DELETE_FLAG = 'N';
GO
/****** Object:  View [dbo].[V_Task_Parent_ID]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[V_Task_Parent_ID] AS 
SELECT SUBTASK_PARENT_ID FROM APPROVAL_TEMPLATE_TRL_SUBTASK 
GROUP BY SUBTASK_PARENT_ID
GO
/****** Object:  View [dbo].[V_TASK_TYPE]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[V_TASK_TYPE] AS
SELECT        HDR.MKEY, HDR.COMPANY_ID, TYPE_CODE, TYPE_DESC, TYPE_ABBR, PARENT_ID, MASTER_MKEY, HDR.EFFECTIVE_START_DATE, HDR.EFFECTIVE_END_DATE, ENABLE_FLAG, 
						 HDR.ATTRIBUTE1, HDR.ATTRIBUTE2, HDR.ATTRIBUTE3, HDR.ATTRIBUTE4, 
                         HDR.ATTRIBUTE5, ATTRIBUTE6, ATTRIBUTE7, ATTRIBUTE8, ATTRIBUTE9, ATTRIBUTE10,  
						 HDR.CREATED_BY AS CREATED_BY_ID
						 ,ISNULL(createdby.EMP_FULL_NAME,'') AS CREATED_BY_NAME, 
						 CASE WHEN HDR.CREATION_DATE IS NULL THEN '' ELSE FORMAT(HDR.CREATION_DATE, 'yyyy-MM-dd HH:mm:ss') END AS CREATION_DATE 
						 ,ISNULL(CONVERT(VARCHAR(50), HDR.LAST_UPDATED_BY), '') AS LAST_UPDATED_BY
						 ,ISNULL(updatedby.EMP_FULL_NAME,'') AS UPDATED_BY_NAME, 
						 CASE WHEN HDR.LAST_UPDATE_DATE IS NULL THEN '' ELSE FORMAT(HDR.LAST_UPDATE_DATE, 'yyyy-MM-dd HH:mm:ss') END AS LAST_UPDATE_DATE,
						 ISNULL(HDR.DELETE_FLAG ,'') AS DELETE_FLAG
FROM            dbo.TYPE_MST HDR INNER JOIN
                         dbo.EMPLOYEE_MST AS createdby ON HDR.CREATED_BY = createdby.MKEY LEFT OUTER JOIN
                         dbo.EMPLOYEE_MST AS updatedby ON HDR.LAST_UPDATED_BY = updatedby.MKEY
WHERE        (TYPE_CODE = 'TASK_TYPE') AND (HDR.DELETE_FLAG = 'N') AND createdby.DELETE_FLAG = 'N';
GO
ALTER TABLE [dbo].[APPROVAL_TEMPLATE_HDR] ADD  CONSTRAINT [DF_APPROVAL_TEMPLATE_HDR_CREATION_DATE]  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[APPROVAL_TEMPLATE_HDR] ADD  CONSTRAINT [DF_APPROVAL_TEMPLATE_HDR_DELETE_FLAG1_1]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[APPROVAL_TEMPLATE_HDR] ADD  CONSTRAINT [DF_APPROVAL_TEMPLATE_HDR_IS_NODE]  DEFAULT (N'N') FOR [IS_NODE]
GO
ALTER TABLE [dbo].[APPROVAL_TEMPLATE_HDR_H] ADD  CONSTRAINT [DF_APPROVAL_TEMPLATE_HDR_H_HIST_DATE]  DEFAULT (getdate()) FOR [HIST_DATE]
GO
ALTER TABLE [dbo].[APPROVAL_TEMPLATE_HDR_H] ADD  CONSTRAINT [DF_APPROVAL_TEMPLATE_HDR_H_CREATION_DATE_1]  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[APPROVAL_TEMPLATE_HDR_H] ADD  CONSTRAINT [DF_APPROVAL_TEMPLATE_HDR_H_DELETE_FLAG_1]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[APPROVAL_TEMPLATE_TRL_CHECKLIST] ADD  DEFAULT ('N') FOR [APP_CHECK]
GO
ALTER TABLE [dbo].[APPROVAL_TEMPLATE_TRL_CHECKLIST_H] ADD  CONSTRAINT [DF_APPROVAL_CHECKLIST_HDR_H_Hist_date]  DEFAULT (getdate()) FOR [Hist_date]
GO
ALTER TABLE [dbo].[APPROVAL_TEMPLATE_TRL_CHECKLIST_H] ADD  DEFAULT ('N') FOR [APP_CHECK]
GO
ALTER TABLE [dbo].[APPROVAL_TEMPLATE_TRL_ENDRESULT_H] ADD  CONSTRAINT [DF_APPROVAL_END_RESULT_HDR_H_Hist_date]  DEFAULT (getdate()) FOR [Hist_date]
GO
ALTER TABLE [dbo].[APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT] ADD  CONSTRAINT [DF_SANCTIONING_DEPARTMENT_HDR_CREATION_DATE]  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT] ADD  CONSTRAINT [DF_SANCTIONING_DEPARTMENT_HDR_DELETE_FLAG]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT_H] ADD  CONSTRAINT [DF_SANCTIONING_DEPARTMENT_HDR_H_HIST_DATE]  DEFAULT (getdate()) FOR [HIST_DATE]
GO
ALTER TABLE [dbo].[APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT_H] ADD  CONSTRAINT [DF_APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT_H_CREATION_DATE]  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT_H] ADD  CONSTRAINT [DF_APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT_H_DELETE_FLAG]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[APPROVAL_TEMPLATE_TRL_SUBTASK] ADD  CONSTRAINT [DF_APPROVAL_TEMPLATE_TRL_CREATION_DATE]  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[APPROVAL_TEMPLATE_TRL_SUBTASK] ADD  CONSTRAINT [DF_APPROVAL_TEMPLATE_TRL_DELETE_FLAG]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[APPROVAL_TEMPLATE_TRL_SUBTASK_H] ADD  CONSTRAINT [DF_APPROVAL_TEMPLATE_TRL_H_Hist_date]  DEFAULT (getdate()) FOR [Hist_date]
GO
ALTER TABLE [dbo].[APPROVAL_TEMPLATE_TRL_SUBTASK_H] ADD  CONSTRAINT [DF_APPROVAL_TEMPLATE_TRL_SUBTASK_H_CREATION_DATE_1]  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[APPROVAL_TEMPLATE_TRL_SUBTASK_H] ADD  CONSTRAINT [DF_APPROVAL_TEMPLATE_TRL_SUBTASK_H_DELETE_FLAG_1]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[COMPLIANCE_HDR] ADD  CONSTRAINT [DF_COMPLIANCE_HDR_STATUS]  DEFAULT (N'N') FOR [STATUS]
GO
ALTER TABLE [dbo].[COMPLIANCE_HDR] ADD  CONSTRAINT [DF_COMPLIANCE_HDR_CREATION_DATE]  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[COMPLIANCE_HDR] ADD  CONSTRAINT [DF_COMPLIANCE_HDR_DELETE_FLAG]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[COMPLIANCE_HDR_H] ADD  CONSTRAINT [DF_COMPLIANCE_HDR_H_HIST_DATE]  DEFAULT (getdate()) FOR [HIST_DATE]
GO
ALTER TABLE [dbo].[COMPLIANCE_HDR_H] ADD  CONSTRAINT [DF_COMPLIANCE_HDR_H_STATUS1]  DEFAULT (N'N') FOR [STATUS]
GO
ALTER TABLE [dbo].[COMPLIANCE_HDR_H] ADD  CONSTRAINT [DF_COMPLIANCE_HDR_H_CREATION_DATE]  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[COMPLIANCE_HDR_H] ADD  CONSTRAINT [DF_COMPLIANCE_HDR_H_DELETE_FLAG]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[DOC_TEMPLATE_HDR] ADD  CONSTRAINT [DF_DOC_TEMPLATE_HDR_DOC_NUM_APP_FLAG]  DEFAULT (N'N') FOR [DOC_NUM_APP_FLAG]
GO
ALTER TABLE [dbo].[DOC_TEMPLATE_HDR] ADD  CONSTRAINT [DF_DOC_TEMPLATE_HDR_DOC_NUM_VALID_FLAG]  DEFAULT (N'N') FOR [DOC_NUM_VALID_FLAG]
GO
ALTER TABLE [dbo].[DOC_TEMPLATE_HDR] ADD  CONSTRAINT [DF_DOC_TEMPLATE_HDR_DOC_NUM_DATE_APP_FLAG]  DEFAULT (N'N') FOR [DOC_NUM_DATE_APP_FLAG]
GO
ALTER TABLE [dbo].[DOC_TEMPLATE_HDR] ADD  CONSTRAINT [DF_DOC_TEMPLATE_HDR_DOC_ATTACH_APP_FLAG]  DEFAULT (N'N') FOR [DOC_ATTACH_APP_FLAG]
GO
ALTER TABLE [dbo].[DOC_TEMPLATE_HDR] ADD  CONSTRAINT [DF_DOC_TEMPLATE_HDR_CREATION_DATE]  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[DOC_TEMPLATE_HDR] ADD  CONSTRAINT [DF_DOC_TEMPLATE_HDR_DELETE_FLAG]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[DOC_TEMPLATE_HDR_H] ADD  CONSTRAINT [DF_DOC_TEMPLATE_HDR_H_HIST_DATE]  DEFAULT (getdate()) FOR [HIST_DATE]
GO
ALTER TABLE [dbo].[DOC_TEMPLATE_HDR_H] ADD  CONSTRAINT [DF_DOC_TEMPLATE_HDR_H_DOC_NUM_APP_FLAG]  DEFAULT (N'N') FOR [DOC_NUM_APP_FLAG]
GO
ALTER TABLE [dbo].[DOC_TEMPLATE_HDR_H] ADD  CONSTRAINT [DF_DOC_TEMPLATE_HDR_H_DOC_NUM_VALID_FLAG]  DEFAULT (N'N') FOR [DOC_NUM_VALID_FLAG]
GO
ALTER TABLE [dbo].[DOC_TEMPLATE_HDR_H] ADD  CONSTRAINT [DF_DOC_TEMPLATE_HDR_H_DOC_NUM_DATE_APP_FLAG]  DEFAULT (N'N') FOR [DOC_NUM_DATE_APP_FLAG]
GO
ALTER TABLE [dbo].[DOC_TEMPLATE_HDR_H] ADD  CONSTRAINT [DF_DOC_TEMPLATE_HDR_H_DOC_ATTACH_APP_FLAG]  DEFAULT (N'N') FOR [DOC_ATTACH_APP_FLAG]
GO
ALTER TABLE [dbo].[DOC_TEMPLATE_HDR_H] ADD  CONSTRAINT [DF_DOC_TEMPLATE_HDR_H_CREATION_DATE]  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[DOC_TEMPLATE_HDR_H] ADD  CONSTRAINT [DF_DOC_TEMPLATE_HDR_H_DELETE_FLAG]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[PROJECT_DOC_DEPOSITORY_HDR] ADD  CONSTRAINT [DF_PROJECT_DOC_DEPOSITORY_HDR_CREATION_DATE]  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[PROJECT_DOC_DEPOSITORY_HDR] ADD  CONSTRAINT [DF_PROJECT_DOC_DEPOSITORY_HDR_DELETE_FLAG]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[PROJECT_DOC_DEPOSITORY_HDR_H] ADD  CONSTRAINT [DF_PROJECT_DOC_DEPOSITORY_HDR_H_HIST_DATE]  DEFAULT (getdate()) FOR [HIST_DATE]
GO
ALTER TABLE [dbo].[PROJECT_DOC_DEPOSITORY_HDR_H] ADD  CONSTRAINT [DF_PROJECT_DOC_DEPOSITORY_HDR_H_CREATION_DATE]  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[PROJECT_DOC_DEPOSITORY_HDR_H] ADD  CONSTRAINT [DF_PROJECT_DOC_DEPOSITORY_HDR_H_DELETE_FLAG]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[PROJECT_DOC_DEPOSITORY_TRL_MEDIA] ADD  CONSTRAINT [DF_PROJECT_DOC_DEPOSITORY_TRL_MEDIA_CREATION_DATE]  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[PROJECT_DOC_DEPOSITORY_TRL_MEDIA] ADD  CONSTRAINT [DF_PROJECT_DOC_DEPOSITORY_TRL_MEDIA_DELETE_FLAG]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[PROJECT_DOC_DEPOSITORY_TRL_MEDIA_H] ADD  CONSTRAINT [DF_PROJECT_DOC_DEPOSITORY_TRL_MEDIA_H_CREATION_DATE]  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[PROJECT_DOC_DEPOSITORY_TRL_MEDIA_H] ADD  CONSTRAINT [DF_PROJECT_DOC_DEPOSITORY_TRL_MEDIA_H_DELETE_FLAG]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[PROJECT_HDR_H] ADD  CONSTRAINT [DF_PROJECT_HDR_H_Hist_date]  DEFAULT (getdate()) FOR [Hist_date]
GO
ALTER TABLE [dbo].[PROJECT_TRL_APPROVAL_ABBR] ADD  CONSTRAINT [DF_PROJECT_TRL_APPROVALS_CREATION_DATE]  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[PROJECT_TRL_APPROVAL_ABBR] ADD  CONSTRAINT [DF_PROJECT_TRL_APPROVALS_DELETE_FLAG]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[PROJECT_TRL_APPROVAL_ABBR_H] ADD  CONSTRAINT [DF_PROJECT_TRL_APPROVALS_H_HIST_DATE]  DEFAULT (getdate()) FOR [HIST_DATE]
GO
ALTER TABLE [dbo].[PROJECT_TRL_APPROVAL_ABBR_H] ADD  CONSTRAINT [DF_PROJECT_TRL_APPROVAL_ABBR_H_CREATION_DATE]  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[PROJECT_TRL_APPROVAL_ABBR_H] ADD  CONSTRAINT [DF_PROJECT_TRL_APPROVAL_ABBR_H_DELETE_FLAG]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[TASK_CHECKLIST_TRL] ADD  CONSTRAINT [DF_TASK_CHECKLIST_TRL_DELETE_FLAG]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[TASK_CHECKLIST_TRL] ADD  CONSTRAINT [DF_TASK_CHECKLIST_TRL_APP_CHECK]  DEFAULT ('N') FOR [APP_CHECK]
GO
ALTER TABLE [dbo].[TASK_CHECKLIST_TRL_H] ADD  CONSTRAINT [DF_TASK_CHECKLIST_TRL_H_APP_CHECK]  DEFAULT ('N') FOR [APP_CHECK]
GO
ALTER TABLE [dbo].[TASK_ENDLIST_MEDIA_TRL] ADD  CONSTRAINT [DF_TASK_ENDLIST_MEDIA_TRL_CREATION_DATE]  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[TASK_ENDLIST_MEDIA_TRL] ADD  CONSTRAINT [DF_TASK_ENDLIST_MEDIA_TRL_DELETE_FLAG]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[TASK_ENDLIST_MEDIA_TRL_H] ADD  CONSTRAINT [DF_TASK_ENDLIST_MEDIA_TRL_H_HIST_DATE]  DEFAULT (getdate()) FOR [HIST_DATE]
GO
ALTER TABLE [dbo].[TASK_ENDLIST_MEDIA_TRL_H] ADD  CONSTRAINT [DF_TASK_ENDLIST_MEDIA_TRL_H_CREATION_DATE]  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[TASK_ENDLIST_MEDIA_TRL_H] ADD  CONSTRAINT [DF_TASK_ENDLIST_MEDIA_TRL_H_DELETE_FLAG]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[TASK_ENDLIST_TRL] ADD  CONSTRAINT [DF_TASK_ENDLIST_TRL_DOC_NUM_APP_FLAG]  DEFAULT (N'N') FOR [DOC_NUM_APP_FLAG]
GO
ALTER TABLE [dbo].[TASK_ENDLIST_TRL] ADD  CONSTRAINT [DF_TASK_ENDLIST_TRL_DOC_NUM_VALID_FLAG]  DEFAULT (N'N') FOR [DOC_NUM_VALID_FLAG]
GO
ALTER TABLE [dbo].[TASK_ENDLIST_TRL] ADD  CONSTRAINT [DF_TASK_ENDLIST_TRL_DOC_NUM_DATE_APP_FLAG]  DEFAULT (N'N') FOR [DOC_NUM_DATE_APP_FLAG]
GO
ALTER TABLE [dbo].[TASK_ENDLIST_TRL] ADD  CONSTRAINT [DF_TASK_ENDLIST_TRL_DOC_ATTACH_APP_FLAG]  DEFAULT (N'N') FOR [DOC_ATTACH_APP_FLAG]
GO
ALTER TABLE [dbo].[TASK_ENDLIST_TRL_H] ADD  CONSTRAINT [DF_TASK_ENDLIST_TRL_H_HIST_DATE]  DEFAULT (getdate()) FOR [HIST_DATE]
GO
ALTER TABLE [dbo].[TASK_ENDLIST_TRL_H] ADD  CONSTRAINT [DF_TASK_ENDLIST_TRL_H_DOC_NUM_APP_FLAG]  DEFAULT (N'N') FOR [DOC_NUM_APP_FLAG]
GO
ALTER TABLE [dbo].[TASK_ENDLIST_TRL_H] ADD  CONSTRAINT [DF_TASK_ENDLIST_TRL_H_DOC_NUM_VALID_FLAG]  DEFAULT (N'N') FOR [DOC_NUM_VALID_FLAG]
GO
ALTER TABLE [dbo].[TASK_ENDLIST_TRL_H] ADD  CONSTRAINT [DF_TASK_ENDLIST_TRL_H_DOC_NUM_DATE_APP_FLAG]  DEFAULT (N'N') FOR [DOC_NUM_DATE_APP_FLAG]
GO
ALTER TABLE [dbo].[TASK_ENDLIST_TRL_H] ADD  CONSTRAINT [DF_TASK_ENDLIST_TRL_H_DOC_ATTACH_APP_FLAG]  DEFAULT (N'N') FOR [DOC_ATTACH_APP_FLAG]
GO
ALTER TABLE [dbo].[TASK_MEDIA_TRL] ADD  CONSTRAINT [DF_TASK_MEDIA_TRL_CREATION_DATE]  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[TASK_MEDIA_TRL] ADD  CONSTRAINT [DF_TASK_MEDIA_TRL_DELETE_FLAG]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[TASK_MEDIA_TRL_H] ADD  CONSTRAINT [DF_TASK_MEDIA_TRL_H_CREATION_DATE]  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[TASK_MEDIA_TRL_H] ADD  CONSTRAINT [DF_TASK_MEDIA_TRL_H_DELETE_FLAG]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[TASK_RECURSIVE_HDR] ADD  CONSTRAINT [DF_TASK_RECURSIVE_HDR_DELETE_FLAG]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[TASK_RECURSIVE_HDR_H] ADD  CONSTRAINT [DF_TASK_RECURSIVE_HDR_H_Hist_date]  DEFAULT (getdate()) FOR [Hist_date]
GO
ALTER TABLE [dbo].[TASK_RECURSIVE_MEDIA_TRL] ADD  CONSTRAINT [DF_TASK_RECURSIVE_MEDIA_TRL_DELETE_FLAG]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[TASK_RECURSIVE_MEDIA_TRL_H] ADD  CONSTRAINT [DF_TASK_RECURSIVE_MEDIA_TRL_H_HIST_DATE]  DEFAULT (getdate()) FOR [HIST_DATE]
GO
ALTER TABLE [dbo].[TASK_RECURSIVE_TRL] ADD  CONSTRAINT [DF_TASK_RECURSIVE_TRL_DELETE_FLAG]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[TASK_RECURSIVE_TRL_H] ADD  CONSTRAINT [DF_TASK_RECURSIVE_TRL_H_Hist_date]  DEFAULT (getdate()) FOR [Hist_date]
GO
ALTER TABLE [dbo].[TASK_SANCTIONING_DEPARTMENT_TRL] ADD  CONSTRAINT [DF_TASK_SANCTIONING_DEPARTMENT_TRL_CREATION_DATE]  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[TASK_SANCTIONING_DEPARTMENT_TRL] ADD  CONSTRAINT [DF_TASK_SANCTIONING_DEPARTMENT_TRL_DELETE_FLAG]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[TASK_SANCTIONING_DEPARTMENT_TRL_H] ADD  CONSTRAINT [DF_TASK_SANCTIONING_DEPARTMENT_TRL_H_HIST_DATE]  DEFAULT (getdate()) FOR [HIST_DATE]
GO
ALTER TABLE [dbo].[TASK_SANCTIONING_DEPARTMENT_TRL_H] ADD  CONSTRAINT [DF_TASK_SANCTIONING_DEPARTMENT_TRL_H_CREATION_DATE]  DEFAULT (getdate()) FOR [CREATION_DATE]
GO
ALTER TABLE [dbo].[TASK_SANCTIONING_DEPARTMENT_TRL_H] ADD  CONSTRAINT [DF_TASK_SANCTIONING_DEPARTMENT_TRL_H_DELETE_FLAG]  DEFAULT ('N') FOR [DELETE_FLAG]
GO
ALTER TABLE [dbo].[COMPLIANCE_TRL_TAGS]  WITH CHECK ADD  CONSTRAINT [FK_COMPLIANCE_TRL_TAGS_COMPLIANCE_MKEY] FOREIGN KEY([COMPLIANCE_MKEY])
REFERENCES [dbo].[COMPLIANCE_HDR] ([MKEY])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[COMPLIANCE_TRL_TAGS] CHECK CONSTRAINT [FK_COMPLIANCE_TRL_TAGS_COMPLIANCE_MKEY]
GO
/****** Object:  StoredProcedure [dbo].[GET_SP_DOCUMENT_TEMPLATE_DETAILS]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
--EXEC GET_SP_DOCUMENT_TEMPLATE_DETAILS 
-- =============================================
CREATE PROCEDURE [dbo].[GET_SP_DOCUMENT_TEMPLATE_DETAILS]
	-- Add the parameters for the stored procedure here
	@MKEY INT = NULL,
	@ATTRIBUTE1 VARCHAR(200) = NULL,
	@ATTRIBUTE2 VARCHAR(200) = NULL,
	@ATTRIBUTE3 VARCHAR(200) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY
		SELECT * 
		FROM DOC_TEMPLATE_HDR
		WHERE MKEY = @MKEY; 
	END TRY
	BEGIN CATCH
	-------------------------------------------------------------------------------------------------------------------------------          
		SELECT ERROR_NUMBER()    AS ERRORNUMBER,
				ERROR_SEVERITY()  AS ERRORSEVERITY,
				ERROR_STATE()     AS ERRORSTATE,
				ERROR_PROCEDURE() AS ERRORPROCEDURE,
				ERROR_LINE()      AS ERRORLINE,
				ERROR_MESSAGE()   AS ERRORMESSAGE;
	-------------------------------------------------------------------------------------------------------------------------------
		DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
		SET @ERROR_MESSAGE = ERROR_MESSAGE();
	-------------------------------------------------------------------------------------------------------------------------------
		EXEC sp_P_TMS_INSERT_ERROR_DES @ATTRIBUTE1,'TMS',@ATTRIBUTE2,@ERROR_MESSAGE,@ATTRIBUTE3;
	-------------------------------------------------------------------------------------------------------------------------------
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_APPROVAL_TEMPLATE_TAGS_Insert_Update]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_APPROVAL_TEMPLATE_TAGS_Insert_Update]  
                                          ( @Parameter1          int,  
                                            --@APPROVAL_Mkey  
                                            @Parameter2          VARCHAR(100) = NULL,  
                                            --@TAGS_NAME  
                                            @Parameter6          VARCHAR(100) = NULL  
                                            --@CREATED_BY  
                                        )    
AS  
BEGIN  
  
   
    
  declare @var1 varchar(50);  
  declare @DCount int;     
   
  declare @DELETE_FLAG   VARCHAR(100)  
   ,@LAST_UPDATED_BY     VARCHAR(100)  
         ,@LAST_UPDATE_DATE     VARCHAR(100)  
         ,@ATTRIBUTE1         VARCHAR(100)  
         ,@ATTRIBUTE2         VARCHAR(100)  
         ,@ATTRIBUTE3         VARCHAR(100)  
         ,@ATTRIBUTE4         VARCHAR(100)  
         ,@ATTRIBUTE5         VARCHAR(100)  
           
  
   set @DELETE_FLAG         = 'N'  
   set @LAST_UPDATED_BY     = null  
   set @LAST_UPDATE_DATE    = null  
   set @ATTRIBUTE1         = null  
   set @ATTRIBUTE2   = null  
   set @ATTRIBUTE3   = null  
   set @ATTRIBUTE4   = null  
   set @ATTRIBUTE5   = null  
  
    
   declare @SR_NO int,@Mkey int  
     SELECT @Mkey = isnull(max(cast(isnull(t.Mkey,0)as int)),0)+1 FROM APPROVAL_TEMPLATE_TAGS t   
       
            DECLARE      
                @vTagsValues nvarchar(max)  
            DECLARE      
                PComp      
                    CURSOR      
                        FOR      
                        select CAST (item   AS VARCHAR) from dbo.SqlStringSplit(@Parameter2,',')  
                             OPEN PComp      
        FETCH NEXT FROM PComp INTO @vTagsValues  
         WHILE @@FETCH_STATUS = 0      
         BEGIN  
         SELECT @DCount = count(*) FROM APPROVAL_TEMPLATE_TAGS WHERE APPROVAL_TEMPLATE_MKEY=@Parameter1 AND TAGS_DESC=@vTagsValues  
            if(@DCount<=0)       
          begin  
           SELECT @SR_NO = isnull(max(t.SR_NO),0)+1 FROM APPROVAL_TEMPLATE_TAGS t WHERE MKEY=@Mkey   --SR_NO  
           PRINT @vTagsValues  
             INSERT INTO APPROVAL_TEMPLATE_TAGS  
             ([MKEY]  
             ,[SR_NO]  
             ,APPROVAL_TEMPLATE_MKEY  
             ,[TAGS_DESC]  
             ,[ATTRIBUTE1]  
             ,[ATTRIBUTE2]  
             ,[ATTRIBUTE3]  
             ,[ATTRIBUTE4]  
             ,[ATTRIBUTE5]  
             ,[CREATED_BY]  
             ,[CREATION_DATE]  
             ,[LAST_UPDATED_BY]  
             ,[LAST_UPDATE_DATE]  
             ,[DELETE_FLAG])  
             VALUES  
             (@Mkey  
             ,@SR_NO  
             ,@Parameter1  
             ,@vTagsValues  
             ,@ATTRIBUTE1  
             ,@ATTRIBUTE2  
             ,@ATTRIBUTE3  
             ,@ATTRIBUTE4  
             ,@ATTRIBUTE5  
             ,@Parameter1  
             ,GETDATE()  
             ,@LAST_UPDATED_BY  
             ,@LAST_UPDATE_DATE  
             ,@DELETE_FLAG)  
          END     
  
               FETCH NEXT FROM PComp INTO @vTagsValues  
        END      
      
            CLOSE PComp      
            DEALLOCATE PComp      
              
  
  
     
END
GO
/****** Object:  StoredProcedure [dbo].[SP_AssignedTo]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_AssignedTo]  
(  
@term NVARCHAR(100) =null  
)  
AS  
BEGIN  
  
SELECT MKEY  
,COMPANY_ID  
,EMP_CODE  
, DBO.[InitCap](EMP_FULL_NAME) EMP_FULL_NAME  
, DBO.[InitCap](FIRST_NAME) FIRST_NAME  
, DBO.[InitCap](LAST_NAME) LAST_NAME  
,ROLE_ID  
,PROJECT_ID  
,DESIGNATION_ID  
,DEPARTMENT_ID  
,CONTACT_NO  
,EMAIL_ID_OFFICIAL  
,EMAIL_ID_PERSONAL  
,LOGIN_NAME  
,CONVERT(VARCHAR, LOGIN_PASSWORD) AS LOGIN_PASSWORD
,RA1_MKEY  
,RA2_MKEY  
,EFFECTIVE_START_DATE  
,EFFECTIVE_END_DATE  
,EMAIL_FREQUENCY  
,BROWSER_NOTIFICATION  
,WEB_TOKEN  
,MOBILE_TOKEN  
,ATTRIBUTE1  
,ATTRIBUTE2  
,ATTRIBUTE3  
,ATTRIBUTE4  
,ATTRIBUTE5  
,CREATED_BY  
,CREATION_DATE  
,LAST_UPDATED_BY  
,lAST_UPDATE_DATE  
,DELETE_FLAG  
,ISFORGOTPASSWORD  
,CONVERT(VARCHAR,TEMPPASSWORD) AS TEMPPASSWORD 
FROM EMPLOYEE_MST  
where EMP_FULL_NAME   like '%'+@term+'%'
and DELETE_FLAG='N'
END
GO
/****** Object:  StoredProcedure [dbo].[SP_COMPLIANCE_INSERT_UPDATE]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- AUTHOR:    
-- CREATE DATE: 
-- DESCRIPTION: 
--exec SP_COMPLIANCE_INSERT_UPDATE @MKEY=17,@PROPERTY=265,@BUILDING=425,@SHORT_DESCRIPTION=N'SHort tsting 123',@LONG_DESCRIPTION=N'long 123 desc'
--,@RAISED_AT=1265,@RESPONSIBLE_DEPARTMENT=485,@JOB_ROLE=3655,@RESPONSIBLE_PERSON=254,@TAGS=N' ABCF, KFHY, LFKU, TTTT',@TO_BE_COMPLETED_BY='2025-01-14 11:55:53.537'
--,@NO_DAYS=15,@STATUS=N'In-Progress',@CREATED_BY=926,@DELETE_FLAG=N'Y',@RESPONSE_STATUS=NULL,@MESSAGE=NULL


-- =============================================
 CREATE PROCEDURE [dbo].[SP_COMPLIANCE_INSERT_UPDATE]
    @MKEY INT,
    @PROPERTY_MKEY INT,
    @BUILDING_MKEY INT,
	@CATEGORY INT = NULL,
    @SHORT_DESCRIPTION VARCHAR(MAX),
    @LONG_DESCRIPTION VARCHAR(MAX),
    @RAISED_AT NVARCHAR(100) ,
	@RAISED_AT_BEFORE NVARCHAR(100) = NULL,
    @RESPONSIBLE_DEPARTMENT INT = NULL,
    @JOB_ROLE INT,
    @RESPONSIBLE_PERSON INT,
	@TASK_TYPE INT,
    @TO_BE_COMPLETED_BY DATETIME = NULL,
	@TAGS VARCHAR(MAX) = NULL,
    @NO_DAYS INT = NULL,
    @STATUS VARCHAR(100) = NULL,
	@RESPONSE_STATUS  VARCHAR(100) OUTPUT,
	@MESSAGE  NVARCHAR(MAX) OUTPUT,
    @CREATED_BY INT,
    @DELETE_FLAG CHAR
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        DECLARE @DCOUNT INT,
                @FORM_NAME VARCHAR(200),
                @COUNT INT,
                @FORM_ACTION VARCHAR(200),
				@TAGS_STATUS VARCHAR(100),@Task_Mkey NVARCHAR(100),@STATUS_ERROR BIT = 0,@COMMO CHAR;
------------------------------------------------------------------------------------------------------------------------
        SELECT @DCOUNT = COUNT(*)
        FROM COMPLIANCE_HDR
        WHERE PROPERTY = @PROPERTY_MKEY
              AND BUILDING = @BUILDING_MKEY
              --AND DELETE_FLAG = @DELETE_FLAG
              AND MKEY != @MKEY
			  AND DELETE_FLAG = 'N';
------------------------------
set @DCOUNT=0;
------------------------------------------------------------------------------------------
        IF (@DCOUNT > 0)
        BEGIN
			SET @RESPONSE_STATUS = 'ERROR';
			SET @MESSAGE = 'Already exist';
            SELECT @RESPONSE_STATUS as RESPONSE_STATUS , @MESSAGE as [MESSAGE];
			RETURN
			--RAISERROR('Already exist', 16, 1);
			--RETURN;
        END
        ELSE
        BEGIN
            IF (@MKEY = 0)
            BEGIN
                SET @FORM_NAME = 'INSERT COMPLIANCE';
                SET @FORM_ACTION = 'INSERT';
				------------------------------------------------------------------------------------------------------------------------
                print 'INSERT COMPLIANCE_HDR: '+ convert(varchar(10),@PROPERTY_MKEY);
				------------------------------------------------------------------------------------------------------------------------------------
				
				IF(@PROPERTY_MKEY = 0 OR @PROPERTY_MKEY = NULL)
				BEGIN
					SET @STATUS_ERROR = 1;
					IF (@MESSAGE = NULL OR @MESSAGE = '')
					BEGIN
						SET @MESSAGE = concat(@MESSAGE , ' Property Mkey is required');
					END
					ELSE
					BEGIN
						SET @MESSAGE = concat(@MESSAGE , +' '+ @COMMO,'Property Mkey is required');
					END
				END
				IF(@BUILDING_MKEY = 0 OR @BUILDING_MKEY = NULL)
				BEGIN
					SET @STATUS_ERROR = 1;
					--SET @MESSAGE = concat(@MESSAGE , ' Building Mkey is required'); 

					IF (@MESSAGE = NULL OR @MESSAGE = '')
					BEGIN
						SET @MESSAGE = concat(@MESSAGE , ' Building Mkey is required');
					END
					ELSE
					BEGIN
						SET @MESSAGE = concat(@MESSAGE , +' '+ @COMMO,'Building Mkey is required');
					END
				END
				IF(@SHORT_DESCRIPTION = NULL OR @SHORT_DESCRIPTION = '')
				BEGIN
					SET @STATUS_ERROR = 1;
					SET @MESSAGE = concat(@MESSAGE , ' Short description is required'); 
				END
				IF(@RAISED_AT = '' OR @RAISED_AT = NULL)
				BEGIN
					SET @STATUS_ERROR = 1;
					--SET @MESSAGE = concat(@MESSAGE ,' Raised At is required'); 
					
					IF (@MESSAGE = NULL OR @MESSAGE = '')
					BEGIN
						SET @MESSAGE = concat(@MESSAGE , ' Raised AT is required');
					END
					ELSE
					BEGIN
						SET @MESSAGE = concat(@MESSAGE , +' '+ @COMMO,'Raised AT is required');
					END

				END
				IF(@RESPONSIBLE_DEPARTMENT = 0 OR @RESPONSIBLE_DEPARTMENT = NULL)
				BEGIN
					SET @STATUS_ERROR = 1;
					SET @MESSAGE = concat(@MESSAGE ,' Responsible Department is required'); 

					IF (@MESSAGE = NULL OR @MESSAGE = '')
					BEGIN
						SET @MESSAGE = concat(@MESSAGE , ' Responsible Department is required');
					END
					ELSE
					BEGIN
						SET @MESSAGE = concat(@MESSAGE , +' '+ @COMMO,'Responsible Department is required');
					END
				END
				IF(@RESPONSIBLE_PERSON = 0 OR @RESPONSIBLE_PERSON = NULL)
				BEGIN
					SET @STATUS_ERROR = 1;
					SET @MESSAGE = concat(@MESSAGE ,' Responsible Person is required'); 
				END
				IF(@STATUS_ERROR = 1)
				BEGIN
					 SELECT @RESPONSE_STATUS as RESPONSE_STATUS , @MESSAGE as [Message];
					RETURN
				END
				------------------------------------------------------------------------------------------------------------------------------------
				INSERT INTO COMPLIANCE_HDR
                (
                    PROPERTY,
                    BUILDING ,
                    SHORT_DESCRIPTION,
                    LONG_DESCRIPTION,
                    RAISED_AT,
					RAISED_AT_BEFORE,
                    RESPONSIBLE_DEPARTMENT,
                    JOB_ROLE,
                    RESPONSIBLE_PERSON,
                    TO_BE_COMPLETED_BY,
                    NO_DAYS,
					TASK_TYPE,
                    STATUS,
                    CREATED_BY,
                    CREATION_DATE,
                    DELETE_FLAG
                )
                VALUES
                (@PROPERTY_MKEY,
                 @BUILDING_MKEY,
                 @SHORT_DESCRIPTION,
                 @LONG_DESCRIPTION,
                 @RAISED_AT,
				 ISNULL(@RAISED_AT_BEFORE,null),
                 @RESPONSIBLE_DEPARTMENT,
                 @JOB_ROLE,
                 @RESPONSIBLE_PERSON,
                 @TO_BE_COMPLETED_BY,
                 @NO_DAYS,
				 @TASK_TYPE,
                 @STATUS,
                 @CREATED_BY,
                 GETDATE(),
                 @DELETE_FLAG
                )
				SET @MKEY = SCOPE_IDENTITY();
				print '@MKEY: '+ CONVERT(NVARCHAR(10),@MKEY);		
				------------------------------------------------------------------------------------------------------------------------------------
				SELECT HDR.MKEY,
                   PROPERTY AS PROPERTY_MKEY,
                   BUILDING AS BUILDING_MKEY,
                   SHORT_DESCRIPTION,
                   LONG_DESCRIPTION,
                    ISNULL(RAISED_AT,'') AS RAISED_AT,
				   ISNULL(RAISED_AT_BEFORE,'') AS RAISED_AT_BEFORE,
                   RESPONSIBLE_DEPARTMENT,
                   HDR.JOB_ROLE,
				  ISNULL(STUFF((SELECT DISTINCT ', ' + CAST(CTAG.TAGS_NAME AS VARCHAR(MAX))
				   FROM COMPLIANCE_TRL_TAGS CTAG WHERE DELETE_FLAG ='N' AND CTAG.COMPLIANCE_MKEY  = HDR.MKEY FOR XML PATH('')), 1, 1, ''),'') AS TAGS,
                   RESPONSIBLE_PERSON,
                   TO_BE_COMPLETED_BY,
                   NO_DAYS,
				   TASK_TYPE,
                   [STATUS],
				   @RESPONSE_STATUS AS ResponseStatus, 
				   @MESSAGE AS [Message],
				    HDR.CREATED_BY CREATED_BY_ID 
					,createdby.EMP_FULL_NAME CREATED_BY_NAME 
					,CASE WHEN HDR.CREATION_DATE IS NULL THEN '' ELSE FORMAT(HDR.CREATION_DATE, 'yyyy-MM-dd HH:mm:ss') END AS CREATION_DATE  
					,ISNULL(CONVERT(VARCHAR(50),HDR.LAST_UPDATED_BY),'') AS LAST_UPDATED_BY
					,ISNULL(updatedby.EMP_FULL_NAME,'') UPDATED_BY_NAME 
					,CASE WHEN HDR.LAST_UPDATE_DATE IS NULL THEN '' ELSE FORMAT(HDR.LAST_UPDATE_DATE, 'yyyy-MM-dd HH:mm:ss') END AS LAST_UPDATE_DATE
            FROM COMPLIANCE_HDR HDR join EMPLOYEE_MST createdby on HDR.CREATED_BY=createdby.MKEY
			left join EMPLOYEE_MST updatedby  on HDR.LAST_UPDATED_BY = updatedby.MKEY
            WHERE HDR.MKEY = @MKEY
                  AND HDR.DELETE_FLAG = 'N';
            END
            ELSE
            BEGIN
			------------------------------------------------------------------------------------------------------------------------
                SET @FORM_NAME = 'UPDATE COMPLIANCE';
                SET @FORM_ACTION = 'UPDATE';
				------------------------------------------------------------------------------------------------------------------------
                IF(@PROPERTY_MKEY = 0 OR @PROPERTY_MKEY = NULL)
				BEGIN
					SET @STATUS_ERROR = 1;
					SET @MESSAGE = concat(@MESSAGE ,' PROPERTY MKEY IS MISSING'); 
				END
				IF(@BUILDING_MKEY = 0 OR @BUILDING_MKEY = NULL)
				BEGIN
					SET @STATUS_ERROR = 1;
					SET @MESSAGE = concat(@MESSAGE ,' PROPERTY MKEY IS MISSING'); 
				END
				IF(@SHORT_DESCRIPTION = '' OR @SHORT_DESCRIPTION = NULL)
				BEGIN
					SET @STATUS_ERROR = 1;
					SET @MESSAGE = concat(@MESSAGE ,' SHORT DESCRIPTION IS MISSING'); 
				END
				
				IF(@STATUS_ERROR = 0)
				BEGIN
					IF(@STATUS = 'I')
					BEGIN
						DECLARE @GetCurrentDt DATETIME,@TaskMkey INT;
						SET @GetCurrentDt = GETDATE();
						SET @Task_Mkey ='0';

						CREATE TABLE #TempTask (Mkey varchar(50), TASK_PARENT_ID varchar(50) ,TASK_MAIN_NODE_ID varchar(50),TASK_NO varchar(50))

						INSERT INTO #TempTask EXEC SP_INSERT_TASK_DETAILS @Task_Mkey,@SHORT_DESCRIPTION,@LONG_DESCRIPTION, @CATEGORY,@PROPERTY_MKEY,@BUILDING_MKEY
							,@TO_BE_COMPLETED_BY,@RESPONSIBLE_PERSON,@TAGS,
							'Y',null,null,0,'Created','0.0',@CREATED_BY,0,@TASK_TYPE,'N',null,null,null,null,null,@CREATED_BY,@GetCurrentDt,@CREATED_BY,@GetCurrentDt;
					
						SELECT @TaskMkey = Mkey from #TempTask;

						UPDATE COMPLIANCE_HDR
						SET TASK_NO_MKEY = @TaskMkey
						WHERE MKEY = @MKEY
						AND DELETE_FLAG = 'N';
					END
						INSERT INTO COMPLIANCE_HDR_H
					(
						HIST_DATE,
						MKEY,
						PROPERTY,
						BUILDING,
						SHORT_DESCRIPTION,
						LONG_DESCRIPTION,
						RAISED_AT,
						RESPONSIBLE_DEPARTMENT,
						JOB_ROLE,
						RESPONSIBLE_PERSON,
						TO_BE_COMPLETED_BY,
						NO_DAYS,
						TASK_TYPE,
						STATUS,
						ATTRIBUTE1,
						ATTRIBUTE2,
						ATTRIBUTE3,
						ATTRIBUTE4,
						ATTRIBUTE5,
						CREATED_BY,
						CREATION_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATE_DATE,
						DELETE_FLAG
					)
					------------------------------------------------------------------------------------------------------------------------
					SELECT GETDATE(),
						   MKEY,
						   PROPERTY AS PROPERTY_MKEY,
						   BUILDING AS BUILDING_MKEY,
						   SHORT_DESCRIPTION,
						   LONG_DESCRIPTION,
						   RAISED_AT,
						   RESPONSIBLE_DEPARTMENT,
						   JOB_ROLE,
						   RESPONSIBLE_PERSON,
						   TO_BE_COMPLETED_BY,
						   NO_DAYS,
						   TASK_TYPE,
						   STATUS,
						   ATTRIBUTE1,
						   ATTRIBUTE2,
						   ATTRIBUTE3,
						   ATTRIBUTE4,
						   ATTRIBUTE5,
						   CREATED_BY,
						   CREATION_DATE,
						   LAST_UPDATED_BY,
						   LAST_UPDATE_DATE,
						   DELETE_FLAG
					FROM COMPLIANCE_HDR
					WHERE MKEY = @MKEY
						  AND DELETE_FLAG = @DELETE_FLAG;
					print 'update 123';
					------------------------------------------------------------------------------------------------------------------------------------
					UPDATE COMPLIANCE_HDR
					SET PROPERTY = ISNULL(@PROPERTY_MKEY, PROPERTY),
						BUILDING = ISNULL(@BUILDING_MKEY, BUILDING),
						SHORT_DESCRIPTION = ISNULL(@SHORT_DESCRIPTION, SHORT_DESCRIPTION),
						LONG_DESCRIPTION = ISNULL(@LONG_DESCRIPTION, LONG_DESCRIPTION),
						RAISED_AT = ISNULL(@RAISED_AT, RAISED_AT),
						RAISED_AT_BEFORE = @RAISED_AT_BEFORE, --ISNULL(@RAISED_AT_BEFORE, RAISED_AT_BEFORE),
						RESPONSIBLE_DEPARTMENT = ISNULL(@RESPONSIBLE_DEPARTMENT, RESPONSIBLE_DEPARTMENT),
						JOB_ROLE = ISNULL(@JOB_ROLE, JOB_ROLE),
						RESPONSIBLE_PERSON = ISNULL(@RESPONSIBLE_PERSON, RESPONSIBLE_PERSON),
						TO_BE_COMPLETED_BY = ISNULL(@TO_BE_COMPLETED_BY, TO_BE_COMPLETED_BY),
						NO_DAYS = ISNULL(@NO_DAYS, NO_DAYS),
						TASK_TYPE = ISNULL(@TASK_TYPE,TASK_TYPE),
						[STATUS] = ISNULL(@STATUS, [STATUS]),
						LAST_UPDATED_BY = ISNULL(@CREATED_BY, LAST_UPDATED_BY),
						LAST_UPDATE_DATE = GETDATE(),
						DELETE_FLAG = @DELETE_FLAG
					WHERE MKEY = @MKEY
						  AND DELETE_FLAG = 'N';
				END
            
			------------------------------------------------------------------------------------------------------------------------
			EXEC SP_COMPLIANCE_TAGS_INSERT_UPDATE @MKEY, @TAGS, @CREATED_BY,@DELETE_FLAG, @TAGS_STATUS OUTPUT, @MESSAGE OUTPUT;
			------------------------------------------------------------------------------------------------------------------------
            SELECT HDR.MKEY,
                   PROPERTY AS PROPERTY_MKEY,
                   BUILDING AS BUILDING_MKEY,
                   SHORT_DESCRIPTION,
                   LONG_DESCRIPTION,
                   ISNULL(RAISED_AT,'') AS RAISED_AT,
				   ISNULL(RAISED_AT_BEFORE,'') AS RAISED_AT_BEFORE,
                   RESPONSIBLE_DEPARTMENT,
                   HDR.JOB_ROLE,
				   ISNULL(STUFF((SELECT DISTINCT ', ' + CAST(CTAG.TAGS_NAME AS VARCHAR(MAX))
				   FROM COMPLIANCE_TRL_TAGS CTAG WHERE DELETE_FLAG ='N' AND CTAG.COMPLIANCE_MKEY  = HDR.MKEY FOR XML PATH('')), 1, 1, ''),'') AS TAGS,
                   RESPONSIBLE_PERSON,
                   TO_BE_COMPLETED_BY,
                   NO_DAYS,
				   TASK_TYPE,
                   [STATUS],
				   @RESPONSE_STATUS AS ResponseStatus, 
				   @MESSAGE AS [Message],
				    HDR.CREATED_BY CREATED_BY_ID 
					,createdby.EMP_FULL_NAME CREATED_BY_NAME 
					,CASE WHEN HDR.CREATION_DATE IS NULL THEN '' ELSE FORMAT(HDR.CREATION_DATE, 'yyyy-MM-dd HH:mm:ss') END AS CREATION_DATE  
					,ISNULL(CONVERT(VARCHAR(50),HDR.LAST_UPDATED_BY),'') AS LAST_UPDATED_BY
					,ISNULL(updatedby.EMP_FULL_NAME,'') UPDATED_BY_NAME 
					,CASE WHEN HDR.LAST_UPDATE_DATE IS NULL THEN '' ELSE FORMAT(HDR.LAST_UPDATE_DATE, 'yyyy-MM-dd HH:mm:ss') END AS LAST_UPDATE_DATE
            FROM COMPLIANCE_HDR HDR join EMPLOYEE_MST createdby on HDR.CREATED_BY=createdby.MKEY
			left join EMPLOYEE_MST updatedby  on HDR.LAST_UPDATED_BY = updatedby.MKEY
            WHERE HDR.MKEY = @MKEY
                  AND HDR.DELETE_FLAG = 'N';
        END
		END
    END TRY
    BEGIN CATCH
        -------------------------------------------------------------------------------------------------------------------------------            
        SELECT ERROR_NUMBER() AS ERRORNUMBER,
               ERROR_SEVERITY() AS ERRORSEVERITY,
               ERROR_STATE() AS ERRORSTATE,
               ERROR_PROCEDURE() AS ERRORPROCEDURE,
               ERROR_LINE() AS ERRORLINE,
               ERROR_MESSAGE() AS ERRORMESSAGE;

        -------------------------------------------------------------------------------------------------------------------------------  
        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
        SET @ERROR_MESSAGE = ERROR_MESSAGE();
        -------------------------------------------------------------------------------------------------------------------------------  
        EXEC SP_P_TMS_INSERT_ERROR_DES @CREATED_BY,
                                       'TMS',
                                       @FORM_NAME,
                                       @ERROR_MESSAGE,
                                       @FORM_ACTION;
    -------------------------------------------------------------------------------------------------------------------------------  
    END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_COMPLIANCE_TAGS_INSERT_UPDATE]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- AUTHOR:    
-- CREATE DATE: 
-- DESCRIPTION:  
-- EXEC SP_COMPLIANCE_TAGS_INSERT_UPDATE 15,'UNIO,LOIP,KHGY',926,'N',NULL,NULL
-- =============================================
CREATE PROCEDURE [dbo].[SP_COMPLIANCE_TAGS_INSERT_UPDATE]
    @COMPLIANCE_MKEY INT,
    @TAGS_NAME VARCHAR(200),
    @CREATED_BY INT,
    @DELETE_FLAG CHAR,
    @STATUS VARCHAR(100) OUTPUT,
    @MESSAGE VARCHAR(500) OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @SR_NO INT,
            @MKEY INT,
            @COUNT INT,
            @DCOUNT INT,
            @VTAGSVALUES NVARCHAR(MAX),
            @FORM_NAME NVARCHAR(200),
            @FORM_ACTION NVARCHAR(100);
    BEGIN TRY

        -- TO CHECK DELETE FLAG IS Y OR N IF DELETE FLAG IS Y THEN UPDATE THE COMPLIANCE_TRL_TAGS
        IF (@DELETE_FLAG = 'N')
        BEGIN
---------------------------------------------------------------------------------------------------------------------------------------------
			-- TO CHECK COMPLIANCE_MKEY IS PRESENT OR NOT IN TABLE IF PRESENT THEN TAKE SAME MKEY IF NOT THEN INSERT NEW MKEY
            SELECT @COUNT = COUNT(*)
            FROM COMPLIANCE_TRL_TAGS t
            WHERE COMPLIANCE_MKEY = @COMPLIANCE_MKEY
                  AND DELETE_FLAG = 'N';
---------------------------------------------------------------------------------------------------------------------------------------------
            IF (@COUNT > 0)
            BEGIN
                SELECT @MKEY = MKEY
                FROM COMPLIANCE_TRL_TAGS t
                WHERE COMPLIANCE_MKEY = @COMPLIANCE_MKEY
                AND DELETE_FLAG = 'N';
            END
            ELSE
            BEGIN
                SELECT @MKEY = isnull(max(cast(isnull(t.Mkey, 0) as int)), 0) + 1
                FROM COMPLIANCE_TRL_TAGS t;
            END
----------------------------------------------------------------------------------------------------------------
			-- TO SET DELETE FLAG Y TO ALL 
			UPDATE COMPLIANCE_TRL_TAGS
			SET  DELETE_FLAG = 'Y'
			WHERE COMPLIANCE_MKEY = @COMPLIANCE_MKEY AND MKEY = @MKEY;
----------------------------------------------------------------------------------------------------------------
            -- DECLARE THE CURSOR ONCE AT THE BEGINNING OF THE PROCEDURE
            DECLARE PCOMP CURSOR FOR
            SELECT CAST(ITEM AS VARCHAR)
            FROM DBO.SQLSTRINGSPLIT(@TAGS_NAME, ',');

            -- OPEN THE CURSOR ONCE AT THE BEGINNING
            OPEN PCOMP;

            -- LOOP TO FETCH THE VALUES AND PROCESS THEM
            FETCH NEXT FROM PCOMP
            INTO @VTAGSVALUES;

            WHILE @@FETCH_STATUS = 0
            BEGIN
                -- YOUR EXISTING LOGIC FOR PROCESSING EACH TAG VALUE
                PRINT '@VTAGSVALUES: ' + @VTAGSVALUES;
                --CHECK FOR DUPLICATE
                --SELECT @DCOUNT = COUNT(*)
                --FROM COMPLIANCE_TRL_TAGS
                --WHERE COMPLIANCE_MKEY != @COMPLIANCE_MKEY
                --      AND TAGS_NAME = @VTAGSVALUES
                --      AND DELETE_FLAG = 'N';

                --IF @DCOUNT > 0
                --BEGIN
                --    PRINT '@DCOUNT > 0';
                --    SET @MESSAGE = 'DUPLICATE ROWS';
                --    SET @STATUS = 'ERROR';
                --    BREAK;
                --END
                --ELSE
				--IF @DCOUNT < 1
    --            BEGIN
                    -- HANDLE INSERT OR UPDATE LOGIC
                    SELECT @DCOUNT = COUNT(*)
                    FROM COMPLIANCE_TRL_TAGS
                    WHERE COMPLIANCE_MKEY = @COMPLIANCE_MKEY
                          AND TAGS_NAME = @VTAGSVALUES;
                          --AND DELETE_FLAG = 'N';
                    ---------------------------------------------------------------------------------------------------------------------------------------
                    --IF @DCOUNT > 0
                    --BEGIN
                    --    SET @FORM_NAME = 'UPDATE COMPLIANCE TAGS';
                    --    SET @FORM_ACTION = 'UPDATE';
                    --    ---------------------------------------------------------------------------------------------------------------------------------------
                    --    SELECT @SR_NO = SR_NO
                    --    FROM COMPLIANCE_TRL_TAGS
                    --    WHERE COMPLIANCE_MKEY = @COMPLIANCE_MKEY
                    --          AND LOWER(TAGS_NAME) = LOWER(@VTAGSVALUES)
                    --          AND DELETE_FLAG = 'N';
                    --    ----------------------------------------------------------------------------------------------------------------------------------------------------------
                    --    INSERT INTO COMPLIANCE_TRL_TAGS_H
                    --    (
                    --        HIST_DATE,
                    --        MKEY,
                    --        SR_NO,
                    --        COMPLIANCE_MKEY,
                    --        TAGS_NAME,
                    --        CREATED_BY,
                    --        CREATION_DATE,
                    --        LAST_UPDATED_BY,
                    --        LAST_UPDATE_DATE,
                    --        DELETE_FLAG
                    --    )
                    --    SELECT GETDATE(),
                    --           MKEY,
                    --           SR_NO,
                    --           COMPLIANCE_MKEY,
                    --           TAGS_NAME,
                    --           CREATED_BY,
                    --           CREATION_DATE,
                    --           LAST_UPDATED_BY,
                    --           LAST_UPDATE_DATE,
                    --           DELETE_FLAG
                    --    FROM COMPLIANCE_TRL_TAGS
                    --    WHERE MKEY = @MKEY
                    --          AND COMPLIANCE_MKEY = @COMPLIANCE_MKEY
                    --          AND @SR_NO = @SR_NO
                    --          AND DELETE_FLAG = 'N';
                    --    ----------------------------------------------------------------------------------------------------------------------------------------------------------
                    --    -- UPDATE COMPLIANCE_TRL_TAGS
                    --    UPDATE COMPLIANCE_TRL_TAGS
                    --    SET TAGS_NAME = ISNULL(@VTAGSVALUES, TAGS_NAME),
                    --        LAST_UPDATED_BY = @CREATED_BY,
                    --        LAST_UPDATE_DATE = GETDATE(),
                    --        DELETE_FLAG = @DELETE_FLAG
                    --    WHERE MKEY = @MKEY
                    --          AND SR_NO = @SR_NO
                    --          AND COMPLIANCE_MKEY = @COMPLIANCE_MKEY
                    --          AND DELETE_FLAG = 'N';
                    ------------------------------------------------------------------------------------------------------------------------------------------------------------
                    --END
                    --ELSE
					IF @DCOUNT < 1
                    BEGIN
                        SET @FORM_NAME = 'INSERT COMPLIANCE TAGS';
                        SET @FORM_ACTION = 'INSERT';
						PRINT 'INSERT TAGS';
----------------------------------------------------------------------------------------------------------------------------------------------------------
                        -- INSERT NEW TAG IF IT DOESN'T EXIST
                        SELECT @SR_NO = ISNULL(MAX(T.SR_NO), 0) + 1
                        FROM COMPLIANCE_TRL_TAGS T
                        WHERE COMPLIANCE_MKEY = @COMPLIANCE_MKEY;

						PRINT '@SR_NO: '+ CONVERT(VARCHAR(100),@SR_NO);
----------------------------------------------------------------------------------------------------------------------------------------------------------
						--UPDATE COMPLIANCE_TRL_TAGS
      --                  SET TAGS_NAME = ISNULL(@VTAGSVALUES, TAGS_NAME),
      --                      LAST_UPDATED_BY = @CREATED_BY,
      --                      LAST_UPDATE_DATE = GETDATE(),
      --                      DELETE_FLAG = 'N'
      --                  WHERE MKEY = @MKEY
      --                        AND SR_NO = @SR_NO
      --                        AND COMPLIANCE_MKEY = @COMPLIANCE_MKEY
      --                        --AND DELETE_FLAG = 'N';
                        ----------------------------------------------------------------------------------------------------------------------------------------------------------
                        -- INSERT NEW TAG
                        INSERT INTO COMPLIANCE_TRL_TAGS
                        (
                            MKEY,
                            SR_NO,
                            COMPLIANCE_MKEY,
                            TAGS_NAME,
                            CREATED_BY,
                            CREATION_DATE,
                            DELETE_FLAG
                        )
                        VALUES
                        (@MKEY, @SR_NO, @COMPLIANCE_MKEY, @VTAGSVALUES, @CREATED_BY, GETDATE(), 'N');

-----------------------------------------------------------------------------------------------------------------------------
						--UPDATE COMPLIANCE_TRL_TAGS
						--SET ATTRIBUTE1 = 'Y'
						--WHERE COMPLIANCE_MKEY = @COMPLIANCE_MKEY AND MKEY = @MKEY AND SR_NO = SR_NO AND DELETE_FLAG = @DELETE_FLAG;
-----------------------------------------------------------------------------------------------------------------------------
                    -- GET THE NEW MKEY
                    --SET @MKEY = SCOPE_IDENTITY();
                    END
					ELSE
					BEGIN
					PRINT 'UPDATE SR_NO';
					--TO GET SR_NO FOR UPDATING THE DELETE FLAG N
						SELECT @SR_NO = SR_NO
						FROM COMPLIANCE_TRL_TAGS
						WHERE COMPLIANCE_MKEY = @COMPLIANCE_MKEY
							  AND TAGS_NAME = @VTAGSVALUES;
---------------------------------------------------------------------------------------------------------------------------
						PRINT 'SR_NO: '+CONVERT(VARCHAR(50),@SR_NO);
				--TO GET SR_NO UPDATE AS THE DELETE FLAG N
						UPDATE COMPLIANCE_TRL_TAGS
						SET  DELETE_FLAG = 'N'
						WHERE COMPLIANCE_MKEY = @COMPLIANCE_MKEY AND MKEY = @MKEY AND SR_NO = @SR_NO;
					END
                --END

                -- FETCH THE NEXT TAG VALUE FROM THE CURSOR
                FETCH NEXT FROM PCOMP
                INTO @VTAGSVALUES;
            END
            -- CLOSE THE CURSOR AFTER USE
            CLOSE PCOMP;
            -- DEALLOCATE THE CURSOR AFTER USE
            DEALLOCATE PCOMP;
			PRINT 'LOOP END';
				
        END
        ELSE
        BEGIN
            -- TO CHECK FIRST IT IS PRESENT OR NOT
			SELECT @COUNT = COUNT(*)
            FROM COMPLIANCE_TRL_TAGS t
            WHERE COMPLIANCE_MKEY = @COMPLIANCE_MKEY
                  AND DELETE_FLAG = 'N';
            IF (@COUNT > 0)
            BEGIN
			    -- FIRST INSERT INTO HISTORY TABLE AND THEN UPDATE AS DELETE_FLAG "Y"
                -----------------------------------------------------------------------------------------------------------------------------
                INSERT INTO COMPLIANCE_TRL_TAGS_H
                (
                    HIST_DATE,
                    MKEY,
                    SR_NO,
                    COMPLIANCE_MKEY,
                    TAGS_NAME,
                    CREATED_BY,
                    CREATION_DATE,
                    LAST_UPDATED_BY,
                    LAST_UPDATE_DATE,
                    DELETE_FLAG
                )
                SELECT GETDATE(),
                       MKEY,
                       SR_NO,
                       COMPLIANCE_MKEY,
                       TAGS_NAME,
                       CREATED_BY,
                       CREATION_DATE,
                       LAST_UPDATED_BY,
                       LAST_UPDATE_DATE,
                       DELETE_FLAG
                FROM COMPLIANCE_TRL_TAGS
                WHERE COMPLIANCE_MKEY = @COMPLIANCE_MKEY
                      AND DELETE_FLAG = 'N';
                -----------------------------------------------------------------------------------------------------------------------------
                UPDATE COMPLIANCE_TRL_TAGS
                SET DELETE_FLAG = @DELETE_FLAG,
                    LAST_UPDATED_BY = @CREATED_BY,
                    LAST_UPDATE_DATE = GETDATE()
                WHERE COMPLIANCE_MKEY = @COMPLIANCE_MKEY
                      AND DELETE_FLAG = 'N';
            -----------------------------------------------------------------------------------------------------------------------------
            END
        END

    END TRY
    BEGIN CATCH
        -------------------------------------------------------------------------------------------------------------------------------            
        SELECT ERROR_NUMBER() AS ERRORNUMBER,
               ERROR_SEVERITY() AS ERRORSEVERITY,
               ERROR_STATE() AS ERRORSTATE,
               ERROR_PROCEDURE() AS ERRORPROCEDURE,
               ERROR_LINE() AS ERRORLINE,
               ERROR_MESSAGE() AS ERRORMESSAGE;

        -------------------------------------------------------------------------------------------------------------------------------  
        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
        SET @ERROR_MESSAGE = ERROR_MESSAGE();
        -------------------------------------------------------------------------------------------------------------------------------  
        EXEC SP_P_TMS_INSERT_ERROR_DES @CREATED_BY,
                                       'TMS',
                                       @FORM_NAME,
                                       @ERROR_MESSAGE,
                                       @FORM_ACTION;
    -------------------------------------------------------------------------------------------------------------------------------  
    END CATCH
END;
GO
/****** Object:  StoredProcedure [dbo].[SP_DELETE_APPROVAL_HDR_TRL_SUBTASK]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		AMIT SHUDDHALWAR
-- Create date: 13-12-2024
-- Description:	DELETE APPROVAL TEMPLATE TRL SUBTASK
-- =============================================
CREATE PROCEDURE [dbo].[SP_DELETE_APPROVAL_HDR_TRL_SUBTASK]
	-- Add the parameters for the stored procedure here
	@MKEY INT,
	@LAST_UPDATED_BY INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	DECLARE @COUNT INT,@FLAG_COUNT BIT;
    -- Insert statements for procedure here
	BEGIN TRY
		
		SELECT @COUNT = COUNT(*) FROM APPROVAL_TEMPLATE_HDR WHERE MKEY = @MKEY AND DELETE_FLAG = 'N';
		------------------------------------------------------------------------------------------------------------------------------------------------------
		IF(@COUNT > 0) 
		BEGIN
			SET @FLAG_COUNT = 0;
			INSERT INTO APPROVAL_TEMPLATE_HDR_H (
												HIST_DATE
												,MKEY
												,BUILDING_TYPE
												,BUILDING_STANDARD
												,STATUTORY_AUTHORITY
												,MAIN_ABBR
												,SHORT_DESCRIPTION
												,LONG_DESCRIPTION
												,AUTHORITY_DEPARTMENT
												,RESPOSIBLE_EMP_MKEY
												,JOB_ROLE
												,DAYS_REQUIERD
												,SEQ_ORDER
												,SANCTION_AUTHORITY
												,SANCTION_DEPARTMENT
												,ATTRIBUTE1
												,ATTRIBUTE2
												,ATTRIBUTE3
												,ATTRIBUTE4
												,ATTRIBUTE5
												,CREATED_BY
												,CREATION_DATE
												,LAST_UPDATED_BY
												,LAST_UPDATE_DATE
												,END_RESULT_DOC
												,CHECKLIST_DOC
												,DELETE_FLAG
												,TAGS)
										SELECT 
												GETDATE()
												,MKEY
												,BUILDING_TYPE
												,BUILDING_STANDARD
												,STATUTORY_AUTHORITY
												,MAIN_ABBR
												,SHORT_DESCRIPTION
												,LONG_DESCRIPTION
												,AUTHORITY_DEPARTMENT
												,RESPOSIBLE_EMP_MKEY
												,JOB_ROLE
												,DAYS_REQUIERD
												,SEQ_ORDER
												,SANCTION_AUTHORITY
												,SANCTION_DEPARTMENT
												,ATTRIBUTE1
												,ATTRIBUTE2
												,ATTRIBUTE3
												,ATTRIBUTE4
												,ATTRIBUTE5
												,CREATED_BY
												,CREATION_DATE
												,LAST_UPDATED_BY
												,LAST_UPDATE_DATE
												,END_RESULT_DOC
												,CHECKLIST_DOC
												,DELETE_FLAG
												,TAGS 
												FROM 
													APPROVAL_TEMPLATE_HDR 
												WHERE 
													MKEY = @MKEY 
												AND 
													DELETE_FLAG = 'N';
		END
		ELSE
		BEGIN
			SET @FLAG_COUNT = 1;
			goto ExitSP;
		END
		------------------------------------------------------------------------------------------------------------------------------------------------------
		------------------------------------------------------------------------------------------------------------------------------------------------------
		SET @COUNT = 0;
		------------------------------------------------------------------------------------------------------------------------------------------------------
		SELECT @COUNT = COUNT(*) FROM APPROVAL_TEMPLATE_TRL_SUBTASK WHERE HEADER_MKEY = @MKEY AND DELETE_FLAG = 'N';
		------------------------------------------------------------------------------------------------------------------------------------------------------
		IF(@COUNT > 0) 
		BEGIN
			SET @FLAG_COUNT = 0;
			INSERT INTO APPROVAL_TEMPLATE_TRL_SUBTASK_H(
												Hist_date
												,HEADER_MKEY
												,SEQ_NO
												,SUBTASK_ABBR
												,SUBTASK_MKEY
												,SUBTASK_PARENT_ID
												,ATTRIBUTE1
												,ATTRIBUTE2
												,ATTRIBUTE3
												,ATTRIBUTE4
												,ATTRIBUTE5
												,ATTRIBUTE6
												,ATTRIBUTE7
												,ATTRIBUTE8
												,CREATED_BY
												,CREATION_DATE
												,LAST_UPDATED_BY
												,LAST_UPDATE_DATE
												,DELETE_FLAG)
										SELECT 
												GETDATE()
												,HEADER_MKEY
												,SEQ_NO
												,SUBTASK_ABBR
												,SUBTASK_MKEY
												,SUBTASK_PARENT_ID
												,ATTRIBUTE1
												,ATTRIBUTE2
												,ATTRIBUTE3
												,ATTRIBUTE4
												,ATTRIBUTE5
												,ATTRIBUTE6
												,ATTRIBUTE7
												,ATTRIBUTE8
												,CREATED_BY
												,CREATION_DATE
												,LAST_UPDATED_BY
												,LAST_UPDATE_DATE
												,DELETE_FLAG
											FROM 
												APPROVAL_TEMPLATE_TRL_SUBTASK 
											WHERE 
												HEADER_MKEY = @MKEY 
											AND 
												DELETE_FLAG = 'N';

		END
		ELSE
		BEGIN
			SET @FLAG_COUNT = 1;
			goto ExitSP;
		END
		
		IF (@FLAG_COUNT = 0)
		BEGIN
			UPDATE 
				APPROVAL_TEMPLATE_HDR
			SET 
				DELETE_FLAG = 'Y'
			WHERE 
				MKEY = @MKEY
			AND 
				DELETE_FLAG = 'N';

			UPDATE 
				APPROVAL_TEMPLATE_TRL_SUBTASK
			SET 
				DELETE_FLAG = 'Y'
			WHERE 
				HEADER_MKEY = @MKEY
			AND 
				DELETE_FLAG = 'N';
		END
ExitSP:
	END TRY  
	BEGIN CATCH  
	-------------------------------------------------------------------------------------------------------------------------------            
	SELECT ERROR_NUMBER()    AS ERRORNUMBER,  
	ERROR_SEVERITY()  AS ERRORSEVERITY,  
	ERROR_STATE()     AS ERRORSTATE,  
	ERROR_PROCEDURE() AS ERRORPROCEDURE,  
	ERROR_LINE()      AS ERRORLINE,  
	ERROR_MESSAGE()   AS ERRORMESSAGE;  
	-------------------------------------------------------------------------------------------------------------------------------  
	DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;  
	SET @ERROR_MESSAGE = ERROR_MESSAGE();  
	-------------------------------------------------------------------------------------------------------------------------------  
	EXEC sp_P_TMS_INSERT_ERROR_DES @LAST_UPDATED_BY,'TMS','APPROVAL TEMPLATE HDR SUBTASK',@ERROR_MESSAGE,'DELETE';  
	-------------------------------------------------------------------------------------------------------------------------------  
	END CATCH  
END
GO
/****** Object:  StoredProcedure [dbo].[SP_DELETE_APPROVAL_TEMPLATE_TRL]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		AMIT SHUDDHALWAR
-- Create date: 10-12-2024
-- Description:	TO DELETE APPROVAL TRL TABLES LIKE CHECK_LIST,ENDLIST, SUBTASK
--		exec SP_DELETE_APPROVAL_TEMPLATE_TRL @MKEY=82,@LOGGED_IN=9,@STATUS=N'OK'

--	exec SP_DELETE_APPROVAL_TEMPLATE_TRL @MKEY=136,@LOGGED_IN=NULL,@STATUS=NULL
-- =============================================
CREATE PROCEDURE [dbo].[SP_DELETE_APPROVAL_TEMPLATE_TRL]
	-- Add the parameters for the stored procedure here
	@MKEY INT,
	@LOGGED_IN INT,
	@STATUS VARCHAR(100) OUT 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY
    -- Insert statements for procedure 
-----------------------------------------------------------------------------------------------------------------------------------------------
		DECLARE @COUNT INT,@FLAG_DELETE BIT;
		SET @FLAG_DELETE = 0;
-----------------------------------------------------------------------------------------------------------------------------------------------		
		SELECT @COUNT = COUNT(*) FROM APPROVAL_TEMPLATE_TRL_CHECKLIST
		WHERE MKEY = @MKEY;
-----------------------------------------------------------------------------------------------------------------------------------------------
		PRINT '@COUNT' + CONVERT(VARCHAR,@COUNT);
		IF (@COUNT > 0)
		BEGIN
		PRINT 'APPROVAL_TEMPLATE_TRL_CHECKLIST';
			INSERT INTO APPROVAL_TEMPLATE_TRL_CHECKLIST_H
							(
							Hist_date
							,MKEY
							,SR_NO
							,DOCUMENT_NAME
							,DOCUMENT_CATEGORY
							,ATTRIBUTE1
							,ATTRIBUTE2
							,ATTRIBUTE3
							,ATTRIBUTE4
							,ATTRIBUTE5
							,CREATED_BY
							,CREATION_DATE
							,LAST_UPDATED_BY
							,LAST_UPDATE_DATE
							,DELETE_FLAG)
					select 
							GETDATE()
							,MKEY
							,SR_NO
							,DOCUMENT_NAME
							,DOCUMENT_CATEGORY
							,ATTRIBUTE1
							,ATTRIBUTE2
							,ATTRIBUTE3
							,ATTRIBUTE4
							,ATTRIBUTE5
							,CREATED_BY
							,CREATION_DATE
							,LAST_UPDATED_BY
							,LAST_UPDATE_DATE
							,DELETE_FLAG
					FROM APPROVAL_TEMPLATE_TRL_CHECKLIST
					WHERE MKEY = @MKEY;
-------------------------------------------------------------------------------------------------------------------------------------
			UPDATE APPROVAL_TEMPLATE_TRL_CHECKLIST
			SET DELETE_FLAG = 'Y'
			WHERE MKEY = @MKEY;
		END
		--ELSE
		--BEGIN
		--	PRINT 'APPROVAL_TEMPLATE_TRL_CHECKLIST ERROR';
		--	SET @FLAG_DELETE = 1;
		--	goto ErrorTRL;
		--END
-----------------------------------------------------------------------------------------------------------------------------------------------
		SELECT @COUNT = COUNT(*) FROM APPROVAL_TEMPLATE_TRL_ENDRESULT
		WHERE MKEY = @MKEY;
		-----------------------------------------------------------------------------------------------------------------------------------------------
		IF (@COUNT > 0)
		BEGIN
		PRINT 'APPROVAL_TEMPLATE_TRL_ENDRESULT';
------------------------------------------------------------------------------------------------------------------------------
		INSERT INTO APPROVAL_TEMPLATE_TRL_ENDRESULT_H
							(
							Hist_date
							,MKEY
							,SR_NO
							,DOCUMENT_NAME
							,DOCUMENT_CATEGORY
							,ATTRIBUTE1
							,ATTRIBUTE2
							,ATTRIBUTE3
							,ATTRIBUTE4
							,ATTRIBUTE5
							,CREATED_BY
							,CREATION_DATE
							,LAST_UPDATED_BY
							,LAST_UPDATE_DATE
							,DELETE_FLAG)
					select 
							GETDATE()
							,MKEY
							,SR_NO
							,DOCUMENT_NAME
							,DOCUMENT_CATEGORY
							,ATTRIBUTE1
							,ATTRIBUTE2
							,ATTRIBUTE3
							,ATTRIBUTE4
							,ATTRIBUTE5
							,CREATED_BY
							,CREATION_DATE
							,LAST_UPDATED_BY
							,LAST_UPDATE_DATE
							,DELETE_FLAG
					FROM APPROVAL_TEMPLATE_TRL_ENDRESULT
					WHERE MKEY = @MKEY;
------------------------------------------------------------------------------------------------------------------------------
			UPDATE APPROVAL_TEMPLATE_TRL_ENDRESULT
			SET DELETE_FLAG = 'Y'
			WHERE MKEY = @MKEY;
		END
		--ELSE
		--BEGIN
		--	PRINT 'APPROVAL_TEMPLATE_TRL_ENDRESULT ERROR';
		--	SET @FLAG_DELETE = 1;
		--	goto ErrorTRL;
		--END
-----------------------------------------------------------------------------------------------------------------------------------------------
		SELECT @COUNT = COUNT(*) FROM APPROVAL_TEMPLATE_TRL_SUBTASK
		WHERE HEADER_MKEY = @MKEY;
		-----------------------------------------------------------------------------------------------------------------------------------------------
		IF (@COUNT > 0)
		BEGIN
		-------------------------------------------------------------------------------------------------------------------------------------------------
			-- INSERT INTO PENDING
		-------------------------------------------------------------------------------------------------------------------------------------------------
			INSERT INTO APPROVAL_TEMPLATE_TRL_SUBTASK_H
													(
													Hist_date
													,HEADER_MKEY
													,SEQ_NO
													,SUBTASK_ABBR
													,SUBTASK_MKEY
													,SUBTASK_PARENT_ID
													,ATTRIBUTE1
													,ATTRIBUTE2
													,ATTRIBUTE3
													,ATTRIBUTE4
													,ATTRIBUTE5
													,ATTRIBUTE6
													,ATTRIBUTE7
													,ATTRIBUTE8
													,CREATED_BY
													,CREATION_DATE
													,LAST_UPDATED_BY
													,LAST_UPDATE_DATE
													,DELETE_FLAG)
									SELECT GETDATE()
													,HEADER_MKEY
													,SEQ_NO
													,SUBTASK_ABBR
													,SUBTASK_MKEY
													,SUBTASK_PARENT_ID
													,ATTRIBUTE1
													,ATTRIBUTE2
													,ATTRIBUTE3
													,ATTRIBUTE4
													,ATTRIBUTE5
													,ATTRIBUTE6
													,ATTRIBUTE7
													,ATTRIBUTE8
													,CREATED_BY
													,CREATION_DATE
													,LAST_UPDATED_BY
													,LAST_UPDATE_DATE
													,DELETE_FLAG 
													FROM APPROVAL_TEMPLATE_TRL_SUBTASK
													WHERE HEADER_MKEY = @MKEY
													AND DELETE_FLAG = 'N';
-----------------------------------------------------------------------------------------------------------------------------------
			UPDATE APPROVAL_TEMPLATE_TRL_SUBTASK
			SET DELETE_FLAG = 'Y'
			WHERE HEADER_MKEY = @MKEY;
			PRINT 'APPROVAL_TEMPLATE_TRL_SUBTASK 1';
		END
		--ELSE
		--BEGIN
		--	SET @FLAG_DELETE = 1;
		--	PRINT 'APPROVAL_TEMPLATE_TRL_SUBTASK ERROR';
		--	--goto ErrorTRL;
		--END
-----------------------------------------------------------------------------------------------------------------------------------------------
		SELECT @COUNT = COUNT(*) FROM APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT
		WHERE MKEY = @MKEY;
		-----------------------------------------------------------------------------------------------------------------------------------------------
		IF (@COUNT > 0)
		BEGIN
		PRINT 'APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT'
		-------------------------------------------------------------------------------------------------------------------------------------------------
			-- INSERT INTO PENDING
		-------------------------------------------------------------------------------------------------------------------------------------------------
			INSERT INTO APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT_H
													(
													HIST_DATE
													,MKEY
													,SR_NO
													,LEVEL
													,SANCTIONING_DEPARTMENT
													,SANCTIONING_AUTHORITY
													,START_DATE
													,END_DATE
													,ATTRIBUTE1
													,ATTRIBUTE2
													,ATTRIBUTE3
													,ATTRIBUTE4
													,ATTRIBUTE5
													,CREATED_BY
													,CREATION_DATE
													,LAST_UPDATED_BY
													,LAST_UPDATE_DATE
													,DELETE_FLAG)
									SELECT GETDATE()
													,MKEY
													,SR_NO
													,LEVEL
													,SANCTIONING_DEPARTMENT
													,SANCTIONING_AUTHORITY
													,START_DATE
													,END_DATE
													,ATTRIBUTE1
													,ATTRIBUTE2
													,ATTRIBUTE3
													,ATTRIBUTE4
													,ATTRIBUTE5
													,CREATED_BY
													,CREATION_DATE
													,LAST_UPDATED_BY
													,LAST_UPDATE_DATE
													,DELETE_FLAG
													FROM APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT
													WHERE MKEY = @MKEY
													AND DELETE_FLAG = 'N';
-----------------------------------------------------------------------------------------------------------------------------------
			UPDATE APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT
			SET DELETE_FLAG = 'Y'
			WHERE MKEY = @MKEY;
			PRINT 'APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT 1';
		END
		--ELSE
		--BEGIN
		--	SET @FLAG_DELETE = 1;
		--	PRINT 'APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT ERROR';
		--	--goto ErrorTRL;
		--END

-----------------------------------------------------------------------------------------------------------------------------------------------
		--ErrorTRL:
		--PRINT '@FLAG_DELETE: '+CONVERT(VARCHAR,@FLAG_DELETE);
		--IF (@FLAG_DELETE = 0)
		--BEGIN
		--	SET @STATUS = 'OK';
		--	PRINT 'SET @STATUS = OK';
		--END
		--BEGIN
		--	SET @STATUS = 'ERROR';
		--	PRINT 'SET @STATUS = ERROR';
		--END
-----------------------------------------------------------------------------------------------------------------------------------------------
	END TRY
	BEGIN CATCH
	-------------------------------------------------------------------------------------------------------------------------------          
		SELECT ERROR_NUMBER()    AS ERRORNUMBER,
				ERROR_SEVERITY()  AS ERRORSEVERITY,
				ERROR_STATE()     AS ERRORSTATE,
				ERROR_PROCEDURE() AS ERRORPROCEDURE,
				ERROR_LINE()      AS ERRORLINE,
				ERROR_MESSAGE()   AS ERRORMESSAGE;
	-------------------------------------------------------------------------------------------------------------------------------
		DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
		SET @ERROR_MESSAGE = ERROR_MESSAGE();
	-------------------------------------------------------------------------------------------------------------------------------
		EXEC sp_P_TMS_INSERT_ERROR_DES @LOGGED_IN,'TMS','ApprovalTemplate/UpdateApprovalTemplateAsync',@ERROR_MESSAGE,'Delete Approval Details';
	-------------------------------------------------------------------------------------------------------------------------------
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_DELETE_DOCUMENT_TEMPLATES]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		AMIT SHUDDHALWAR
-- Create date: 28-10-2024
-- Description:	TO DELETE THE DOCUMENT TEMPLATE 
-- =============================================
CREATE PROCEDURE [dbo].[SP_DELETE_DOCUMENT_TEMPLATES] 
	-- Add the parameters for the stored procedure here
	@MKEY NUMERIC,
	@LAST_UPDATED_BY  NUMERIC = NULL,
	@ATTRIBUTE1       VARCHAR(250) = NULL,
	@ATTRIBUTE2       VARCHAR(250) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	BEGIN TRY
    -- Insert statements for procedure here
			INSERT INTO DOC_TEMPLATE_HDR_H
					(MKEY
					,DOC_CATEGORY
					,DOC_NAME
					,[DOC_ABBR]
					,[DOC_NUM_FIELD_NAME]
					,[DOC_NUM_DATE_NAME]
					,[DOC_NUM_APP_FLAG]
					,[DOC_NUM_VALID_FLAG]
					,[DOC_NUM_DATE_APP_FLAG]
					,[DOC_ATTACH_APP_FLAG]
					,[CREATED_BY]
					,[CREATION_DATE]
					,[LAST_UPDATED_BY]
					,[LAST_UPDATE_DATE]
					,[DELETE_FLAG])
				SELECT MKEY
					,DOC_CATEGORY
					,DOC_NAME
					,[DOC_ABBR]
					,[DOC_NUM_FIELD_NAME]
					,[DOC_NUM_DATE_NAME]
					,[DOC_NUM_APP_FLAG]
					,[DOC_NUM_VALID_FLAG]
					,[DOC_NUM_DATE_APP_FLAG]
					,[DOC_ATTACH_APP_FLAG]
					,[CREATED_BY]
					,[CREATION_DATE]
					,[LAST_UPDATED_BY]
					,[LAST_UPDATE_DATE]
					,[DELETE_FLAG]
			FROM DOC_TEMPLATE_HDR
			WHERE MKEY = @MKEY;
-----------------------------------------------------------------------------------------------------------------------------------
			UPDATE DOC_TEMPLATE_HDR
			SET	DELETE_FLAG = 'Y'
			,[LAST_UPDATED_BY]	= @LAST_UPDATED_BY		
			,[LAST_UPDATE_DATE] = GETDATE()
			WHERE MKEY = @MKEY;
-----------------------------------------------------------------------------------------------------------------------------------
	END TRY
	BEGIN CATCH
	-------------------------------------------------------------------------------------------------------------------------------          
		SELECT ERROR_NUMBER()    AS ERRORNUMBER,
				ERROR_SEVERITY()  AS ERRORSEVERITY,
				ERROR_STATE()     AS ERRORSTATE,
				ERROR_PROCEDURE() AS ERRORPROCEDURE,
				ERROR_LINE()      AS ERRORLINE,
				ERROR_MESSAGE()   AS ERRORMESSAGE;
	-------------------------------------------------------------------------------------------------------------------------------
		DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
		SET @ERROR_MESSAGE = ERROR_MESSAGE();
	-------------------------------------------------------------------------------------------------------------------------------
		EXEC sp_P_TMS_INSERT_ERROR_DES @LAST_UPDATED_BY,'TMS',@ATTRIBUTE1,@ERROR_MESSAGE,@ATTRIBUTE2;
	-------------------------------------------------------------------------------------------------------------------------------
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_DELETE_PROJECT_DEFINATION]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- AUTHOR:  AMIT SHUDDHALWAR  
-- CREATE DATE: 19-09-2024  
-- DESCRIPTION: DELETE THE DETAILS OF TASK RECURSIVE DETAILS  
-- =============================================  
CREATE PROCEDURE [dbo].[SP_DELETE_PROJECT_DEFINATION]
  -- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE  
	@MKEY            INT,
	@LAST_UPDATED_BY NUMERIC,
	@ATTRIBUTE1	  VARCHAR(100) = NULL, -- USER ID
	@ATTRIBUTE2	  VARCHAR(100) = NULL, -- FORM NAME
	@ATTRIBUTE3	  VARCHAR(100) = NULL -- FUCNTION/METHOD NAME
AS
  BEGIN
      -- SET NOCOUNT ON ADDED TO PREVENT EXTRA RESULT SETS FROM  
      -- INTERFERING WITH SELECT STATEMENTS.  
      SET NOCOUNT ON;

		BEGIN TRY
---------------------------------------------------------------------------------------------------------------------  
			INSERT INTO PROJECT_HDR_H
				(Hist_date
				,MKEY
				,BUILDING_MKEY
				,PROJECT_ABBR
				,PROPERTY
				,LEGAL_ENTITY
				,PROJECT_ADDRESS
				,BUILDING_CLASSIFICATION
				,BUILDING_STANDARD
				,STATUTORY_AUTHORITY
				,CREATED_BY
				,CREATION_DATE
				,LAST_UPDATED_BY
				,LAST_UPDATE_DATE
				,DELETE_FLAG)
			SELECT GETDATE()
				,MKEY
				,BUILDING_MKEY
				,PROJECT_ABBR
				,PROPERTY
				,LEGAL_ENTITY
				,PROJECT_ADDRESS
				,BUILDING_CLASSIFICATION
				,BUILDING_STANDARD
				,STATUTORY_AUTHORITY
				,CREATED_BY
				,CREATION_DATE
				,LAST_UPDATED_BY
				,LAST_UPDATE_DATE
				,DELETE_FLAG
			FROM   PROJECT_HDR
			WHERE  MKEY = @MKEY;
---------------------------------------------------------------------------------------------------------------------  
			UPDATE PROJECT_HDR
			SET  DELETE_FLAG = 'Y',
				LAST_UPDATED_BY = @LAST_UPDATED_BY,
				LAST_UPDATE_DATE = GETDATE()
			WHERE  MKEY = @MKEY;
---------------------------------------------------------------------------------------------------------------------
		END TRY
		BEGIN CATCH
			SELECT ERROR_NUMBER()    AS ERRORNUMBER,
			ERROR_SEVERITY()  AS ERRORSEVERITY,
			ERROR_STATE()     AS ERRORSTATE,
			ERROR_PROCEDURE() AS ERRORPROCEDURE,
			ERROR_LINE()      AS ERRORLINE,
			ERROR_MESSAGE()   AS ERRORMESSAGE;
			-------------------------------------------------------------------------------------------------------------------------------
			DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
			SET @ERROR_MESSAGE = ERROR_MESSAGE();
			-------------------------------------------------------------------------------------------------------------------------------
			EXEC sp_P_TMS_INSERT_ERROR_DES @ATTRIBUTE1,'TMS',@ATTRIBUTE2,@ERROR_MESSAGE,@ATTRIBUTE3;
		-------------------------------------------------------------------------------------------------------------------------------
		END CATCH
  END 
GO
/****** Object:  StoredProcedure [dbo].[SP_DELETE_PROJECT_TRL_APPROVAL_ABBR]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Description:	TO DELETE THE PROJECT SUBTASK
-- =============================================
CREATE PROCEDURE [dbo].[SP_DELETE_PROJECT_TRL_APPROVAL_ABBR]
	-- Add the parameters for the stored procedure here
	 @HEADER_MKEY INT
	,@LAST_UPDATED_BY int = NULL
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
	DECLARE @DCOUNT INT;
			select @DCOUNT = COUNT(*) 
			from PROJECT_TRL_APPROVAL_ABBR 
			where 1= 1 
			AND HEADER_MKEY = @HEADER_MKEY
			AND DELETE_FLAG = 'N' and STATUS not in (lower('Created'),lower('Initiated')) 
		
		IF (@DCOUNT > 0)
		BEGIN
			INSERT INTO  PROJECT_TRL_APPROVAL_ABBR_H
			(HIST_DATE
			,HEADER_MKEY
			,SEQ_NO
			,APPROVAL_MKEY
			,APPROVAL_ABBRIVATION
			,APPROVAL_DESCRIPTION
			,DAYS_REQUIRED
			,DEPARTMENT
			,JOB_ROLE
			,RESPOSIBLE_EMP_MKEY
			,OUTPUT_DOCUMENT
			,TENTATIVE_START_DATE
			,TENTATIVE_END_DATE
			,STATUS
			,ATTRIBUTE1
			,ATTRIBUTE2
			,ATTRIBUTE3
			,ATTRIBUTE4
			,ATTRIBUTE5
			,CREATED_BY
			,CREATION_DATE
			,LAST_UPDATED_BY
			,LAST_UPDATE_DATE
			,DELETE_FLAG)
		SELECT
			GETDATE()
			,HEADER_MKEY
			,SEQ_NO
			,APPROVAL_MKEY
			,APPROVAL_ABBRIVATION
			,APPROVAL_DESCRIPTION
			,DAYS_REQUIRED
			,DEPARTMENT
			,JOB_ROLE
			,RESPOSIBLE_EMP_MKEY
			,OUTPUT_DOCUMENT
			,TENTATIVE_START_DATE
			,TENTATIVE_END_DATE
			,STATUS
			,ATTRIBUTE1
			,ATTRIBUTE2
			,ATTRIBUTE3
			,ATTRIBUTE4
			,ATTRIBUTE5
			,CREATED_BY
			,CREATION_DATE
			,LAST_UPDATED_BY
			,LAST_UPDATE_DATE
			,DELETE_FLAG
		FROM PROJECT_TRL_APPROVAL_ABBR
		WHERE HEADER_MKEY = @HEADER_MKEY 
		AND DELETE_FLAG = 'N' 
		AND STATUS not in (lower('Created'),lower('Initiated'));

-------------------------------------------------------------------------------------------------------------------------------
			-- Update statements for procedure here
			UPDATE PROJECT_TRL_APPROVAL_ABBR 
			SET DELETE_FLAG = 'Y'
			WHERE HEADER_MKEY = @HEADER_MKEY 
			AND DELETE_FLAG = 'N' 
			AND STATUS not in (lower('Created'),lower('Initiated'));
		END
-------------------------------------------------------------------------------------------------------------------------------
	END TRY
	BEGIN CATCH
	-------------------------------------------------------------------------------------------------------------------------------          
		SELECT ERROR_NUMBER()    AS ERRORNUMBER,
				ERROR_SEVERITY()  AS ERRORSEVERITY,
				ERROR_STATE()     AS ERRORSTATE,
				ERROR_PROCEDURE() AS ERRORPROCEDURE,
				ERROR_LINE()      AS ERRORLINE,
				ERROR_MESSAGE()   AS ERRORMESSAGE;
	-------------------------------------------------------------------------------------------------------------------------------
		DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
		SET @ERROR_MESSAGE = ERROR_MESSAGE();
	-------------------------------------------------------------------------------------------------------------------------------
		EXEC sp_P_TMS_INSERT_ERROR_DES @LAST_UPDATED_BY,'TMS','DELETE PROJECT ABBR',@ERROR_MESSAGE,'DELETE';
	-------------------------------------------------------------------------------------------------------------------------------
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_DELETE_TASK_RECURSIVE_DETAILS]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================  
-- AUTHOR:  AMIT SHUDDHALWAR  
-- CREATE DATE: 19-09-2024  
-- DESCRIPTION: DELETE THE DETAILS OF TASK RECURSIVE DETAILS  
-- =============================================  
CREATE PROCEDURE [dbo].[SP_DELETE_TASK_RECURSIVE_DETAILS]
  -- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE  
@MKEY            INT,
@LAST_UPDATED_BY NUMERIC,
@ATTRIBUTE14  VARCHAR(100) = NULL, -- USER ID
@ATTRIBUTE15  VARCHAR(100) = NULL, -- FORM NAME
@ATTRIBUTE16  VARCHAR(100) = NULL -- FUCNTION/METHOD NAME
AS
  BEGIN
      -- SET NOCOUNT ON ADDED TO PREVENT EXTRA RESULT SETS FROM  
      -- INTERFERING WITH SELECT STATEMENTS.  
      SET NOCOUNT ON;

      BEGIN TRY
          IF ( (SELECT COUNT(*)
                FROM   TASK_RECURSIVE_HDR
                WHERE  MKEY = @MKEY AND DELETE_FLAG = 'N') > 0 )
            BEGIN
                ---------------------------------------------------------------------------------------------------------------------  
                INSERT INTO TASK_RECURSIVE_HDR_H
                            (TASK_NAME,
                             TASK_DESCRIPTION,
                             TERM,
CAREGORY,
PROJECT_ID,
SUB_PROJECT_ID,
ASSIGNED_TO,
TAGS,
NO_DAYS,
                             [START_DATE],
                             ENDS,
END_DATE,
                             CREATED_BY,
                             CREATION_DATE,
                             LAST_UPDATED_BY,
                             LAST_UPDATE_DATE,
DELETE_FLAG)
                SELECT TASK_NAME,
                       TASK_DESCRIPTION,
                       TERM,
  CAREGORY,
PROJECT_ID,
SUB_PROJECT_ID,
ASSIGNED_TO,
TAGS,
NO_DAYS,
                       [START_DATE],
                       ENDS,
  END_DATE,
                       CREATED_BY,
                       CREATION_DATE,
                       LAST_UPDATED_BY,
                       LAST_UPDATE_DATE,
  DELETE_FLAG
                FROM   TASK_RECURSIVE_HDR
                WHERE  MKEY = @MKEY;

                ---------------------------------------------------------------------------------------------------------------------  
                UPDATE TASK_RECURSIVE_HDR
                SET    DELETE_FLAG = 'Y',
                       LAST_UPDATED_BY = @LAST_UPDATED_BY,
                       LAST_UPDATE_DATE = GETDATE()
                WHERE  MKEY = @MKEY;

                ---------------------------------------------------------------------------------------------------------------------  
                INSERT INTO TASK_RECURSIVE_TRL_H
                            (MKEY,
SR_NO,
                             TERM_TYPE,
                             CREATED_BY,
                             CREATION_DATE,
                             LAST_UPDATED_BY,
                             LAST_UPDATE_DATE,
                             ATTRIBUTE1,
                             ATTRIBUTE2,
                             ATTRIBUTE3,
                             ATTRIBUTE4,
                             ATTRIBUTE5,
                             ATTRIBUTE6,
                             ATTRIBUTE7,
ATTRIBUTE8,
    ATTRIBUTE9,
    ATTRIBUTE10,
    ATTRIBUTE11,
    ATTRIBUTE12,
ATTRIBUTE13,DELETE_FLAG)
                SELECT MKEY,
SR_NO,
                       TERM_TYPE,
                       CREATED_BY,
                       CREATION_DATE,
                       LAST_UPDATED_BY,
                       LAST_UPDATE_DATE,
                       ATTRIBUTE1,
                       ATTRIBUTE2,
                       ATTRIBUTE3,
                       ATTRIBUTE4,
                       ATTRIBUTE5,
                       ATTRIBUTE6,
                       ATTRIBUTE7,
  ATTRIBUTE8,
  ATTRIBUTE9,
  ATTRIBUTE10,
  ATTRIBUTE11,
  ATTRIBUTE12,
  ATTRIBUTE13,DELETE_FLAG
                FROM   TASK_RECURSIVE_TRL
                WHERE  MKEY = @MKEY;
---------------------------------------------------------------------------------------------------------------------  
                UPDATE TASK_RECURSIVE_TRL
                SET    DELETE_FLAG = 'Y',
                       LAST_UPDATED_BY = @LAST_UPDATED_BY,
                       LAST_UPDATE_DATE = GETDATE()
                WHERE  MKEY = @MKEY;
---------------------------------------------------------------------------------------------------------------------  
---------------------------------------------------------------------------------------------------------------------
 INSERT INTO TASK_RECURSIVE_MEDIA_TRL_H
 (MKEY,SR_NO,
 TASK_MKEY,
 FILE_NAME,
 FILE_PATH,
 CREATED_BY,
 CREATION_DATE,
 LAST_UPDATED_BY,
 LAST_UPDATE_DATE,
 DELETE_FLAG
 )
SELECT MKEY,SR_NO,
 TASK_MKEY,
 FILE_NAME,
 FILE_PATH,
 CREATED_BY,
 CREATION_DATE,
 LAST_UPDATED_BY,
 LAST_UPDATE_DATE,
 DELETE_FLAG
FROM TASK_RECURSIVE_MEDIA_TRL
WHERE  TASK_MKEY = @MKEY
AND DELETE_FLAG = 'N';
---------------------------------------------------------------------------------------------------------------------
UPDATE TASK_RECURSIVE_MEDIA_TRL
SET DELETE_FLAG = 'Y'
WHERE TASK_MKEY = @MKEY;
---------------------------------------------------------------------------------------------------------------------
            END
      END TRY
      BEGIN CATCH
          SELECT ERROR_NUMBER()    AS ERRORNUMBER,
                 ERROR_SEVERITY()  AS ERRORSEVERITY,
                 ERROR_STATE()     AS ERRORSTATE,
                 ERROR_PROCEDURE() AS ERRORPROCEDURE,
                 ERROR_LINE()      AS ERRORLINE,
                 ERROR_MESSAGE()   AS ERRORMESSAGE;
-------------------------------------------------------------------------------------------------------------------------------
DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
SET @ERROR_MESSAGE = ERROR_MESSAGE();
-------------------------------------------------------------------------------------------------------------------------------
EXEC sp_P_TMS_INSERT_ERROR_DES @ATTRIBUTE14,'TMS',@ATTRIBUTe15,@ERROR_MESSAGE,@ATTRIBUTE16;
-------------------------------------------------------------------------------------------------------------------------------
      END CATCH
  END


------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_ABBR_AND_SHORT]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- ALTER date: <ALTER Date,,>
-- Description:	<Description,,>
--EXEC SP_GET_ABBR_AND_SHORT 201,301,12
-- =============================================
CREATE PROCEDURE [dbo].[SP_GET_ABBR_AND_SHORT] 
	-- Add the parameters for the stored procedure here
	@BUILDING_TYPE VARCHAR(50),
	@BUILDING_STANDARD VARCHAR(50),
	@STATUTORY_AUTHORITY VARCHAR(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT HDR.MKEY,MAIN_ABBR +' '+ SHORT_DESCRIPTION AS ABBR_SHORT_DESC,BUILDING_TYPE,
	BUILDING_STANDARD ,STATUTORY_AUTHORITY,SHORT_DESCRIPTION,LONG_DESCRIPTION,MAIN_ABBR,AUTHORITY_DEPARTMENT,RESPOSIBLE_EMP_MKEY,JOB_ROLE,
	DAYS_REQUIERD,SANCTION_AUTHORITY  ,STUFF((SELECT DISTINCT ', ' + CAST(ENDLIST2.DOCUMENT_NAME AS VARCHAR(MAX))
	FROM APPROVAL_TEMPLATE_TRL_ENDRESULT ENDLIST2 WHERE ENDLIST2.MKEY = HDR.MKEY FOR XML PATH('')), 1, 1, '') AS END_RESULT_DOC
	FROM [dbo].[APPROVAL_TEMPLATE_HDR] HDR LEFT JOIN APPROVAL_TEMPLATE_TRL_SUBTASK SUBTASK ON HDR.MKEY = SUBTASK.HEADER_MKEY
	WHERE BUILDING_TYPE = @BUILDING_TYPE AND BUILDING_STANDARD = @BUILDING_STANDARD
	AND STATUTORY_AUTHORITY = @STATUTORY_AUTHORITY AND HDR.DELETE_FLAG = 'N' GROUP BY HDR.MKEY,MAIN_ABBR,SHORT_DESCRIPTION,BUILDING_TYPE,BUILDING_STANDARD
	,STATUTORY_AUTHORITY,SHORT_DESCRIPTION,LONG_DESCRIPTION,MAIN_ABBR,AUTHORITY_DEPARTMENT,RESPOSIBLE_EMP_MKEY,JOB_ROLE,DAYS_REQUIERD
	,SANCTION_AUTHORITY
END
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_APPROVAL_CHECKLIST]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_GET_APPROVAL_CHECKLIST]
	-- Add the parameters for the stored procedure here
	@MKEY INT, 
	@DOCUMENT_NAME VARCHAR(200),
	@CREATED_BY INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- Insert statements for procedure here
	BEGIN TRY
    -- Insert statements for procedure here
		DECLARE @COUNT INT;
		SELECT @COUNT = COUNT(*) FROM APPROVAL_TEMPLATE_TRL_CHECKLIST WHERE MKEY = @MKEY AND DOCUMENT_NAME = @DOCUMENT_NAME;
		SELECT @COUNT;
	END TRY  
	BEGIN CATCH  
	-------------------------------------------------------------------------------------------------------------------------------            
	SELECT ERROR_NUMBER()    AS ERRORNUMBER,  
	ERROR_SEVERITY()  AS ERRORSEVERITY,  
	ERROR_STATE()     AS ERRORSTATE,  
	ERROR_PROCEDURE() AS ERRORPROCEDURE,  
	ERROR_LINE()      AS ERRORLINE,  
	ERROR_MESSAGE()   AS ERRORMESSAGE;  
	-------------------------------------------------------------------------------------------------------------------------------  
	DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;  
	SET @ERROR_MESSAGE = ERROR_MESSAGE();  
	-------------------------------------------------------------------------------------------------------------------------------  
	EXEC sp_P_TMS_INSERT_ERROR_DES @CREATED_BY,'TMS','CreateTASK',@ERROR_MESSAGE,'CreateApprovalTemplateAsync';  
	-------------------------------------------------------------------------------------------------------------------------------  
	END CATCH  
END



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_APPROVAL_ENDLIST]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_GET_APPROVAL_ENDLIST]
	-- Add the parameters for the stored procedure here
	@MKEY INT, 
	@DOCUMENT_NAME VARCHAR(200),
	@CREATED_BY INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- Insert statements for procedure here
	BEGIN TRY
    -- Insert statements for procedure here
		DECLARE @COUNT INT;
		SELECT @COUNT = COUNT(*) FROM APPROVAL_TEMPLATE_TRL_ENDRESULT WHERE MKEY = @MKEY AND DOCUMENT_NAME = @DOCUMENT_NAME;
		SELECT @COUNT;
	END TRY  
	BEGIN CATCH  
	-------------------------------------------------------------------------------------------------------------------------------            
	SELECT ERROR_NUMBER()    AS ERRORNUMBER,  
	ERROR_SEVERITY()  AS ERRORSEVERITY,  
	ERROR_STATE()     AS ERRORSTATE,  
	ERROR_PROCEDURE() AS ERRORPROCEDURE,  
	ERROR_LINE()      AS ERRORLINE,  
	ERROR_MESSAGE()   AS ERRORMESSAGE;  
	-------------------------------------------------------------------------------------------------------------------------------  
	DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;  
	SET @ERROR_MESSAGE = ERROR_MESSAGE();  
	-------------------------------------------------------------------------------------------------------------------------------  
	EXEC sp_P_TMS_INSERT_ERROR_DES @CREATED_BY,'TMS','CreateTASK',@ERROR_MESSAGE,'CreateApprovalTemplateAsync';  
	-------------------------------------------------------------------------------------------------------------------------------  
	END CATCH  
END

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_APPROVAL_SUBTASK_TREE_VIEW_LIST]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:    Amit Shuddhalwar
-- Create date: 21-11-2024
-- Description:  To get list of Approval Subtask List
--  EXEC SP_GET_APPROVAL_SUBTASK_TREE_VIEW_LIST 221,  245,  248
-- =============================================
CREATE PROCEDURE [dbo].[SP_GET_APPROVAL_SUBTASK_TREE_VIEW_LIST]
  -- Add the parameters for the stored procedure here
  @BUILDING_TYPE       INT,
  @BUILDING_STANDARD   INT,
  @STATUTORY_AUTHORITY INT
AS
  BEGIN
      -- SET NOCOUNT ON added to prevent extra result sets from
      -- interfering with SELECT statements.
      SET nocount ON;


	 -- 	IF OBJECT_ID('tempdb..##TEMP_HDR_MKEY') IS NOT NULL
		--		BEGIN
		--			DROP TABLE ##TEMP_HDR_MKEY;
		--		END
		--		CREATE TABLE ##TEMP_HDR_MKEY(HEADER_MKEY INT,SUBTASK_PARENT_ID INT,TASK_NO nvarchar(10),SEQ_NO nvarchar(10), MAIN_ABBR NVARCHAR(500)
		--		,ABBR_SHORT_DESC NVARCHAR(500),LONG_DESCRIPTION NVARCHAR(MAX),DAYS_REQUIERD INT,AUTHORITY_DEPARTMENT INT,JOB_ROLE INT,
		--		RESPOSIBLE_EMP_MKEY	INT,END_RESULT_DOC NVARCHAR(MAX),SEQ_ORDER INT);
			
		--DECLARE @HEADER_MKEY INT,@MAIN_ABBR VARCHAR(100),@SEQ_NO NVARCHAR(10),@SUBTASK_MKEY INT,@SUBTASK_ABBR NVARCHAR(500), @TASK_NO INT
		--,@ABBR_SHORT_DESC NVARCHAR(500),@LONG_DESCRIPTION NVARCHAR(MAX),@DAYS_REQUIERD INT,@AUTHORITY_DEPARTMENT INT,@JOB_ROLE INT,
		--		@RESPOSIBLE_EMP_MKEY INT,@END_RESULT_DOC NVARCHAR(MAX),@SEQ_ORDER INT,@HDR_SEQ INT = 0;
		
		--DECLARE CURSOR_HDR_TASK   CURSOR FOR
		--	SELECT MKEY,MAIN_ABBR,SHORT_DESCRIPTION,LONG_DESCRIPTION,AUTHORITY_DEPARTMENT,RESPOSIBLE_EMP_MKEY,JOB_ROLE,DAYS_REQUIERD,END_RESULT_DOC,SEQ_ORDER 
		--	FROM APPROVAL_TEMPLATE_HDR 
		--	WHERE delete_flag = 'N' 
  --                    AND BUILDING_TYPE = 221
  --                    AND BUILDING_STANDARD = 245
  --                    AND STATUTORY_AUTHORITY = 248 
		--			  order by 1;
		--SET @HDR_SEQ = 0;
		--OPEN CURSOR_HDR_TASK
		--	FETCH NEXT FROM CURSOR_HDR_TASK INTO @HEADER_MKEY,@MAIN_ABBR, @ABBR_SHORT_DESC,@LONG_DESCRIPTION,@AUTHORITY_DEPARTMENT,@RESPOSIBLE_EMP_MKEY,@JOB_ROLE,@DAYS_REQUIERD
		--	,@END_RESULT_DOC,@SEQ_ORDER;
		--WHILE @@FETCH_STATUS = 0
		--BEGIN
		--	DECLARE @COUNT_TRL_MKEY INT, @SUB_MKEY INT,@SUB_TASK_PARENT INT,@SUB_TASK INT;
		--	PRINT 'BEFORE @HDR_SEQ :' + CONVERT(VARCHAR(10),@HDR_SEQ )
		--	PRINT '@MAIN_ABBR: ' + @MAIN_ABBR ;
		--	SET @HDR_SEQ = @HDR_SEQ + 1;
		--	PRINT 'AFTER @HDR_SEQ :' + CONVERT(VARCHAR(10),@HDR_SEQ )
			
		--	SET @TASK_NO = 0;
				

		--	DECLARE CURSOR_SUB_TASK   CURSOR FOR
		--	SELECT HEADER_MKEY,SEQ_NO,SUBTASK_ABBR,SUBTASK_MKEY FROM APPROVAL_TEMPLATE_TRL_SUBTASK WHERE DELETE_FLAG = 'N' AND SUBTASK_PARENT_ID = @HEADER_MKEY;
		--	OPEN CURSOR_SUB_TASK   
		--		FETCH NEXT FROM CURSOR_SUB_TASK  INTO @HEADER_MKEY,@SEQ_NO,@SUBTASK_ABBR,@SUBTASK_MKEY;

		--	WHILE @@FETCH_STATUS = 0
		--	BEGIN
		--		SET @TASK_NO = @TASK_NO + 1;
		--		print '1:' + CONVERT(varchar(10),@HDR_SEQ) +'.'+ CONVERT(varchar(10),@TASK_NO);
		--			----------------------------------------------------------------------------------------------------------------
		--		INSERT INTO ##TEMP_HDR_MKEY(HEADER_MKEY ,SUBTASK_PARENT_ID ,TASK_NO ,SEQ_NO , MAIN_ABBR,ABBR_SHORT_DESC ,LONG_DESCRIPTION ,DAYS_REQUIERD ,AUTHORITY_DEPARTMENT 
		--		,JOB_ROLE ,RESPOSIBLE_EMP_MKEY	,END_RESULT_DOC ,SEQ_ORDER) 
				
		--		VALUES (@SUBTASK_MKEY, @HEADER_MKEY,@TASK_NO,@SEQ_NO,@SUBTASK_ABBR,@ABBR_SHORT_DESC,@LONG_DESCRIPTION,@DAYS_REQUIERD,@AUTHORITY_DEPARTMENT
		--		,@JOB_ROLE,@RESPOSIBLE_EMP_MKEY,@END_RESULT_DOC,@SEQ_ORDER);
				
		--		PRINT  'pRINT :'+ CONVERT(NVARCHAR(100),@HEADER_MKEY) + ' '+ CONVERT(NVARCHAR(100),@SEQ_NO)+ ' '+CONVERT(NVARCHAR(100),@SUBTASK_MKEY)+ ' '+CONVERT(NVARCHAR(100),@SUBTASK_ABBR);

		--		FETCH NEXT FROM CURSOR_SUB_TASK
		--		INTO @HEADER_MKEY,@SEQ_NO,@SUBTASK_ABBR,@SUBTASK_MKEY;
		--	END
		
		--	CLOSE CURSOR_SUB_TASK;
		--	DEALLOCATE CURSOR_SUB_TASK;
			

		--	FETCH NEXT FROM CURSOR_HDR_TASK INTO @HEADER_MKEY,@MAIN_ABBR, @ABBR_SHORT_DESC,@LONG_DESCRIPTION,@AUTHORITY_DEPARTMENT,@RESPOSIBLE_EMP_MKEY,@JOB_ROLE,@DAYS_REQUIERD
		--	,@END_RESULT_DOC,@SEQ_ORDER
		--END
		
		--CLOSE CURSOR_HDR_TASK;
		--DEALLOCATE CURSOR_HDR_TASK;
		--SELECT * FROM ##TEMP_HDR_MKEY;

   --   WITH APPROVALTASK
   --        AS (SELECT HDR.MKEY      HEADER_MKEY,
   --                   HDR.MKEY      SUBTASK_PARENT_ID,
   --                   HDR.MAIN_ABBR AS SUBTASK_ABBR,
   --                   DELETE_FLAG
   --            FROM   APPROVAL_TEMPLATE_HDR HDR
   --            WHERE  1 = 1
   --                   AND HDR.DELETE_FLAG = 'N'
   --                   AND BUILDING_TYPE = @BUILDING_TYPE
   --                   AND BUILDING_STANDARD = @BUILDING_STANDARD
   --                   AND STATUTORY_AUTHORITY = @STATUTORY_AUTHORITY
   --            UNION ALL
   --            SELECT SUB.HEADER_MKEY  AS HEADER_MKEY,
   --                   SUB.SUBTASK_MKEY SUBTASK_PARENT_ID,
   --                   SUB.SUBTASK_ABBR,
   --                   SUB.DELETE_FLAG
   --            FROM   APPROVAL_TEMPLATE_TRL_SUBTASK SUB
   --                   JOIN APPROVALTASK
   --                     ON SUB.HEADER_MKEY = APPROVALTASK.SUBTASK_PARENT_ID and APPROVALTASK.SUBTASK_ABBR = SUB.SUBTASK_ABBR
   --            WHERE  SUB.DELETE_FLAG = 'N'
   --                   AND APPROVALTASK.DELETE_FLAG = 'N')
   --   SELECT 
			--	AP.SUBTASK_PARENT_ID as HEADER_MKEY,
			--	--AP.HEADER_MKEY as SUBTASK_PARENT_ID ,
   --          --CASE WHEN AP.HEADER_MKEY = AP.SUBTASK_PARENT_ID THEN 0 ELSE  AP.HEADER_MKEY END SUBTASK_PARENT_ID,
             
   --         CASE WHEN  AP.SUBTASK_PARENT_ID = AP.HEADER_MKEY THEN 0 ELSE AP.SUBTASK_PARENT_ID END SUBTASK_PARENT_ID,
   --          CONVERT(NVARCHAR(100), ISNULL(SEQ_NO, MAIN_ABBR))
   --          AS TASK_NO,
   --          ISNULL(SUB.SEQ_NO, 1)
   --          AS SEQ_NO,
   --          HDR.MAIN_ABBR,
   --          ISNULL(SUB.SUBTASK_ABBR + ' '
   --                 +
			--ISNULL(HDR.SHORT_DESCRIPTION, HDR.LONG_DESCRIPTION), HDR.LONG_DESCRIPTION)
			--		AS
			--ABBR_SHORT_DESC,
			--HDR.LONG_DESCRIPTION,
			--HDR.DAYS_REQUIERD,
			--HDR.AUTHORITY_DEPARTMENT,
			--HDR.JOB_ROLE,
			--HDR.RESPOSIBLE_EMP_MKEY,
			--STUFF((SELECT DISTINCT ', '
   --                          + CAST(ENDLIST2.DOCUMENT_NAME AS VARCHAR(MAX))
   --          FROM   APPROVAL_TEMPLATE_TRL_ENDRESULT ENDLIST2
   --          WHERE  ENDLIST2.MKEY = HDR.MKEY
   --          FOR XML PATH('')), 1, 1, '')
   --          AS
   --          END_RESULT_DOC,
   --   AP.DELETE_FLAG
   --   FROM   APPROVALTASK AP
   --          JOIN APPROVAL_TEMPLATE_HDR HDR
   --            ON AP.SUBTASK_PARENT_ID = HDR.MKEY
   --          LEFT JOIN APPROVAL_TEMPLATE_TRL_SUBTASK SUB
   --                 ON HDR.MKEY = SUB.SUBTASK_MKEY
   --                    AND AP.DELETE_FLAG = 'N'
   --                    AND SUB.DELETE_FLAG = 'N'
   --   WHERE  1 = 1
   --          AND AP.DELETE_FLAG = 'N'
   --          AND HDR.DELETE_FLAG = 'N'
   --   GROUP  BY AP.HEADER_MKEY,
   --             AP.SUBTASK_PARENT_ID,
   --             SUB.SEQ_NO,
   --             HDR.MAIN_ABBR,
   --             HDR.SHORT_DESCRIPTION,
   --             HDR.LONG_DESCRIPTION,
   --             HDR.AUTHORITY_DEPARTMENT,
   --             HDR.JOB_ROLE,
   --             HDR.RESPOSIBLE_EMP_MKEY,
   --             SUB.SUBTASK_ABBR,
   --             HDR.DAYS_REQUIERD,
   --             HDR.MKEY,
   --             HDR.DELETE_FLAG,
   --             AP.DELETE_FLAG
   --   ORDER  BY AP.HEADER_MKEY,
   --             AP.SUBTASK_PARENT_ID

  SELECT 
  --CASE WHEN ISNULL(trl.SUBTASK_PARENT_ID,0)=0 THEN HDR.MKEY ELSE   ISNULL(trl.SUBTASK_PARENT_ID,0)END AS HEADER_MKEY
  HDR.MKEY AS HEADER_MKEY
  ,CASE WHEN ISNULL(trl.SUBTASK_mkey,0) in (20,22,33,38) then 0 else ISNULL(trl.SUBTASK_PARENT_ID,0) end as SUBTASK_PARENT_ID
  ,ISNULL(SEQ_NO,MAIN_ABBR) AS TASK_NO
  --TASK_NO,
  ,SEQ_NO
  , MAIN_ABBR
  --,ISNULL(TRL.SUBTASK_ABBR + ' ' + ISNULL(HDR.SHORT_DESCRIPTION,HDR.LONG_DESCRIPTION),HDR.LONG_DESCRIPTION) AS ABBR_SHORT_DESC
  ,HDR.SHORT_DESCRIPTION AS ABBR_SHORT_DESC
  ,HDR.LONG_DESCRIPTION, HDR.DAYS_REQUIERD,
  HDR.AUTHORITY_DEPARTMENT,HDR.JOB_ROLE,HDR.RESPOSIBLE_EMP_MKEY,
  STUFF((SELECT DISTINCT ', ' + CAST(ENDLIST2.DOCUMENT_NAME AS VARCHAR(MAX))
  FROM APPROVAL_TEMPLATE_TRL_ENDRESULT ENDLIST2    WHERE ENDLIST2.MKEY =
  HDR.MKEY      FOR XML PATH('')), 1, 1, '') AS END_RESULT_DOC
  ,isnull(HDR.SEQ_ORDER,'') as SEQ_ORDER
  FROM APPROVAL_TEMPLATE_HDR HDR LEFT JOIN APPROVAL_TEMPLATE_TRL_SUBTASK TRL ON HDR.MKEY = TRL.SUBTASK_MKEY
  WHERE BUILDING_TYPE = @BUILDING_TYPE
  AND BUILDING_STANDARD = @BUILDING_STANDARD 
  and STATUTORY_AUTHORITY = @STATUTORY_AUTHORITY
  --and  HDR.mkey!=49
  --AND HDR.DELETE_FLAG = 'N'
  --AND TRL.DELETE_FLAG = 'N'
  Group By HDR.MKEY,trl.SUBTASK_PARENT_ID,SEQ_NO,MAIN_ABBR,TRL.SUBTASK_ABBR,HDR.SHORT_DESCRIPTION,HDR.LONG_DESCRIPTION, HDR.DAYS_REQUIERD
  ,HDR.AUTHORITY_DEPARTMENT,HDR.JOB_ROLE,HDR.RESPOSIBLE_EMP_MKEY,SUBTASK_MKEY,HDR.SEQ_ORDER
  ORDER BY 5;
  --2,1;
  --ORDER BY HDR.MKEY DESC,SUBTASK_MKEY ASC;
  
  
  
  --SELECT 
  --HDR2.MKEY AS HEADER_MKEY,ISNULL(trl.SUBTASK_PARENT_ID,0) as SUBTASK_PARENT_ID--ISNULL(SEQ_NO,MAIN_ABBR) AS TASK_NO 
  --,CONVERT(VARCHAR,HDR2.MKEY)+'.'+ SEQ_NO AS TASK_NO
  --,MAIN_ABBR,
  --TRL.SUBTASK_ABBR + ' ' + HDR2.SHORT_DESCRIPTION AS ABBR_SHORT_DESC,HDR2.LONG_DESCRIPTION
  --,HDR2.DAYS_REQUIERD,
  --HDR2.AUTHORITY_DEPARTMENT,HDR2.JOB_ROLE,HDR2.RESPOSIBLE_EMP_MKEY,STUFF((
  --   SELECT DISTINCT ', ' + CAST(ENDLIST2.DOCUMENT_NAME AS VARCHAR(MAX))
  --FROM APPROVAL_TEMPLATE_TRL_ENDRESULT ENDLIST2    WHERE ENDLIST2.MKEY =
  --HDR2.MKEY      FOR XML PATH('')), 1, 1, '') AS END_RESULT_DOC
  --FROM APPROVAL_TEMPLATE_HDR HDR2 INNER JOIN
  --APPROVAL_TEMPLATE_TRL_SUBTASK TRL ON HDR2.MKEY = TRL.SUBTASK_PARENT_ID
  --LEFT JOIN APPROVAL_TEMPLATE_TRL_ENDRESULT ENDLIST1 ON ENDLIST1.MKEY =
  --HDR2.MKEY
  --WHERE BUILDING_TYPE = @BUILDING_TYPE
  --AND BUILDING_STANDARD = @BUILDING_STANDARD and STATUTORY_AUTHORITY =
  --@STATUTORY_AUTHORITY
  --AND HDR2.DELETE_FLAG = 'N'
  --GROUP BY  HDR2.MKEY,trl.SUBTASK_PARENT_ID,SEQ_NO,MAIN_ABBR, TRL.SUBTASK_ABBR + ' ' +
  --HDR2.SHORT_DESCRIPTION,HDR2.LONG_DESCRIPTION,HDR2.DAYS_REQUIERD,HDR2.AUTHORITY_DEPARTMENT
  --,HDR2.JOB_ROLE,HDR2.RESPOSIBLE_EMP_MKEY ORDER BY HDR2.MKEY  desc;
  END 
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_APPROVAL_SUBTASK_TREE_VIEW_LIST_testing]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 
 --exec SP_GET_APPROVAL_SUBTASK_TREE_VIEW_LIST_testing 201,301,12
 CREATE PROCEDURE [dbo].[SP_GET_APPROVAL_SUBTASK_TREE_VIEW_LIST_testing]
	-- Add the parameters for the stored procedure here
	@BUILDING_TYPE INT,
	@BUILDING_STANDARD INT,
	@STATUTORY_AUTHORITY INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY
	BEGIN
		
		DECLARE @HMKEY INT,@HEADER_MKEY INT,@MAIN_ABBR VARCHAR(100);
		DECLARE CURSOR_SUB_TASK   CURSOR FOR
			SELECT MKEY FROM APPROVAL_TEMPLATE_HDR WHERE delete_flag = 'N' order by 1 desc;
		OPEN CURSOR_SUB_TASK
			FETCH NEXT FROM CURSOR_SUB_TASK INTO @HMKEY;
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DECLARE @COUNT_TRL_MKEY INT, @SUB_MKEY INT,@SUB_TASK_PARENT INT,@SUB_TASK INT;
			--------------------------------------------------------------------------------------------------------------
			--DROP TABLE #TEMP_HDR_MKEY;
			--SELECT * #TEMP_HDR_MKEY
			IF OBJECT_ID('tempdb..##TEMP_HDR_MKEY') IS NOT NULL
            BEGIN
                DROP TABLE ##TEMP_HDR_MKEY;
            END
			CREATE TABLE ##TEMP_HDR_MKEY(MKEY INT);
			-- INSERTING THE HEADER MKEY IN ##TEMP_HDR_MKEY
			--------------------------------------------------------------------------------------------------------------
			INSERT INTO ##TEMP_HDR_MKEY(MKEY) VALUES (@HMKEY);
			--------------------------------------------------------------------------------------------------------------
			-- TO CHECK HEADER MKEY IS PRESENT IN SUBTASK_MKEY
			-- IF PRESENT THEN THIS IS SUBTASK_MKEY
			SELECT @COUNT_TRL_MKEY = COUNT(*) FROM APPROVAL_TEMPLATE_TRL_SUBTASK WHERE SUBTASK_MKEY IN (SELECT MKEY FROM ##TEMP_HDR_MKEY);
			--------------------------------------------------------------------------------------------------------------
			IF (@COUNT_TRL_MKEY > 0)
			BEGIN 
				-- EXISTS THEN IS NOT HEADER
				PRINT 'BREAK IF (@COUNT_TRL_MKEY > 0)1';
				INSERT INTO ##tempSUBTASK(HEADER_MKEY,SEQ_NO,SUBTASK_ABBR,SUBTASK_MKEY,SUBTASK_PARENT_ID) 
				SELECT  HEADER_MKEY,SEQ_NO,SUBTASK_ABBR,SUBTASK_MKEY,SUBTASK_PARENT_ID
				FROM APPROVAL_TEMPLATE_TRL_SUBTASK WHERE SUBTASK_PARENT_ID IN (SELECT MKEY FROM ##TEMP_HDR_MKEY);
				--Goto Cont;
			END
			ELSE
			BEGIN
			--SELECT * FROM  ##tempSUBTASK;
				-- TO CHECK ##tempSUBTASK IS PRESENT OR NOT IF PRESENT THEN DROP
				
				--------------------------------------------------------------------------------------------------------------
				-- INSERTING CHILD SUBTASK IN ##tempSUBTASK CHECK IF THIS PARENT HAS CHILD SUBTASK
				
				--------------------------------------------------------------------------------------------------------------
				IF OBJECT_ID('tempdb..##tempSUBTASK') IS NOT NULL
		BEGIN
			DROP TABLE ##tempSUBTASK;
		END
		CREATE TABLE ##tempSUBTASK(HEADER_MKEY int,SEQ_NO nvarchar(100),SUBTASK_ABBR nvarchar(400),SUBTASK_MKEY int,SUBTASK_PARENT_ID int);
				INSERT INTO ##tempSUBTASK(HEADER_MKEY,SEQ_NO,SUBTASK_ABBR,SUBTASK_MKEY,SUBTASK_PARENT_ID) 
				SELECT  HEADER_MKEY,SEQ_NO,SUBTASK_ABBR,SUBTASK_MKEY,SUBTASK_PARENT_ID
				FROM APPROVAL_TEMPLATE_TRL_SUBTASK WHERE SUBTASK_PARENT_ID IN (SELECT MKEY FROM ##TEMP_HDR_MKEY);
				--------------------------------------------------------------------------------------------------------------
				SELECT TOP 1 @SUB_TASK = SUBTASK_MKEY FROM ##tempSUBTASK;
				
				--------------------------------------------------------------------------------------------------------------
				PRINT 'INSERT INTO ##tempSUBTASK:2: '+ CONVERT(VARCHAR,@SUB_TASK);--3
				--------------------------------------------------------------------------------------------------------------
				--- CHECK IF THERE IS NOT ANY CHILD FOR THES HEADER MKEY
				SELECT @SUB_TASK = COUNT(*) FROM  ##tempSUBTASK;
				--------------------------------------------------------------------------------------------------------------
				PRINT '@SUB_TASK 2.1: '+CONVERT(VARCHAR,@SUB_TASK);
				--------------------------------------------------------------------------------------------------------------
				IF ((SELECT COUNT(*) FROM  ##tempSUBTASK) < 1)
				BEGIN
					PRINT 'IF ((SELECT COUNT(*) FROM  ##tempSUBTASK) < 1)';
					break;
					--GOTO Cont;
				END
				
				FIND_SUBTASK:
				PRINT '(SELECT COUNT(*) FROM  ##tempSUBTASK): ';
				--------------------------------------------------------------------------------------------------------------
				DELETE FROM ##TEMP_HDR_MKEY;
				--------------------------------------------------------------------------------------------------------------
				INSERT INTO ##TEMP_HDR_MKEY(MKEY) SELECT SUBTASK_MKEY FROM ##tempSUBTASK 
				WHERE SUBTASK_PARENT_ID NOT IN (SELECT SUBTASK_MKEY FROM ##tempSUBTASK); --3
				--------------------------------------------------------------------------------------------------------------
				SELECT @SUB_TASK = COUNT(*) FROM ##tempSUBTASK;
				--------------------------------------------------------------------------------------------------------------
				PRINT '@SUB_TASK 2.2: '+ CONVERT(VARCHAR,@SUB_TASK);
				-------------------------------------------------------------------------
				PRINT 'INSERT ##TEMP_HDR_MKEY:3: ';
				--------------------------------------------------------------------------------------------------------------
				SELECT @COUNT_TRL_MKEY = COUNT(*) FROM APPROVAL_TEMPLATE_TRL_SUBTASK 
				WHERE SUBTASK_PARENT_ID IN (SELECT MKEY FROM ##TEMP_HDR_MKEY);
				--------------------------------------------------------------------------------------------------------------
				IF (@COUNT_TRL_MKEY  > 0)
				BEGIN
					SELECT @SUB_TASK = COUNT(*) FROM ##tempSUBTASK;
					--------------------------------------------------------------------------------------------------------------
					--PRINT '@@SUB_TASK_PARENT 2.3: '+ CONVERT(VARCHAR,@SUB_TASK_PARENT);
					--------------------------------------------------------------------------------------------------------------
					INSERT INTO ##tempSUBTASK(HEADER_MKEY,SEQ_NO,SUBTASK_ABBR,SUBTASK_MKEY,SUBTASK_PARENT_ID) 
					SELECT  HEADER_MKEY,SEQ_NO,SUBTASK_ABBR,SUBTASK_MKEY,SUBTASK_PARENT_ID
					FROM APPROVAL_TEMPLATE_TRL_SUBTASK WHERE SUBTASK_PARENT_ID in (SELECT MKEY FROM ##TEMP_HDR_MKEY); -- 3 has 2 rows of child
					--------------------------------------------------------------------------------------------------------------
					SELECT @SUB_TASK = COUNT(*) FROM ##tempSUBTASK;
					--------------------------------------------------------------------------------------------------------------
					PRINT '@@SUB_TASK 4: '+ CONVERT(VARCHAR,@SUB_TASK) --+ ' @SUB_TASK_PARENT: '+ CONVERT(VARCHAR,@SUB_TASK_PARENT);
					--------------------------------------------------------------------------------------------------------------
					--SELECT * FROM ##tempSUBTASK;
					--BREAK;
					--GOTO FIND_SUBTASK;
					--BREAK;
					--------------------------------------------------------------------------------------------------------------
				END
				ELSE
				BEGIN
					PRINT 'BREAK 5: ';
					BREAK;
				END

				SELECT * FROM  ##tempSUBTASK;
				--------------------------------------------------------------------------------------------------------------
			END
			--------------------------------------------------------------------------------------------------------------
			--------------------------------------------------------------------------------------------------------------
			--------------------------------------------------------------------------------------------------------------
			--PRINT 'HEADER_MKEY: '+ CONVERT(VARCHAR,@HEADER_MKEY);
			--------------------------------------------------------------------------------------------------------------
			--Cont:
			FETCH NEXT FROM CURSOR_SUB_TASK
			INTO @HMKEY
		END
		
		CLOSE CURSOR_SUB_TASK;
		DEALLOCATE CURSOR_SUB_TASK;
	END

	END TRY
	BEGIN CATCH
	-------------------------------------------------------------------------------------------------------------------------------          
		SELECT ERROR_NUMBER()    AS ERRORNUMBER,
				ERROR_SEVERITY()  AS ERRORSEVERITY,
				ERROR_STATE()     AS ERRORSTATE,
				ERROR_PROCEDURE() AS ERRORPROCEDURE,
				ERROR_LINE()      AS ERRORLINE,
				ERROR_MESSAGE()   AS ERRORMESSAGE;
	-------------------------------------------------------------------------------------------------------------------------------
		DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
		SET @ERROR_MESSAGE = ERROR_MESSAGE();
	-------------------------------------------------------------------------------------------------------------------------------
		EXEC sp_P_TMS_INSERT_ERROR_DES 9,'TMS','ADD PROJECT',@ERROR_MESSAGE,'SAVE';
	-------------------------------------------------------------------------------------------------------------------------------
	END CATCH
	END
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_APPROVAL_TASK_INITIATION]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		AMIT SHUDDHALWAR
-- Create date: 2024-11-28
-- Description:	TO GET TASK DETAILS OF PROJECT DEFINATION AND APPROVAL TEMPLATE
 -- EXEC SP_GET_APPROVAL_TASK_INITIATION 24,106
-- =============================================
CREATE PROCEDURE [dbo].[SP_GET_APPROVAL_TASK_INITIATION]
	@MKEY INT,
	@APPROVAL_MKEY INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY
		-- Insert statements for procedure here

		declare @seq_no nvarchar(100);

		select @seq_no = SEQ_NO from PROJECT_TRL_APPROVAL_ABBR where APPROVAL_MKEY=@APPROVAL_MKEY and HEADER_MKEY = @MKEY and DELETE_FLAG = 'N';
		print @seq_no;
		
		SELECT HDR.BUILDING_MKEY,HDR.PROPERTY ,ABBR.APPROVAL_MKEY AS MKEY, HDR.MKEY AS HEADER_MKEY,ABBR.SEQ_NO AS TASK_NO
		,TEMPLATE_HDR.MAIN_ABBR,TEMPLATE_HDR.LONG_DESCRIPTION,TEMPLATE_HDR.SHORT_DESCRIPTION,TEMPLATE_HDR.SANCTION_AUTHORITY
		,TEMPLATE_HDR.SANCTION_DEPARTMENT,ABBR.RESPOSIBLE_EMP_MKEY,EMST.EMP_FULL_NAME AS RESPOSIBLE_EMP_NAME, TEMPLATE_HDR.JOB_ROLE,TEMPLATE_HDR.AUTHORITY_DEPARTMENT
		,null AS COMPLITION_DATE
		FROM PROJECT_HDR HDR INNER JOIN PROJECT_TRL_APPROVAL_ABBR ABBR ON HDR.MKEY = ABBR.HEADER_MKEY
		LEFT JOIN APPROVAL_TEMPLATE_HDR TEMPLATE_HDR ON TEMPLATE_HDR.MKEY = ABBR.APPROVAL_MKEY
		LEFT JOIN EMPLOYEE_MST EMST ON EMST.MKEY = ABBR.RESPOSIBLE_EMP_MKEY
		AND HDR.BUILDING_CLASSIFICATION = TEMPLATE_HDR.BUILDING_TYPE AND HDR.BUILDING_STANDARD = TEMPLATE_HDR.BUILDING_STANDARD
		AND HDR.STATUTORY_AUTHORITY = TEMPLATE_HDR.STATUTORY_AUTHORITY
		WHERE 
		ABBR.SEQ_NO  LIKE '' + @seq_no + ''
		and ABBR.APPROVAL_MKEY = @APPROVAL_MKEY
		and HDR.MKEY = @MKEY;

	END TRY
	BEGIN CATCH
	-------------------------------------------------------------------------------------------------------------------------------          
		SELECT ERROR_NUMBER()    AS ERRORNUMBER,
				ERROR_SEVERITY()  AS ERRORSEVERITY,
				ERROR_STATE()     AS ERRORSTATE,
				ERROR_PROCEDURE() AS ERRORPROCEDURE,
				ERROR_LINE()      AS ERRORLINE,
				ERROR_MESSAGE()   AS ERRORMESSAGE;
		-------------------------------------------------------------------------------------------------------------------------------
		DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
		SET @ERROR_MESSAGE = ERROR_MESSAGE();
		-------------------------------------------------------------------------------------------------------------------------------
		--EXEC sp_P_TMS_INSERT_ERROR_DES @CREATED_BY,'TMS',@ATTRIBUTE1,@ERROR_MESSAGE,@ATTRIBUTE2;
	-------------------------------------------------------------------------------------------------------------------------------
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_APPROVAL_TASK_INITIATION_TRL_SUBTASK]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- EXEC SP_GET_APPROVAL_TASK_INITIATION_TRL_SUBTASK 26,111
-- =============================================
CREATE PROCEDURE [dbo].[SP_GET_APPROVAL_TASK_INITIATION_TRL_SUBTASK]
	-- Add the parameters for the stored procedure here
	@MKEY INT,
	@APPROVAL_MKEY INT
AS
BEGIN

declare @seq_no nvarchar(100);
select @seq_no = SEQ_NO from PROJECT_TRL_APPROVAL_ABBR where APPROVAL_MKEY= @APPROVAL_MKEY and DELETE_FLAG = 'N' AND HEADER_MKEY = @MKEY;
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY
				WITH RecursiveChildHierarchy AS (
			SELECT 
				t.SUBTASK_MKEY,
				t.SUBTASK_ABBR,
				t.SUBTASK_PARENT_ID  AS Parent_MKEY,
				t.SEQ_NO,
				t.ATTRIBUTE1,
				t.ATTRIBUTE2,
				t.ATTRIBUTE3,
				t.ATTRIBUTE4,
				t.ATTRIBUTE5,
				t.ATTRIBUTE6,
				t.ATTRIBUTE7,
				t.ATTRIBUTE8,
				t.CREATED_BY,
				t.CREATION_DATE,
				t.LAST_UPDATED_BY,
				t.LAST_UPDATE_DATE,
				t.DELETE_FLAG
			FROM 
				APPROVAL_TEMPLATE_TRL_SUBTASK t
			WHERE
				t.SUBTASK_PARENT_ID = @APPROVAL_MKEY 
				AND DELETE_FLAG = 'N'
			UNION ALL

			SELECT 
				p.SUBTASK_MKEY,
				p.SUBTASK_ABBR,
				p.SUBTASK_PARENT_ID AS Parent_MKEY,
				p.SEQ_NO,
				p.ATTRIBUTE1,
				p.ATTRIBUTE2,
				p.ATTRIBUTE3,
				p.ATTRIBUTE4,
				p.ATTRIBUTE5,
				p.ATTRIBUTE6,
				p.ATTRIBUTE7,
				p.ATTRIBUTE8,
				p.CREATED_BY,
				p.CREATION_DATE,
				p.LAST_UPDATED_BY,
				p.LAST_UPDATE_DATE,
				p.DELETE_FLAG
			FROM 
				APPROVAL_TEMPLATE_TRL_SUBTASK p
			INNER JOIN 
				RecursiveChildHierarchy rch ON p.SUBTASK_PARENT_ID = rch.SUBTASK_MKEY  
				WHERE P.DELETE_FLAG = 'N'
		)

		SELECT 
			HEADER_MKEY as MKEY,
			rch.SUBTASK_MKEY AS APPROVAL_MKEY,
			CASE WHEN ABBR.TASK_NO_MKEY IS NULL THEN ABBR.SEQ_NO ELSE (select task_no from task_hdr where mkey = ABBR.TASK_NO_MKEY) END as TASK_NO,
			ABBR.APPROVAL_ABBRIVATION,
			hdr.SHORT_DESCRIPTION,
			hdr.LONG_DESCRIPTION,
			ABBR.DAYS_REQUIRED,
			ABBR.DEPARTMENT,
			ABBR.JOB_ROLE,
			ABBR.RESPOSIBLE_EMP_MKEY,
			EMST.EMP_FULL_NAME AS RESPOSIBLE_EMP_NAME,
			ABBR.TENTATIVE_START_DATE,
			ABBR.TENTATIVE_END_DATE,
			CONVERT(NVARCHAR(20),ABBR.TENTATIVE_END_DATE) as COMPLITION_DATE,
			ABBR.STATUS, 
			rch.Parent_MKEY,										
			rch.SUBTASK_ABBR,
			rch.Parent_MKEY,
			ABBR.OUTPUT_DOCUMENT,
			rch.ATTRIBUTE1,
			rch.ATTRIBUTE2,
			rch.ATTRIBUTE3,
			rch.ATTRIBUTE4,
			rch.ATTRIBUTE5,
			rch.ATTRIBUTE6,
			rch.ATTRIBUTE7,
			rch.ATTRIBUTE8,
			rch.CREATED_BY,
			rch.CREATION_DATE,
			rch.LAST_UPDATED_BY,
			rch.LAST_UPDATE_DATE,
			rch.DELETE_FLAG
		FROM 
			RecursiveChildHierarchy rch 
		INNER JOIN 
			APPROVAL_TEMPLATE_HDR HDR ON rch.SUBTASK_MKEY = HDR.MKEY
		INNER JOIN 
			PROJECT_TRL_APPROVAL_ABBR ABBR  ON ABBR.APPROVAL_MKEY = HDR.MKEY
		LEFT JOIN 
			EMPLOYEE_MST EMST ON EMST.MKEY = ABBR.RESPOSIBLE_EMP_MKEY
		WHERE 
			ABBR.HEADER_MKEY = @MKEY
			and ABBR.SEQ_NO  LIKE '' + @seq_no + '%'
			AND HDR.DELETE_FLAG = 'N'
		ORDER BY 
			rch.SUBTASK_MKEY DESC;  

	---- Insert statements for procedure here
	--	SELECT HEADER_MKEY AS MKEY,CASE WHEN ABBR.TASK_NO_MKEY IS NULL THEN ABBR.SEQ_NO ELSE (select task_no from task_hdr where mkey = ABBR.TASK_NO_MKEY) 
	--	END as TASK_NO ,TEMPLATE_HDR.MKEY AS APPROVAL_MKEY, APPROVAL_ABBRIVATION
	--	,TEMPLATE_HDR.LONG_DESCRIPTION ,TEMPLATE_HDR.SHORT_DESCRIPTION,ABBR.DAYS_REQUIRED,ABBR.DEPARTMENT,ABBR.JOB_ROLE,ABBR.RESPOSIBLE_EMP_MKEY 
	--	,ABBR.TENTATIVE_START_DATE,ABBR.TENTATIVE_END_DATE,ABBR.STATUS, ABBR.OUTPUT_DOCUMENT 
	--	FROM PROJECT_TRL_APPROVAL_ABBR ABBR INNER JOIN APPROVAL_TEMPLATE_HDR TEMPLATE_HDR ON ABBR.APPROVAL_MKEY = TEMPLATE_HDR.MKEY 
	--	--AND TEMPLATE_HDR.MKEY IN (SELECT SUBTASK_MKEY FROM APPROVAL_TEMPLATE_TRL_SUBTASK)
	--	--where HEADER_MKEY = @MKEY;  

	END TRY
	BEGIN CATCH
	-------------------------------------------------------------------------------------------------------------------------------          
		SELECT ERROR_NUMBER()    AS ERRORNUMBER,
				ERROR_SEVERITY()  AS ERRORSEVERITY,
				ERROR_STATE()     AS ERRORSTATE,
				ERROR_PROCEDURE() AS ERRORPROCEDURE,
				ERROR_LINE()      AS ERRORLINE,
				ERROR_MESSAGE()   AS ERRORMESSAGE;
		-------------------------------------------------------------------------------------------------------------------------------
		DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
		SET @ERROR_MESSAGE = ERROR_MESSAGE();
		-------------------------------------------------------------------------------------------------------------------------------
		--EXEC sp_P_TMS_INSERT_ERROR_DES @CREATED_BY,'TMS',@ATTRIBUTE1,@ERROR_MESSAGE,@ATTRIBUTE2;
	-------------------------------------------------------------------------------------------------------------------------------
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_APPROVAL_TEMPLATE]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
-- AUTHOR:  AMIT SHUDDHALWAR    
-- CREATE DATE: 2024-11-06
-- DESCRIPTION: TO GET APPROVAL TEMPLATE DETAILS (HDR)   
-- EXEC SP_GET_TASK_RECURSIVE @MKEY=NULL  
-- EXEC SP_GET_TASK_RECURSIVE @MKEY=169  
-- exec SP_GET_APPROVAL_TEMPLATE  null,
-- =============================================    
CREATE PROCEDURE [dbo].[SP_GET_APPROVAL_TEMPLATE]
  -- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE    
  @MKEY NUMERIC = NULL,
  @ATTRIBUTE1 VARCHAR = NULL, -- USER ID
  @ATTRIBUTE2 VARCHAR = NULL, -- FORM NAME
  @ATTRIBUTE3 VARCHAR = NULL -- FUCNTION/METHOD NAME
AS
  BEGIN
      -- SET NOCOUNT ON ADDED TO PREVENT EXTRA RESULT SETS FROM    
      -- INTERFERING WITH SELECT STATEMENTS.    
      SET NOCOUNT ON;
      BEGIN TRY ;
          -- TO CHECK THE @MKEY IS NULL OR EMPTY IF EMPTY THE SHOW ALL ROWS    
          --IF ( @MKEY IS NOT NULL
          --     AND LEN(@MKEY) > 0 )
          --  BEGIN
				SELECT	HDR.MKEY,
				BUILDING_TYPE
				,RTRIM(LTRIM(BUILDCLASS.TYPE_DESC)) AS BUILDING_TYPE_NAME
				,BUILDING_STANDARD
				, RTRIM(LTRIM(STND.TYPE_DESC)) AS BUILDING_STANDARD_NAME
				,STATUTORY_AUTHORITY
				,RTRIM(LTRIM(STAAUTH.TYPE_DESC)) AS STATUTORY_AUTHORITY_NAME
				,SHORT_DESCRIPTION
				,LONG_DESCRIPTION
				,MAIN_ABBR
				,AUTHORITY_DEPARTMENT
				,RESPOSIBLE_EMP_MKEY
				,JOB_ROLE
				,DAYS_REQUIERD
				,SEQ_ORDER
				,HDR.ATTRIBUTE1
				,HDR.ATTRIBUTE2
				,HDR.ATTRIBUTE3
				,HDR.ATTRIBUTE4
				,HDR.ATTRIBUTE5
				,HDR.CREATED_BY
				,HDR.CREATION_DATE
				,HDR.LAST_UPDATED_BY
				,HDR.LAST_UPDATE_DATE
				,SANCTION_AUTHORITY
				,SANCTION_DEPARTMENT
				,END_RESULT_DOC
				,CHECKLIST_DOC
				,HDR.DELETE_FLAG 
				FROM APPROVAL_TEMPLATE_HDR  HDR
				join TYPE_MST BUILDCLASS on HDR.BUILDING_TYPE = BUILDCLASS.MKEY and BUILDCLASS.TYPE_CODE='BUILDCLASS' 
				 join TYPE_MST STND on HDR.BUILDING_STANDARD = STND.MKEY and STND.TYPE_CODE='STND' 
				 join TYPE_MST STAAUTH on HDR.STATUTORY_AUTHORITY = STAAUTH.MKEY and STAAUTH.TYPE_CODE='STAAUTH' 
				WHERE (HDR.MKEY = @MKEY OR @MKEY IS NULL) 
				AND HDR.DELETE_FLAG = 'N'
				ORDER BY  HDR.MKEY;
    --        END
    --      ELSE
    --        BEGIN
    --            SELECT	HDR.MKEY,
				--BUILDING_TYPE
				--,RTRIM(LTRIM(BUILDCLASS.TYPE_DESC)) AS BUILDING_TYPE_NAME
				--,BUILDING_STANDARD
				--, RTRIM(LTRIM(STND.TYPE_DESC)) AS BUILDING_STANDARD_NAME
				--,STATUTORY_AUTHORITY
				--,RTRIM(LTRIM(STAAUTH.TYPE_DESC)) AS STATUTORY_AUTHORITY_NAME
				--,SHORT_DESCRIPTION
				--,LONG_DESCRIPTION
				--,MAIN_ABBR
				--,AUTHORITY_DEPARTMENT
				--,RESPOSIBLE_EMP_MKEY
				--,JOB_ROLE
				--,DAYS_REQUIERD
				--,SEQ_ORDER
				--,HDR.ATTRIBUTE1
				--,HDR.ATTRIBUTE2
				--,HDR.ATTRIBUTE3
				--,HDR.ATTRIBUTE4
				--,HDR.ATTRIBUTE5
				--,HDR.CREATED_BY
				--,HDR.CREATION_DATE
				--,HDR.LAST_UPDATED_BY
				--,HDR.LAST_UPDATE_DATE
				--,SANCTION_AUTHORITY
				--,SANCTION_DEPARTMENT
				--,END_RESULT_DOC
				--,CHECKLIST_DOC
				--,HDR.DELETE_FLAG 
				--FROM APPROVAL_TEMPLATE_HDR  HDR
				--join TYPE_MST BUILDCLASS on HDR.BUILDING_TYPE = BUILDCLASS.MKEY and BUILDCLASS.TYPE_CODE='BUILDCLASS' 
				-- join TYPE_MST STND on HDR.BUILDING_STANDARD = STND.MKEY and STND.TYPE_CODE='STND' 
				-- join TYPE_MST STAAUTH on HDR.STATUTORY_AUTHORITY = STAAUTH.MKEY and STAAUTH.TYPE_CODE='STAAUTH' 
				--WHERE hdr.DELETE_FLAG = 'N'
				--ORDER BY  hdr.MKEY;
    --        END
      END TRY
      BEGIN CATCH
------------------------------------------------------------------------------------------------------------------------------------
          SELECT ERROR_NUMBER()    AS ERRORNUMBER,
                 ERROR_SEVERITY()  AS ERRORSEVERITY,
                 ERROR_STATE()     AS ERRORSTATE,
                 ERROR_PROCEDURE() AS ERRORPROCEDURE,
                 ERROR_LINE()      AS ERRORLINE,
                 ERROR_MESSAGE()   AS ERRORMESSAGE;
-------------------------------------------------------------------------------------------------------------------------------
			DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
			SET @ERROR_MESSAGE = ERROR_MESSAGE();
------------------------------------------------------------------------------------------------------------------------------------
		EXEC sp_P_TMS_INSERT_ERROR_DES @ATTRIBUTE1,'TMS',@ATTRIBUTE2,@ERROR_MESSAGE,ATTRIBUTE3;
------------------------------------------------------------------------------------------------------------------------------------
      END CATCH
  END
  	
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_COMPLIANCE]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		AMIT SHUDDHALWAR
-- Create date: <Create Date,,>
-- Description:	TO GET THE list of compliance 
--  EXEC SP_GET_COMPLIANCE 0,906
-- =============================================
CREATE PROCEDURE [dbo].[SP_GET_COMPLIANCE]
	-- Add the parameters for the stored procedure here
	@MKEY INT,
	@USER_ID INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	BEGIN TRY
	SET NOCOUNT ON;
		IF(@MKEY = '' OR @MKEY = 0)
		BEGIN
			SELECT HDR.MKEY,
                   PROPERTY AS PROPERTY_MKEY,
                   BUILDING AS BUILDING_MKEY,
                   SHORT_DESCRIPTION,
                   LONG_DESCRIPTION,
                  ISNULL(RAISED_AT,'') AS RAISED_AT,
				   ISNULL(RAISED_AT_BEFORE,'') AS RAISED_AT_BEFORE,
                   RESPONSIBLE_DEPARTMENT,
				   resDepart.TYPE_DESC as RESPONSIBLE_DEPARTMENT_NAME,
                   HDR.JOB_ROLE,
				   resJobRole.TYPE_DESC AS JOB_ROLE_NAME,
				  ISNULL(STUFF((SELECT DISTINCT ', ' + CAST(CTAG.TAGS_NAME AS VARCHAR(MAX))
				   FROM COMPLIANCE_TRL_TAGS CTAG WHERE DELETE_FLAG ='N' AND CTAG.COMPLIANCE_MKEY  = HDR.MKEY FOR XML PATH('')), 1, 1, ''),'') AS TAGS,
                   RESPONSIBLE_PERSON,
				   resPnsbl.EMP_FULL_NAME as RESPONSIBLE_PERSON_NAME,
                   TO_BE_COMPLETED_BY,
				   ISNULL(TASK_TYPE,'') TASK_TYPE,
                   NO_DAYS,
                   case  when [STATUS]='N' then 'Ready For Initiation'when [STATUS]='I' then 'Initiated' else 'Close' end as [DISPLAY_STATUS],[STATUS],
				    HDR.CREATED_BY CREATED_BY_ID ,createdby.EMP_FULL_NAME CREATED_BY_NAME 
					,CASE WHEN HDR.CREATION_DATE IS NULL THEN '' ELSE FORMAT(HDR.CREATION_DATE, 'yyyy-MM-dd HH:mm:ss') END AS CREATION_DATE 
					,ISNULL(CONVERT(VARCHAR(50),HDR.LAST_UPDATED_BY),'') AS LAST_UPDATED_BY
					,ISNULL(updatedby.EMP_FULL_NAME,'') UPDATED_BY_NAME 
					,CASE WHEN HDR.LAST_UPDATE_DATE IS NULL THEN '' ELSE FORMAT(HDR.LAST_UPDATE_DATE, 'yyyy-MM-dd HH:mm:ss') END AS LAST_UPDATE_DATE
            FROM COMPLIANCE_HDR HDR join EMPLOYEE_MST createdby on HDR.CREATED_BY=createdby.MKEY
			left join EMPLOYEE_MST updatedby  on HDR.LAST_UPDATED_BY = updatedby.MKEY
			LEFT join EMPLOYEE_MST resPnsbl on HDR.RESPONSIBLE_PERSON=resPnsbl.MKEY
			LEFT join TYPE_MST resDepart on  resDepart.MKEY = hdr.RESPONSIBLE_DEPARTMENT 
			LEFT join TYPE_MST resJobRole on  resJobRole.MKEY = hdr.JOB_ROLE
			WHERE HDR.DELETE_FLAG = 'N'
			order by MKEY ASC;
		END
		ELSE
		BEGIN
			SELECT HDR.MKEY,
                   PROPERTY AS PROPERTY_MKEY,
                   BUILDING AS BUILDING_MKEY,
                   SHORT_DESCRIPTION,
                   LONG_DESCRIPTION,
                   ISNULL(RAISED_AT,'') AS RAISED_AT,
				   ISNULL(RAISED_AT_BEFORE,'') AS RAISED_AT_BEFORE,
                   RESPONSIBLE_DEPARTMENT,
                   resDepart.TYPE_DESC as RESPONSIBLE_DEPARTMENT_NAME,
                   HDR.JOB_ROLE,
				   resJobRole.TYPE_DESC AS JOB_ROLE_NAME,
				   ISNULL( STUFF((SELECT DISTINCT ', ' + CAST(CTAG.TAGS_NAME AS VARCHAR(MAX))
				   FROM COMPLIANCE_TRL_TAGS CTAG WHERE DELETE_FLAG ='N' AND CTAG.COMPLIANCE_MKEY  = HDR.MKEY FOR XML PATH('')), 1, 1, ''),'') AS TAGS,
                   RESPONSIBLE_PERSON,
				   resPnsbl.EMP_FULL_NAME as RESPONSIBLE_PERSON_NAME,
                   TO_BE_COMPLETED_BY,
				  ISNULL(TASK_TYPE,'') TASK_TYPE,
                   NO_DAYS,
                   [STATUS],
				    HDR.CREATED_BY AS CREATED_BY_ID ,createdby.EMP_FULL_NAME AS CREATED_BY_NAME 
					,CASE WHEN HDR.CREATION_DATE IS NULL THEN '' ELSE FORMAT(HDR.CREATION_DATE, 'yyyy-MM-dd HH:mm:ss') END AS CREATION_DATE
				    ,ISNULL(CONVERT(VARCHAR(50),HDR.LAST_UPDATED_BY),'') AS LAST_UPDATED_BY
					,ISNULL(updatedby.EMP_FULL_NAME,'') UPDATED_BY_NAME 
					,CASE WHEN HDR.LAST_UPDATE_DATE IS NULL THEN '' ELSE FORMAT(HDR.LAST_UPDATE_DATE, 'yyyy-MM-dd HH:mm:ss') END AS LAST_UPDATE_DATE
            FROM COMPLIANCE_HDR HDR join EMPLOYEE_MST createdby on HDR.CREATED_BY=createdby.MKEY
			left join EMPLOYEE_MST updatedby  on HDR.LAST_UPDATED_BY = updatedby.MKEY
			LEFT join EMPLOYEE_MST resPnsbl on HDR.RESPONSIBLE_PERSON=resPnsbl.MKEY
			LEFT join TYPE_MST resDepart on  resDepart.MKEY = hdr.RESPONSIBLE_DEPARTMENT 
			LEFT join TYPE_MST resJobRole on  resJobRole.MKEY = hdr.JOB_ROLE
			WHERE hdr.DELETE_FLAG = 'N'
			AND HDR.MKEY = @MKEY;
		END
	END TRY  
	BEGIN CATCH  
	-------------------------------------------------------------------------------------------------------------------------------            
	SELECT ERROR_NUMBER()    AS ERRORNUMBER,  
	ERROR_SEVERITY()  AS ERRORSEVERITY,  
	ERROR_STATE()     AS ERRORSTATE,  
	ERROR_PROCEDURE() AS ERRORPROCEDURE,  
	ERROR_LINE()      AS ERRORLINE,  
	ERROR_MESSAGE()   AS ERRORMESSAGE;  
	-------------------------------------------------------------------------------------------------------------------------------  
	DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;  
	SET @ERROR_MESSAGE = ERROR_MESSAGE();  
	-------------------------------------------------------------------------------------------------------------------------------  
	EXEC sp_P_TMS_INSERT_ERROR_DES @USER_ID,'TMS','GET COMPLIANCE',@ERROR_MESSAGE,'GET';  
	-------------------------------------------------------------------------------------------------------------------------------  
	END CATCH 
END
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_DOCUMENT_TEMPLATES]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		AMIT SHUDDHALWAR
-- Create date: 28-10-2024
-- Description:	FOF THE GET DOCUMENT TEMPLATES DETAILS
-- exec SP_GET_DOCUMENT_TEMPLATES 928,2693,null,null 
-- =============================================
CREATE PROCEDURE [dbo].[SP_GET_DOCUMENT_TEMPLATES] 
	-- Add the parameters for the stored procedure here
	@MKEY NUMERIC = NULL,
	@ATTRIBUT1 VARCHAR(100) = NULL, -- USER ID
	@ATTRIBUT2 VARCHAR(100) = NULL, -- FORM NAME
	@ATTRIBUT3 VARCHAR(100) = NULL -- FUCNTION/METHOD NAME
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY ;
          -- TO CHECK THE @MKEY IS NULL OR EMPTY IF EMPTY THE SHOW ALL ROWS    
          IF ( @MKEY IS NOT NULL
               AND LEN(@MKEY) > 0 )
            BEGIN
			PRINT 'IN IFF';
				SELECT   [MKEY]
						,DOC_CATEGORY
						,DOC_NAME
						,[DOC_ABBR]
						,[DOC_NUM_FIELD_NAME]
						,[DOC_NUM_DATE_NAME]
						,[DOC_NUM_APP_FLAG]
						,[DOC_NUM_VALID_FLAG]
						,[DOC_NUM_DATE_APP_FLAG]
						,[DOC_ATTACH_APP_FLAG]
						,[CREATED_BY]
						,[CREATION_DATE]
						,[LAST_UPDATED_BY]
						,[LAST_UPDATE_DATE]
						,[DELETE_FLAG]
				FROM [dbo].[DOC_TEMPLATE_HDR]
				WHERE MKEY = @MKEY
				AND DELETE_FLAG = 'N'
				--AND CREATED_BY = CONVERT(INT,@ATTRIBUT1)
				ORDER BY MKEY;
            END
          ELSE
            BEGIN
                SELECT   [MKEY]
						,DOC_CATEGORY
						,DOC_NAME
						,[DOC_ABBR]
						,[DOC_NUM_FIELD_NAME]
						,[DOC_NUM_DATE_NAME]
						,[DOC_NUM_APP_FLAG]
						,[DOC_NUM_VALID_FLAG]
						,[DOC_NUM_DATE_APP_FLAG]
						,[DOC_ATTACH_APP_FLAG]
						,[CREATED_BY]
						,[CREATION_DATE]
						,[LAST_UPDATED_BY]
						,[LAST_UPDATE_DATE]
						,[DELETE_FLAG]
				FROM [dbo].[DOC_TEMPLATE_HDR]
				WHERE DELETE_FLAG = 'N'
				--AND CREATED_BY = CONVERT(INT,@ATTRIBUT1)
				ORDER BY MKEY;
            END
      END TRY
      BEGIN CATCH
------------------------------------------------------------------------------------------------------------------------------------
          SELECT ERROR_NUMBER()    AS ERRORNUMBER,
                 ERROR_SEVERITY()  AS ERRORSEVERITY,
                 ERROR_STATE()     AS ERRORSTATE,
                 ERROR_PROCEDURE() AS ERRORPROCEDURE,
                 ERROR_LINE()      AS ERRORLINE,
                 ERROR_MESSAGE()   AS ERRORMESSAGE;
-------------------------------------------------------------------------------------------------------------------------------
			DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
			SET @ERROR_MESSAGE = ERROR_MESSAGE();
------------------------------------------------------------------------------------------------------------------------------------
		EXEC sp_P_TMS_INSERT_ERROR_DES @ATTRIBUT1,'TMS',@ATTRIBUT2,@ERROR_MESSAGE,@ATTRIBUT3;
------------------------------------------------------------------------------------------------------------------------------------
      END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_PROJECT_DEFINATION]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
-- AUTHOR:  AMIT SHUDDHALWAR    
-- CREATE DATE: 19-09-2024    
-- DESCRIPTION: TO GET TASK RECURSIVE TABLE DETAILS (HDR,TRL)   
-- EXEC SP_GET_TASK_RECURSIVE @MKEY=NULL  
-- EXEC SP_GET_TASK_RECURSIVE @MKEY=169  
-- =============================================    
CREATE PROCEDURE [dbo].[SP_GET_PROJECT_DEFINATION]
  -- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE    
  @MKEY NUMERIC = NULL,
  @ATTRIBUT1 VARCHAR(100) = NULL, -- USER ID
  @ATTRIBUT2 VARCHAR(100) = NULL, -- FORM NAME
  @ATTRIBUT3 VARCHAR(100) = NULL -- FUCNTION/METHOD NAME
AS
	BEGIN
	-- SET NOCOUNT ON ADDED TO PREVENT EXTRA RESULT SETS FROM    
	-- INTERFERING WITH SELECT STATEMENTS.    
		SET NOCOUNT ON;
		BEGIN TRY ;
		-- TO CHECK THE @MKEY IS NULL OR EMPTY IF EMPTY THE SHOW ALL ROWS    
			--IF ( @MKEY IS NOT NULL
			--AND LEN(@MKEY) > 0 )
			--BEGIN
				SELECT	HDR.MKEY
				,BUILDING_MKEY AS PROJECT_NAME
				,PROJECT_ABBR
				,PROPERTY
				,LEGAL_ENTITY
				,PROJECT_ADDRESS
				,BUILDING_CLASSIFICATION
				,RTRIM(LTRIM(BUILDCLASS.TYPE_DESC)) AS BUILDING_TYPE_NAME
				,BUILDING_STANDARD
				, RTRIM(LTRIM(STND.TYPE_DESC)) AS BUILDING_STANDARD_NAME
				,STATUTORY_AUTHORITY
				,RTRIM(LTRIM(STAAUTH.TYPE_DESC)) AS STATUTORY_AUTHORITY_NAME
				,HDR.ATTRIBUTE1
				,HDR.ATTRIBUTE2
				,HDR.ATTRIBUTE3
				,HDR.ATTRIBUTE4
				,HDR.ATTRIBUTE5
				,HDR.CREATED_BY
				,HDR.CREATION_DATE
				,HDR.LAST_UPDATED_BY
				,HDR.LAST_UPDATE_DATE
				,HDR.DELETE_FLAG
				FROM PROJECT_HDR HDR
				join TYPE_MST BUILDCLASS on HDR.BUILDING_CLASSIFICATION = BUILDCLASS.MKEY and BUILDCLASS.TYPE_CODE='BUILDCLASS' 
				 join TYPE_MST STND on HDR.BUILDING_STANDARD = STND.MKEY and STND.TYPE_CODE='STND' 
				 join TYPE_MST STAAUTH on HDR.STATUTORY_AUTHORITY = STAAUTH.MKEY and STAAUTH.TYPE_CODE='STAAUTH'
				WHERE (HDR.MKEY = @MKEY OR @MKEY IS NULL) 
				--AND CREATED_BY = @ATTRIBUT1
				AND HDR.DELETE_FLAG = 'N'
				ORDER BY  HDR.MKEY;
			--END
			--ELSE
			--BEGIN
			--	SELECT	HDR.MKEY
			--	,BUILDING_MKEY AS PROJECT_NAME
			--	,PROJECT_ABBR
			--	,PROPERTY
			--	,LEGAL_ENTITY
			--	,PROJECT_ADDRESS
			--	,BUILDING_CLASSIFICATION
			--	,RTRIM(LTRIM(BUILDCLASS.TYPE_DESC)) AS BUILDING_TYPE_NAME
			--	,BUILDING_STANDARD
			--	, RTRIM(LTRIM(STND.TYPE_DESC)) AS BUILDING_STANDARD_NAME
			--	,STATUTORY_AUTHORITY
			--	,RTRIM(LTRIM(STAAUTH.TYPE_DESC)) AS STATUTORY_AUTHORITY_NAME
			--	,HDR.ATTRIBUTE1
			--	,HDR.ATTRIBUTE2
			--	,HDR.ATTRIBUTE3
			--	,HDR.ATTRIBUTE4
			--	,HDR.ATTRIBUTE5
			--	,HDR.CREATED_BY
			--	,HDR.CREATION_DATE
			--	,HDR.LAST_UPDATED_BY
			--	,HDR.LAST_UPDATE_DATE
			--	,HDR.DELETE_FLAG
			--	FROM PROJECT_HDR HDR
			--	join TYPE_MST BUILDCLASS on HDR.BUILDING_CLASSIFICATION = BUILDCLASS.MKEY and BUILDCLASS.TYPE_CODE='BUILDCLASS' 
			--	 join TYPE_MST STND on HDR.BUILDING_STANDARD = STND.MKEY and STND.TYPE_CODE='STND' 
			--	 join TYPE_MST STAAUTH on HDR.STATUTORY_AUTHORITY = STAAUTH.MKEY and STAAUTH.TYPE_CODE='STAAUTH'
			--	WHERE 1 = 1 --CREATED_BY = @ATTRIBUT1
			--	AND HDR.DELETE_FLAG = 'N'
			--	ORDER BY  HDR.MKEY;
			--END
		END TRY
		BEGIN CATCH
		------------------------------------------------------------------------------------------------------------------------------------
			SELECT ERROR_NUMBER()    AS ERRORNUMBER,
			ERROR_SEVERITY()  AS ERRORSEVERITY,
			ERROR_STATE()     AS ERRORSTATE,
			ERROR_PROCEDURE() AS ERRORPROCEDURE,
			ERROR_LINE()      AS ERRORLINE,
			ERROR_MESSAGE()   AS ERRORMESSAGE;
			-------------------------------------------------------------------------------------------------------------------------------
			DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
			SET @ERROR_MESSAGE = ERROR_MESSAGE();
			------------------------------------------------------------------------------------------------------------------------------------
			EXEC sp_P_TMS_INSERT_ERROR_DES @ATTRIBUT1,'TMS',@ATTRIBUT2,@ERROR_MESSAGE,@ATTRIBUT3;
		------------------------------------------------------------------------------------------------------------------------------------
		END CATCH
	END
  	
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_PROJECT_DEPOSITORY_ATTACHMENT_MKEY]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE	[dbo].[SP_GET_PROJECT_DEPOSITORY_ATTACHMENT_MKEY]
	-- Add the parameters for the stored procedure here
	@DOC_MKEY INT,
	@PROPERTY_MKEY INT,
	@BUILDING_MKEY INT,
	@USER_ID INT,
	@API_NAME NVARCHAR(100),
	@API_METHOD NVARCHAR(100)
	AS
	BEGIN

		BEGIN TRY

			SELECT * from  PROJECT_DOC_DEPOSITORY_HDR 
			WHERE PROPERTY_TYPE =   @PROPERTY_MKEY  AND BUILDING_TYPE = @BUILDING_MKEY AND DOC_MKEY = @DOC_MKEY
			AND DELETE_FLAG = 'N';

					END TRY
    BEGIN CATCH
 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        SELECT ERROR_NUMBER() AS ERRORNUMBER,
               ERROR_SEVERITY() AS ERRORSEVERITY,
               ERROR_STATE() AS ERRORSTATE,
               ERROR_PROCEDURE() AS ERRORPROCEDURE,
               ERROR_LINE() AS ERRORLINE,
               ERROR_MESSAGE() AS ERRORMESSAGE;

        -------------------------------------------------------------------------------------------------------------------------------  
        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
        SET @ERROR_MESSAGE = ERROR_MESSAGE();
        -------------------------------------------------------------------------------------------------------------------------------  
        EXEC SP_P_TMS_INSERT_ERROR_DES @USER_ID,
                                       'TMS',
                                       @API_NAME,
                                       @ERROR_MESSAGE,
                                       @API_METHOD;
    -------------------------------------------------------------------------------------------------------------------------------  
    END CATCH
	END

					
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_PROJECT_DEPOSITORY_DOCUMENT]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SP_GET_PROJECT_DEPOSITORY_DOCUMENT]
	-- Add the parameters for the stored procedure here
	@BUILDING_TYPE int,
	@PROPERTY_TYPE int,
	@DOC_MKEY int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT COUNT(*) FROM PROJECT_DOC_DEPOSITORY_HDR
	WHERE BUILDING_TYPE = @BUILDING_TYPE AND PROPERTY_TYPE = @PROPERTY_TYPE  AND DOC_MKEY = @DOC_MKEY;
END
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_PROJECT_DOC_DEPOSITORY]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- EXEC SP_GET_PROJECT_DOC_DEPOSITORY 1,926,'asd','sdf'
-- =============================================
CREATE PROCEDURE [dbo].[SP_GET_PROJECT_DOC_DEPOSITORY]
	-- Add the parameters for the stored procedure here
	@MKEY int = NULL,
	@USER_ID int = NULL, -- USER ID
	@API_NAME VARCHAR(100) = NULL, -- FORM NAME
	@API_METHOD VARCHAR(100) = NULL -- FUCNTION/METHOD NAME
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
BEGIN TRY ;
          -- TO CHECK THE @MKEY IS NULL OR EMPTY IF EMPTY THE SHOW ALL ROWS    
		  print '@MKEY: '+convert(varchar(10),@MKEY)
          IF ( @MKEY IS NOT NULL
               AND LEN(@MKEY) > 0 and @MKEY != 0)
            BEGIN
				SELECT	
					HDR.MKEY
					,BUILDING_TYPE as BUILDING_MKEY
					,PROPERTY_TYPE AS PROPERTY_MKEY
					,DOC_MKEY 
					,DOC_NUMBER
					,DOC_DATE
					,VALIDITY_DATE
					,HDR.ATTRIBUTE1
					,HDR.ATTRIBUTE2
					,HDR.ATTRIBUTE3
					,HDR.ATTRIBUTE4
					,HDR.ATTRIBUTE5
					,Isnull(CONVERT(VARCHAR(50), HDR.created_by), '') AS CREATED_BY_ID
				,Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME
				,CASE
					WHEN HDR.creation_date IS NULL THEN
				''
				ELSE
					Format(HDR.creation_date, 'yyyy-MM-dd HH:mm:ss')
				END AS CREATION_DATE
				,Isnull(CONVERT(VARCHAR(50), HDR.last_updated_by), '') AS LAST_UPDATED_BY
				,Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME
				,CASE
					WHEN HDR.last_update_date IS NULL THEN
					''
				ELSE
					Format(HDR.last_update_date, 'yyyy-MM-dd HH:mm:ss')
				END AS LAST_UPDATE_DATE
				FROM PROJECT_DOC_DEPOSITORY_HDR HDR
				INNER JOIN 
						EMPLOYEE_MST createdby
					ON 
						HDR.created_by = createdby.mkey
					LEFT JOIN 
						EMPLOYEE_MST updatedby
					ON 
						HDR.last_updated_by = updatedby.mkey
				WHERE HDR.MKEY = @MKEY
				AND HDR.DELETE_FLAG = 'N'
				AND createdby.DELETE_FLAG = 'N'
				ORDER BY  HDR.MKEY;
            END
          ELSE
            BEGIN
                SELECT	
					HDR.MKEY
					,BUILDING_TYPE as BUILDING_MKEY
					,PROPERTY_TYPE AS PROPERTY_MKEY
					,DOC_MKEY 
					,DOC_NUMBER
					,DOC_DATE
					,VALIDITY_DATE
					,HDR.ATTRIBUTE1
					,HDR.ATTRIBUTE2
					,HDR.ATTRIBUTE3
					,HDR.ATTRIBUTE4
					,HDR.ATTRIBUTE5
					,Isnull(CONVERT(VARCHAR(50), HDR.created_by), '') AS CREATED_BY_ID
				,Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME
				,CASE
					WHEN HDR.creation_date IS NULL THEN
				''
				ELSE
					Format(HDR.creation_date, 'yyyy-MM-dd HH:mm:ss')
				END AS CREATION_DATE
				,Isnull(CONVERT(VARCHAR(50), HDR.last_updated_by), '') AS LAST_UPDATED_BY
				,Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME
				,CASE
					WHEN HDR.last_update_date IS NULL THEN
					''
				ELSE
					Format(HDR.last_update_date, 'yyyy-MM-dd HH:mm:ss')
				END AS LAST_UPDATE_DATE
				FROM PROJECT_DOC_DEPOSITORY_HDR HDR
				INNER JOIN 
						EMPLOYEE_MST createdby
					ON 
						HDR.created_by = createdby.mkey
					LEFT JOIN 
						EMPLOYEE_MST updatedby
					ON 
						HDR.last_updated_by = updatedby.mkey
				WHERE HDR.DELETE_FLAG = 'N'
				AND createdby.DELETE_FLAG = 'N'
				ORDER BY  HDR.MKEY;
            END
      END TRY
      BEGIN CATCH
------------------------------------------------------------------------------------------------------------------------------------
          SELECT ERROR_NUMBER()    AS ERRORNUMBER,
                 ERROR_SEVERITY()  AS ERRORSEVERITY,
                 ERROR_STATE()     AS ERRORSTATE,
                 ERROR_PROCEDURE() AS ERRORPROCEDURE,
                 ERROR_LINE()      AS ERRORLINE,
                 ERROR_MESSAGE()   AS ERRORMESSAGE;
-------------------------------------------------------------------------------------------------------------------------------
			DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
			SET @ERROR_MESSAGE = ERROR_MESSAGE();
------------------------------------------------------------------------------------------------------------------------------------
		EXEC sp_P_TMS_INSERT_ERROR_DES @USER_ID,'TMS',@API_NAME,@ERROR_MESSAGE,@API_METHOD;
------------------------------------------------------------------------------------------------------------------------------------
      END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_PROJECT_DOC_DEPOSITORY_ATTACHMENT]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- EXEC SP_GET_PROJECT_DOC_DEPOSITORY_ATTACHMENT 8,926,'SS','SS' 
CREATE PROCEDURE [dbo].[SP_GET_PROJECT_DOC_DEPOSITORY_ATTACHMENT]
(
    @PROJECT_DOC_MKEY INT,
    @CREATED_BY INT,
    @APINAME NVARCHAR(100),
    @API_METHOD NVARCHAR(100)
)
AS
BEGIN
    DECLARE @DCOUNT INT,@SR_NO INT;
    BEGIN TRY

        SELECT @DCOUNT = COUNT(*)
        FROM PROJECT_DOC_DEPOSITORY_TRL_MEDIA
        WHERE PROJECT_DOC_MKEY = @PROJECT_DOC_MKEY
              AND DELETE_FLAG = 'N';

        IF (@DCOUNT > 0)
        BEGIN
			SELECT 
				HDR.MKEY
				,HDR.SR_NO
				,HDR.PROJECT_DOC_MKEY 
				,HDR.[FILE_NAME]
				,HDR.FILE_PATH
				,Isnull(CONVERT(VARCHAR(50), HDR.created_by), '') AS CREATED_BY_ID
				,Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME
				,CASE
					WHEN HDR.creation_date IS NULL THEN
				''
				ELSE
					Format(HDR.creation_date, 'yyyy-MM-dd HH:mm:ss')
				END AS CREATION_DATE
				,Isnull(CONVERT(VARCHAR(50), HDR.last_updated_by), '') AS LAST_UPDATED_BY
				,Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME
				,CASE
					WHEN HDR.last_update_date IS NULL THEN
					''
				ELSE
					Format(HDR.last_update_date, 'yyyy-MM-dd HH:mm:ss')
				END AS LAST_UPDATE_DATE
			FROM 
				PROJECT_DOC_DEPOSITORY_TRL_MEDIA HDR
			INNER JOIN 
				EMPLOYEE_MST createdby
			ON 
				HDR.created_by = createdby.mkey
			LEFT JOIN 
				EMPLOYEE_MST updatedby
			ON 
				HDR.last_updated_by = updatedby.mkey
			WHERE 
				PROJECT_DOC_MKEY = @PROJECT_DOC_MKEY
			AND 
				HDR.DELETE_FLAG = 'N'
			AND 
				createdby.DELETE_FLAG = 'N';
        END

       
    END TRY
    BEGIN CATCH
        -------------------------------------------------------------------------------------------------------------------------------          
        SELECT ERROR_NUMBER() AS ERRORNUMBER,
               ERROR_SEVERITY() AS ERRORSEVERITY,
               ERROR_STATE() AS ERRORSTATE,
               ERROR_PROCEDURE() AS ERRORPROCEDURE,
               ERROR_LINE() AS ERRORLINE,
               ERROR_MESSAGE() AS ERRORMESSAGE;
        -------------------------------------------------------------------------------------------------------------------------------
        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
        SET @ERROR_MESSAGE = ERROR_MESSAGE();
        -------------------------------------------------------------------------------------------------------------------------------
        EXEC sp_P_TMS_INSERT_ERROR_DES @CREATED_BY,
                                       'TMS',
                                       @APINAME,
                                       @ERROR_MESSAGE,
                                       @API_METHOD;
    -------------------------------------------------------------------------------------------------------------------------------
    END CATCH
END


GO
/****** Object:  StoredProcedure [dbo].[SP_GET_RAISED_AT]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
--EXEC SP_GET_RAISED_AT 210,284
-- =============================================
CREATE PROCEDURE [dbo].[SP_GET_RAISED_AT]
	-- Add the parameters for the stored procedure here
	@PROPERTY_MKEY INT,
	@BUILDING_MKEY INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    SELECT -1 AS MKEY,'0' SEQ_NO, 'RaisedAT' AS TYPE_CODE, 'RaisedAT' AS TYPE_ABBR, 
	CAST('General' AS VARCHAR(500)) AS [TYPE_DESC],'-1' AS PROPERTY_MKEY, '-1' AS BUILDING_MKEY, '-1' AS CREATED_BY_ID,     
    'JAGDISH GALVANKAR' AS CREATED_BY_NAME, '' AS CREATION_DATE, '' AS LAST_UPDATED_BY, '' AS UPDATED_BY_NAME, '' AS LAST_UPDATE_DATE    
	
	UNION ALL
	
	SELECT HEADER_MKEY AS MKEY,ABBR.APPROVAL_MKEY as SEQ_NO, 'RaisedAT' AS TYPE_CODE, 'RaisedAT' AS TYPE_ABBR, 
	(CASE WHEN TASK_NO_MKEY IS NULL THEN SEQ_NO ELSE TASK.task_no  END) +' - ' + APPROVAL_ABBRIVATION	as [TYPE_DESC]
	,HDR.PROPERTY AS PROPERTY_MKEY,HDR.BUILDING_MKEY
	, HDR.CREATED_BY AS CREATED_BY_ID, createdby.EMP_FULL_NAME AS CREATED_BY_NAME, CASE WHEN HDR.CREATION_DATE IS NULL THEN '' ELSE FORMAT(HDR.CREATION_DATE, 'yyyy-MM-dd HH:mm:ss') END AS CREATION_DATE
	,ISNULL(CONVERT(VARCHAR(50), HDR.LAST_UPDATED_BY), '') AS LAST_UPDATED_BY, 
	ISNULL(updatedby.EMP_FULL_NAME, '') AS UPDATED_BY_NAME,     
    CASE WHEN HDR.LAST_UPDATE_DATE IS NULL THEN '' ELSE FORMAT(HDR.LAST_UPDATE_DATE, 'yyyy-MM-dd HH:mm:ss') END AS LAST_UPDATE_DATE
	FROM PROJECT_TRL_APPROVAL_ABBR ABBR INNER JOIN PROJECT_HDR HDR ON ABBR.HEADER_MKEY = HDR.MKEY 
	INNER JOIN EMPLOYEE_MST createdby ON HDR.CREATED_BY = createdby.MKEY 
	LEFT JOIN EMPLOYEE_MST updatedby ON HDR.LAST_UPDATED_BY = updatedby.MKEY    
	LEFT JOIN TASK_HDR TASK ON TASK.MKEY = ABBR.TASK_NO_MKEY
	WHERE 1 = 1 
	AND HDR.DELETE_FLAG = 'N'
	AND ABBR.DELETE_FLAG = 'N'
	AND HDR.PROPERTY = @PROPERTY_MKEY
	AND HDR.BUILDING_MKEY = @BUILDING_MKEY
	
END
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_RAISED_AT_BEFORE]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- EXEC [SP_GET_RAISED_AT_BEFORE] 210,284
-- =============================================
CREATE PROCEDURE [dbo].[SP_GET_RAISED_AT_BEFORE]
	-- Add the parameters for the stored procedure here
	@PROPERTY_MKEY INT,
	@BUILDING_MKEY INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    
	SELECT HEADER_MKEY AS MKEY,ABBR.APPROVAL_MKEY as SEQ_NO, 'RaisedAT' AS TYPE_CODE, 'RaisedAT' AS TYPE_ABBR, 
	(CASE WHEN TASK_NO_MKEY IS NULL THEN SEQ_NO ELSE TASK.task_no  END) +' - ' + APPROVAL_ABBRIVATION	as [TYPE_DESC]
	,HDR.PROPERTY AS PROPERTY_MKEY,HDR.BUILDING_MKEY
	, HDR.CREATED_BY AS CREATED_BY_ID, createdby.EMP_FULL_NAME AS CREATED_BY_NAME, CASE WHEN HDR.CREATION_DATE IS NULL THEN '' ELSE FORMAT(HDR.CREATION_DATE, 'yyyy-MM-dd HH:mm:ss') END AS CREATION_DATE
	,ISNULL(CONVERT(VARCHAR(50), HDR.LAST_UPDATED_BY), '') AS LAST_UPDATED_BY, 
	ISNULL(updatedby.EMP_FULL_NAME, '') AS UPDATED_BY_NAME,     
    CASE WHEN HDR.LAST_UPDATE_DATE IS NULL THEN '' ELSE FORMAT(HDR.LAST_UPDATE_DATE, 'yyyy-MM-dd HH:mm:ss') END AS LAST_UPDATE_DATE    
	FROM PROJECT_TRL_APPROVAL_ABBR ABBR INNER JOIN PROJECT_HDR HDR ON ABBR.HEADER_MKEY = HDR.MKEY 
	INNER JOIN EMPLOYEE_MST createdby ON HDR.CREATED_BY = createdby.MKEY 
	LEFT JOIN EMPLOYEE_MST updatedby ON HDR.LAST_UPDATED_BY = updatedby.MKEY    
	LEFT JOIN TASK_HDR TASK ON TASK.MKEY = ABBR.TASK_NO_MKEY
	WHERE 1 = 1 
	AND HDR.DELETE_FLAG = 'N'
	AND ABBR.DELETE_FLAG = 'N'
	AND HDR.PROPERTY = @PROPERTY_MKEY
	AND HDR.BUILDING_MKEY = @BUILDING_MKEY
	
END
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_RESPONSIBLE_PERSON_BY_JOBROLE]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- EXEC SP_GET_RESPONSIBLE_PERSON_BY_JOBROLE 414,253,926
-- =============================================
CREATE PROCEDURE [dbo].[SP_GET_RESPONSIBLE_PERSON_BY_JOBROLE]
	-- Add the parameters for the stored procedure here
	@DEPARTMENT_MKEY INT,
	@JOB_ROLE_MKEY INT,
	@USER_ID INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	
	SELECT MKEY  
		,COMPANY_ID  
		,EMP_CODE  
		, DBO.[InitCap](EMP_FULL_NAME) EMP_FULL_NAME  
		, DBO.[InitCap](FIRST_NAME) FIRST_NAME  
		, DBO.[InitCap](LAST_NAME) LAST_NAME  
		,ROLE_ID  
		,PROJECT_ID  
		,DESIGNATION_ID  
		,DEPARTMENT_ID  
		,CONTACT_NO  
		,EMAIL_ID_OFFICIAL  
		,EMAIL_ID_PERSONAL  
		,LOGIN_NAME  
		,CONVERT(VARCHAR, LOGIN_PASSWORD) AS LOGIN_PASSWORD
		,RA1_MKEY  
		,RA2_MKEY  
		,EFFECTIVE_START_DATE  
		,EFFECTIVE_END_DATE  
		,EMAIL_FREQUENCY  
		,BROWSER_NOTIFICATION  
		,WEB_TOKEN  
		,MOBILE_TOKEN  
		,ATTRIBUTE1  
		,ATTRIBUTE2  
		,ATTRIBUTE3  
		,ATTRIBUTE4  
		,ATTRIBUTE5  
		,CREATED_BY  
		,CREATION_DATE  
		,LAST_UPDATED_BY  
		,lAST_UPDATE_DATE  
		,DELETE_FLAG  
		,ISFORGOTPASSWORD  
		,CONVERT(VARCHAR,TEMPPASSWORD) AS TEMPPASSWORD 
		FROM EMPLOYEE_MST  
		where 1 = 1 --DEPARTMENT_ID = @DEPARTMENT_MKEY
		--AND JOB_ROLE = @JOB_ROLE_MKEY
		and DELETE_FLAG='N'
		ORDER BY MKEY DESC;

		--select TOP 1 * from EMPLOYEE_MST 
		--where DEPARTMENT_ID = @DEPARTMENT_MKEY
		--AND JOB_ROLE = @JOB_ROLE_MKEY
		--AND DELETE_FLAG = 'N';
END
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_TASK_CHECKLIST]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:    
-- Create date: 
-- Description:  
--  EXEC SP_GET_TASK_CHECKLIST 440,443, 11082,'ffg','fgfg',926
-- =============================================
 CREATE PROCEDURE [dbo].[SP_GET_TASK_CHECKLIST]
  -- Add the parameters for the stored procedure here
  @PROPERTY_MKEY INT,
  @BUILDING_MKEY INT,
  @TASK_MKEY     INT,
  @API_NAME      NVARCHAR(200),
  @API_METHOD    NVARCHAR(100),
  @USER_ID       INT
AS
  BEGIN
      SET nocount ON;

      BEGIN try
          SELECT CTRL.mkey,
                 CTRL.sr_no,
                 THDR.project_id                                           AS
                 PROPERTY_MKEY,
                 THDR.sub_project_id                                       AS
                 BUILDING_MKEY,
                 CTRL.document_mkey,
                 CTRL.document_name,
                 CTRL.document_category,
                MST.TYPE_DESC                                             AS
                 [TYPE_DESC],
                 CTRL.app_check,
                 Isnull(CONVERT(VARCHAR(50), CTRL.created_by), '')         AS
                 CREATED_BY_ID,
                 Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS
                 CREATED_BY_NAME,
                 CASE
                   WHEN CTRL.creation_date IS NULL THEN ''
                   ELSE Format(CTRL.creation_date, 'yyyy-MM-dd HH:mm:ss')
                 END                                                       AS
                 CREATION_DATE,
                 Isnull(CONVERT(VARCHAR(50), CTRL.last_updated_by), '')    AS
                 LAST_UPDATED_BY,
                 Isnull(updatedby.emp_full_name, '')
                 UPDATED_BY_NAME
                 ,
                 CASE
                   WHEN CTRL.last_update_date IS NULL THEN ''
                   ELSE Format(CTRL.last_update_date, 'yyyy-MM-dd HH:mm:ss')
                 END                                                       AS
                 LAST_UPDATE_DATE
          FROM   task_checklist_trl CTRL
                 INNER JOIN task_hdr THDR
                         ON CTRL.mkey = THDR.mkey
                 left JOIN doc_template_hdr DHDR
                         ON DHDR.TYPE_MST_DOC_TYPE_MKEY= CTRL.document_category
				 LEFT JOIN TYPE_MST MST 
						ON (MST.MASTER_MKEY = CTRL.document_category OR MST.MKEY = CTRL.document_category)
                 INNER JOIN employee_mst createdby
                         ON CTRL.created_by = createdby.mkey
                 LEFT JOIN employee_mst updatedby
                        ON CTRL.last_updated_by = updatedby.mkey
          WHERE  CTRL.delete_flag = 'N'
                 --AND DHDR.delete_flag = 'N'
                 AND createdby.delete_flag = 'N'
                 AND THDR.delete_flag = 'N'
                 AND CTRL.mkey = @TASK_MKEY
                 --AND THDR.project_id = @PROPERTY_MKEY
                 --AND THDR.sub_project_id = @BUILDING_MKEY
		 ORDER BY SR_NO,CONVERT(INT, CTRL.document_category);


      --SELECT A.MKEY
      --    ,A.CREATED_BY
      --    ,PHDR.PROPERTY AS PROPERTY_MKEY
      --    ,PHDR.BUILDING_MKEY AS BUILDING_MKEY 
      --    ,A.DOCUMENT_CATEGORY 
      --    ,isnull(a.app_check,'N') as APP_CHECK
      --    ,ISNULL(A.DOCUMENT_NAME,'')AS DOCUMENT_NAME
      --    --,LTRIM(RTRIM(Split.a.value('.', 'VARCHAR(100)'))) AS [TYPE_DESC]
      --    ,DHDR.DOC_NAME AS [TYPE_DESC]
      --    ,CONVERT(int, Split.a.value('.', 'VARCHAR(100)'))  as DOCUMENT_CATEGORY--DHDR.DOC_CATEGORY
      --    ,Isnull(CONVERT(VARCHAR(50), A.created_by), '') AS CREATED_BY_ID
      --    ,Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME
      --    ,CASE
      --      WHEN A.creation_date IS NULL THEN
      --    ''
      --    ELSE
      --      Format(A.creation_date, 'yyyy-MM-dd HH:mm:ss')
      --    END AS CREATION_DATE
      --    ,Isnull(CONVERT(VARCHAR(50), A.last_updated_by), '') AS LAST_UPDATED_BY
      --    ,Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME
      --    ,CASE
      --      WHEN A.last_update_date IS NULL THEN
      --      ''
      --    ELSE
      --      Format(A.last_update_date, 'yyyy-MM-dd HH:mm:ss')
      --    END AS LAST_UPDATE_DATE
      --  FROM 
      --    APPROVAL_TEMPLATE_TRL_CHECKLIST A
      --  CROSS APPLY 
      --    (SELECT CAST('' + REPLACE(A.DOCUMENT_CATEGORY, ',', '') + '' AS XML)) AS Data(Data)
      --  CROSS APPLY 
      --    Data.nodes('/M') AS Split(a)
      --  INNER JOIN PROJECT_TRL_APPROVAL_ABBR ABBR ON  A.MKEY =  ABBR.APPROVAL_MKEY
      --  INNER JOIN PROJECT_HDR PHDR ON PHDR.MKEY = ABBR.HEADER_MKEY
      --  INNER JOIN DOC_TEMPLATE_HDR DHDR ON DHDR.MKEY =  CONVERT(int, Split.a.value('.', 'VARCHAR(100)'))  
      --  INNER JOIN EMPLOYEE_MST createdby ON A.CREATED_BY = createdby.mkey
      --  LEFT JOIN EMPLOYEE_MST updatedby ON a.last_updated_by = updatedby.mkey
      --  WHERE A.DELETE_FLAG = 'N'
      --  AND PHDR.DELETE_FLAG = 'N'
      --  AND DHDR.DELETE_FLAG = 'N'
      --  AND createdby.DELETE_FLAG = 'N'
      --  AND ABBR.TASK_NO_MKEY = @TASK_MKEY  
      --  AND PHDR.PROPERTY = @PROPERTY_MKEY
      --  AND PHDR.BUILDING_MKEY = @BUILDING_MKEY
      --  ORDER BY ISNULL(A.DOCUMENT_NAME,''),A.MKEY, CONVERT(INT,LTRIM(RTRIM(Split.a.value('.', 'VARCHAR(100)'))))
      END try

      BEGIN catch
          -------------------------------------------------------------------------------------------------------------------------------            
          SELECT Error_number()    AS ERRORNUMBER,
                 Error_severity()  AS ERRORSEVERITY,
                 Error_state()     AS ERRORSTATE,
                 Error_procedure() AS ERRORPROCEDURE,
                 Error_line()      AS ERRORLINE,
                 Error_message()   AS ERRORMESSAGE;

          -------------------------------------------------------------------------------------------------------------------------------  
          DECLARE @ERROR_MESSAGE VARCHAR(max) = NULL;

          SET @ERROR_MESSAGE = Error_message();

          -------------------------------------------------------------------------------------------------------------------------------  
          EXEC Sp_p_tms_insert_error_des
            @USER_ID,
            'TMS',
            @API_NAME,
            @ERROR_MESSAGE,
            @API_METHOD;
      -------------------------------------------------------------------------------------------------------------------------------  
      END catch
  END 
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_TASK_COMPLIANCE]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
--	EXEC SP_GET_TASK_COMPLIANCE 440,449 ,0,'fdf','fe',926
-- =============================================
 CREATE PROCEDURE [dbo].[SP_GET_TASK_COMPLIANCE]
	-- Add the parameters for the stored procedure here
	@PROPERTY_MKEY INT,
	@BUILDING_MKEY INT,
	@TASK_MKEY INT,
	@API_NAME NVARCHAR(100),
	@API_METHOD NVARCHAR(100),
	@USER_ID INT
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
	
		SELECT  HDR.MKEY
				,HDR.PROPERTY    AS PROPERTY_MKEY
				,HDR.BUILDING	 AS BUILDING_MKEY
				,HDR.TASK_NO_MKEY
				,HDR.SHORT_DESCRIPTION
				,HDR.LONG_DESCRIPTION
				,HDR.RAISED_AT
				,HDR.RAISED_AT_BEFORE
				,HDR.RESPONSIBLE_DEPARTMENT
				,resDepart.TYPE_DESC as RESPONSIBLE_DEPARTMENT_NAME
                ,HDR.JOB_ROLE
				 ,resJobRole.TYPE_DESC AS JOB_ROLE_NAME
				,ISNULL(STUFF((SELECT DISTINCT ', ' + CAST(CTAG.TAGS_NAME AS VARCHAR(MAX))
				   FROM COMPLIANCE_TRL_TAGS CTAG WHERE DELETE_FLAG ='N' AND CTAG.COMPLIANCE_MKEY  = HDR.MKEY FOR XML PATH('')), 1, 1, ''),'') AS TAGS
				,HDR.RESPONSIBLE_PERSON
				,resPnsbl.EMP_FULL_NAME as RESPONSIBLE_PERSON_NAME
				,HDR.TO_BE_COMPLETED_BY 
				,HDR.NO_DAYS
				,HDR.STATUS
				,case  when [STATUS]='N' then 'Ready For Initiation'when [STATUS]='I' then 'Initiated' else 'Close' end as [DISPLAY_STATUS]
				,HDR.TASK_TYPE
				,ISNULL(CONVERT(VARCHAR(50),HDR.CREATED_BY),'') AS CREATED_BY_ID 
				,ISNULL(CONVERT(VARCHAR(50),createdby.EMP_FULL_NAME ),'') AS CREATED_BY_NAME 
				,CASE WHEN HDR.CREATION_DATE IS NULL THEN '' ELSE FORMAT(HDR.CREATION_DATE, 'yyyy-MM-dd HH:mm:ss') END AS CREATION_DATE 
				,ISNULL(CONVERT(VARCHAR(50),HDR.LAST_UPDATED_BY),'') AS LAST_UPDATED_BY
				,ISNULL(updatedby.EMP_FULL_NAME,'') UPDATED_BY_NAME 
				,CASE WHEN HDR.LAST_UPDATE_DATE IS NULL THEN '' ELSE FORMAT(HDR.LAST_UPDATE_DATE, 'yyyy-MM-dd HH:mm:ss') END AS LAST_UPDATE_DATE
		FROM COMPLIANCE_HDR HDR 
			--INNER JOIN COMPLIANCE_TRL_TAGS CTAG ON HDR.MKEY = CTAG.COMPLIANCE_MKEY
			INNER join EMPLOYEE_MST createdby on HDR.CREATED_BY=createdby.MKEY
			LEFT join EMPLOYEE_MST resPnsbl on HDR.RESPONSIBLE_PERSON=resPnsbl.MKEY
			LEFT join EMPLOYEE_MST updatedby  on HDR.LAST_UPDATED_BY = updatedby.MKEY
			LEFT join TYPE_MST resDepart on  resDepart.MKEY = hdr.RESPONSIBLE_DEPARTMENT 
			LEFT join TYPE_MST resJobRole on  resJobRole.MKEY = hdr.JOB_ROLE
		WHERE 1 = 1
		AND HDR.DELETE_FLAG = 'N'
		AND createdby.DELETE_FLAG = 'N'
		AND PROPERTY = @PROPERTY_MKEY  
		AND BUILDING = @BUILDING_MKEY;
		--AND TASK_NO_MKEY = @TASK_MKEY;
	END TRY
    BEGIN CATCH
        -------------------------------------------------------------------------------------------------------------------------------            
        SELECT ERROR_NUMBER() AS ERRORNUMBER,
               ERROR_SEVERITY() AS ERRORSEVERITY,
               ERROR_STATE() AS ERRORSTATE,
               ERROR_PROCEDURE() AS ERRORPROCEDURE,
               ERROR_LINE() AS ERRORLINE,
               ERROR_MESSAGE() AS ERRORMESSAGE;

        -------------------------------------------------------------------------------------------------------------------------------  
        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
        SET @ERROR_MESSAGE = ERROR_MESSAGE();
        -------------------------------------------------------------------------------------------------------------------------------  
        EXEC SP_P_TMS_INSERT_ERROR_DES @USER_ID,
                                       'TMS',
                                       @API_NAME,
                                       @ERROR_MESSAGE,
                                       @API_METHOD;
    -------------------------------------------------------------------------------------------------------------------------------  
    END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_TASK_ENDLIST]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- EXEC SP_GET_TASK_ENDLIST 440,	443,11179,'ddfd','sdf',926
-- =============================================
CREATE PROCEDURE [dbo].[SP_GET_TASK_ENDLIST]
	-- Add the parameters for the stored procedure here
	@PROPERTY_MKEY INT,
	@BUILDING_MKEY INT,
	@TASK_MKEY INT,
	@API_NAME NVARCHAR(200),
	@API_METHOD NVARCHAR(100),
	@USER_ID INT
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
	
					SELECT ETRL.MKEY,SR_NO,THDR.PROJECT_ID AS PROPERTY_MKEY, THDR.SUB_PROJECT_ID AS BUILDING_MKEY
					, DOCUMENT_MKEY,DOCUMENT_NAME as TYPE_CODE,DOCUMENT_CATEGORY_MKEY as DOC_MKEY,DOCUMENT_CATEGORY as [TYPE_DESC]
					,DOC_NUM_APP_FLAG,DOC_NUM_VALID_FLAG,DOC_NUM_DATE_APP_FLAG,DOC_ATTACH_APP_FLAG,ISNULL(DOC_NUMBER,'') AS DOC_NUMBER
					,ISNULL(DOC_DATE,'') AS DOC_DATE,ISNULL(VALIDITY_DATE,'') AS VALIDITY_DATE
					,Isnull(CONVERT(VARCHAR(50), ETRL.created_by), '') AS CREATED_BY_ID
					,Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME
					,CASE
						WHEN ETRL.creation_date IS NULL THEN ''
						ELSE Format(ETRL.creation_date, 'yyyy-MM-dd HH:mm:ss')
					END AS CREATION_DATE
					,Isnull(CONVERT(VARCHAR(50), ETRL.last_updated_by), '') AS LAST_UPDATED_BY
					,Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME
					,CASE
						WHEN ETRL.last_update_date IS NULL THEN ''
						ELSE Format(ETRL.last_update_date, 'yyyy-MM-dd HH:mm:ss')
					END AS LAST_UPDATE_DATE

					FROM TASK_ENDLIST_TRL ETRL INNER JOIN TASK_HDR THDR ON ETRL.MKEY = THDR.MKEY
					INNER JOIN EMPLOYEE_MST createdby ON ETRL.created_by = createdby.mkey
					LEFT JOIN EMPLOYEE_MST updatedby ON ETRL.last_updated_by = updatedby.mkey
					WHERE ETRL.DELETE_FLAG = 'N'
					AND THDR.DELETE_FLAG = 'N'
					--AND (THDR.PROJECT_ID = @PROPERTY_MKEY OR THDR.PROJECT_ID IS NULL)
					--AND (THDR.SUB_PROJECT_ID = @BUILDING_MKEY OR THDR.SUB_PROJECT_ID IS NULL)
					AND THDR.MKEY = @TASK_MKEY;

		--select 
		--		THDR.PROJECT_ID AS PROPERTY_MKEY
		--		,THDR.SUB_PROJECT_ID as BUILDING_MKEY
		--		,Split.a.value('.', 'VARCHAR(100)') AS MKEY
		--		,A.DOCUMENT_NAME as ATTRIBUTE2
		--		,DHDR.DOC_NAME AS [TYPE_DESC]
		--		,ISNULL (PHDR.DOC_MKEY,'') AS DOC_MKEY
		--		,ISNULL (PHDR.DOC_NUMBER,'') AS DOC_NUMBER
		--		,ISNULL (PHDR.DOC_DATE,'') AS DOC_DATE
		--		,ISNULL (PHDR.VALIDITY_DATE,'') AS VALIDITY_DATE
		--		,DHDR.DOC_NUM_APP_FLAG
		--		,DHDR.DOC_NUM_VALID_FLAG
		--		,DHDR.DOC_NUM_DATE_APP_FLAG
		--		,DHDR.DOC_ATTACH_APP_FLAG
		--		,'' as [FILE_NAME]
		--		,'' as [FILE_PATH]
		--		,Isnull(CONVERT(VARCHAR(50), A.created_by), '') AS CREATED_BY_ID
		--		,Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME
		--		,CASE
		--			WHEN A.creation_date IS NULL THEN ''
		--			ELSE Format(A.creation_date, 'yyyy-MM-dd HH:mm:ss')
		--		END AS CREATION_DATE
		--		,Isnull(CONVERT(VARCHAR(50), A.last_updated_by), '') AS LAST_UPDATED_BY
		--		,Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME
		--		,CASE
		--			WHEN A.last_update_date IS NULL THEN ''
		--			ELSE Format(A.last_update_date, 'yyyy-MM-dd HH:mm:ss')
		--		END AS LAST_UPDATE_DATE
		--		FROM  
		--		(
		--		SELECT 
		--			DOCUMENT_CATEGORY,MKEY, DOCUMENT_NAME,DELETE_FLAG,CREATED_BY,CREATION_DATE,LAST_UPDATED_BY,LAST_UPDATE_DATE,
		--			CAST('<M>' + REPLACE(DOCUMENT_CATEGORY, ',', '</M><M>') + '</M>' AS XML) AS Data  
		--		FROM APPROVAL_TEMPLATE_TRL_ENDRESULT
		--		WHERE DELETE_FLAG = 'N' 
		--		) AS A 
		--		CROSS APPLY A.Data.nodes('/M') AS Split(a)
		--		INNER JOIN PROJECT_TRL_APPROVAL_ABBR ABBR ON  A.MKEY =  ABBR.APPROVAL_MKEY
		--		INNER JOIN DOC_TEMPLATE_HDR DHDR ON DHDR.MKEY =  CONVERT(int, Split.a.value('.', 'VARCHAR(100)'))  
		--		--INNER JOIN TYPE_MST TMST ON TMST.MKEY = DHDR.TYPE_MST_DOC_TYPE_MKEY
		--		INNER JOIN TASK_HDR THDR ON THDR.MKEY = ABBR.TASK_NO_MKEY
		--		LEFT JOIN PROJECT_DOC_DEPOSITORY_HDR PHDR ON PHDR.DOC_MKEY = DHDR.MKEY --PHDR.PROPERTY_TYPE = THDR.PROJECT_ID and phdr.BUILDING_TYPE = THDR.SUB_PROJECT_ID
		--		INNER JOIN EMPLOYEE_MST createdby ON ABBR.created_by = createdby.mkey
		--		LEFT JOIN EMPLOYEE_MST updatedby ON ABBR.last_updated_by = updatedby.mkey
		--		WHERE A.DELETE_FLAG = 'N'
		--		AND ABBR.DELETE_FLAG = 'N'
		--		AND DHDR.DELETE_FLAG = 'N'
		--		AND PHDR.DELETE_FLAG = 'N'
		--		AND THDR.DELETE_FLAG = 'N' 
		--		AND THDR.PROJECT_ID = @PROPERTY_MKEY
		--		AND THDR.SUB_PROJECT_ID = @BUILDING_MKEY
		--		AND THDR.MKEY = @TASK_MKEY
		
--		SELECT 
--   -- A.MKEY ,
--    PROPERTY_MKEY,
--    BUILDING_MKEY,
--    Split.a.value('.', 'int') MKEY,  
--    A.DOCUMENT_NAME as ATTRIBUTE2,
--    DHDR.DOC_NAME AS [TYPE_DESC]
--	,A.DOC_MKEY
--	,A.DOC_NUMBER
--	,A.DOC_DATE
--	,A.VALIDITY_DATE
--	,A.FILE_NAME
--	,A.FILE_PATH
--    --,A.CREATED_BY_ID,
--    --A.CREATED_BY_NAME,
--    --A.CREATION_DATE,
--    --A.LAST_UPDATED_BY,
--    --A.UPDATED_BY_NAME,
--    --A.LAST_UPDATE_DATE
--FROM  
--    (
--	SELECT 
--        chk.MKEY,  
--        PHDR.PROPERTY AS PROPERTY_MKEY,
--        PHDR.BUILDING_MKEY
--		,ISNULL (DDHDR.DOC_MKEY,'') AS DOC_MKEY
--		,ISNULL (DDHDR.DOC_NUMBER,'') AS DOC_NUMBER
--		,ISNULL (DDHDR.DOC_DATE,'') AS DOC_DATE
--		,ISNULL (DDHDR.VALIDITY_DATE,'') AS VALIDITY_DATE
--		--,DMEDIA.FILE_NAME
--		--,DMEDIA.FILE_PATH
--		,'' as [FILE_NAME]
--		,'' as [FILE_PATH]
--        ,CAST('<M>' + REPLACE(chk.[DOCUMENT_CATEGORY], ',', '</M><M>') + '</M>' AS XML) AS String,
--        DOCUMENT_NAME
--        --Isnull(CONVERT(VARCHAR(50), chk.created_by), '') AS CREATED_BY_ID,
--        --Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME,
--        --CASE
--        --    WHEN chk.creation_date IS NULL THEN ''
--        --    ELSE Format(chk.creation_date, 'yyyy-MM-dd HH:mm:ss')
--        --END AS CREATION_DATE,
--        --Isnull(CONVERT(VARCHAR(50), chk.last_updated_by), '') AS LAST_UPDATED_BY,
--        --Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME,
--        --CASE
--        --    WHEN chk.last_update_date IS NULL THEN ''
--        --    ELSE Format(chk.last_update_date, 'yyyy-MM-dd HH:mm:ss')
--        --END AS LAST_UPDATE_DATE
-- --   FROM  
-- --   APPROVAL_TEMPLATE_TRL_ENDRESULT chk
-- --   INNER JOIN PROJECT_TRL_APPROVAL_ABBR ABBR ON chk.MKEY = ABBR.APPROVAL_MKEY
-- --   INNER JOIN PROJECT_HDR PHDR ON PHDR.MKEY = ABBR.HEADER_MKEY
--	--LEFT JOIN PROJECT_DOC_DEPOSITORY_HDR DDHDR ON DDHDR.PROPERTY_TYPE = PHDR.PROPERTY AND DDHDR.BUILDING_TYPE = PHDR.BUILDING_MKEY
--	----LEFT JOIN PROJECT_DOC_DEPOSITORY_TRL_MEDIA DMEDIA ON DMEDIA .PROJECT_DOC_MKEY = DDHDR.MKEY
-- --   INNER JOIN TASK_HDR THDR ON THDR.MKEY = ABBR.TASK_NO_MKEY
--    --INNER JOIN EMPLOYEE_MST createdby ON ABBR.created_by = createdby.mkey
--    --LEFT JOIN EMPLOYEE_MST updatedby ON ABBR.last_updated_by = updatedby.mkey
--	from PROJECT_TRL_APPROVAL_ABBR abbr 
--	inner join TASK_HDR thdr on abbr.TASK_NO_MKEY = thdr.MKEY
--	inner join PROJECT_HDR PHDR on PHDR.MKEY = abbr.HEADER_MKEY
--	inner join APPROVAL_TEMPLATE_TRL_ENDRESULT chk on chk.MKEY = abbr.APPROVAL_MKEY
--	LEFT JOIN PROJECT_DOC_DEPOSITORY_HDR DDHDR ON DDHDR.PROPERTY_TYPE = PHDR.PROPERTY AND DDHDR.BUILDING_TYPE = PHDR.BUILDING_MKEY
--	inner join DOC_TEMPLATE_HDR dhdr on dhdr.MKEY = chk.DOCUMENT_CATEGORY
--	--inner join TYPE_MST cat on dhdr.TYPE_MST_DOC_TYPE_MKEY =  cat.MKEY
--    WHERE 1 = 1
--        AND  chk.DELETE_FLAG = 'N' 
--        AND ABBR.DELETE_FLAG = 'N' 
--        AND THDR.DELETE_FLAG = 'N' 
--		AND PHDR.DELETE_FLAG = 'N' 
--		AND dhdr.DELETE_FLAG = 'N' 
--      --  AND PHDR.PROPERTY = @PROPERTY_MKEY
--        --AND PHDR.BUILDING_MKEY = @BUILDING_MKEY
--        --AND THDR.MKEY = @TASK_MKEY
--    ) AS A 
--CROSS APPLY 
--    A.String.nodes('/M') AS Split(a) 
--INNER JOIN 
--    DOC_TEMPLATE_HDR DHDR ON CAST(Split.a.value('.', 'int') AS INT) = DHDR.MKEY
--ORDER BY 
--    DHDR.MKEY;


			--SELECT 
			--	ENDLST.MKEY,
			--	PHDR.PROPERTY AS PROPERTY_MKEY,
			--	PHDR.BUILDING_MKEY,
			--	ENDLST.DOCUMENT_CATEGORY,
			--	ENDLST.DOCUMENT_NAME,
				--Isnull(CONVERT(VARCHAR(50), HDR.created_by), '') AS CREATED_BY_ID,
				--Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME,
				--CASE
				--	WHEN HDR.creation_date IS NULL THEN
				--''
				--ELSE
				--	Format(HDR.creation_date, 'yyyy-MM-dd HH:mm:ss')
				--END AS CREATION_DATE,
				--Isnull(CONVERT(VARCHAR(50), HDR.last_updated_by), '') AS LAST_UPDATED_BY,
				--Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME,
				--CASE
				--	WHEN HDR.last_update_date IS NULL THEN
				--	''
				--ELSE
				--	Format(HDR.last_update_date, 'yyyy-MM-dd HH:mm:ss')
				--END AS LAST_UPDATE_DATE
			--FROM 
			--	APPROVAL_TEMPLATE_TRL_ENDRESULT ENDLST
			--INNER JOIN 
			--	APPROVAL_TEMPLATE_HDR HDR
			--ON 
			--	ENDLST.mkey = HDR.mkey
			--INNER JOIN 
			--	PROJECT_TRL_APPROVAL_ABBR ABBR
			--ON 
			--	HDR.MKEY = ABBR.APPROVAL_MKEY
			--INNER JOIN 
			--	TASK_HDR THDR
			--ON 
			--	THDR.MKEY = ABBR.TASK_NO_MKEY
			--INNER JOIN 
			--	PROJECT_HDR PHDR
			--ON 
			--	PHDR.MKEY = ABBR.HEADER_MKEY
			--INNER JOIN 
			--	EMPLOYEE_MST createdby
			--ON 
			--	HDR.created_by = createdby.mkey
			--LEFT JOIN 
			--	EMPLOYEE_MST updatedby
			--ON 
			--	HDR.last_updated_by = updatedby.mkey
			--WHERE 
			--	ENDLST.DELETE_FLAG = 'N'
			--AND 
			--	HDR.DELETE_FLAG = 'N'
			--AND 
			--	ABBR.DELETE_FLAG = 'N'
			--AND 
			--	PHDR.DELETE_FLAG = 'N'
			--AND 
			--	createdby.DELETE_FLAG = 'N'
			--AND 
			--	PHDR.PROPERTY = @PROPERTY_MKEY
			--AND 
			--	PHDR.BUILDING_MKEY = @BUILDING_MKEY
			--AND THDR.MKEY = @TASK_MKEY;

			--	SELECT PHDR.PROPERTY,PHDR.BUILDING_MKEY,  DHDR.*,Isnull(CONVERT(VARCHAR(50), THDR.created_by), '') AS CREATED_BY_ID,
		--		Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME,
		--		CASE
		--			WHEN THDR.creation_date IS NULL THEN
		--		''
		--		ELSE
		--			Format(THDR.creation_date, 'yyyy-MM-dd HH:mm:ss')
		--		END AS CREATION_DATE,
		--		Isnull(CONVERT(VARCHAR(50), THDR.last_updated_by), '') AS LAST_UPDATED_BY,
		--		Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME,
		--		CASE
		--			WHEN THDR.last_update_date IS NULL THEN
		--			''
		--		ELSE
		--			Format(THDR.last_update_date, 'yyyy-MM-dd HH:mm:ss')
		--		END AS LAST_UPDATE_DATE
		--from TASK_HDR THDR INNER JOIN PROJECT_TRL_APPROVAL_ABBR ABBR ON THDR.MKEY = ABBR.TASK_NO_MKEY
		----INNER JOIN APPROVAL_TEMPLATE_HDR AHDR ON AHDR.MKEY = ABBR.APPROVAL_MKEY
		--INNER JOIN PROJECT_HDR PHDR ON PHDR.MKEY = ABBR.HEADER_MKEY
		--INNER JOIN APPROVAL_TEMPLATE_TRL_ENDRESULT ENDDOC ON ENDDOC.MKEY = ABBR.APPROVAL_MKEY
		--INNER JOIN DOC_TEMPLATE_HDR DHDR ON DHDR.MKEY = ENDDOC.DOCUMENT_CATEGORY
		--INNER JOIN 
		--		EMPLOYEE_MST createdby
		--	ON 
		--		THDR.created_by = createdby.mkey
		--	LEFT JOIN 
		--		EMPLOYEE_MST updatedby
		--	ON 
		--		THDR.last_updated_by = updatedby.mkey
		--WHERE 1 = 1
		--AND THDR.DELETE_FLAG = 'N'
		--AND ABBR.DELETE_FLAG = 'N'
		----AND AHDR.DELETE_FLAG = 'N'
		--AND ENDDOC.DELETE_FLAG = 'N'
		--AND DHDR.DELETE_FLAG = 'N'
		--AND PHDR.DELETE_FLAG = 'N'
		--AND THDR.MKEY = @TASK_MKEY
		--AND PHDR.PROPERTY = @PROPERTY_MKEY
		--AND PHDR.BUILDING_MKEY = @BUILDING_MKEY;
		
	END TRY
    BEGIN CATCH
        -------------------------------------------------------------------------------------------------------------------------------            
        SELECT ERROR_NUMBER() AS ERRORNUMBER,
               ERROR_SEVERITY() AS ERRORSEVERITY,
               ERROR_STATE() AS ERRORSTATE,
               ERROR_PROCEDURE() AS ERRORPROCEDURE,
               ERROR_LINE() AS ERRORLINE,
               ERROR_MESSAGE() AS ERRORMESSAGE;

        -------------------------------------------------------------------------------------------------------------------------------  
        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
        SET @ERROR_MESSAGE = ERROR_MESSAGE();
        -------------------------------------------------------------------------------------------------------------------------------  
        EXEC SP_P_TMS_INSERT_ERROR_DES @USER_ID,
                                       'TMS',
                                       @API_NAME,
                                       @ERROR_MESSAGE,
                                       @API_METHOD;
    -------------------------------------------------------------------------------------------------------------------------------  
    END CATCH

END

GO
/****** Object:  StoredProcedure [dbo].[SP_GET_TASK_ENDLIST_DETAILS]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- EXEC SP_GET_TASK_ENDLIST_DETAILS 207,273,18 ,'','',926
-- =============================================
CREATE PROCEDURE [dbo].[SP_GET_TASK_ENDLIST_DETAILS]
	-- Add the parameters for the stored procedure here
	@PROPERTY_MKEY INT,
	@BUILDING_MKEY INT,
	@DOC_MKEY INT,
	@API_NAME NVARCHAR(200),
	@API_METHOD NVARCHAR(100),
	@USER_ID INT
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
			SELECT 
				 DHDR.MKEY
				,@PROPERTY_MKEY AS PROPERTY_MKEY
				,@BUILDING_MKEY AS BUILDING_MKEY
				,PHDR.DOC_MKEY
				,PHDR.DOC_NUMBER
				,PHDR.DOC_DATE
				,PHDR.VALIDITY_DATE
				,DHDR.DOC_NUM_APP_FLAG
				,DHDR.DOC_NUM_VALID_FLAG
				,DHDR.DOC_NUM_DATE_APP_FLAG
				,DHDR.DOC_ATTACH_APP_FLAG
				,Isnull(CONVERT(VARCHAR(50), DHDR.created_by), '') AS CREATED_BY_ID,
				Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME,
				CASE
					WHEN DHDR.creation_date IS NULL THEN
				''
				ELSE
					Format(DHDR.creation_date, 'yyyy-MM-dd HH:mm:ss')
				END AS CREATION_DATE,
				Isnull(CONVERT(VARCHAR(50), DHDR.last_updated_by), '') AS LAST_UPDATED_BY,
				Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME,
				CASE
					WHEN DHDR.last_update_date IS NULL THEN
					''
				ELSE
					Format(DHDR.last_update_date, 'yyyy-MM-dd HH:mm:ss')
				END AS LAST_UPDATE_DATE
			FROM DOC_TEMPLATE_HDR DHDR
			LEFT JOIN PROJECT_DOC_DEPOSITORY_HDR PHDR ON DHDR.MKEY = PHDR.DOC_MKEY
			INNER JOIN EMPLOYEE_MST createdby ON DHDR.created_by = createdby.mkey
			LEFT JOIN EMPLOYEE_MST updatedby ON DHDR.last_updated_by = updatedby.mkey
			WHERE 1 = 1
			AND DHDR.DELETE_FLAG = 'N'
			AND PHDR.DELETE_FLAG = 'N'
			AND createdby.DELETE_FLAG = 'N'
			AND DHDR.MKEY = @DOC_MKEY
			ORDER BY DHDR.MKEY;

			--SELECT 
			--	HDR.MKEY
			--	,HDR.PROPERTY_TYPE AS PROPERTY_MKEY
			--	,HDR.BUILDING_TYPE AS BUILDING_MKEY
			--	,HDR.DOC_MKEY
			--	,HDR.DOC_NUMBER
			--	,HDR.DOC_DATE
			--	,HDR.VALIDITY_DATE
			--	,DHDR.DOC_NUM_APP_FLAG
			--	,DHDR.DOC_NUM_VALID_FLAG
			--	,DHDR.DOC_NUM_DATE_APP_FLAG
			--	,DHDR.DOC_ATTACH_APP_FLAG
			--	,Isnull(CONVERT(VARCHAR(50), HDR.created_by), '') AS CREATED_BY_ID,
			--	Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME,
			--	CASE
			--		WHEN HDR.creation_date IS NULL THEN
			--	''
			--	ELSE
			--		Format(HDR.creation_date, 'yyyy-MM-dd HH:mm:ss')
			--	END AS CREATION_DATE,
			--	Isnull(CONVERT(VARCHAR(50), HDR.last_updated_by), '') AS LAST_UPDATED_BY,
			--	Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME,
			--	CASE
			--		WHEN HDR.last_update_date IS NULL THEN
			--		''
			--	ELSE
			--		Format(HDR.last_update_date, 'yyyy-MM-dd HH:mm:ss')
			--	END AS LAST_UPDATE_DATE
			--FROM PROJECT_DOC_DEPOSITORY_HDR HDR
			--RIGHT JOIN DOC_TEMPLATE_HDR DHDR ON HDR.DOC_MKEY = DHDR.MKEY
			--INNER JOIN EMPLOYEE_MST createdby ON HDR.created_by = createdby.mkey
			--LEFT JOIN EMPLOYEE_MST updatedby ON HDR.last_updated_by = updatedby.mkey
			--WHERE 1 = 1
			--AND HDR.DELETE_FLAG = 'N'
			--AND createdby.DELETE_FLAG = 'N'
			--AND HDR.PROPERTY_TYPE = @PROPERTY_MKEY
			--AND HDR.BUILDING_TYPE = @BUILDING_MKEY
			--AND DOC_MKEY = @DOC_MKEY
			--ORDER BY HDR.MKEY;
		
	END TRY
    BEGIN CATCH
        -------------------------------------------------------------------------------------------------------------------------------            
        SELECT ERROR_NUMBER() AS ERRORNUMBER,
               ERROR_SEVERITY() AS ERRORSEVERITY,
               ERROR_STATE() AS ERRORSTATE,
               ERROR_PROCEDURE() AS ERRORPROCEDURE,
               ERROR_LINE() AS ERRORLINE,
               ERROR_MESSAGE() AS ERRORMESSAGE;

        -------------------------------------------------------------------------------------------------------------------------------  
        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
        SET @ERROR_MESSAGE = ERROR_MESSAGE();
        -------------------------------------------------------------------------------------------------------------------------------  
        EXEC SP_P_TMS_INSERT_ERROR_DES @USER_ID,
                                       'TMS',
                                       @API_NAME,
                                       @ERROR_MESSAGE,
                                       @API_METHOD;
    -------------------------------------------------------------------------------------------------------------------------------  
    END CATCH

END

GO
/****** Object:  StoredProcedure [dbo].[SP_GET_TASK_ENDLIST_MEDIA]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--	EXEC SP_GET_TASK_ENDLIST_MEDIA 11083,15,46454
CREATE PROCEDURE [dbo].[SP_GET_TASK_ENDLIST_MEDIA]
	@TASK_MKEY INT,
	@DOC_CATEGORY_MKEY INT,
	@USER_ID INT
	AS
	BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY
	
		SELECT 
		ETRL.MKEY,ETRL.SR_NO,ETRL.DOC_CATEGORY_MKEY,ETRL.FILE_NAME,ETRL.FILE_PATH
		,Isnull(CONVERT(VARCHAR(50), ETRL.created_by), '') AS CREATED_BY_ID,
				Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME,
				CASE
					WHEN ETRL.creation_date IS NULL THEN
				''
				ELSE
					Format(ETRL.creation_date, 'yyyy-MM-dd HH:mm:ss')
				END AS CREATION_DATE,
				Isnull(CONVERT(VARCHAR(50), ETRL.last_updated_by), '') AS LAST_UPDATED_BY,
				Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME,
				CASE
					WHEN ETRL.last_update_date IS NULL THEN
					''
				ELSE
					Format(ETRL.last_update_date, 'yyyy-MM-dd HH:mm:ss')
				END AS LAST_UPDATE_DATE
		FROM TASK_ENDLIST_MEDIA_TRL ETRL
		INNER JOIN 
				EMPLOYEE_MST createdby
			ON 
				ETRL.created_by = createdby.mkey
			LEFT JOIN 
				EMPLOYEE_MST updatedby
			ON 
				ETRL.last_updated_by = updatedby.mkey
		WHERE ETRL.MKEY = @TASK_MKEY AND DOC_CATEGORY_MKEY = @DOC_CATEGORY_MKEY 
		AND ETRL.DELETE_FLAG = 'N' AND createdby.DELETE_FLAG = 'N'; 
		
		--SELECT 
		--		HDR.MKEY
		--		,HDR.SR_NO
		--		,HDR.PROJECT_DOC_MKEY
		--		,HDR.FILE_NAME
		--		,HDR.FILE_PATH
		--		,Isnull(CONVERT(VARCHAR(50), HDR.created_by), '') AS CREATED_BY_ID,
		--		Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME,
		--		CASE
		--			WHEN HDR.creation_date IS NULL THEN
		--		''
		--		ELSE
		--			Format(HDR.creation_date, 'yyyy-MM-dd HH:mm:ss')
		--		END AS CREATION_DATE,
		--		Isnull(CONVERT(VARCHAR(50), HDR.last_updated_by), '') AS LAST_UPDATED_BY,
		--		Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME,
		--		CASE
		--			WHEN HDR.last_update_date IS NULL THEN
		--			''
		--		ELSE
		--			Format(HDR.last_update_date, 'yyyy-MM-dd HH:mm:ss')
		--		END AS LAST_UPDATE_DATE
		--FROM PROJECT_DOC_DEPOSITORY_TRL_MEDIA HDR
		--	INNER JOIN 
		--		EMPLOYEE_MST createdby
		--	ON 
		--		HDR.created_by = createdby.mkey
		--	LEFT JOIN 
		--		EMPLOYEE_MST updatedby
		--	ON 
		--		HDR.last_updated_by = updatedby.mkey
		--WHERE HDR.MKEY = @MKEY
		--AND HDR.DELETE_FLAG = 'N'
		--AND createdby.DELETE_FLAG = 'N'
		--order by hdr.MKEY, hdr.SR_NO;
	END TRY
	BEGIN CATCH
	-------------------------------------------------------------------------------------------------------------------------------          
		SELECT ERROR_NUMBER()    AS ERRORNUMBER,
				ERROR_SEVERITY()  AS ERRORSEVERITY,
				ERROR_STATE()     AS ERRORSTATE,
				ERROR_PROCEDURE() AS ERRORPROCEDURE,
				ERROR_LINE()      AS ERRORLINE,
				ERROR_MESSAGE()   AS ERRORMESSAGE;
		-------------------------------------------------------------------------------------------------------------------------------
		DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
		SET @ERROR_MESSAGE = ERROR_MESSAGE();
		-------------------------------------------------------------------------------------------------------------------------------
		--EXEC sp_P_TMS_INSERT_ERROR_DES @CREATED_BY,'TMS',@ATTRIBUTE1,@ERROR_MESSAGE,@ATTRIBUTE2;
	-------------------------------------------------------------------------------------------------------------------------------
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_TASK_RECURSIVE]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================    
-- AUTHOR:  AMIT SHUDDHALWAR    
-- CREATE DATE: 19-09-2024    
-- DESCRIPTION: TO GET TASK RECURSIVE TABLE DETAILS (HDR,TRL)   
-- EXEC SP_GET_TASK_RECURSIVE @MKEY=NULL  
-- EXEC SP_GET_TASK_RECURSIVE @MKEY=169  
-- =============================================    
CREATE PROCEDURE [dbo].[SP_GET_TASK_RECURSIVE]
  -- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE    
  @MKEY NUMERIC = NULL,
  @ATTRIBUT14 VARCHAR = NULL, -- USER ID
  @ATTRIBUT15 VARCHAR = NULL, -- FORM NAME
  @ATTRIBUT16 VARCHAR = NULL -- FUCNTION/METHOD NAME
AS
  BEGIN
      -- SET NOCOUNT ON ADDED TO PREVENT EXTRA RESULT SETS FROM    
      -- INTERFERING WITH SELECT STATEMENTS.    
      SET NOCOUNT ON;
      BEGIN TRY ;
          -- TO CHECK THE @MKEY IS NULL OR EMPTY IF EMPTY THE SHOW ALL ROWS    
          IF ( @MKEY IS NOT NULL
               AND LEN(@MKEY) > 0 )
            BEGIN
                SELECT HDR.MKEY,
                       HDR.TASK_NAME,
                       HDR.TASK_DESCRIPTION,
                       HDR.TERM,
					   CAREGORY,
						PROJECT_ID,
						SUB_PROJECT_ID,
						ASSIGNED_TO,
						TAGS,
						NO_DAYS,
					   CONVERT(DATETIME2,HDR.[START_DATE]) AS 'START_DATE',
                       HDR.ENDS,
					   CONVERT(DATETIME2,HDR.END_DATE) AS 'END_DATE',
                       HDR.STATUS,
                       HDR.CREATED_BY,
                       HDR.CREATION_DATE,
                       HDR.LAST_UPDATED_BY,
                       HDR.LAST_UPDATE_DATE,
                       TRL.ATTRIBUTE1,
                       TRL.ATTRIBUTE2,
                       TRL.ATTRIBUTE3,
                       TRL.ATTRIBUTE4,
                       TRL.ATTRIBUTE5,
                       TRL.ATTRIBUTE6,
                       TRL.ATTRIBUTE7,
					   TRL.ATTRIBUTE8,
                       TRL.ATTRIBUTE9,
                       TRL.ATTRIBUTE10,
                       TRL.ATTRIBUTE11,
					   TRL.ATTRIBUTE12,
					   TRL.ATTRIBUTE13,
                       TRL.SR_NO,
                       TRL.TERM_TYPE,
                       TRL.CREATED_BY,
                       TRL.CREATION_DATE,
                       TRL.LAST_UPDATED_BY,
                       TRL.LAST_UPDATE_DATE,
					   TRM.MKEY AS FILE_MKEY,
					   TRM.SR_NO AS FILE_SR_NO,
					   TRM.FILE_NAME,
					   TRM.FILE_PATH
                FROM   [DBO].[TASK_RECURSIVE_HDR] HDR
                       INNER JOIN [DBO].[TASK_RECURSIVE_TRL] TRL
                               ON HDR.MKEY = TRL.MKEY
					    LEFT JOIN TASK_RECURSIVE_MEDIA_TRL TRM
					   ON TRM.TASK_MKEY = HDR.MKEY
                WHERE  HDR.MKEY in(@MKEY)
                       AND HDR.DELETE_FLAG = 'N'
                       AND TRL.DELETE_FLAG = 'N'
			 ORDER BY  HDR.MKEY;
            END
          ELSE
            BEGIN
                SELECT HDR.MKEY,
                       HDR.TASK_NAME,
                       HDR.TASK_DESCRIPTION,
                       HDR.TERM,
					   CAREGORY,
						PROJECT_ID,
						SUB_PROJECT_ID,
						ASSIGNED_TO,
						TAGS,
						NO_DAYS,
                       CONVERT(DATETIME2,HDR.[START_DATE]) AS 'START_DATE',
                       HDR.ENDS,
					   CONVERT(DATETIME2,HDR.END_DATE) AS 'END_DATE',
                       HDR.STATUS,
                       HDR.CREATED_BY,
                       HDR.CREATION_DATE,
                       HDR.LAST_UPDATED_BY,
                       HDR.LAST_UPDATE_DATE,
                       HDR.DELETE_FLAG,
                       HDR.IS_SCHEDULED,
                       TRL.ATTRIBUTE1,
                       TRL.ATTRIBUTE2,
                       TRL.ATTRIBUTE3,
                       TRL.ATTRIBUTE4,
                       TRL.ATTRIBUTE5,
                       TRL.ATTRIBUTE6,
                       TRL.ATTRIBUTE7,
					   TRL.ATTRIBUTE8,
                       TRL.ATTRIBUTE9,
                       TRL.ATTRIBUTE10,
                       TRL.ATTRIBUTE11,
					   TRL.ATTRIBUTE12,
					   TRL.ATTRIBUTE13,
                       TRL.MKEY,
                       TRL.SR_NO,
                       TRL.TERM_TYPE,
                       TRL.CREATED_BY,
                       TRL.CREATION_DATE,
                       TRL.LAST_UPDATED_BY,
                       TRL.LAST_UPDATE_DATE,
                       TRL.DELETE_FLAG,
					   TRM.MKEY AS FILE_MKEY,
					   TRM.SR_NO AS FILE_SR_NO,
					   TRM.FILE_NAME,
					   TRM.FILE_PATH
                FROM   [DBO].[TASK_RECURSIVE_HDR] HDR
                       INNER JOIN [DBO].[TASK_RECURSIVE_TRL] TRL
                               ON HDR.MKEY = TRL.MKEY
					   LEFT JOIN TASK_RECURSIVE_MEDIA_TRL TRM
					   ON TRM.TASK_MKEY = HDR.MKEY
                WHERE  HDR.DELETE_FLAG = 'N'
			 ORDER BY  HDR.MKEY;
            END
      END TRY
      BEGIN CATCH
------------------------------------------------------------------------------------------------------------------------------------
          SELECT ERROR_NUMBER()    AS ERRORNUMBER,
                 ERROR_SEVERITY()  AS ERRORSEVERITY,
                 ERROR_STATE()     AS ERRORSTATE,
                 ERROR_PROCEDURE() AS ERRORPROCEDURE,
                 ERROR_LINE()      AS ERRORLINE,
                 ERROR_MESSAGE()   AS ERRORMESSAGE;
-------------------------------------------------------------------------------------------------------------------------------
			DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
			SET @ERROR_MESSAGE = ERROR_MESSAGE();
------------------------------------------------------------------------------------------------------------------------------------
		EXEC sp_P_TMS_INSERT_ERROR_DES @ATTRIBUT14,'TMS',@ATTRIBUT15,@ERROR_MESSAGE,@ATTRIBUT16;
------------------------------------------------------------------------------------------------------------------------------------
      END CATCH
  END
  	
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_TASK_SANCTIONING_DEPARTMENT]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
--  EXEC SP_GET_TASK_SANCTIONING_DEPARTMENT 11082,11,11, 'DFD','SDFG',926
-- =============================================
CREATE PROCEDURE [dbo].[SP_GET_TASK_SANCTIONING_DEPARTMENT]
	-- Add the parameters for the stored procedure here
	@MKEY INT,
	@PROPERTY_MKEY INT,
	@BUILDING_MKEY INT,
	--@TASK_MKEY INT,
	@API_NAME NVARCHAR(200),
	@API_METHOD NVARCHAR(100),
	@USER_ID INT
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY

				SELECT DTRL.MKEY,DTRL.SR_NO, THDR.PROJECT_ID AS PROPERTY_MKEY,THDR.SUB_PROJECT_ID AS BUILDING_MKEY, 
				DTRL.SANCTIONING_DEPARTMENT AS TYPE_CODE,DTRL.SANCTIONING_AUTHORITY AS [TYPE_DESC],
				DTRL.SANCTIONING_AUTHORITY_MKEY AS SANCTIONING_AUTHORITY ,
				ISNULL(DTRL.[STATUS],'In-Progress') AS [STATUS],
				--CASE WHEN  DTRL.[STATUS] = NULL THEN 'In-Progress' end AS [STATUS],
				DTRL.[START_DATE], DTRL.END_DATE, DTRL.[level] 
				,Isnull(CONVERT(VARCHAR(50), DTRL.created_by), '') AS CREATED_BY_ID,
				Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME,
				CASE
					WHEN DTRL.creation_date IS NULL THEN
				''
				ELSE
					Format(DTRL.creation_date, 'yyyy-MM-dd HH:mm:ss')
				END AS CREATION_DATE,
				Isnull(CONVERT(VARCHAR(50), DTRL.last_updated_by), '') AS LAST_UPDATED_BY,
				Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME,
				CASE
					WHEN DTRL.last_update_date IS NULL THEN
					''
				ELSE
					Format(DTRL.last_update_date, 'yyyy-MM-dd HH:mm:ss')
				END AS LAST_UPDATE_DATE
				FROM  TASK_SANCTIONING_DEPARTMENT_TRL DTRL INNER JOIN TASK_HDR THDR ON DTRL.MKEY = THDR.MKEY
				INNER JOIN EMPLOYEE_MST createdby ON DTRL.CREATED_BY = createdby.mkey
				LEFT JOIN EMPLOYEE_MST updatedby ON DTRL.last_updated_by = updatedby.mkey
				WHERE  DTRL.DELETE_FLAG = 'N'
				AND createdby.DELETE_FLAG = 'N'
				AND DTRL.MKEY =  @MKEY 
				ORDER BY DTRL.[level] ;

				--AND THDR.PROJECT_ID = @PROPERTY_MKEY
				--AND THDR.SUB_PROJECT_ID  = @BUILDING_MKEY
				--ORDER BY  DTRL.MKEY, DTRL.SR_NO;


				--SELECT  SDEPT.MKEY, TASK_NO_MKEY,PHDR.PROPERTY AS PROPERTY_MKEY,PHDR.BUILDING_MKEY,
				--SDEPT.SANCTIONING_DEPARTMENT AS TYPE_CODE,SDEPT.SANCTIONING_DEPARTMENT AS [TYPE_DESC]
				--,SDEPT.SR_NO,SDEPT.SANCTIONING_AUTHORITY AS SANCTIONING_AUTHORITY_MKEY, THDR.[TYPE_DESC] as SANCTIONING_AUTHORITY_NAME, 
				--CASE WHEN  ISNULL(SDEPT.[STATUS],'') = '' OR ISNULL(SDEPT.[STATUS],'') = NULL THEN 'In-Progress' end AS [STATUS],SDEPT.LEVEL
				--,Isnull(CONVERT(VARCHAR(50), SDEPT.created_by), '') AS CREATED_BY_ID,
				--Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME,
				--CASE
				--	WHEN SDEPT.creation_date IS NULL THEN
				--''
				--ELSE
				--	Format(SDEPT.creation_date, 'yyyy-MM-dd HH:mm:ss')
				--END AS CREATION_DATE,
				--Isnull(CONVERT(VARCHAR(50), SDEPT.last_updated_by), '') AS LAST_UPDATED_BY,
				--Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME,
				--CASE
				--	WHEN SDEPT.last_update_date IS NULL THEN
				--	''
				--ELSE
				--	Format(SDEPT.last_update_date, 'yyyy-MM-dd HH:mm:ss')
				--END AS LAST_UPDATE_DATE
				--FROM APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT SDEPT
				--INNER JOIN PROJECT_TRL_APPROVAL_ABBR ABBR ON  SDEPT.MKEY =  ABBR.APPROVAL_MKEY
				--INNER JOIN PROJECT_HDR PHDR ON PHDR.MKEY = ABBR.HEADER_MKEY
				--INNER JOIN TYPE_MST THDR on SDEPT.SANCTIONING_AUTHORITY = THDR.MKEY
				--INNER JOIN EMPLOYEE_MST createdby ON SDEPT.CREATED_BY = createdby.mkey
				--LEFT JOIN EMPLOYEE_MST updatedby ON SDEPT.last_updated_by = updatedby.mkey
				--WHERE SDEPT.DELETE_FLAG = 'N' 
				--AND ABBR.DELETE_FLAG = 'N'
				--AND PHDR.DELETE_FLAG = 'N'
				--AND createdby.DELETE_FLAG = 'N'
				--AND ABBR.TASK_NO_MKEY =  @TASK_MKEY
				--AND PHDR.PROPERTY = @PROPERTY_MKEY
				--AND PHDR.BUILDING_MKEY  = @BUILDING_MKEY
				--ORDER BY SDEPT.MKEY,SDEPT.SANCTIONING_DEPARTMENT;


	--		SELECT  ADEPT.MKEY, TASK_NO_MKEY,PHDR.PROPERTY AS PROPERTY_MKEY,PHDR.BUILDING_MKEY,
	--ADEPT.SANCTIONING_DEPARTMENT AS TYPE_CODE,ADEPT.SANCTIONING_DEPARTMENT AS [TYPE_DESC]
	--,ADEPT.SANCTIONING_AUTHORITY,ISNULL(ADEPT.[STATUS],'') AS [STATUS],ADEPT.LEVEL
	--,Isnull(CONVERT(VARCHAR(50), ADEPT.created_by), '') AS CREATED_BY_ID,
	--			Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME,
	--			CASE
	--				WHEN ADEPT.creation_date IS NULL THEN
	--			''
	--			ELSE
	--				Format(ADEPT.creation_date, 'yyyy-MM-dd HH:mm:ss')
	--			END AS CREATION_DATE,
	--			Isnull(CONVERT(VARCHAR(50), ADEPT.last_updated_by), '') AS LAST_UPDATED_BY,
	--			Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME,
	--			CASE
	--				WHEN ADEPT.last_update_date IS NULL THEN
	--				''
	--			ELSE
	--				Format(ADEPT.last_update_date, 'yyyy-MM-dd HH:mm:ss')
	--			END AS LAST_UPDATE_DATE
	--FROM PROJECT_TRL_APPROVAL_ABBR ABBR
	--INNER JOIN PROJECT_HDR PHDR ON ABBR.HEADER_MKEY = PHDR.MKEY
	--INNER JOIN APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT ADEPT ON ABBR.APPROVAL_MKEY = ADEPT.MKEY
	--INNER JOIN EMPLOYEE_MST createdby ON ADEPT.created_by = createdby.mkey
	--LEFT JOIN EMPLOYEE_MST updatedby ON ADEPT.last_updated_by = updatedby.mkey
	--WHERE 1 = 1  
	--AND ABBR.DELETE_FLAG = 'N'
	--AND ADEPT.DELETE_FLAG = 'N'
	--AND PHDR.DELETE_FLAG = 'N'
	--AND createdby.DELETE_FLAG = 'N'
	--and TASK_NO_MKEY =   @TASK_MKEY
	--AND PHDR.PROPERTY =  @PROPERTY_MKEY 
	--AND PHDR.BUILDING_MKEY =  @BUILDING_MKEY;
	
	--SELECT 
		 --       TMST.MKEY
			--	,TMST.TYPE_CODE
			--	,TMST.TYPE_DESC  
			--	,PHDR.PROPERTY AS PROPERTY_MKEY
			--	,PHDR.BUILDING_MKEY
			--	,SDEPART.SANCTIONING_AUTHORITY,
			--	Isnull(CONVERT(VARCHAR(50), HDR.created_by), '') AS CREATED_BY_ID,
			--	Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME,
			--	CASE
			--		WHEN HDR.creation_date IS NULL THEN
			--	''
			--	ELSE
			--		Format(HDR.creation_date, 'yyyy-MM-dd HH:mm:ss')
			--	END AS CREATION_DATE,
			--	Isnull(CONVERT(VARCHAR(50), HDR.last_updated_by), '') AS LAST_UPDATED_BY,
			--	Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME,
			--	CASE
			--		WHEN HDR.last_update_date IS NULL THEN
			--		''
			--	ELSE
			--		Format(HDR.last_update_date, 'yyyy-MM-dd HH:mm:ss')
			--	END AS LAST_UPDATE_DATE
			--FROM 
			--	TYPE_MST TMST 
			--INNER JOIN 
			--	APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT SDEPART ON TMST.MKEY = SDEPART.SANCTIONING_AUTHORITY
			--INNER JOIN 
			--	APPROVAL_TEMPLATE_HDR HDR
			--ON 
			--	SDEPART.mkey = HDR.mkey
			--INNER JOIN 
			--	PROJECT_TRL_APPROVAL_ABBR ABBR
			--ON 
			--	HDR.MKEY = ABBR.APPROVAL_MKEY
			--INNER JOIN 
			--	PROJECT_HDR PHDR
			--ON 
			--	PHDR.MKEY = ABBR.HEADER_MKEY
			--INNER JOIN 
			--	EMPLOYEE_MST createdby
			--ON 
			--	HDR.created_by = createdby.mkey
			--LEFT JOIN 
			--	EMPLOYEE_MST updatedby
			--ON 
			--	HDR.last_updated_by = updatedby.mkey
			--WHERE  1 = 1
			--AND 
			--	TMST.TYPE_CODE = 'SAUTHORITY'
			--AND 
			--	PHDR.PROPERTY = @PROPERTY_MKEY
			--AND 
			--	PHDR.BUILDING_MKEY = @BUILDING_MKEY
			--AND 
			--	SDEPART.DELETE_FLAG = 'N'
			--AND 
			--	HDR.DELETE_FLAG = 'N'
			--AND 
			--	ABBR.DELETE_FLAG = 'N'
			--AND 
			--	PHDR.DELETE_FLAG = 'N'
			--AND 
			--	createdby.DELETE_FLAG = 'N';
		
	END TRY
    BEGIN CATCH
        -------------------------------------------------------------------------------------------------------------------------------            
        SELECT ERROR_NUMBER() AS ERRORNUMBER,
               ERROR_SEVERITY() AS ERRORSEVERITY,
               ERROR_STATE() AS ERRORSTATE,
               ERROR_PROCEDURE() AS ERRORPROCEDURE,
               ERROR_LINE() AS ERRORLINE,
               ERROR_MESSAGE() AS ERRORMESSAGE;

        -------------------------------------------------------------------------------------------------------------------------------  
        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
        SET @ERROR_MESSAGE = ERROR_MESSAGE();
        -------------------------------------------------------------------------------------------------------------------------------  
        EXEC SP_P_TMS_INSERT_ERROR_DES @USER_ID,
                                       'TMS',
                                       @API_NAME,
                                       @ERROR_MESSAGE,
                                       @API_METHOD;
    -------------------------------------------------------------------------------------------------------------------------------  
    END CATCH

END

GO
/****** Object:  StoredProcedure [dbo].[SP_INERT_TASK_SANCTIONING_AUTHORITY]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- EXEC SP_INERT_TASK_SANCTIONING_AUTHORITY 11082,1,1,440,443,'COMPLETED', 'UPDATE','UPDATE',926
-- =============================================
 CREATE PROCEDURE [dbo].[SP_INERT_TASK_SANCTIONING_AUTHORITY]
	-- Add the parameters for the stored procedure here
	@MKEY INT,
	@SR_NO INT,
	@LEVEL NVARCHAR(10),
	@PROPERTY_MKEY INT,
	@BUILDING_MKEY INT,
	@STATUS NVARCHAR(100),
	@APINAME NVARCHAR(200),
	@APIMETHOD NVARCHAR(100),
	@CREATED_BY INT
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
			DECLARE @NEXTLEVEL INT;

			INSERT INTO TASK_SANCTIONING_DEPARTMENT_TRL_H(
															HIST_DATE
															,MKEY
															,SR_NO
															,LEVEL
															,SANCTIONING_DEPARTMENT
															,SANCTIONING_AUTHORITY_MKEY
															,SANCTIONING_AUTHORITY
															,STATUS
															,START_DATE
															,END_DATE
															,ATTRIBUTE1
															,ATTRIBUTE2
															,ATTRIBUTE3
															,ATTRIBUTE4
															,ATTRIBUTE5
															,CREATED_BY
															,CREATION_DATE
															,LAST_UPDATED_BY
															,LAST_UPDATE_DATE
															,DELETE_FLAG
															)
															SELECT GETDATE()
															,MKEY
															,SR_NO
															,LEVEL
															,SANCTIONING_DEPARTMENT
															,SANCTIONING_AUTHORITY_MKEY
															,SANCTIONING_AUTHORITY
															,STATUS
															,START_DATE
															,END_DATE
															,ATTRIBUTE1
															,ATTRIBUTE2
															,ATTRIBUTE3
															,ATTRIBUTE4
															,ATTRIBUTE5
															,CREATED_BY
															,CREATION_DATE
															,LAST_UPDATED_BY
															,LAST_UPDATE_DATE
															,DELETE_FLAG
													FROM TASK_SANCTIONING_DEPARTMENT_TRL
													WHERE DELETE_FLAG = 'N'
													AND MKEY = @MKEY
													AND SR_NO = @SR_NO;

				UPDATE 
					TASK_SANCTIONING_DEPARTMENT_TRL
				SET [STATUS] = @STATUS 
				WHERE DELETE_FLAG = 'N' 
				AND MKEY = @MKEY
				AND LEVEL = @LEVEL
				AND SR_NO = @SR_NO;

				SELECT  @NEXTLEVEL = (CONVERT(INT,LEVEL)+1) FROM TASK_SANCTIONING_DEPARTMENT_TRL 
				WHERE DELETE_FLAG='N'
				--AND SR_NO = @SR_NO
				AND MKEY = @MKEY;

				PRINT '@NEXTLEVEL: '+ CONVERT(VARCHAR(100), @NEXTLEVEL );
				--SELECT  CONVERT(INT,LEVEL), (CONVERT(INT,LEVEL)+1) FROM TASK_SANCTIONING_DEPARTMENT_TRL
				--WHERE DELETE_FLAG='N'
				--AND SR_NO = 1
				--AND MKEY =11082;

				--SELECT * FROM TASK_SANCTIONING_DEPARTMENT_TRL 
				--WHERE DELETE_FLAG = 'N' 
				--AND MKEY = @MKEY
				----AND SR_NO = @SR_NO
				--AND LEVEL = CONVERT(VARCHAR, @NEXTLEVEL);
				
				UPDATE 
					TASK_SANCTIONING_DEPARTMENT_TRL
				SET [STATUS] = 'IN-PROGRESS' 
				WHERE DELETE_FLAG = 'N' 
				AND MKEY = @MKEY
				AND LEVEL = @NEXTLEVEL
				--AND SR_NO = @SR_NO ;
			

				SELECT DTRL.MKEY,DTRL.SR_NO, THDR.PROJECT_ID AS PROPERTY_MKEY,THDR.SUB_PROJECT_ID AS BUILDING_MKEY, 
				DTRL.SANCTIONING_DEPARTMENT AS TYPE_CODE,DTRL.SANCTIONING_AUTHORITY AS [TYPE_DESC],
				DTRL.SANCTIONING_AUTHORITY_MKEY AS SANCTIONING_AUTHORITY ,
				ISNULL(DTRL.[STATUS],'In-Progress') AS [STATUS],
				--CASE WHEN  ISNULL(DTRL.[STATUS],'') = '' OR ISNULL(DTRL.[STATUS],'') = NULL THEN 'In-Progress' ELSE DTRL.[STATUS]  end AS [STATUS],
				DTRL.[START_DATE], DTRL.END_DATE, DTRL.[level] 
				,Isnull(CONVERT(VARCHAR(50), DTRL.created_by), '') AS CREATED_BY_ID,
				Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME,
				CASE
					WHEN DTRL.creation_date IS NULL THEN
				''
				ELSE
					Format(DTRL.creation_date, 'yyyy-MM-dd HH:mm:ss')
				END AS CREATION_DATE,
				Isnull(CONVERT(VARCHAR(50), DTRL.last_updated_by), '') AS LAST_UPDATED_BY,
				Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME,
				CASE
					WHEN DTRL.last_update_date IS NULL THEN
					''
				ELSE
					Format(DTRL.last_update_date, 'yyyy-MM-dd HH:mm:ss')
				END AS LAST_UPDATE_DATE
				FROM  TASK_SANCTIONING_DEPARTMENT_TRL DTRL INNER JOIN TASK_HDR THDR ON DTRL.MKEY = THDR.MKEY
				INNER JOIN EMPLOYEE_MST createdby ON DTRL.CREATED_BY = createdby.mkey
				LEFT JOIN EMPLOYEE_MST updatedby ON DTRL.last_updated_by = updatedby.mkey
				WHERE  DTRL.DELETE_FLAG = 'N'
				AND createdby.DELETE_FLAG = 'N'
				AND DTRL.MKEY =  @MKEY
				AND SR_NO = @SR_NO
				ORDER BY DTRL.[level] ;

--			DECLARE @DCOUNT INT,@APPROVAL_MKEY INT, @NEXTLEVEL INT;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------				
--			SELECT @DCOUNT = COUNT(*) FROM APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT SDEPT INNER JOIN PROJECT_TRL_APPROVAL_ABBR ABBR ON SDEPT.MKEY = ABBR.APPROVAL_MKEY
--			INNER JOIN PROJECT_HDR PHDR ON PHDR.MKEY = ABBR.HEADER_MKEY
--			WHERE SDEPT.DELETE_FLAG = 'N' 
--			AND ABBR.DELETE_FLAG = 'N' 
--			AND ABBR.TASK_NO_MKEY =  @TASK_MKEY
--			AND PHDR.PROPERTY = @PROPERTY_MKEY
--			AND PHDR.BUILDING_MKEY  = @BUILDING_MKEY
--			AND SDEPT.SANCTIONING_AUTHORITY = @SAUTHORITY_MKEY;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------				
--			IF( @DCOUNT > 0 ) 
--			BEGIN
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------				
--				SELECT @APPROVAL_MKEY = APPROVAL_MKEY 
--				FROM PROJECT_TRL_APPROVAL_ABBR 
--				WHERE DELETE_FLAG = 'N' AND TASK_NO_MKEY = @TASK_MKEY
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--				INSERT INTO APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT_H(
--																HIST_DATE
--																,MKEY
--																,SR_NO
--																,LEVEL
--																,SANCTIONING_DEPARTMENT
--																,SANCTIONING_AUTHORITY
--																,START_DATE
--																,END_DATE
--																,ATTRIBUTE1
--																,ATTRIBUTE2
--																,ATTRIBUTE3
--																,ATTRIBUTE4
--																,ATTRIBUTE5
--																,CREATED_BY
--																,CREATION_DATE
--																,LAST_UPDATED_BY
--																,LAST_UPDATE_DATE
--																,DELETE_FLAG
--																,STATUS
--															)
--														SELECT	GETDATE()
--																,MKEY
--																,SR_NO
--																,LEVEL
--																,SANCTIONING_DEPARTMENT
--																,SANCTIONING_AUTHORITY
--																,START_DATE
--																,END_DATE
--																,ATTRIBUTE1
--																,ATTRIBUTE2
--																,ATTRIBUTE3
--																,ATTRIBUTE4
--																,ATTRIBUTE5
--																,CREATED_BY
--																,CREATION_DATE
--																,LAST_UPDATED_BY
--																,LAST_UPDATE_DATE
--																,DELETE_FLAG
--																,STATUS
--														FROM APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT
--														WHERE DELETE_FLAG = 'N' 
--														AND SANCTIONING_AUTHORITY = @SAUTHORITY_MKEY
--														AND MKEY = @APPROVAL_MKEY;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--				UPDATE 
--					APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT
--				SET [STATUS] = @STATUS 
--				WHERE DELETE_FLAG = 'N' 
--				AND SANCTIONING_AUTHORITY = @SAUTHORITY_MKEY
--				AND MKEY = @APPROVAL_MKEY
--				AND LEVEL = @LEVEL
--				AND SR_NO = @SR_NO
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--				SELECT  @NEXTLEVEL = (LEVEL+1) FROM APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT 
--				WHERE DELETE_FLAG='N'
--				AND SR_NO = @SR_NO
--				AND MKEY = @APPROVAL_MKEY;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--				UPDATE APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT
--				SET [STATUS] = CASE WHEN @STATUS = 'COMPLETED' THEN 'IN-PROGRESS' END
--				WHERE DELETE_FLAG = 'N' 
--				AND SANCTIONING_AUTHORITY = @SAUTHORITY_MKEY
--				AND MKEY = @APPROVAL_MKEY
--				AND LEVEL = @NEXTLEVEL
--				AND SR_NO = @SR_NO
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--				SELECT  SDEPT.MKEY, TASK_NO_MKEY,PHDR.PROPERTY AS PROPERTY_MKEY,PHDR.BUILDING_MKEY,
--				SDEPT.SANCTIONING_DEPARTMENT AS TYPE_CODE,SDEPT.SANCTIONING_DEPARTMENT AS [TYPE_DESC]
--				,SDEPT.SANCTIONING_AUTHORITY,ISNULL(SDEPT.[STATUS],'') AS [STATUS],SDEPT.LEVEL
--				,Isnull(CONVERT(VARCHAR(50), SDEPT.created_by), '') AS CREATED_BY_ID,
--				Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME,
--				CASE
--					WHEN SDEPT.creation_date IS NULL THEN
--				''
--				ELSE
--					Format(SDEPT.creation_date, 'yyyy-MM-dd HH:mm:ss')
--				END AS CREATION_DATE,
--				Isnull(CONVERT(VARCHAR(50), SDEPT.last_updated_by), '') AS LAST_UPDATED_BY,
--				Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME,
--				CASE
--					WHEN SDEPT.last_update_date IS NULL THEN
--					''
--				ELSE
--					Format(SDEPT.last_update_date, 'yyyy-MM-dd HH:mm:ss')
--				END AS LAST_UPDATE_DATE
--				FROM APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT SDEPT
--				INNER JOIN PROJECT_TRL_APPROVAL_ABBR ABBR ON  SDEPT.MKEY =  ABBR.APPROVAL_MKEY
--				INNER JOIN PROJECT_HDR PHDR ON PHDR.MKEY = ABBR.HEADER_MKEY
--				INNER JOIN EMPLOYEE_MST createdby ON SDEPT.CREATED_BY = createdby.mkey
--				LEFT JOIN EMPLOYEE_MST updatedby ON SDEPT.last_updated_by = updatedby.mkey
--				WHERE SDEPT.DELETE_FLAG = 'N' 
--				AND ABBR.DELETE_FLAG = 'N'
--				AND PHDR.DELETE_FLAG = 'N'
--				AND createdby.DELETE_FLAG = 'N'
--				AND ABBR.TASK_NO_MKEY =  @TASK_MKEY
--				AND PHDR.PROPERTY = @PROPERTY_MKEY
--				AND PHDR.BUILDING_MKEY  = @BUILDING_MKEY
--				ORDER BY SDEPT.MKEY,SDEPT.SANCTIONING_DEPARTMENT;
			

	END TRY
    BEGIN CATCH
        -------------------------------------------------------------------------------------------------------------------------------            
        SELECT ERROR_NUMBER() AS ERRORNUMBER,
               ERROR_SEVERITY() AS ERRORSEVERITY,
               ERROR_STATE() AS ERRORSTATE,
               ERROR_PROCEDURE() AS ERRORPROCEDURE,
               ERROR_LINE() AS ERRORLINE,
               ERROR_MESSAGE() AS ERRORMESSAGE;

        -------------------------------------------------------------------------------------------------------------------------------  
        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
        SET @ERROR_MESSAGE = ERROR_MESSAGE();
        -------------------------------------------------------------------------------------------------------------------------------  
        EXEC SP_P_TMS_INSERT_ERROR_DES @CREATED_BY,
                                       'TMS',
                                       @APINAME,
                                       @ERROR_MESSAGE,
                                       @APIMETHOD;
    -------------------------------------------------------------------------------------------------------------------------------  
    END CATCH

END

GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_APPROVAL_TEMPLATE]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		AMIT SHUDDHALWAR
-- Create date: 2024-11-06
-- Description:	TO CREATE APPROVAL TEMPLATE DETAILS
-- =============================================
CREATE PROCEDURE [dbo].[SP_INSERT_APPROVAL_TEMPLATE]
	-- Add the parameters for the stored procedure here
	@MKEY						NUMERIC	 = NULL
	,@BUILDING_TYPE				NUMERIC	= NULL
	,@BUILDING_STANDARD			NUMERIC	= NULL 
	,@STATUTORY_AUTHORITY		NUMERIC	 = NULL
	,@SHORT_DESCRIPTION			NVARCHAR(MAX) = NULL
	,@LONG_DESCRIPTION			NVARCHAR(MAX) = NULL
	,@ABBR						NVARCHAR(50) = NULL
	,@APPROVAL_DEPARTMENT		NUMERIC = NULL
	,@RESPOSIBLE_EMP_MKEY		NUMERIC = NULL
	,@JOB_ROLE					NUMERIC = NULL
	,@NO_DAYS_REQUIRED			NUMERIC	= NULL
	,@SEQ_ORDER					NVARCHAR(10)= NULL																												
	--,@ATTRIBUTE1				NVARCHAR(200) = NULL  -- FORM NAME
	--,@ATTRIBUTE2				NVARCHAR(200) = NULL    -- FUCNTION/METHOD NAME
	--,@ATTRIBUTE3				NVARCHAR(200) = NULL
	,@CREATED_BY				NUMERIC	
	--,@SANCTION_AUTHORITY		NUMERIC
	--,@SANCTION_DEPARTMENT		NVARCHAR(300)
	--,@END_RESULT_DOC			NVARCHAR(MAX) = NULL
	--,@CHECKLIST_DOC				NVARCHAR(MAX) = NULL
	,@TAGS						NVARCHAR(MAX) = NULL
	AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY
----------------------------------------------------------------------------------------------------------------------------------------
		--SELECT  @MKEY = ISNULL(MAX(MKEY),0)+1 FROM APPROVAL_TEMPLATE_HDR;
----------------------------------------------------------------------------------------------------------------------------------------
		INSERT INTO APPROVAL_TEMPLATE_HDR (
											BUILDING_TYPE
											,BUILDING_STANDARD
											,STATUTORY_AUTHORITY
											,MAIN_ABBR
											,SHORT_DESCRIPTION
											,LONG_DESCRIPTION
											,AUTHORITY_DEPARTMENT
											,RESPOSIBLE_EMP_MKEY
											,JOB_ROLE
											,DAYS_REQUIERD
											,SEQ_ORDER
											--,SANCTION_AUTHORITY
											--,SANCTION_DEPARTMENT
											,CREATED_BY
											,CREATION_DATE
											--,END_RESULT_DOC
											--,CHECKLIST_DOC
											,DELETE_FLAG
											,TAGS)
									VALUES(
											@BUILDING_TYPE			
											,@BUILDING_STANDARD		
											,@STATUTORY_AUTHORITY
											,@ABBR
											,@SHORT_DESCRIPTION
											,@LONG_DESCRIPTION
											,@APPROVAL_DEPARTMENT
											,@RESPOSIBLE_EMP_MKEY
											,@JOB_ROLE
											,@NO_DAYS_REQUIRED
											,@SEQ_ORDER
											--,@SANCTION_AUTHORITY
											--,@SANCTION_DEPARTMENT
											,@CREATED_BY			
											,GETDATE()			
											--,@END_RESULT_DOC		
											--,@CHECKLIST_DOC			
											,'N'
											,ISNULL(@TAGS,NULL)
											);
----------------------------------------------------------------------------------------------------------------------------------------
		SET @MKEY  = SCOPE_IDENTITY();
---------------------------------------------------------------------------------------------------------------------------------------
			SELECT	
				 HDR.MKEY,
				 HDR.BUILDING_TYPE
				,HDR.BUILDING_STANDARD
				,HDR.STATUTORY_AUTHORITY
				,HDR.MAIN_ABBR
				,HDR.SHORT_DESCRIPTION
				,HDR.LONG_DESCRIPTION
				,HDR.AUTHORITY_DEPARTMENT
				,HDR.RESPOSIBLE_EMP_MKEY
				,HDR.JOB_ROLE
				,HDR.DAYS_REQUIERD
				,HDR.SEQ_ORDER
				,HDR.TAGS
			FROM APPROVAL_TEMPLATE_HDR HDR 
			WHERE HDR.MKEY = @MKEY
			AND HDR.DELETE_FLAG = 'N';
----------------------------------------------------------------------------------------------------------------------------------------
	END TRY
	BEGIN CATCH
	-------------------------------------------------------------------------------------------------------------------------------          
		SELECT ERROR_NUMBER()    AS ERRORNUMBER,
				ERROR_SEVERITY()  AS ERRORSEVERITY,
				ERROR_STATE()     AS ERRORSTATE,
				ERROR_PROCEDURE() AS ERRORPROCEDURE,
				ERROR_LINE()      AS ERRORLINE,
				ERROR_MESSAGE()   AS ERRORMESSAGE;
	-------------------------------------------------------------------------------------------------------------------------------
		DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
		SET @ERROR_MESSAGE = ERROR_MESSAGE();
	-------------------------------------------------------------------------------------------------------------------------------
		EXEC sp_P_TMS_INSERT_ERROR_DES @CREATED_BY,'TMS','Insert Approval Template',@ERROR_MESSAGE,'Save Button';
	-------------------------------------------------------------------------------------------------------------------------------
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_DOC_CATEGORY]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	-- =============================================
	-- AUTHOR:    AMIT SHUDDHALWAR
	-- CREATE DATE: 
	-- DESCRIPTION:  TO CREATE DOC CATEGORY AND TYPE DESC
	--EXEC SP_INSERT_DOC_CATEGORY 'ABC',9,2
	-- =============================================
	CREATE PROCEDURE [dbo].[SP_INSERT_DOC_CATEGORY]
	-- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE
	@DOC_CATEGORY VARCHAR(200),
	@CREATED_BY   INT,
	@COMPANY_ID   INT
	AS
	BEGIN
	-- SET NOCOUNT ON ADDED TO PREVENT EXTRA RESULT SETS FROM
	-- INTERFERING WITH SELECT STATEMENTS.
	SET NOCOUNT ON;

	BEGIN TRY
	DECLARE @MAXCOUNT INT;
		SELECT @MAXCOUNT = count(*) FROM V_Doc_Category where [TYPE_DESC] = @DOC_CATEGORY and DELETE_FLAG = 'N';
	if ( @MAXCOUNT > 0 ) 
		BEGIN
			SELECT 'ALL READY CREATED';
		END
	ELSE
		BEGIN
			SELECT @MAXCOUNT = MAX(MKEY)
			FROM   TYPE_MST
			--WHERE  DELETE_FLAG = 'N';
			------------------------------------------------------------------------------------------------------------------------
			-- INSERT STATEMENTS FOR PROCEDURE HERE
			------------------------------------------------------------------------------------------------------------------------
			INSERT INTO TYPE_MST
			(MKEY,
			COMPANY_ID,
			TYPE_CODE,
			TYPE_DESC,
			TYPE_ABBR,
			PARENT_ID,
			MASTER_MKEY,
			EFFECTIVE_START_DATE,
			ENABLE_FLAG,
			CREATED_BY,
			CREATION_DATE,
			DELETE_FLAG)
			VALUES ((@MAXCOUNT + 1),
			@COMPANY_ID,
			'DOC_CATEGORY',
			@DOC_CATEGORY,
			'DOC_CATEGORY',
			0,
			(@MAXCOUNT + 1),
			GETDATE(),
			'N',
			@CREATED_BY,
			GETDATE(),
			'N' );
			------------------------------------------------------------------------------------------------------------------------
			SELECT * FROM V_Doc_Category where MKEY = (@MAXCOUNT + 1) and DELETE_FLAG = 'N';
		END
	END TRY
	BEGIN CATCH
	-------------------------------------------------------------------------------------------------------------------------------            
	SELECT ERROR_NUMBER()    AS ERRORNUMBER,
	ERROR_SEVERITY()  AS ERRORSEVERITY,
	ERROR_STATE()     AS ERRORSTATE,
	ERROR_PROCEDURE() AS ERRORPROCEDURE,
	ERROR_LINE()      AS ERRORLINE,
	ERROR_MESSAGE()   AS ERRORMESSAGE;

	-------------------------------------------------------------------------------------------------------------------------------  
	DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
	SET @ERROR_MESSAGE = ERROR_MESSAGE();
	-------------------------------------------------------------------------------------------------------------------------------  
	EXEC SP_P_TMS_INSERT_ERROR_DES
	@CREATED_BY,
	'TMS',
	'INSERT DOC CATEGORY',
	@ERROR_MESSAGE,
	'INSERT';
	-------------------------------------------------------------------------------------------------------------------------------  
	END CATCH
	END

GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_DOCUMENT_TEMPLATES]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:    AMIT SHUDDHALWAR
-- ALTER date: 28-10-2024
-- Description:  INSERT THE DOCUMENT TEMPLATE DETAILS
-- =============================================
CREATE PROCEDURE [dbo].[SP_INSERT_DOCUMENT_TEMPLATES]
  -- Add the parameters for the stored procedure here
  @DOC_CATEGORY          INT = NULL,
  @DOC_NAME              NVARCHAR(200) = NULL,
  @DOC_ABBR              NVARCHAR(100) = NULL,
  @DOC_NUM_FIELD_NAME    NVARCHAR(100) = NULL,
  @DOC_NUM_DATE_NAME     NVARCHAR(100) = NULL,
  @DOC_NUM_APP_FLAG      NCHAR = NULL,
  @DOC_NUM_VALID_FLAG    NCHAR = NULL,
  @DOC_NUM_DATE_APP_FLAG NCHAR = NULL,
  @DOC_ATTACH_APP_FLAG   NCHAR = NULL,
  @COMPANY_ID            INT,
  @CREATED_BY            NUMERIC = NULL,
  @ATTRIBUTE1            NVARCHAR(100) = NULL,
  @ATTRIBUTE2            NVARCHAR(100) = NULL
AS
  BEGIN
      -- SET NOCOUNT ON added to prevent extra result sets from
      -- interfering with SELECT statements.
      SET nocount ON;

      BEGIN try
          DECLARE @MKEY              NUMERIC,
                  @COUNT             INT,
                  @DOC_CATEGORY_NAME VARCHAR(200),
                  @MAXCOUNT          INT;

          PRINT '@DOC_ABBR: ' + Replace(@DOC_ABBR, ' ', '');

          ---------------------------------------------------------------------------------------------------------------------------------
          SELECT @COUNT = Count(*)
          FROM   type_mst
          WHERE  type_code = 'DOC_TYPE'
                 AND delete_flag = 'N'
                 AND [type_desc] = @DOC_NAME
                 AND parent_id = @DOC_CATEGORY;

          ---------------------------------------------------------------------------------------------------------------------------------
          IF( @COUNT > 0 )
            BEGIN
                -----------------------------------------------------------------------------------------------------------------------------------------
                SELECT @MKEY = mkey
                FROM   [dbo].[doc_template_hdr]
                WHERE  delete_flag = 'N'
                       AND doc_category = @DOC_CATEGORY
                       AND doc_name = @DOC_NAME
                       AND doc_abbr = @DOC_ABBR
                       AND delete_flag = 'N';

                SELECT @MKEY AS MKEY;
            ---------------------------------------------------------------------------------------------------------------------------------------------------------------
            END
          ELSE
            BEGIN
                ------------------------------------------------------------------------------------------------------------------------------
                SELECT @DOC_CATEGORY_NAME = [type_desc]
                FROM   type_mst
                WHERE  1 = 1 --type_code = 'DOC_CATEGORY'
                       AND delete_flag = 'N'
                       AND mkey = @DOC_CATEGORY;

                ------------------------------------------------------------------------------------------------------------------------------------------------
                -- Insert statements for procedure here
                INSERT INTO doc_template_hdr
                            (doc_category,
                             doc_name,
                             [doc_abbr],
                             [doc_num_field_name],
                             [doc_num_date_name],
                             [doc_num_app_flag],
                             [doc_num_valid_flag],
                             [doc_num_date_app_flag],
                             [doc_attach_app_flag],
                             [created_by],
                             [creation_date],
                             [last_updated_by],
                             [last_update_date],
                             [delete_flag])
                VALUES      ( @DOC_CATEGORY,
                              @DOC_NAME,
                              @DOC_ABBR,
                              @DOC_NUM_FIELD_NAME,
                              @DOC_NUM_DATE_NAME,
                              @DOC_NUM_APP_FLAG,
                              @DOC_NUM_VALID_FLAG,
                              @DOC_NUM_DATE_APP_FLAG,
                              @DOC_ATTACH_APP_FLAG,
                              @CREATED_BY,
                              Getdate(),
                              @CREATED_BY,
                              Getdate(),
                              'N' );

                SET @MKEY = Scope_identity();

                ---------------------------------------------------------------------------------------------------------------------------------------------
                SELECT @MAXCOUNT = Max(mkey)
                FROM   type_mst
                WHERE   1 = 1 --delete_flag = 'N';

                ---------------------------------------------------------------------------------------------------------------------------------------------
                PRINT '@DOC_CATEGORY_NAME: '+ @DOC_CATEGORY_NAME;
				INSERT INTO type_mst
                            (mkey,
                             company_id,
                             type_code,
                             [type_desc],
                             type_abbr,
                             parent_id,
                             master_mkey,
                             effective_start_date,
                             enable_flag,
                             attribute2,
                             created_by,
                             creation_date,
                             delete_flag)
                VALUES      ( ( @MAXCOUNT + 1 ),
                              @COMPANY_ID,
                              'DOC_TYPE',
                              @DOC_NAME,
                              'DOC_TYPE',
                              @DOC_CATEGORY,
                              ( @MAXCOUNT + 1 ),
                              Getdate(),
                              'N',
                              @DOC_CATEGORY_NAME,
                              @CREATED_BY,
                              Getdate(),
                              'N' );

                ---------------------------------------------------------------------------------------------------------------------------------------------
                UPDATE doc_template_hdr
                SET    type_mst_doc_type_mkey = ( @MAXCOUNT + 1 )
                WHERE  delete_flag = 'N'
                       AND mkey = @MKEY;

                ---------------------------------------------------------------------------------------------------------------------------------------------
                SELECT DOC.mkey,
                       doc_category,
                       doc_name,
                       [doc_abbr],
                       [doc_num_field_name],
                       [doc_num_date_name],
                       [doc_num_app_flag],
                       [doc_num_valid_flag],
                       [doc_num_date_app_flag],
                       [doc_attach_app_flag],
                       DOC.[created_by],
                       DOC.[creation_date],
                       DOC.[last_updated_by],
                       DOC.[last_update_date],
                       DOC.[delete_flag]
                FROM   [dbo].[doc_template_hdr] DOC INNER JOIN TYPE_MST MST ON DOC.TYPE_MST_DOC_TYPE_MKEY = MST.MKEY
                WHERE  DOC.mkey = @MKEY
                       AND DOC.delete_flag = 'N'
                ORDER  BY DOC.mkey;
            END
      -----------------------------------------------------------------------------------------------------------------------------------
      END try

      BEGIN catch
          -------------------------------------------------------------------------------------------------------------------------------          
          SELECT Error_number()    AS ERRORNUMBER,
                 Error_severity()  AS ERRORSEVERITY,
                 Error_state()     AS ERRORSTATE,
                 Error_procedure() AS ERRORPROCEDURE,
                 Error_line()      AS ERRORLINE,
                 Error_message()   AS ERRORMESSAGE;

          -------------------------------------------------------------------------------------------------------------------------------
          DECLARE @ERROR_MESSAGE VARCHAR(max) = NULL;

          SET @ERROR_MESSAGE = Error_message();

          -------------------------------------------------------------------------------------------------------------------------------
          EXEC Sp_p_tms_insert_error_des
            @CREATED_BY,
            'TMS',
            @ATTRIBUTE1,
            @ERROR_MESSAGE,
            @ATTRIBUTE2;
      -------------------------------------------------------------------------------------------------------------------------------
      END catch
  END 
GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_INSTRUCTION]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

 -- =============================================  
 -- AUTHOR:    AMIT SHUDDHALWAR  
 -- CREATE DATE:   
 -- DESCRIPTION:  TO CREATE DOC INSTRUCTION  
 --EXEC SP_INSERT_DOC_CATEGORY 'ABC',9,2  
 -- =============================================  
   CREATE PROCEDURE [dbo].[SP_INSERT_INSTRUCTION]
  -- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE  
  @DOC_INSTR  VARCHAR(200),
  @CREATED_BY INT,
  @COMPANY_ID INT
AS
  BEGIN
      -- SET NOCOUNT ON ADDED TO PREVENT EXTRA RESULT SETS FROM  
      -- INTERFERING WITH SELECT STATEMENTS.  
      SET nocount ON;

      BEGIN try
          DECLARE @MAXCOUNT INT, @INSTR_MKEY INT;

          SELECT @MAXCOUNT = Count(*)
          FROM   type_mst
          WHERE  [type_desc] = @DOC_INSTR
                 AND type_code = 'INSTR'
                 AND delete_flag = 'N';

          IF ( @MAXCOUNT > 0 )
            BEGIN
                SELECT 'ALREADY CREATED';
            END
          ELSE
            BEGIN
                SELECT @MAXCOUNT = Max(mkey)
                FROM   type_mst

                --WHERE  DELETE_FLAG = 'N';  
                ------------------------------------------------------------------------------------------------------------------------  
                -- INSERT STATEMENTS FOR PROCEDURE HERE  
                ------------------------------------------------------------------------------------------------------------------------  
				SELECT @INSTR_MKEY = MASTER_MKEY
				FROM   type_mst
				WHERE  [type_desc] = 'INSTR'
                AND type_code = 'INSTR'
                AND delete_flag = 'N';
 ------------------------------------------------------------------------------------------------------------------------  
                INSERT INTO type_mst
                            (mkey,
                             company_id,
                             type_code,
                             type_desc,
                             type_abbr,
                             parent_id,
                             master_mkey,
                             effective_start_date,
                             enable_flag,
                             created_by,
                             creation_date,
                             delete_flag)
                VALUES      (( @MAXCOUNT + 1 ),
                             @COMPANY_ID,
                             'INSTR',
                             @DOC_INSTR,
                             'INSTR',
                             @INSTR_MKEY,
                             ( @MAXCOUNT + 1 ),
                             Getdate(),
                             'N',
                             @CREATED_BY,
                             Getdate(),
                             'N' );

                ------------------------------------------------------------------------------------------------------------------------  
                SELECT *
                FROM   type_mst
                WHERE  mkey = ( @MAXCOUNT + 1 )
                       AND delete_flag = 'N';
            END
      END try

      BEGIN catch
          -------------------------------------------------------------------------------------------------------------------------------              
          SELECT Error_number()    AS ERRORNUMBER,
                 Error_severity()  AS ERRORSEVERITY,
                 Error_state()     AS ERRORSTATE,
                 Error_procedure() AS ERRORPROCEDURE,
                 Error_line()      AS ERRORLINE,
                 Error_message()   AS ERRORMESSAGE;

          -------------------------------------------------------------------------------------------------------------------------------    
          DECLARE @ERROR_MESSAGE VARCHAR(max) = NULL;

          SET @ERROR_MESSAGE = Error_message();

          -------------------------------------------------------------------------------------------------------------------------------    
          EXEC Sp_p_tms_insert_error_des
            @CREATED_BY,
            'TMS',
            'INSERT INSTRUCTION',
            @ERROR_MESSAGE,
            'INSERT';
      -------------------------------------------------------------------------------------------------------------------------------    
      END catch
  END 
GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_PROJECT_DEFINATION]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		AMIT SHUDDHALWAR
-- Create date: 2024-11-06
-- Description:	TO CREATE APPROVAL TEMPLATE DETAILS
-- =============================================
CREATE PROCEDURE [dbo].[SP_INSERT_PROJECT_DEFINATION]
	-- Add the parameters for the stored procedure here
		@BUILDING_MKEY			   INT = NULL 	
		,@PROJECT_ABBR			   NVARCHAR(200) = NULL 	
		,@PROPERTY				   NUMERIC	 
		,@LEGAL_ENTITY			   NVARCHAR(500) = NULL
		,@PROJECT_ADDRESS		   NVARCHAR(MAX) = NULL
		,@BUILDING_CLASSIFICATION	   NUMERIC = NULL
		,@BUILDING_STANDARD		    NUMERIC = NULL 
		,@STATUTORY_AUTHORITY		   NUMERIC = NULL 
		,@ATTRIBUTE1				   NVARCHAR(200) = NULL -- USER
		,@ATTRIBUTE2				   NVARCHAR(200) = NULL -- FORM NAME
		,@ATTRIBUTE3				   NVARCHAR(200) = NULL  -- FUCNTION/METHOD NAME
		,@CREATED_BY				   NUMERIC = NULL
		,@LAST_UPDATED_BY			   NUMERIC	
	AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY
	DECLARE @MKEY NUMERIC,@countProperty int;

	SELECT @countProperty = COUNT(*) FROM PROJECT_HDR 
	WHERE PROPERTY = @PROPERTY AND BUILDING_MKEY = @BUILDING_MKEY AND DELETE_FLAG = 'N';

	IF (@countProperty > 6555656)
	BEGIN
		SELECT	MKEY
					,BUILDING_MKEY AS PROJECT_NAME
					,PROJECT_ABBR
					,PROPERTY
					,LEGAL_ENTITY
					,PROJECT_ADDRESS
					,BUILDING_CLASSIFICATION
					,BUILDING_STANDARD
					,STATUTORY_AUTHORITY
					,ATTRIBUTE1
					,ATTRIBUTE2
					,ATTRIBUTE3
					,CREATED_BY
					,LAST_UPDATED_BY
					,'Error' as [Status]
					, 'Already exist property mkey and Building mkey' as [Message] 
			FROM PROJECT_HDR 
			WHERE PROPERTY = @PROPERTY AND BUILDING_MKEY = @BUILDING_MKEY AND DELETE_FLAG = 'N';
	END 
	ELSE
	BEGIN
    -- Insert statements for procedure here
		INSERT INTO PROJECT_HDR (
											BUILDING_MKEY
											,PROJECT_ABBR
											,PROPERTY
											,LEGAL_ENTITY
											,PROJECT_ADDRESS
											,BUILDING_CLASSIFICATION
											,BUILDING_STANDARD
											,STATUTORY_AUTHORITY
											,CREATED_BY
											,CREATION_DATE
											,LAST_UPDATED_BY
											,LAST_UPDATE_DATE
											,DELETE_FLAG) 
									VALUES(
											@BUILDING_MKEY			   
											,@PROJECT_ABBR			   
											,@PROPERTY				   
											,@LEGAL_ENTITY			   
											,@PROJECT_ADDRESS		   
											,@BUILDING_CLASSIFICATION	
											,@BUILDING_STANDARD		    
											,@STATUTORY_AUTHORITY		
											,@CREATED_BY
											,GETDATE()
											,@LAST_UPDATED_BY			
											,GETDATE()
											,'N'				
											)
----------------------------------------------------------------------------------------------------------------------------------------
											 SET @MKEY  = SCOPE_IDENTITY();
----------------------------------------------------------------------------------------------------------------------------------------
			SELECT	MKEY
					,BUILDING_MKEY AS PROJECT_NAME
					,PROJECT_ABBR
					,PROPERTY
					,LEGAL_ENTITY
					,PROJECT_ADDRESS
					,BUILDING_CLASSIFICATION
					,BUILDING_STANDARD
					,STATUTORY_AUTHORITY
					,ATTRIBUTE1
					,ATTRIBUTE2
					,ATTRIBUTE3
					,CREATED_BY
					,LAST_UPDATED_BY
			FROM PROJECT_HDR 
			WHERE MKEY = @MKEY;
	END
----------------------------------------------------------------------------------------------------------------------------------------
	END TRY
	BEGIN CATCH
	-------------------------------------------------------------------------------------------------------------------------------          
		SELECT ERROR_NUMBER()    AS ERRORNUMBER,
				ERROR_SEVERITY()  AS ERRORSEVERITY,
				ERROR_STATE()     AS ERRORSTATE,
				ERROR_PROCEDURE() AS ERRORPROCEDURE,
				ERROR_LINE()      AS ERRORLINE,
				ERROR_MESSAGE()   AS ERRORMESSAGE;
	-------------------------------------------------------------------------------------------------------------------------------
		DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
		SET @ERROR_MESSAGE = ERROR_MESSAGE();
	-------------------------------------------------------------------------------------------------------------------------------
		EXEC sp_P_TMS_INSERT_ERROR_DES @ATTRIBUTE1,'TMS',@ATTRIBUTE2,@ERROR_MESSAGE,@ATTRIBUTE3;
	-------------------------------------------------------------------------------------------------------------------------------
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_PROJECT_DOC_DEPOSITORY_ATTACHMENT]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- EXEC SP_INSERT_PROJECT_DOC_DEPOSITORY_ATTACHMENT 21,'5110617.png','\Attachments\Document Depository\21\4_13_26_5110617.png',926,'N','INSERT','iNSERT'
CREATE PROCEDURE [dbo].[SP_INSERT_PROJECT_DOC_DEPOSITORY_ATTACHMENT]
(
    @PROJECT_DOC_MKEY INT,
    @FILE_NAME NVARCHAR(200),
    @FILE_PATH NVARCHAR(MAX),
    @CREATED_BY INT,
    @DELETE_FLAG CHAR(1),
    @APINAME NVARCHAR(100),
    @API_METHOD NVARCHAR(100)
)
AS
BEGIN
    DECLARE @DCOUNT INT,@SR_NO INT, @MKEY INT;
    BEGIN TRY

        --SELECT @DCOUNT = COUNT(*)
        --FROM PROJECT_DOC_DEPOSITORY_TRL_MEDIA
        --WHERE PROJECT_DOC_MKEY = @PROJECT_DOC_MKEY
        --      AND DELETE_FLAG = 'N';

        --IF (@DCOUNT > 0)
        --BEGIN

        --    Insert into PROJECT_DOC_DEPOSITORY_TRL_MEDIA_H
        --    select getdate(),
        --           *
        --    from PROJECT_DOC_DEPOSITORY_TRL_MEDIA
        --    where PROJECT_DOC_MKEY = @PROJECT_DOC_MKEY
        --          AND DELETE_FLAG = 'N';

        --    UPDATE PROJECT_DOC_DEPOSITORY_TRL_MEDIA
        --    SET DELETE_FLAG = 'Y'
        --    WHERE PROJECT_DOC_MKEY = @PROJECT_DOC_MKEY;
        --END

        SELECT @SR_NO = ISNULL(MAX(SR_NO), 0) + 1,  @MKEY =  ISNULL(max(mkey),0) + 1
        FROM PROJECT_DOC_DEPOSITORY_TRL_MEDIA
        WHERE PROJECT_DOC_MKEY = @PROJECT_DOC_MKEY
              AND DELETE_FLAG = 'N';

		PRINT '@MKEY: '+ CONVERT(VARCHAR,@MKEY);

        INSERT INTO [DBO].[PROJECT_DOC_DEPOSITORY_TRL_MEDIA]
        (
            [MKEY],
            [SR_NO],
            PROJECT_DOC_MKEY,
            [FILE_NAME],
            [FILE_PATH],
            [CREATED_BY],
            [CREATION_DATE],
            [DELETE_FLAG]
        )
        VALUES
        (@MKEY, @SR_NO, @PROJECT_DOC_MKEY, @FILE_NAME, @FILE_PATH, @CREATED_BY, GETDATE(), 'N')
		
		SELECT 
				HDR.MKEY
				--,HDR.SR_NO
				--,HDR.PROJECT_DOC_MKEY
				,HDR.FILE_NAME AS [FILE_NAME]
				,HDR.FILE_PATH AS [FILE_PATH]
				--,Isnull(CONVERT(VARCHAR(50), HDR.created_by), '') AS CREATED_BY_ID,
				--Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME,
				--CASE
				--	WHEN HDR.creation_date IS NULL THEN
				--''
				--ELSE
				--	Format(HDR.creation_date, 'yyyy-MM-dd HH:mm:ss')
				--END AS CREATION_DATE,
				--Isnull(CONVERT(VARCHAR(50), HDR.last_updated_by), '') AS LAST_UPDATED_BY,
				--Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME,
				--CASE
				--	WHEN HDR.last_update_date IS NULL THEN
				--	''
				--ELSE
				--	Format(HDR.last_update_date, 'yyyy-MM-dd HH:mm:ss')
				--END AS LAST_UPDATE_DATE
		FROM PROJECT_DOC_DEPOSITORY_TRL_MEDIA HDR
			INNER JOIN 
				EMPLOYEE_MST createdby
			ON 
				HDR.created_by = createdby.mkey
			LEFT JOIN 
				EMPLOYEE_MST updatedby
			ON 
				HDR.last_updated_by = updatedby.mkey
		WHERE HDR.MKEY = @MKEY
		AND HDR.DELETE_FLAG = 'N'
		AND createdby.DELETE_FLAG = 'N'
		order by hdr.MKEY, hdr.SR_NO;

    END TRY
    BEGIN CATCH
        -------------------------------------------------------------------------------------------------------------------------------          
        SELECT ERROR_NUMBER() AS ERRORNUMBER,
               ERROR_SEVERITY() AS ERRORSEVERITY,
               ERROR_STATE() AS ERRORSTATE,
               ERROR_PROCEDURE() AS ERRORPROCEDURE,
               ERROR_LINE() AS ERRORLINE,
               ERROR_MESSAGE() AS ERRORMESSAGE;
        -------------------------------------------------------------------------------------------------------------------------------
        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
        SET @ERROR_MESSAGE = ERROR_MESSAGE();
        -------------------------------------------------------------------------------------------------------------------------------
        EXEC sp_P_TMS_INSERT_ERROR_DES @CREATED_BY,
                                       'TMS',
                                       @APINAME,
                                       @ERROR_MESSAGE,
                                       @API_METHOD;
    -------------------------------------------------------------------------------------------------------------------------------
    END CATCH
END


GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_PROJECT_DOCUMENT_DEPOSITORY]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
--EXEC	@return_value = [dbo].[SP_INSERT_PROJECT_DOCUMENT_DEPOSITORY]
--		@BUILDING_TYPE = 236,
--		@PROPERTY_TYPE = 245,
--		@DOC_NAME = N'CFO',
--		@DOC_NUMBER = N'CF9541BB',
--		@DOC_DATE = N'2024-01-11',
--		@DOC_ATTACHMENT = N'abcd',
--		@VALIDITY_DATE = N'2024-05-26',
--		@ATTRIBUTE1 = N'9',
--		@ATTRIBUTE2 = N'add project',
--		@ATTRIBUTE3 = N'save',
--		@CREATED_BY = 9

-- =============================================
CREATE PROCEDURE [dbo].[SP_INSERT_PROJECT_DOCUMENT_DEPOSITORY]
	-- Add the parameters for the stored procedure here
@MKEY			int 
,@BUILDING_TYPE	int = NULL
,@PROPERTY_TYPE	int = NULL
,@DOC_MKEY	INT = NULL
,@DOC_NUMBER	nvarchar(200) = NULL
,@DOC_DATE	nvarchar(100) = NULL
,@VALIDITY_DATE	nvarchar(50) = NULL
,@API_NAME	nvarchar(100) = NULL
,@API_METHOD	nvarchar(100) = NULL
,@CREATED_BY	INT = NULL
,@DELETE_FLAG	CHAR = NULL

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
BEGIN TRY
    -- Insert statements for procedure here
		IF (@MKEY = 0 OR @MKEY = null)
		BEGIN
			INSERT INTO PROJECT_DOC_DEPOSITORY_HDR (
											BUILDING_TYPE
											,PROPERTY_TYPE
											,DOC_MKEY
											,DOC_NUMBER
											,DOC_DATE
											,VALIDITY_DATE
											,CREATED_BY
											,CREATION_DATE
											,LAST_UPDATED_BY
											,LAST_UPDATE_DATE
											,DELETE_FLAG) 
									VALUES(
											@BUILDING_TYPE			   
											,@PROPERTY_TYPE			   
											,@DOC_MKEY
											,@DOC_NUMBER
											,@DOC_DATE
											,@VALIDITY_DATE
											,@CREATED_BY
											,GETDATE()
											,@CREATED_BY			
											,GETDATE()
											,'N'				
											)
----------------------------------------------------------------------------------------------------------------------------------------
					SET @MKEY  = SCOPE_IDENTITY();
----------------------------------------------------------------------------------------------------------------------------------------
		END
		ELSE
		BEGIN
			INSERT INTO PROJECT_DOC_DEPOSITORY_HDR_H(
		  HIST_DATE, MKEY, BUILDING_TYPE, PROPERTY_TYPE, 
		  DOC_MKEY, DOC_NUMBER, DOC_DATE, 
		  VALIDITY_DATE, CREATED_BY, CREATION_DATE, 
		  LAST_UPDATED_BY, LAST_UPDATE_DATE, 
		  DELETE_FLAG
		) 
		SELECT 
		  GETDATE(),
		  MKEY, 
		  BUILDING_TYPE, 
		  PROPERTY_TYPE, 
		  DOC_MKEY, 
		  DOC_NUMBER, 
		  DOC_DATE, 
		  VALIDITY_DATE, 
		  CREATED_BY,
		  CREATION_DATE, 
		  LAST_UPDATED_BY, 
		  LAST_UPDATE_DATE, 
		  DELETE_FLAG 
		FROM 
		  PROJECT_DOC_DEPOSITORY_HDR 
		WHERE 
		  MKEY = @MKEY;
		UPDATE 
		  PROJECT_DOC_DEPOSITORY_HDR 
		SET 
		  BUILDING_TYPE = @BUILDING_TYPE, 
		  PROPERTY_TYPE = @PROPERTY_TYPE, 
		  DOC_MKEY =  @DOC_MKEY, 
		  DOC_NUMBER = @DOC_NUMBER, 
		  DOC_DATE = @DOC_DATE, 
		  VALIDITY_DATE = @VALIDITY_DATE, 
		  LAST_UPDATED_BY = @CREATED_BY, 
		  LAST_UPDATE_DATE = GETDATE(), 
		  DELETE_FLAG = @DELETE_FLAG 
		WHERE 
		  MKEY = @MKEY 
		  AND DELETE_FLAG = 'N';
		END

			SELECT	
					HDR.MKEY
					,BUILDING_TYPE as BUILDING_MKEY
					,PROPERTY_TYPE AS PROPERTY_MKEY
					,DOC_MKEY 
					,DOC_NUMBER
					,DOC_DATE
					,VALIDITY_DATE
					,HDR.ATTRIBUTE1
					,HDR.ATTRIBUTE2
					,HDR.ATTRIBUTE3
					,HDR.ATTRIBUTE4
					,HDR.ATTRIBUTE5
					,Isnull(CONVERT(VARCHAR(50), HDR.created_by), '') AS CREATED_BY_ID
				,Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME
				,CASE
					WHEN HDR.creation_date IS NULL THEN
				''
				ELSE
					Format(HDR.creation_date, 'yyyy-MM-dd HH:mm:ss')
				END AS CREATION_DATE
				,Isnull(CONVERT(VARCHAR(50), HDR.last_updated_by), '') AS LAST_UPDATED_BY
				,Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME
				,CASE
					WHEN HDR.last_update_date IS NULL THEN
					''
				ELSE
					Format(HDR.last_update_date, 'yyyy-MM-dd HH:mm:ss')
				END AS LAST_UPDATE_DATE
				FROM PROJECT_DOC_DEPOSITORY_HDR HDR
				INNER JOIN 
						EMPLOYEE_MST createdby
					ON 
						HDR.created_by = createdby.mkey
					LEFT JOIN 
						EMPLOYEE_MST updatedby
					ON 
						HDR.last_updated_by = updatedby.mkey
				WHERE HDR.MKEY = @MKEY
				AND HDR.DELETE_FLAG = 'N'
				AND createdby.DELETE_FLAG = 'N'
				ORDER BY  HDR.MKEY;
----------------------------------------------------------------------------------------------------------------------------------------
	END TRY
	BEGIN CATCH
	-------------------------------------------------------------------------------------------------------------------------------          
		SELECT ERROR_NUMBER()    AS ERRORNUMBER,
				ERROR_SEVERITY()  AS ERRORSEVERITY,
				ERROR_STATE()     AS ERRORSTATE,
				ERROR_PROCEDURE() AS ERRORPROCEDURE,
				ERROR_LINE()      AS ERRORLINE,
				ERROR_MESSAGE()   AS ERRORMESSAGE;
	-------------------------------------------------------------------------------------------------------------------------------
		DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
		SET @ERROR_MESSAGE = ERROR_MESSAGE();
	-------------------------------------------------------------------------------------------------------------------------------
		EXEC sp_P_TMS_INSERT_ERROR_DES @CREATED_BY,'TMS',@API_NAME,@ERROR_MESSAGE,@API_METHOD;
	-------------------------------------------------------------------------------------------------------------------------------
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_TASK_ENDLIST_ATTACHMENT]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	exec SP_INSERT_TASK_ENDLIST_ATTACHMENT @MKEY=11083,@SR_NO=1,@DOC_MKEY=4,@FILE_NAME='ABCDF-4444',@CREATED_BY=N'926',@DELETE_FLAG=N'Y',@APINAME=N'CreateTaskEndlistAttach',@API_METHOD=N'Create/Update'
-- EXEC SP_INSERT_TASK_ENDLIST_ATTACHMENT 11083,2,15, '5110617.PNG','\ATTACHMENTS\DOCUMENT DEPOSITORY\21\4_13_26_5110617.PNG',926,'Y','INSERT','INSERT'
CREATE PROCEDURE [dbo].[SP_INSERT_TASK_ENDLIST_ATTACHMENT]
(
    @MKEY INT,
    @SR_NO INT,
    @DOC_MKEY INT,
    @FILE_NAME NVARCHAR(200)=  null,
    @FILE_PATH NVARCHAR(MAX) =  null,
    @CREATED_BY INT =  null,
    @DELETE_FLAG CHAR(1),
    @APINAME NVARCHAR(100),
    @API_METHOD NVARCHAR(100)
)
AS
BEGIN
    BEGIN TRY
		DECLARE @DCOUNT INT;
		SELECT @DCOUNT = COUNT(*) FROM TASK_ENDLIST_MEDIA_TRL WHERE MKEY = @MKEY AND DOC_CATEGORY_MKEY = @DOC_MKEY AND DELETE_FLAG = 'N';
		
        IF (@DCOUNT = 0 AND @DELETE_FLAG = 'N')
        BEGIN
			PRINT 'INSERT';
            SELECT @SR_NO = ISNULL(MAX(SR_NO), 0) + 1
            FROM TASK_ENDLIST_MEDIA_TRL
            WHERE MKEY = @MKEY;

            INSERT INTO TASK_ENDLIST_MEDIA_TRL
            (
                MKEY,
                SR_NO,
                DOC_CATEGORY_MKEY,
                FILE_NAME,
                FILE_PATH,
                CREATED_BY,
                CREATION_DATE
            )
            VALUES
            (@MKEY, @SR_NO, @DOC_MKEY, @FILE_NAME, @FILE_PATH, @CREATED_BY, GETDATE())
        END
        ELSE IF (@DCOUNT > 0 AND @DELETE_FLAG = 'N')
        BEGIN
			PRINT '@DCOUNT > 0 @DELETE_FLAG: '+ @DELETE_FLAG;
            INSERT INTO TASK_ENDLIST_MEDIA_TRL_H
            (
                HIST_DATE,
                MKEY,
                SR_NO,
                DOC_CATEGORY_MKEY,
                FILE_NAME,
                FILE_PATH,
                ATTRIBUTE1,
                ATTRIBUTE2,
                ATTRIBUTE3,
                ATTRIBUTE4,
                ATTRIBUTE5,
                CREATED_BY,
                CREATION_DATE,
                LAST_UPDATED_BY,
                LAST_UPDATE_DATE,
                DELETE_FLAG
            )
            SELECT GETDATE(),
                   MKEY,
                   SR_NO,
                   DOC_CATEGORY_MKEY,
                   FILE_NAME,
                   FILE_PATH,
                   ATTRIBUTE1,
                   ATTRIBUTE2,
                   ATTRIBUTE3,
                   ATTRIBUTE4,
                   ATTRIBUTE5,
                   CREATED_BY,
                   CREATION_DATE,
                   LAST_UPDATED_BY,
                   LAST_UPDATE_DATE,
                   DELETE_FLAG
            FROM TASK_ENDLIST_MEDIA_TRL
            WHERE MKEY = @MKEY
                 -- AND SR_NO = @SR_NO
                  AND DOC_CATEGORY_MKEY = @DOC_MKEY
                  AND DELETE_FLAG = 'N';
            UPDATE TASK_ENDLIST_MEDIA_TRL
            SET SR_NO = @SR_NO,
                DOC_CATEGORY_MKEY = @DOC_MKEY,
                FILE_NAME = @FILE_NAME,
                FILE_PATH = @FILE_PATH,
                LAST_UPDATED_BY = @CREATED_BY,
                LAST_UPDATE_DATE = GETDATE(),
				DELETE_FLAG = @DELETE_FLAG
            WHERE MKEY = @MKEY
                  AND SR_NO = @SR_NO
                  AND DOC_CATEGORY_MKEY = @DOC_MKEY
                  AND DELETE_FLAG = 'N';
        END
		ELSE IF(@DELETE_FLAG = 'Y')
		BEGIN
		PRINT '@DELETE_FLAG: '+ @DELETE_FLAG;
			 INSERT INTO TASK_ENDLIST_MEDIA_TRL_H
            (
                HIST_DATE,
                MKEY,
                SR_NO,
                DOC_CATEGORY_MKEY,
                FILE_NAME,
                FILE_PATH,
                ATTRIBUTE1,
                ATTRIBUTE2,
                ATTRIBUTE3,
                ATTRIBUTE4,
                ATTRIBUTE5,
                CREATED_BY,
                CREATION_DATE,
                LAST_UPDATED_BY,
                LAST_UPDATE_DATE,
                DELETE_FLAG
            )
            SELECT GETDATE(),
                   MKEY,
                   SR_NO,
                   DOC_CATEGORY_MKEY,
                   FILE_NAME,
                   FILE_PATH,
                   ATTRIBUTE1,
                   ATTRIBUTE2,
                   ATTRIBUTE3,
                   ATTRIBUTE4,
                   ATTRIBUTE5,
                   CREATED_BY,
                   CREATION_DATE,
                   LAST_UPDATED_BY,
                   LAST_UPDATE_DATE,
                   DELETE_FLAG
            FROM TASK_ENDLIST_MEDIA_TRL
            WHERE MKEY = @MKEY
                  AND DOC_CATEGORY_MKEY = @DOC_MKEY
                  AND DELETE_FLAG = 'N';
--------------------------------------------------------------------------------------------------------
			UPDATE TASK_ENDLIST_MEDIA_TRL
            SET DOC_CATEGORY_MKEY = @DOC_MKEY,
                FILE_NAME = @FILE_NAME,
                FILE_PATH = @FILE_PATH,
                LAST_UPDATED_BY = @CREATED_BY,
                LAST_UPDATE_DATE = GETDATE(),
				DELETE_FLAG = @DELETE_FLAG
            WHERE MKEY = @MKEY
                  AND DOC_CATEGORY_MKEY = @DOC_MKEY;
--------------------------------------------------------------------------------------------------------                  
		END
--------------------------------------------------------------------------------------------------------                          
		SELECT ETRL.MKEY,
               ETRL.SR_NO,
               ETRL.DOC_CATEGORY_MKEY,
               ETRL.FILE_NAME,
               ETRL.FILE_PATH,
               ISNULL(CONVERT(VARCHAR(50), ETRL.CREATED_BY), '') AS CREATED_BY_ID,
               ISNULL(CONVERT(VARCHAR(50), CREATEDBY.EMP_FULL_NAME), '') AS CREATED_BY_NAME,
               ETRL.CREATION_DATE AS CREATION_DATE,
               ISNULL(CONVERT(VARCHAR(50), ETRL.LAST_UPDATED_BY), '') AS LAST_UPDATED_BY,
               ISNULL(UPDATEDBY.EMP_FULL_NAME, '') UPDATED_BY_NAME,
               CASE
                   WHEN ETRL.LAST_UPDATE_DATE IS NULL THEN
                       ''
                   ELSE
                       FORMAT(ETRL.LAST_UPDATE_DATE, 'YYYY-MM-DD HH:MM:SS')
               END AS LAST_UPDATE_DATE
        FROM TASK_ENDLIST_MEDIA_TRL ETRL
            INNER JOIN EMPLOYEE_MST CREATEDBY
                ON ETRL.CREATED_BY = CREATEDBY.MKEY
            LEFT JOIN EMPLOYEE_MST UPDATEDBY
                ON ETRL.LAST_UPDATED_BY = UPDATEDBY.MKEY
        WHERE ETRL.MKEY = @MKEY
              AND DOC_CATEGORY_MKEY = @DOC_MKEY
			  --AND SR_NO = @SR_NO
              AND ETRL.DELETE_FLAG = 'N'
              AND CREATEDBY.DELETE_FLAG = 'N';
    END TRY
    BEGIN CATCH
        -------------------------------------------------------------------------------------------------------------------------------          
        SELECT ERROR_NUMBER() AS ERRORNUMBER,
               ERROR_SEVERITY() AS ERRORSEVERITY,
               ERROR_STATE() AS ERRORSTATE,
               ERROR_PROCEDURE() AS ERRORPROCEDURE,
               ERROR_LINE() AS ERRORLINE,
               ERROR_MESSAGE() AS ERRORMESSAGE;

        -------------------------------------------------------------------------------------------------------------------------------
        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;

        SET @ERROR_MESSAGE = ERROR_MESSAGE();

        -------------------------------------------------------------------------------------------------------------------------------
        EXEC SP_P_TMS_INSERT_ERROR_DES @CREATED_BY,
                                       'TMS',
                                       @APINAME,
                                       @ERROR_MESSAGE,
                                       @API_METHOD;
    -------------------------------------------------------------------------------------------------------------------------------
    END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_TASK_NODE_DETAILS]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_INSERT_TASK_NODE_DETAILS]
(									   @TASK_NO             VARCHAR(250), 
                                        @TASK_NAME           VARCHAR(250), 
                                        @TASK_DESCRIPTION    VARCHAR(250), 
                                        @CATEGORY            VARCHAR(250), 
                                        @PROJECT_ID          VARCHAR(250), 
                                        @SUBPROJECT_ID       VARCHAR(250), 
                                        @COMPLETION_DATE     DATETIME, 
                                        @ASSIGNED_TO         VARCHAR(250), 
                                        @TAGS                VARCHAR(250), 
                                        @ISNODE              CHAR(1), 
                                        --@START_DATE          DATETIME, 
                                        @CLOSE_DATE          DATETIME, 
                                        @DUE_DATE            DATETIME, 
                                        @TASK_PARENT_ID      INT, 
                                        @TASK_PARENT_NODE_ID INT,
                                        @TASK_PARENT_NUMBER VARCHAR(250),
										@TASK_TYPE			 INT = NULL,
                                        @STATUS              VARCHAR(250), 
                                        @STATUS_PERC         VARCHAR(250), 
                                        @TASK_CREATED_BY     INT, 
                                        @APPROVER_ID         INT, 
                                        @IS_ARCHIVE          CHAR(1), 
                                        @ATTRIBUTE1          VARCHAR(250), 
                                        @ATTRIBUTE2          VARCHAR(250), 
                                        @ATTRIBUTE3          VARCHAR(250), 
                                        @ATTRIBUTE4          VARCHAR(250), 
                                        @ATTRIBUTE5          VARCHAR(250), 
                                        @CREATED_BY          INT, 
                                        @CREATION_DATE       DATETIME, 
                                        @LAST_UPDATED_BY     INT, 
                                        @APPROVE_ACTION_DATE DATETIME,
                                        @Current_Task_Mkey int) 
AS 
  BEGIN 
  
  
INSERT INTO [dbo].[TEMPLATE_TASK_DETAILS]
           ([TASK_NO]
           ,[TASK_NAME]
           ,[TASK_DESCRIPTION]
           ,[CATEGORY]
           ,[PROJECT_ID]
           ,[SUBPROJECT_ID]
           ,[COMPLETION_DATE]
           ,[ASSIGNED_TO]
           ,[TAGS]
           ,[ISNODE]
           ,[CLOSE_DATE]
           ,[DUE_DATE]
           ,[TASK_PARENT_ID]
		   ,[TASK_PARENT_NODE_ID]
		   ,[TASK_PARENT_NUMBER]
		   ,[TASK_TYPE]
           ,[STATUS]
           ,[STATUS_PERC]
           ,[TASK_CREATED_BY]
           ,[APPROVER_ID]
           ,[IS_ARCHIVE]
           ,[ATTRIBUTE1]
           ,[ATTRIBUTE2]
           ,[ATTRIBUTE3]
           ,[ATTRIBUTE4]
           ,[ATTRIBUTE5]
           ,[CREATED_BY]
           ,[CREATION_DATE]
           ,[LAST_UPDATED_BY]
           ,[APPROVE_ACTION_DATE]
		   ,FunctionCall
		   ,[Current_Task_Mkey]
		   )
     VALUES
           (@TASK_NO             , 
                                        @TASK_NAME           , 
                                        @TASK_DESCRIPTION    , 
                                        @CATEGORY            , 
                                        @PROJECT_ID          , 
                                        @SUBPROJECT_ID       , 
                                        @COMPLETION_DATE     , 
                                        @ASSIGNED_TO         , 
                                        @TAGS                , 
                                        @ISNODE              , 
                                        --@START_DATE          DATETIME, 
                                        @CLOSE_DATE          , 
                                        @DUE_DATE            , 
                                        @TASK_PARENT_ID      , 
										@TASK_PARENT_NODE_ID ,
		                                @TASK_PARENT_NUMBER  ,
										@TASK_TYPE           ,
                                        @STATUS              , 
                                        @STATUS_PERC         , 
                                        @TASK_CREATED_BY     , 
                                        @APPROVER_ID         , 
                                        @IS_ARCHIVE          , 
                                        @ATTRIBUTE1          , 
                                        @ATTRIBUTE2          , 
                                        @ATTRIBUTE3          , 
                                        @ATTRIBUTE4          , 
                                        @ATTRIBUTE5          , 
                                        @CREATED_BY          , 
                                        @CREATION_DATE       , 
                                        @LAST_UPDATED_BY     , 
                                        @APPROVE_ACTION_DATE,
										'SP_INSERT_TASK_NODE_DETAILS',
										@Current_Task_Mkey)
 
  select @TASK_NO= DBO.[FN_GET_TASK_NO](@Current_Task_Mkey,@TASK_PARENT_NUMBER)
  select @ASSIGNED_TO=cast(MKEY as varchar) from EMPLOYEE_MST where EMP_FULL_NAME =@ASSIGNED_TO
  
      INSERT INTO [DBO].[task_hdr] 
                  ([task_no], 
                   [task_name], 
                   [task_description], 
                   [caregory], 
                   [project_id], 
                   [sub_project_id], 
                   [start_date], 
                   [completion_date], 
                   [close_date], 
                   [due_date], 
                   [assigned_to], 
                   [tags], 
                   [isnode], 
                   [task_parent_id],
                   [TASK_MAIN_NODE_ID], 
				   [TASK_TYPE],
                   [status], 
                   [status_perc], 
                   [task_created_by], 
                   [approver_id], 
                   [approve_action_date], 
                   [is_archive], 
                   [attribute1], 
                   [attribute2], 
                   [attribute3], 
                   [attribute4], 
                   [attribute5], 
                   [created_by], 
                   [creation_date], 
                   [last_updated_by], 
                   [last_update_date], 
                   [delete_flag],RESPOSIBLE_EMP_MKEY) 
      VALUES      ( @TASK_NO, 
                    @TASK_NAME, 
                    @TASK_DESCRIPTION, 
                    @CATEGORY, 
                    @PROJECT_ID, 
                    @SUBPROJECT_ID, 
                    GETDATE(),--@START_DATE, 
                    @COMPLETION_DATE, 
                    @CLOSE_DATE, 
                    @DUE_DATE, 
                    @ASSIGNED_TO, 
                    @TAGS, 
                    'N', 
                    @TASK_PARENT_ID, 
                    @TASK_PARENT_NODE_ID,
					@TASK_TYPE,
                    'CREATED', 
                    @STATUS_PERC, 
                    @TASK_CREATED_BY, 
                    @APPROVER_ID, 
                    @APPROVE_ACTION_DATE, 
                    @IS_ARCHIVE, 
                    @ATTRIBUTE1, 
                    @ATTRIBUTE2, 
                    @ATTRIBUTE3, 
                    @ATTRIBUTE4, 
                    @ATTRIBUTE5, 
                    @CREATED_BY, 
                    getdate(), 
                    @LAST_UPDATED_BY, 
                    NULL, 
                    'N',@ASSIGNED_TO) 
    UPDATE [task_hdr] SET ISNODE='Y',status='SUB TASK CREATED' WHERE MKEY=@TASK_PARENT_ID
    select @ATTRIBUTE1=SCOPE_IDENTITY()
    print cast(@TASK_PARENT_ID as varchar)
    set @ATTRIBUTE2=cast(@CREATED_BY as varchar)
    set @ATTRIBUTE3=cast(@TASK_PARENT_ID as varchar)
    set @ATTRIBUTE4=cast(@TASK_PARENT_NODE_ID as varchar)
    set @ATTRIBUTE5='SUB TASK CREATED:'+@TASK_NO 
    --select SCOPE_IDENTITY()Mkey,@ATTRIBUTE3,@ATTRIBUTE4,@TASK_NO TASK_NO
    select SCOPE_IDENTITY()Mkey,@ATTRIBUTE3 TASK_PARENT_ID,@ATTRIBUTE4 TASK_MAIN_NODE_ID,@TASK_NO TASK_NO
    --select * from type_mst
    exec SP_TASK_ACTION_TRL_Insert_Update
										 @TASK_PARENT_ID ,--    @Parameter1       @MKEY,
                                        @TASK_PARENT_ID,-- @Parameter2          @TASK_MKEY,                 
                                          @TASK_PARENT_ID  ,--@Parameter3 @TASK_PARENT_ID
                                       'ROOTTASKCREATED',--    @Parameter4 @ACTION_TYPE
                                       @ATTRIBUTE5,--    @Parameter5 @DESCRIPTION_COMMENT
                                       '0',--  @Parameter6 @PROGRESS_PERC
                                       'CREATED',--  @Parameter7 @STATUS
                                       @ATTRIBUTE2,--@Parameter8 @CREATED_BY
                                       @ATTRIBUTE4--@Parameter9 @TASK_MAIN_NODE_ID
                                       
    
    exec SP_TASK_ACTION_TRL_Insert_Update
										 @ATTRIBUTE1 ,--    @Parameter1       @MKEY,
                                        @ATTRIBUTE1,-- @Parameter2          @TASK_MKEY,                 
                                          @ATTRIBUTE3  ,--@Parameter3 @TASK_PARENT_ID
                                       'ROOTSUBTASKCREATED',--    @Parameter4 @ACTION_TYPE
                                       'TASK CREATED',--    @Parameter5 @DESCRIPTION_COMMENT
                                       '0',--  @Parameter6 @PROGRESS_PERC
                                       'CREATED',--  @Parameter7 @STATUS
                                       @ATTRIBUTE2,--@Parameter8 @CREATED_BY
                                       @ATTRIBUTE4--@Parameter9 @TASK_MAIN_NODE_ID
									  
		EXEC [SP_EMP_TAGS_Insert_Update]   @CREATED_BY,@TAGS,@CREATED_BY
	
  END 
GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_TASK_RECURSIVE_DETAILS]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- AUTHOR:    AMIT SHUDDHALWAR
-- CREATE DATE: 19-09-2024
-- DESCRIPTION:  TO INTSERT TASK RECURSIVE HDR AND TRL DETAILS
--exec SP_INSERT_TASK_RECURSIVE_DETAILS @TASK_NAME = N'add testing of error handle',@TASK_DESCRIPTION = N'add testing of error handle desc',@TERM = N'Monthly',@CAREGORY = 64,@PROJECT_ID = 301,@SUB_PROJECT_ID = 401,
--		@ASSIGNED_TO = 9,@TAGS = N'tags',@NO_DAYS = 5,@START_DATE = N'2024-10-24',@ENDS = N'Never',@END_DATE = NULL,@CREATED_BY = NULL,@LAST_UPDATED_BY = NULL,
--		@ATTRIBUTE1 = NULL,@ATTRIBUTE2 = NULL,@ATTRIBUTE3 = NULL,@ATTRIBUTE4 = NULL,@ATTRIBUTE5 = NULL,@ATTRIBUTE6 = NULL,@ATTRIBUTE7 = NULL,
--		@ATTRIBUTE8 = NULL,@ATTRIBUTE9 = NULL,@ATTRIBUTE10 = NULL,@ATTRIBUTE11 = N'10',@ATTRIBUTE12 = NULL,@ATTRIBUTE13 = NULL,
--		@ATTRIBUTE14 = N'9',@ATTRIBUTE15 = N'Adding form',@ATTRIBUTE16 = N'submitt'
--exec SP_INSERT_TASK_RECURSIVE_DETAILS @TASK_NAME=N'add testing monthly Oct',@TASK_DESCRIPTION=N'add testing monthly data desc',@TERM=N'Monthly',@START_DATE='2024-10-21 09:14:00',
--@ENDS=N'Never',@END_DATE=NULL,@CREATED_BY=9,@LAST_UPDATED_BY=9,@CAREGORY=64,@PROJECT_ID=301,@SUB_PROJECT_ID=302,@NO_DAYS=2,@ASSIGNED_TO=9,@TAGS=N'tgs',
--@ATTRIBUTE1=N'23',@ATTRIBUTE2=NULL,@ATTRIBUTE3=NULL,@ATTRIBUTE4=NULL,@ATTRIBUTE5=NULL,@ATTRIBUTE6=NULL,@ATTRIBUTE7=NULL,@ATTRIBUTE8=NULL,
--@ATTRIBUTE9=NULL,@ATTRIBUTE10=NULL,@ATTRIBUTE11=N'10',@ATTRIBUTE12=NULL,@ATTRIBUTE13=NULL,@ATTRIBUTE14=NULL,@ATTRIBUTE15=NULL,@ATTRIBUTE16=NULL
-- =============================================
CREATE PROCEDURE [dbo].[SP_INSERT_TASK_RECURSIVE_DETAILS] 
@TASK_NAME VARCHAR(250) = NULL,
@TASK_DESCRIPTION VARCHAR(250) = NULL,
@TERM VARCHAR(250) = NULL,
@CAREGORY numeric = NULL,
@PROJECT_ID numeric = NULL,
@SUB_PROJECT_ID numeric = NULL,
@ASSIGNED_TO numeric = NULL,
@TAGS NVARCHAR(max) = NULL,
@NO_DAYS numeric = NULL,
@START_DATE DATETIME,
@ENDS VARCHAR(250) = NULL,
@END_DATE DATETIME = NULL,
@CREATED_BY NUMERIC,
@LAST_UPDATED_BY NUMERIC,
@ATTRIBUTE1 VARCHAR(250) = NULL,
@ATTRIBUTE2 VARCHAR(250) = NULL,
@ATTRIBUTE3 VARCHAR(250) = NULL,
@ATTRIBUTE4 VARCHAR(250) = NULL,
@ATTRIBUTE5 VARCHAR(250) = NULL,
@ATTRIBUTE6 VARCHAR(250) = NULL,
@ATTRIBUTE7 VARCHAR(250) = NULL,
@ATTRIBUTE8 VARCHAR(250) = NULL,
@ATTRIBUTE9 VARCHAR(250) = NULL,
@ATTRIBUTE10 VARCHAR(250) = NULL,
@ATTRIBUTE11 VARCHAR(250) = NULL,
@ATTRIBUTE12 VARCHAR(250) = NULL,
@ATTRIBUTE13 VARCHAR(250) = NULL,
@ATTRIBUTE14 VARCHAR(100) = NULL, -- USER ID
@ATTRIBUTE15 VARCHAR(100) = NULL, -- FORM NAME
@ATTRIBUTE16 VARCHAR(100) = NULL -- FUCNTION/METHOD NAME
AS
  BEGIN
      -- SET NOCOUNT ON ADDED TO PREVENT EXTRA RESULT SETS FROM
      -- INTERFERING WITH SELECT STATEMENTS.
      SET NOCOUNT ON;

      DECLARE @SR_NO NUMERIC, @MKEY NUMERIC,@FILE_NAME VARCHAR(500) = NULL,
	@FILE_PATH VARCHAR(MAX) = NULL,@TASK_MKEY_COUNT numeric;

      BEGIN TRY
          -- INSERT STATEMENTS FOR PROCEDURE HERE
          INSERT INTO TASK_RECURSIVE_HDR
                      (TASK_NAME,
                       TASK_DESCRIPTION,
                       TERM,
					   CAREGORY,
					   PROJECT_ID,
					   SUB_PROJECT_ID,
					   ASSIGNED_TO,
					   TAGS,
					   NO_DAYS,
                       [START_DATE],
                       ENDS,
                       CREATED_BY,
                       CREATION_DATE,
                       LAST_UPDATED_BY,
                       LAST_UPDATE_DATE)
          VALUES      (@TASK_NAME,
                       @TASK_DESCRIPTION,
                       @TERM,
					   @CAREGORY,
					   @PROJECT_ID,
					   @SUB_PROJECT_ID,
					   @ASSIGNED_TO,
					   @TAGS,
					   @NO_DAYS,
                       @START_DATE,
                       @ENDS,
                       @CREATED_BY,
                       GETDATE(),
                       @LAST_UPDATED_BY,
                       GETDATE());

          -- TO GET LATEST MKEY VALUE FROM TASK_RECURSIVE_HDR TABLE
		  SET @MKEY  = SCOPE_IDENTITY();
		  SELECT @SR_NO = ISNULL(MAX(SR_NO),0)+1 FROM TASK_RECURSIVE_TRL WHERE MKEY = @MKEY;

        INSERT INTO TASK_RECURSIVE_TRL
                    (MKEY,
					SR_NO,
                    TERM_TYPE,
                    CREATED_BY,
                    CREATION_DATE,
                    LAST_UPDATED_BY,
                    LAST_UPDATE_DATE,
                    ATTRIBUTE1,
                    ATTRIBUTE2,
                    ATTRIBUTE3,
                    ATTRIBUTE4,
                    ATTRIBUTE5,
                    ATTRIBUTE6,
                    ATTRIBUTE7,
					ATTRIBUTE8,
                    ATTRIBUTE9,
                    ATTRIBUTE10,
                    ATTRIBUTE11,
                    ATTRIBUTE12,
					ATTRIBUTE13)
        VALUES      (@MKEY,
					@SR_NO,	
                    @TERM,
                    @CREATED_BY,
                    GETDATE(),
                    @LAST_UPDATED_BY,
                    GETDATE(),
                    @ATTRIBUTE1,
                    @ATTRIBUTE2,
                    @ATTRIBUTE3,
                    @ATTRIBUTE4,
                    @ATTRIBUTE5,
                    @ATTRIBUTE6,
                    @ATTRIBUTE7,
					@ATTRIBUTE8,
                    @ATTRIBUTE9,
                    @ATTRIBUTE10,
                    @ATTRIBUTE11,
                    @ATTRIBUTE12,
					@ATTRIBUTE13);
------------------------------------------------------------------------------------------------------------------------------------------
		-- IF THE END DATE IS NOT THEN IT WILL UPDATE
		IF(@END_DATE IS NOT NULL OR @END_DATE != NULL)
		BEGIN
------------------------------------------------------------------------------------------------------------------------------------------
			UPDATE TASK_RECURSIVE_HDR
			SET END_DATE = @END_DATE
			WHERE MKEY = @MKEY;
--------------------------------------------------------------------------------------------------------------------------------------------
		END 
--------------------------------------------------------------------------------------------------------------------------------------------
         SELECT HDR.MKEY,
                       HDR.TASK_NAME,
                       HDR.TASK_DESCRIPTION,
                       HDR.TERM,
					   CAREGORY,
						PROJECT_ID,
						SUB_PROJECT_ID,
						ASSIGNED_TO,
						TAGS,
						NO_DAYS,
					   CONVERT(DATETIME2,HDR.[START_DATE]) AS 'START_DATE',
                       HDR.ENDS,
					   CONVERT(DATETIME2,HDR.END_DATE) AS 'END_DATE',
                       HDR.STATUS,
                       HDR.CREATED_BY,
                       HDR.CREATION_DATE,
                       HDR.LAST_UPDATED_BY,
                       HDR.LAST_UPDATE_DATE,
                       TRL.ATTRIBUTE1,
                       TRL.ATTRIBUTE2,
                       TRL.ATTRIBUTE3,
                       TRL.ATTRIBUTE4,
                       TRL.ATTRIBUTE5,
                       TRL.ATTRIBUTE6,
                       TRL.ATTRIBUTE7,
					   TRL.ATTRIBUTE8,
                       TRL.ATTRIBUTE9,
                       TRL.ATTRIBUTE10,
                       TRL.ATTRIBUTE11,
					   TRL.ATTRIBUTE12,
					   TRL.ATTRIBUTE13,
                       TRL.SR_NO,
                       TRL.TERM_TYPE,
                       TRL.CREATED_BY,
                       TRL.CREATION_DATE,
                       TRL.LAST_UPDATED_BY,
                       TRL.LAST_UPDATE_DATE,
					   TRM.MKEY AS FILE_MKEY,
					   TRM.SR_NO AS FILE_SR_NO,
					   TRM.FILE_NAME,
					   TRM.FILE_PATH
                FROM   [DBO].[TASK_RECURSIVE_HDR] HDR
                       INNER JOIN [DBO].[TASK_RECURSIVE_TRL] TRL
                               ON HDR.MKEY = TRL.MKEY
					    LEFT JOIN TASK_RECURSIVE_MEDIA_TRL TRM
					   ON TRM.TASK_MKEY = HDR.MKEY
                WHERE  HDR.MKEY in(@MKEY)
                       AND HDR.DELETE_FLAG = 'N'
                       AND TRL.DELETE_FLAG = 'N'
---------------------------------------------------------------------------------------------------------------------------------------------
      END TRY
      BEGIN CATCH
-------------------------------------------------------------------------------------------------------------------------------          
		  SELECT ERROR_NUMBER()    AS ERRORNUMBER,
                 ERROR_SEVERITY()  AS ERRORSEVERITY,
                 ERROR_STATE()     AS ERRORSTATE,
                 ERROR_PROCEDURE() AS ERRORPROCEDURE,
                 ERROR_LINE()      AS ERRORLINE,
                 ERROR_MESSAGE()   AS ERRORMESSAGE;
-------------------------------------------------------------------------------------------------------------------------------
			DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
			SET @ERROR_MESSAGE = ERROR_MESSAGE();
-------------------------------------------------------------------------------------------------------------------------------
			EXEC sp_P_TMS_INSERT_ERROR_DES @ATTRIBUTE14,'TMS',@ATTRIBUTe15,@ERROR_MESSAGE,@ATTRIBUTE16;
-------------------------------------------------------------------------------------------------------------------------------
      END CATCH
  END 
GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_TASK_RECURSIVE_FILE_UPLOAD]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		AMIT SHUDDHALWAR
-- Create date: 2024-10-21
-- Description:	TO SAVE THE FILE DETAILS
 --EXEC SP_INSERT_TASK_RECURSIVE_FILE_UPLOAD 12,'IDapperDbConnection.cs','\\Attachment\\12\\IDapperDbConnection.cs',9,9,'add task','submit'

 --select * from  TASK_RECURSIVE_MEDIA_TRL

 -- EXEC SP_INSERT_TASK_RECURSIVE_FILE_UPLOAD 14,'15_15_59_SCRIPTS OF TM.docx','\\Attachments\\11\\15_15_59_SCRIPTS OF TM.docx', 926,926,'add task','submit'
-- =============================================
 CREATE PROCEDURE [dbo].[SP_INSERT_TASK_RECURSIVE_FILE_UPLOAD]
	-- Add the parameters for the stored procedure here
	@TASK_MKEY INT,
	@FILE_NAME VARCHAR(500) = NULL,
	@FILE_PATH VARCHAR(MAX) = NULL,
	@CREATED_BY NUMERIC,
	@ATTRIBUTE14 VARCHAR(100) = NULL, -- USER ID
	@ATTRIBUTE15 VARCHAR(100) = NULL, -- FORM NAME
	@ATTRIBUTE16 VARCHAR(100) = NULL -- FUCNTION/METHOD NAME

AS
BEGIN
	
	SET NOCOUNT ON;
	  BEGIN TRY
		DECLARE @MKEY INT, @SR_NO NUMERIC,@TASK_MKEY_COUNT NUMERIC;
   
		PRINT '@MKEY: '+ CONVERT(VARCHAR,@MKEY);
		
		SELECT @TASK_MKEY_COUNT = COUNT(*) FROM TASK_RECURSIVE_MEDIA_TRL WHERE TASK_MKEY = @TASK_MKEY AND DELETE_FLAG = 'N';
		PRINT '@TASK_MKEY_COUNT: '+ CONVERT(NVARCHAR(100), @TASK_MKEY_COUNT);
		IF(@TASK_MKEY_COUNT > 0)
		BEGIN
			PRINT 'UPDATE THE VALUE: '+ CONVERT(VARCHAR,@TASK_MKEY_COUNT);
			
			SELECT @MKEY = MKEY,@SR_NO = SR_NO FROM TASK_RECURSIVE_MEDIA_TRL WHERE TASK_MKEY = @TASK_MKEY AND DELETE_FLAG = 'N';

			INSERT INTO TASK_RECURSIVE_MEDIA_TRL_H
								  (HIST_DATE
									,MKEY
									,SR_NO
									,TASK_MKEY
									,FILE_NAME
									,FILE_PATH
									,ATTRIBUTE1
									,ATTRIBUTE2
									,ATTRIBUTE3
									,ATTRIBUTE4
									,ATTRIBUTE5
									,CREATED_BY
									,CREATION_DATE
									,LAST_UPDATED_BY
									,LAST_UPDATE_DATE
									,DELETE_FLAG
									  )	
						SELECT 
								GETDATE()
								,MKEY
								,SR_NO
								,TASK_MKEY
								,FILE_NAME
								,FILE_PATH
								,ATTRIBUTE1
								,ATTRIBUTE2
								,ATTRIBUTE3
								,ATTRIBUTE4
								,ATTRIBUTE5
								,CREATED_BY
								,CREATION_DATE
								,LAST_UPDATED_BY
								,LAST_UPDATE_DATE
								,DELETE_FLAG
								FROM TASK_RECURSIVE_MEDIA_TRL 		
							WHERE MKEY = @MKEY 
							AND TASK_MKEY = @TASK_MKEY 
							AND DELETE_FLAG = 'N';

			UPDATE TASK_RECURSIVE_MEDIA_TRL 
			SET FILE_NAME = @FILE_NAME, FILE_PATH = @FILE_PATH, LAST_UPDATED_BY = @CREATED_BY , LAST_UPDATE_DATE = GETDATE()
			WHERE MKEY = @MKEY 
			AND TASK_MKEY = @TASK_MKEY 
			AND DELETE_FLAG = 'N';

			--UPDATE TASK_RECURSIVE_MEDIA_TRL 
			--SET DELETE_FLAG = 'Y'
			--WHERE TASK_MKEY = @MKEY 
			--AND DELETE_FLAG = 'N';
		END
		ELSE
		BEGIN
			SELECT @SR_NO = ISNULL(MAX(SR_NO),0) + 1 FROM TASK_RECURSIVE_MEDIA_TRL WHERE MKEY = @MKEY;
	--------------------------------------------------------------------------------------------------------------------------------------------
			PRINT 'WITHOUT UPDATE THE VALUE: '+ CONVERT(VARCHAR,@TASK_MKEY_COUNT);
						INSERT INTO TASK_RECURSIVE_MEDIA_TRL
								  (SR_NO,
								  TASK_MKEY,
								  FILE_NAME,
								  FILE_PATH,
								  CREATED_BY,
								  CREATION_DATE
								  )	
							VALUES
								(
								@SR_NO,
								@TASK_MKEY,
								@FILE_NAME,
								@FILE_PATH, --CONVERT(varchar, @FILE_PATH + '\'+ CONVERT(varchar, @MKEY) + '\'+ CONVERT(varchar, @FILE_NAME)),
								@CREATED_BY,
								GETDATE()
								);
		END
---------------------------------------------------------------------------------------------------------------------------------------------
 END TRY
      BEGIN CATCH
-------------------------------------------------------------------------------------------------------------------------------          
		  SELECT ERROR_NUMBER()    AS ERRORNUMBER,
                 ERROR_SEVERITY()  AS ERRORSEVERITY,
                 ERROR_STATE()     AS ERRORSTATE,
                 ERROR_PROCEDURE() AS ERRORPROCEDURE,
                 ERROR_LINE()      AS ERRORLINE,
                 ERROR_MESSAGE()   AS ERRORMESSAGE;
-------------------------------------------------------------------------------------------------------------------------------
			DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
			SET @ERROR_MESSAGE = ERROR_MESSAGE();
-------------------------------------------------------------------------------------------------------------------------------
			EXEC sp_P_TMS_INSERT_ERROR_DES @ATTRIBUTE14,'TMS',@ATTRIBUTe15,@ERROR_MESSAGE,@ATTRIBUTE16;
-------------------------------------------------------------------------------------------------------------------------------
      END CATCH

END
GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_UPDATE_TABLE_SANCTIONING_DEPARTMENT]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- EXEC SP_INSERT_UPDATE_TABLE_SANCTIONING_DEPARTMENT 11198,2,1,'TEST DEPT Update',263,926,'N','Insert task S', 'Insert',null,null
-- =============================================
CREATE PROCEDURE [dbo].[SP_INSERT_UPDATE_TABLE_SANCTIONING_DEPARTMENT]
  -- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE
  @TASK_MKEY                  INT,
  @SR_NO                      INT,
  @LEVEL                      INT,
  @SANCTIONING_DEPARTMENT     NVARCHAR(255),
  @SANCTIONING_AUTHORITY_MKEY INT,
  @CREATED_BY                 INT,
  @DELETE_FLAG                NVARCHAR(2),
  @METHOD_NAME                NVARCHAR(200),
  @METHOD                     NVARCHAR(200),
  @OUT_STATUS                 NVARCHAR(200) output,
  @OUT_MESSAGE                NVARCHAR(200) output
AS
  BEGIN
      -- SET NOCOUNT ON ADDED TO PREVENT EXTRA RESULT SETS FROM
      -- INTERFERING WITH SELECT STATEMENTS.
      SET nocount ON;

      DECLARE @DCOUNT                INT,
              @SANCTIONING_AUTHORITY NVARCHAR(255);

      BEGIN try
          IF ( @SR_NO = 0
                OR @SR_NO IS NULL )
            BEGIN
                SELECT @DCOUNT = Count(*)
                FROM   task_sanctioning_department_trl
                WHERE  mkey = @TASK_MKEY
                       AND Lower(sanctioning_department) = Lower(
                           @SANCTIONING_DEPARTMENT)
                       AND sanctioning_authority_mkey =
                           @SANCTIONING_AUTHORITY_MKEY
                       AND delete_flag = 'N';

                IF ( @DCOUNT > 0 )
                  BEGIN
                      PRINT '@SR_NO: ' + CONVERT(NVARCHAR(100), @SR_NO);

                      SET @OUT_STATUS = 'Error';
                      SET @OUT_MESSAGE = 'Already exist';

                      PRINT '@OUT_MESSAGE: '
                            + CONVERT(VARCHAR(10), @OUT_MESSAGE );

                      SELECT DTRL.mkey,
                             DTRL.sr_no,
                             THDR.project_id
                             AS
                             PROPERTY_MKEY,
                             THDR.sub_project_id
                             AS
                             BUILDING_MKEY,
                             DTRL.sanctioning_department
                             AS
                             TYPE_CODE,
                             DTRL.sanctioning_authority
                             AS
                             [TYPE_DESC],
                             DTRL.sanctioning_authority_mkey
                             AS
                             SANCTIONING_AUTHORITY,
                             Isnull(DTRL.[status], 'In-Progress')
                             AS
                             [STATUS]
                             ,
                             --CASE WHEN  DTRL.[STATUS] = NULL THEN 'In-Progress' end AS [STATUS],
                             DTRL.[start_date],
                             DTRL.end_date,
                             DTRL.[level],
                             Isnull(CONVERT(VARCHAR(50), DTRL.created_by), '')
                             AS
                             CREATED_BY_ID,
                             Isnull(CONVERT(VARCHAR(50),
                                    createdby.emp_full_name),
                             '')
                             AS
                             CREATED_BY_NAME,
                             CASE
                               WHEN DTRL.creation_date IS NULL THEN ''
                               ELSE Format(DTRL.creation_date,
                                    'yyyy-MM-dd HH:mm:ss')
                             END
                             AS
                             CREATION_DATE,
                             Isnull(CONVERT(VARCHAR(50), DTRL.last_updated_by),
                             ''
                             )
                             AS
                             LAST_UPDATED_BY,
                             Isnull(updatedby.emp_full_name, '')
                             UPDATED_BY_NAME
                             ,
                             CASE
                               WHEN DTRL.last_update_date IS NULL THEN ''
                               ELSE Format(DTRL.last_update_date,
                                    'yyyy-MM-dd HH:mm:ss')
                             END
                             AS
                             LAST_UPDATE_DATE,
                             @OUT_STATUS
                             AS
                             OUT_STATUS,
                             @OUT_MESSAGE
                             AS
                             OUT_MESSAGE
                      FROM   task_sanctioning_department_trl DTRL
                             INNER JOIN task_hdr THDR
                                     ON DTRL.mkey = THDR.mkey
                             INNER JOIN employee_mst createdby
                                     ON DTRL.created_by = createdby.mkey
                             LEFT JOIN employee_mst updatedby
                                    ON DTRL.last_updated_by = updatedby.mkey
                      WHERE  DTRL.delete_flag = 'N'
                             AND createdby.delete_flag = 'N'
                             AND DTRL.mkey = @TASK_MKEY;
                  END
                ELSE
                  BEGIN
                      SELECT @SR_NO = Isnull(Max(sr_no), 0) + 1
                      FROM   task_sanctioning_department_trl
                      WHERE  mkey = @TASK_MKEY;

                      SELECT @SANCTIONING_AUTHORITY = [type_desc]
                      FROM   type_mst
                      WHERE  type_code = 'SAUTHORITY'
                             AND master_mkey = @SANCTIONING_AUTHORITY_MKEY
                             AND delete_flag = 'N';

                      INSERT INTO task_sanctioning_department_trl
                                  (mkey,
                                   sr_no,
                                   level,
                                   sanctioning_department,
                                   sanctioning_authority_mkey,
                                   sanctioning_authority,
                                   delete_flag,
                                   created_by,
                                   creation_date)
                      VALUES      ( @TASK_MKEY,
                                    @SR_NO,
                                    @LEVEL,
                                    @SANCTIONING_DEPARTMENT,
                                    @SANCTIONING_AUTHORITY_MKEY,
                                    @SANCTIONING_AUTHORITY,
                                    @DELETE_FLAG,
                                    @CREATED_BY,
                                    Getdate())

					SET @OUT_STATUS = 'OK';
					SET @OUT_MESSAGE = 'Successfuly Inserted';

					SELECT DTRL.mkey,
						 DTRL.sr_no,
						 THDR.project_id                                           AS
						 PROPERTY_MKEY,
						 THDR.sub_project_id                                       AS
						 BUILDING_MKEY,
						 DTRL.sanctioning_department                               AS
						 TYPE_CODE,
						 DTRL.sanctioning_authority                                AS
						 [TYPE_DESC],
						 DTRL.sanctioning_authority_mkey                           AS
						 SANCTIONING_AUTHORITY,
						 Isnull(DTRL.[status], 'In-Progress')                      AS
						 [STATUS]
						 ,
						 --CASE WHEN  DTRL.[STATUS] = NULL THEN 'In-Progress' end AS [STATUS],
						 DTRL.[start_date],
						 DTRL.end_date,
						 DTRL.[level],
						 Isnull(CONVERT(VARCHAR(50), DTRL.created_by), '')         AS
						 CREATED_BY_ID,
						 Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS
						 CREATED_BY_NAME,
						 CASE
						   WHEN DTRL.creation_date IS NULL THEN ''
						   ELSE Format(DTRL.creation_date, 'yyyy-MM-dd HH:mm:ss')
						 END                                                       AS
						 CREATION_DATE,
						 Isnull(CONVERT(VARCHAR(50), DTRL.last_updated_by), '')    AS
						 LAST_UPDATED_BY,
						 Isnull(updatedby.emp_full_name, '')
						 UPDATED_BY_NAME
						 ,
						 CASE
						   WHEN DTRL.last_update_date IS NULL THEN ''
						   ELSE Format(DTRL.last_update_date, 'yyyy-MM-dd HH:mm:ss')
						 END                                                       AS
						 LAST_UPDATE_DATE,
						 @OUT_STATUS                                               AS
						 OUT_STATUS,
						 @OUT_MESSAGE                                              AS
						 OUT_MESSAGE
				  FROM   task_sanctioning_department_trl DTRL
						 INNER JOIN task_hdr THDR
								 ON DTRL.mkey = THDR.mkey
						 INNER JOIN employee_mst createdby
								 ON DTRL.created_by = createdby.mkey
						 LEFT JOIN employee_mst updatedby
								ON DTRL.last_updated_by = updatedby.mkey
				  WHERE  DTRL.delete_flag = 'N'
						 AND createdby.delete_flag = 'N'
						 AND DTRL.mkey = @TASK_MKEY;

                  END
            END
          ELSE
            BEGIN
                SELECT @SANCTIONING_AUTHORITY = [type_desc]
                FROM   type_mst
                WHERE  type_code = 'SAUTHORITY'
                       AND master_mkey = @SANCTIONING_AUTHORITY_MKEY
                       AND delete_flag = 'N';

                INSERT INTO task_sanctioning_department_trl_h
                            (hist_date,
                             mkey,
                             sr_no,
                             level,
                             sanctioning_department,
                             sanctioning_authority_mkey,
                             sanctioning_authority,
                             status,
                             start_date,
                             end_date,
                             attribute1,
                             attribute2,
                             attribute3,
                             attribute4,
                             attribute5,
                             created_by,
                             creation_date,
                             last_updated_by,
                             last_update_date,
                             delete_flag)
                SELECT Getdate(),
                       mkey,
                       sr_no,
                       level,
                       sanctioning_department,
                       sanctioning_authority_mkey,
                       sanctioning_authority,
                       status,
                       start_date,
                       end_date,
                       attribute1,
                       attribute2,
                       attribute3,
                       attribute4,
                       attribute5,
                       created_by,
                       creation_date,
                       last_updated_by,
                       last_update_date,
                       delete_flag
                FROM   task_sanctioning_department_trl
                WHERE  mkey = @TASK_MKEY
                       AND sr_no = @SR_NO
                       AND delete_flag = 'N';

                UPDATE task_sanctioning_department_trl
                SET    level = @LEVEL,
                       sanctioning_department = @SANCTIONING_DEPARTMENT,
                       sanctioning_authority_mkey = @SANCTIONING_AUTHORITY_MKEY,
                       sanctioning_authority = @SANCTIONING_AUTHORITY,
                       last_updated_by = @CREATED_BY,
                       last_update_date = Getdate(),
                       delete_flag = @DELETE_FLAG
                WHERE  mkey = @TASK_MKEY
                       AND sr_no = @SR_NO
                       AND delete_flag = 'N';


			SET @OUT_STATUS = 'OK';
			SET @OUT_MESSAGE = 'Successfuly Inserted';

			SELECT DTRL.mkey,
                 DTRL.sr_no,
                 THDR.project_id                                           AS
                 PROPERTY_MKEY,
                 THDR.sub_project_id                                       AS
                 BUILDING_MKEY,
                 DTRL.sanctioning_department                               AS
                 TYPE_CODE,
                 DTRL.sanctioning_authority                                AS
                 [TYPE_DESC],
                 DTRL.sanctioning_authority_mkey                           AS
                 SANCTIONING_AUTHORITY,
                 Isnull(DTRL.[status], 'In-Progress')                      AS
                 [STATUS]
                 ,
                 --CASE WHEN  DTRL.[STATUS] = NULL THEN 'In-Progress' end AS [STATUS],
                 DTRL.[start_date],
                 DTRL.end_date,
                 DTRL.[level],
                 Isnull(CONVERT(VARCHAR(50), DTRL.created_by), '')         AS
                 CREATED_BY_ID,
                 Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS
                 CREATED_BY_NAME,
                 CASE
                   WHEN DTRL.creation_date IS NULL THEN ''
                   ELSE Format(DTRL.creation_date, 'yyyy-MM-dd HH:mm:ss')
                 END                                                       AS
                 CREATION_DATE,
                 Isnull(CONVERT(VARCHAR(50), DTRL.last_updated_by), '')    AS
                 LAST_UPDATED_BY,
                 Isnull(updatedby.emp_full_name, '')
                 UPDATED_BY_NAME
                 ,
                 CASE
                   WHEN DTRL.last_update_date IS NULL THEN ''
                   ELSE Format(DTRL.last_update_date, 'yyyy-MM-dd HH:mm:ss')
                 END                                                       AS
                 LAST_UPDATE_DATE,
                 @OUT_STATUS                                               AS
                 OUT_STATUS,
                 @OUT_MESSAGE                                              AS
                 OUT_MESSAGE
          FROM   task_sanctioning_department_trl DTRL
                 INNER JOIN task_hdr THDR
                         ON DTRL.mkey = THDR.mkey
                 INNER JOIN employee_mst createdby
                         ON DTRL.created_by = createdby.mkey
                 LEFT JOIN employee_mst updatedby
                        ON DTRL.last_updated_by = updatedby.mkey
          WHERE  DTRL.delete_flag = 'N'
                 AND createdby.delete_flag = 'N'
                 AND DTRL.mkey = @TASK_MKEY;
            END

          
      END try

      BEGIN catch
          -------------------------------------------------------------------------------------------------------------------------------          
          SELECT Error_number()    AS ERRORNUMBER,
                 Error_severity()  AS ERRORSEVERITY,
                 Error_state()     AS ERRORSTATE,
                 Error_procedure() AS ERRORPROCEDURE,
                 Error_line()      AS ERRORLINE,
                 Error_message()   AS ERRORMESSAGE;

          -------------------------------------------------------------------------------------------------------------------------------
          DECLARE @ERROR_MESSAGE VARCHAR(max) = NULL;

          SET @ERROR_MESSAGE = Error_message();

          -------------------------------------------------------------------------------------------------------------------------------
          EXEC Sp_p_tms_insert_error_des
            @CREATED_BY,
            'TMS',
            'ADD PROJECT',
            @ERROR_MESSAGE,
            'SAVE';
      -------------------------------------------------------------------------------------------------------------------------------
      END catch
  END 
GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_UPDATE_TABLE_TASK_CHECKLIST]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- EXEC SP_INSERT_UPDATE_TABLE_TASK_CHECKLIST 11104,0,404,4,926,'N','ABC','DD',null,null

--EXEC SP_INSERT_UPDATE_TABLE_TASK_CHECKLIST 11082,0,404,4,926,'N','ABC','DD',null,null
-- =============================================
CREATE PROCEDURE [dbo].[SP_INSERT_UPDATE_TABLE_TASK_CHECKLIST]
    -- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE
    @TASK_MKEY INT,
    @SR_NO INT,
    @DOCUMENT_MKEY INT,
    @DOCUMENT_CATEGORY INT,
    @CREATED_BY INT,
    @DELETE_FLAG NVARCHAR(2),
    @METHOD_NAME NVARCHAR(200),
    @METHOD NVARCHAR(200),
    @OUT_STATUS NVARCHAR(200) OUTPUT,
    @OUT_MESSAGE NVARCHAR(200) OUTPUT
AS
BEGIN
    -- SET NOCOUNT ON ADDED TO PREVENT EXTRA RESULT SETS FROM
    -- INTERFERING WITH SELECT STATEMENTS.
    SET NOCOUNT ON;

    DECLARE @DOCUMENT_NAME NVARCHAR(300),
            @DCOUNT INT;

    BEGIN TRY

        SELECT @DCOUNT = COUNT(*)
        FROM TASK_CHECKLIST_TRL
        WHERE MKEY = @TASK_MKEY
              and DOCUMENT_MKEY = @DOCUMENT_CATEGORY
              and DOCUMENT_CATEGORY = @DOCUMENT_MKEY
              AND DELETE_FLAG = 'N';

        print '@DCOUNT: ' + convert(varchar(100), @DCOUNT);
        IF (@DCOUNT > 0)
        BEGIN
            Set @OUT_STATUS = 'Error';
            Set @OUT_MESSAGE = 'Already exist';
            print '@OUT_MESSAGE: ' + convert(varchar(10), @OUT_MESSAGE);
            SELECT CTRL.mkey as TASK_MKEY,
                   CTRL.sr_no,
                   THDR.project_id AS PROPERTY_MKEY,
                   THDR.sub_project_id AS BUILDING_MKEY,
                   CTRL.document_mkey,
                   CTRL.document_name,
                   CTRL.document_category,
                   DHDR.doc_name AS [TYPE_DESC],
                   CTRL.app_check,
                   Isnull(CONVERT(VARCHAR(50), CTRL.created_by), '') AS CREATED_BY_ID,
                   Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME,
                   CASE
                       WHEN CTRL.creation_date IS NULL THEN
                           ''
                       ELSE
                           Format(CTRL.creation_date, 'yyyy-MM-dd HH:mm:ss')
                   END AS CREATION_DATE,
                   Isnull(CONVERT(VARCHAR(50), CTRL.last_updated_by), '') AS LAST_UPDATED_BY,
                   Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME,
                   CASE
                       WHEN CTRL.last_update_date IS NULL THEN
                           ''
                       ELSE
                           Format(CTRL.last_update_date, 'yyyy-MM-dd HH:mm:ss')
                   END AS LAST_UPDATE_DATE,
                   @OUT_STATUS as OUT_STATUS,
                   @OUT_MESSAGE as OUT_MESSAGE
            FROM task_checklist_trl CTRL
                INNER JOIN task_hdr THDR
                    ON CTRL.mkey = THDR.mkey
                INNER JOIN doc_template_hdr DHDR
                    ON DHDR.TYPE_MST_DOC_TYPE_MKEY = CTRL.document_category
                INNER JOIN employee_mst createdby
                    ON CTRL.created_by = createdby.mkey
                LEFT JOIN employee_mst updatedby
                    ON CTRL.last_updated_by = updatedby.mkey
            WHERE CTRL.delete_flag = 'N'
                  AND DHDR.delete_flag = 'N'
                  AND createdby.delete_flag = 'N'
                  AND THDR.delete_flag = 'N'
                  AND CTRL.mkey = @TASK_MKEY
            ORDER BY SR_NO,
                     CONVERT(INT, CTRL.document_category)
        END
        ELSE
        BEGIN
            SELECT @DOCUMENT_NAME = TYPE_DESC
            FROM TYPE_MST
            WHERE MASTER_MKEY = @DOCUMENT_CATEGORY
                  AND DELETE_FLAG = 'N';

            IF (@SR_NO = 0 OR @SR_NO IS NULL)
            BEGIN

                SELECT @SR_NO = ISNULL(MAX(SR_NO), 0) + 1
                FROM TASK_CHECKLIST_TRL
                WHERE MKEY = @TASK_MKEY
                      AND DELETE_FLAG = 'N';

                INSERT INTO TASK_CHECKLIST_TRL
                (
                    MKEY,
                    SR_NO,
                    DOCUMENT_MKEY,
                    DOCUMENT_NAME,
                    DOCUMENT_CATEGORY,
                    DELETE_FLAG,
                    CREATED_BY,
                    CREATION_DATE
                )
                VALUES
                (@TASK_MKEY, @SR_NO, @DOCUMENT_CATEGORY, @DOCUMENT_NAME, @DOCUMENT_MKEY, 'N', @CREATED_BY, GETDATE())
            END
            ELSE
            BEGIN
                INSERT INTO TASK_CHECKLIST_TRL_H
                (
                    HIST_DATE,
                    MKEY,
                    SR_NO,
                    DOCUMENT_MKEY,
                    DOCUMENT_NAME,
                    DOCUMENT_CATEGORY,
                    ATTRIBUTE1,
                    ATTRIBUTE2,
                    ATTRIBUTE3,
                    ATTRIBUTE4,
                    ATTRIBUTE5,
                    CREATED_BY,
                    CREATION_DATE,
                    LAST_UPDATED_BY,
                    LAST_UPDATE_DATE,
                    DELETE_FLAG,
                    APP_CHECK
                )
                SELECT GETDATE(),
                       MKEY,
                       SR_NO,
                       DOCUMENT_MKEY,
                       DOCUMENT_NAME,
                       DOCUMENT_CATEGORY,
                       ATTRIBUTE1,
                       ATTRIBUTE2,
                       ATTRIBUTE3,
                       ATTRIBUTE4,
                       ATTRIBUTE5,
                       CREATED_BY,
                       CREATION_DATE,
                       LAST_UPDATED_BY,
                       LAST_UPDATE_DATE,
                       DELETE_FLAG,
                       APP_CHECK
                FROM TASK_CHECKLIST_TRL
                WHERE MKEY = @TASK_MKEY
                      AND SR_NO = @SR_NO
                      AND DELETE_FLAG = 'N';

                UPDATE TASK_CHECKLIST_TRL
                SET DOCUMENT_MKEY = @DOCUMENT_CATEGORY,
                    DOCUMENT_CATEGORY = @DOCUMENT_MKEY,
                    DOCUMENT_NAME = @DOCUMENT_NAME,
                    LAST_UPDATED_BY = @CREATED_BY,
                    LAST_UPDATE_DATE = GETDATE(),
                    DELETE_FLAG = @DELETE_FLAG
                WHERE MKEY = @TASK_MKEY
                      AND SR_NO = @SR_NO
                      AND DELETE_FLAG = 'N';
            END

            Set @OUT_STATUS = 'OK';
            Set @OUT_MESSAGE = 'Successfuly Inserted';

            SELECT CTRL.mkey as TASK_MKEY,
                   CTRL.sr_no,
                   THDR.project_id AS PROPERTY_MKEY,
                   THDR.sub_project_id AS BUILDING_MKEY,
                   CTRL.document_mkey,
                   CTRL.document_name,
                   CTRL.document_category,
                   DHDR.doc_name AS [TYPE_DESC],
                   CTRL.app_check,
                   Isnull(CONVERT(VARCHAR(50), CTRL.created_by), '') AS CREATED_BY_ID,
                   Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME,
                   CASE
                       WHEN CTRL.creation_date IS NULL THEN
                           ''
                       ELSE
                           Format(CTRL.creation_date, 'yyyy-MM-dd HH:mm:ss')
                   END AS CREATION_DATE,
                   Isnull(CONVERT(VARCHAR(50), CTRL.last_updated_by), '') AS LAST_UPDATED_BY,
                   Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME,
                   CASE
                       WHEN CTRL.last_update_date IS NULL THEN
                           ''
                       ELSE
                           Format(CTRL.last_update_date, 'yyyy-MM-dd HH:mm:ss')
                   END AS LAST_UPDATE_DATE,
                   @OUT_STATUS as OUT_STATUS,
                   @OUT_MESSAGE as OUT_MESSAGE
            FROM task_checklist_trl CTRL
                INNER JOIN task_hdr THDR
                    ON CTRL.mkey = THDR.mkey
                INNER JOIN doc_template_hdr DHDR
                    ON DHDR.TYPE_MST_DOC_TYPE_MKEY = CTRL.document_category
                INNER JOIN employee_mst createdby
                    ON CTRL.created_by = createdby.mkey
                LEFT JOIN employee_mst updatedby
                    ON CTRL.last_updated_by = updatedby.mkey
            WHERE CTRL.delete_flag = 'N'
                  AND DHDR.delete_flag = 'N'
                  AND createdby.delete_flag = 'N'
                  AND THDR.delete_flag = 'N'
                  AND CTRL.mkey = @TASK_MKEY
            ORDER BY SR_NO,
                     CONVERT(INT, CTRL.document_category)
        END
    END TRY
    BEGIN CATCH
        -------------------------------------------------------------------------------------------------------------------------------          
        SELECT ERROR_NUMBER() AS ERRORNUMBER,
               ERROR_SEVERITY() AS ERRORSEVERITY,
               ERROR_STATE() AS ERRORSTATE,
               ERROR_PROCEDURE() AS ERRORPROCEDURE,
               ERROR_LINE() AS ERRORLINE,
               ERROR_MESSAGE() AS ERRORMESSAGE;

        -------------------------------------------------------------------------------------------------------------------------------
        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;

        SET @ERROR_MESSAGE = ERROR_MESSAGE();

        -------------------------------------------------------------------------------------------------------------------------------
        EXEC SP_P_TMS_INSERT_ERROR_DES @CREATED_BY,
                                       'TMS',
                                       'ADD PROJECT',
                                       @ERROR_MESSAGE,
                                       'SAVE';
    -------------------------------------------------------------------------------------------------------------------------------
    END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_UPDATE_TASK_CHECKLIST]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- EXEC SP_INSERT_UPDATE_TASK_CHECKLIST 440,443,12,12,'N',11081,'Insert/UpdateTaskCheckList','insert/Update',926 
-- EXEC SP_INSERT_UPDATE_TASK_CHECKLIST 440,443,1,403,'Y',11104,'Insert/UpdateTaskCheckList','insert/Update',926 
-- =============================================
CREATE PROCEDURE [dbo].[SP_INSERT_UPDATE_TASK_CHECKLIST]
	@PROPERTY_MKEY INT,
	@BUILDING_MKEY INT,
	@SR_NO INT,
	@DOC_MKEY int,
	@APP_CHECK CHAR(1),
	@TASK_MKEY INT,
	@API_NAME NVARCHAR(200),
	@API_METHOD NVARCHAR(100),
	@CREATED_BY INT
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		--SELECT * FROM TASK_CHECKLIST_TRL WHERE MKEY = @TASK_MKEY AND SR_NO = @SR_NO AND DOCUMENT_CATEGORY = CONVERT(NVARCHAR(100),@DOC_MKEY) AND DELETE_FLAG = 'N';
--------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		UPDATE TASK_CHECKLIST_TRL
		SET APP_CHECK = @APP_CHECK, LAST_UPDATED_BY = @CREATED_BY,  LAST_UPDATE_DATE = GETDATE()
		WHERE MKEY = @TASK_MKEY AND SR_NO = @SR_NO AND LTRIM(RTRIM(DOCUMENT_CATEGORY)) = CONVERT(NVARCHAR(100),@DOC_MKEY) AND DELETE_FLAG = 'N';
--------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		 SELECT CTRL.mkey,
                 CTRL.sr_no,
                 THDR.project_id                                           AS
                 PROPERTY_MKEY,
                 THDR.sub_project_id                                       AS
                 BUILDING_MKEY,
                 CTRL.document_mkey,
                 CTRL.document_name,
                 CTRL.document_category,
                MST.TYPE_DESC                                             AS
                 [TYPE_DESC],
                 CTRL.app_check,
                 Isnull(CONVERT(VARCHAR(50), CTRL.created_by), '')         AS
                 CREATED_BY_ID,
                 Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS
                 CREATED_BY_NAME,
                 CASE
                   WHEN CTRL.creation_date IS NULL THEN ''
                   ELSE Format(CTRL.creation_date, 'yyyy-MM-dd HH:mm:ss')
                 END                                                       AS
                 CREATION_DATE,
                 Isnull(CONVERT(VARCHAR(50), CTRL.last_updated_by), '')    AS
                 LAST_UPDATED_BY,
                 Isnull(updatedby.emp_full_name, '')
                 UPDATED_BY_NAME
                 ,
                 CASE
                   WHEN CTRL.last_update_date IS NULL THEN ''
                   ELSE Format(CTRL.last_update_date, 'yyyy-MM-dd HH:mm:ss')
                 END                                                       AS
                 LAST_UPDATE_DATE
          FROM   task_checklist_trl CTRL
                 INNER JOIN task_hdr THDR
                         ON CTRL.mkey = THDR.mkey
                 left JOIN doc_template_hdr DHDR
                         ON DHDR.TYPE_MST_DOC_TYPE_MKEY= CTRL.document_category
				 LEFT JOIN TYPE_MST MST 
						ON (MST.MASTER_MKEY = CTRL.document_category OR MST.MKEY = CTRL.document_category)
                 INNER JOIN employee_mst createdby
                         ON CTRL.created_by = createdby.mkey
                 LEFT JOIN employee_mst updatedby
                        ON CTRL.last_updated_by = updatedby.mkey
          WHERE  CTRL.delete_flag = 'N'
                 --AND DHDR.delete_flag = 'N'
                 AND createdby.delete_flag = 'N'
                 AND THDR.delete_flag = 'N'
                 AND CTRL.mkey = @TASK_MKEY
                 --AND THDR.project_id = @PROPERTY_MKEY
                 --AND THDR.sub_project_id = @BUILDING_MKEY
		 ORDER BY SR_NO,CONVERT(INT, CTRL.document_category);
	END TRY
    BEGIN CATCH
        -------------------------------------------------------------------------------------------------------------------------------            
        SELECT ERROR_NUMBER() AS ERRORNUMBER,
               ERROR_SEVERITY() AS ERRORSEVERITY,
               ERROR_STATE() AS ERRORSTATE,
               ERROR_PROCEDURE() AS ERRORPROCEDURE,
               ERROR_LINE() AS ERRORLINE,
               ERROR_MESSAGE() AS ERRORMESSAGE;

        -------------------------------------------------------------------------------------------------------------------------------  
        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
        SET @ERROR_MESSAGE = ERROR_MESSAGE();
        -------------------------------------------------------------------------------------------------------------------------------  
        EXEC SP_P_TMS_INSERT_ERROR_DES @CREATED_BY,
                                       'TMS',
                                       @API_NAME,
                                       @ERROR_MESSAGE,
                                       @API_METHOD;
    -------------------------------------------------------------------------------------------------------------------------------  
    END CATCH

END

GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_UPDATE_TASK_ENDLIST_TABLE]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	-- =============================================
--	exec SP_INSERT_UPDATE_TASK_ENDLIST_TABLE 11111,0,14,'Collection Of Land Related Documents',926,'N','AOD','DFSD',NULL,NULL
	-- =============================================
	CREATE PROCEDURE [dbo].[SP_INSERT_UPDATE_TASK_ENDLIST_TABLE]
	-- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE
	@MKEY					INT,
	@SR_NO					INT,	
	@DOCUMENT_CATEGORY_MKEY	INT,
	@DOCUMENT_NAME			NVARCHAR(255),
	@CREATED_BY             INT,
	@DELETE_FLAG            NCHAR(2),
	@API_NAME				NVARCHAR(255),
	@API_METHOD				NVARCHAR(255),
	@OUT_STATUS				NVARCHAR(255) = NULL,
	@OUT_MESSAGE			NVARCHAR(255) = NULL

	AS
	BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
	
	DECLARE @DOCUMENT_MKEY INT,@DOCUMENT_CATEGORY_NAME NVARCHAR(255);
	PRINT 'STRAT SP';
	SELECT  @DOCUMENT_MKEY = MASTER_MKEY FROM TYPE_MST WHERE TYPE_CODE = 'DOC_CATEGORY' AND DELETE_FLAG = 'N' AND LOWER([TYPE_DESC]) = LOWER(@DOCUMENT_NAME);
	--SELECT  @DOCUMENT_CATEGORY_NAME = [TYPE_DESC] FROM TYPE_MST WHERE TYPE_CODE = 'DOC_TYPE' AND DELETE_FLAG = 'N' AND MASTER_MKEY = @DOCUMENT_CATEGORY_MKEY;
	SELECT @DOCUMENT_CATEGORY_NAME = DOC_NAME FROM DOC_TEMPLATE_HDR WHERE DELETE_FLAG = 'N' AND MKEY = @DOCUMENT_CATEGORY_MKEY;
	print '@DOCUMENT_CATEGORY: '+ convert(varchar(100),@DOCUMENT_MKEY);
	print '@DOCUMENT_NAME: '+ convert(varchar(100),@DOCUMENT_CATEGORY_NAME);

	if ( @SR_NO > 0 ) 
		BEGIN
			PRINT 'OUTSIDE if ( @SR_NO > 0 ) ';
			------------------------------------------------------------------------------------------------------------------------
					INSERT INTO TASK_ENDLIST_TRL_H
											(
											HIST_DATE
											,MKEY	
											,SR_NO
											,DOCUMENT_MKEY
											,DOCUMENT_NAME
											,DOCUMENT_CATEGORY_MKEY
											,DOCUMENT_CATEGORY
											,DOC_NUM_APP_FLAG
											,DOC_NUM_VALID_FLAG
											,DOC_NUM_DATE_APP_FLAG
											,DOC_ATTACH_APP_FLAG
											,DOC_NUMBER
											,DOC_DATE
											,VALIDITY_DATE
											,CREATED_BY
											,CREATION_DATE
											,DELETE_FLAG)
									SELECT 
											GETDATE()
											,MKEY	
											,SR_NO
											,DOCUMENT_MKEY
											,DOCUMENT_NAME
											,DOCUMENT_CATEGORY_MKEY
											,DOCUMENT_CATEGORY
											,DOC_NUM_APP_FLAG
											,DOC_NUM_VALID_FLAG
											,DOC_NUM_DATE_APP_FLAG
											,DOC_ATTACH_APP_FLAG
											,DOC_NUMBER
											,DOC_DATE
											,VALIDITY_DATE
											,CREATED_BY
											,CREATION_DATE
											,DELETE_FLAG
									FROM TASK_ENDLIST_TRL
									WHERE MKEY = @MKEY 
									AND SR_NO = @SR_NO 
									AND DELETE_FLAG = 'N';
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
					UPDATE TASK_ENDLIST_TRL
							SET	
								DOCUMENT_MKEY = @DOCUMENT_MKEY
								,DOCUMENT_NAME = @DOCUMENT_NAME
								,DOCUMENT_CATEGORY_MKEY = @DOCUMENT_CATEGORY_MKEY
								,DOCUMENT_CATEGORY = @DOCUMENT_CATEGORY_NAME 
								--,DOC_NUM_APP_FLAG = @DOC_NUM_APP_FLAG
								--,DOC_NUM_VALID_FLAG = @DOC_NUM_VALID_FLAG
								--,DOC_NUM_DATE_APP_FLAG = @DOC_NUM_DATE_APP_FLAG
								--,DOC_ATTACH_APP_FLAG  = @DOC_ATTACH_APP_FLAG
								--,DOC_NUMBER = @DOC_NUMBER
								--,DOC_DATE = @DOC_DATE
								--,VALIDITY_DATE = @VALIDITY_DATE
								,LAST_UPDATED_BY = @CREATED_BY
								,LAST_UPDATE_DATE = GETDATE()
								,DELETE_FLAG = @DELETE_FLAG
							WHERE MKEY = @MKEY 
									AND SR_NO = @SR_NO 
									AND DELETE_FLAG = 'N';
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		END
	ELSE
		BEGIN
		PRINT 'INSIDE if ( @SR_NO > 0 ) ';
		
		DECLARE @DCOUNT INT;
			
			--PRINT '@MKEY: ' + CONVERT(NVARCHAR(10),@MKEY);
			--PRINT '@DOCUMENT_MKEY: ' + CONVERT(NVARCHAR(10),@DOCUMENT_MKEY);
			--PRINT '@@DOCUMENT_CATEGORY_MKEY: ' + CONVERT(NVARCHAR(10),@DOCUMENT_CATEGORY_MKEY);
			SELECT @DCOUNT = COUNT(*) 
			FROM TASK_ENDLIST_TRL 
			WHERE MKEY = @MKEY 
			AND DELETE_FLAG = 'N' AND DOCUMENT_MKEY = @DOCUMENT_MKEY AND DOCUMENT_CATEGORY_MKEY = @DOCUMENT_CATEGORY_MKEY;

			IF ( @DCOUNT > 0 )
			BEGIN
				PRINT 'INSIDE @DCOUNT: '+ CONVERT(NVARCHAR(10),@DCOUNT);
				SET @OUT_STATUS = 'Error' ;
				SET @OUT_MESSAGE = 'Already Exist' ;
				SELECT @OUT_STATUS as OUT_STATUS, @OUT_MESSAGE AS OUT_MESSAGE;
				--select 'Error' , 'Already Exist';
			END
			ELSE
			BEGIN
				Declare @DOC_NUM_APP_FLAG		NCHAR(2) = NULL,
					@DOC_NUM_VALID_FLAG		NCHAR(2)= NULL,
					@DOC_NUM_DATE_APP_FLAG	NCHAR(2)= NULL,
					@DOC_ATTACH_APP_FLAG 	NCHAR(2)= NULL,
					@DOC_NUMBER				NVARCHAR(255)= NULL,
					@DOC_DATE				NVARCHAR(255)= NULL,
					@VALIDITY_DATE			NVARCHAR(255)= NULL;

				SELECT @SR_NO = ISNULL(MAX(SR_NO),0) + 1  FROM TASK_ENDLIST_TRL where MKEY = @MKEY;
				
				PRINT '@DOCUMENT_CATEGORY_MKEY: '+ CONVERT(NVARCHAR(10),@DOCUMENT_CATEGORY_MKEY);

				SELECT @DOC_NUM_APP_FLAG = DOC_NUM_APP_FLAG ,@DOC_NUM_VALID_FLAG = DOC_NUM_VALID_FLAG,
				@DOC_NUM_DATE_APP_FLAG = DOC_NUM_DATE_APP_FLAG, @DOC_ATTACH_APP_FLAG = DOC_ATTACH_APP_FLAG
				FROM DOC_TEMPLATE_HDR 
				WHERE MKEY = @DOCUMENT_CATEGORY_MKEY 
				--AND DOC_CATEGORY = @DOCUMENT_MKEY
				AND DELETE_FLAG = 'N';

				--PRINT '@DOC_NUM_APP_FLAG: '+

				INSERT INTO TASK_ENDLIST_TRL
											(
											MKEY	
											,SR_NO
											,DOCUMENT_MKEY
											,DOCUMENT_NAME
											,DOCUMENT_CATEGORY_MKEY
											,DOCUMENT_CATEGORY
											,DOC_NUM_APP_FLAG
											,DOC_NUM_VALID_FLAG
											,DOC_NUM_DATE_APP_FLAG
											,DOC_ATTACH_APP_FLAG
											,CREATED_BY
											,CREATION_DATE
											,DELETE_FLAG)
									VALUES (
											@MKEY					
											,@SR_NO					
											,@DOCUMENT_MKEY
											,@DOCUMENT_NAME
											,@DOCUMENT_CATEGORY_MKEY		
											,@DOCUMENT_CATEGORY_NAME
											,@DOC_NUM_APP_FLAG		
											,@DOC_NUM_VALID_FLAG		
											,@DOC_NUM_DATE_APP_FLAG	
											,@DOC_ATTACH_APP_FLAG 	
											,@CREATED_BY
											,GETDATE()
											,@DELETE_FLAG
											);
			END
		END
	END TRY
	BEGIN CATCH
	-------------------------------------------------------------------------------------------------------------------------------            
	SELECT ERROR_NUMBER()    AS ERRORNUMBER,
	ERROR_SEVERITY()  AS ERRORSEVERITY,
	ERROR_STATE()     AS ERRORSTATE,
	ERROR_PROCEDURE() AS ERRORPROCEDURE,
	ERROR_LINE()      AS ERRORLINE,
	ERROR_MESSAGE()   AS ERRORMESSAGE;

	-------------------------------------------------------------------------------------------------------------------------------  
	DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
	SET @ERROR_MESSAGE = ERROR_MESSAGE();
	-------------------------------------------------------------------------------------------------------------------------------  
	EXEC SP_P_TMS_INSERT_ERROR_DES
	@CREATED_BY,
	'TMS',
	'INSERT UPDATE TASK ENDLIST',
	@ERROR_MESSAGE,
	'INSERT UPDATE';
	-------------------------------------------------------------------------------------------------------------------------------  
	END CATCH
	END


GO
/****** Object:  StoredProcedure [dbo].[SP_INSET_UPDATE_TASK_ENDLIST]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- AUTHOR:    
-- CREATE DATE: 
-- DESCRIPTION:  
-- EXEC SP_INSET_UPDATE_TASK_ENDLIST 11083,2,15,440,443,'DEF-123','2025-03-12','2025-03-12',926,'N','INERT','ADD'
-- =============================================
CREATE PROCEDURE [dbo].[SP_INSET_UPDATE_TASK_ENDLIST]
  -- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE
  @MKEY          INT,
  @SR_NO         INT,
  @DOC_MKEY      INT,
  @PROPERTY_MKEY INT,
  @BUILDING_MKEY INT,
  @DOC_NUMBER    NVARCHAR(200),
  @DOC_DATE      NVARCHAR(20),
  @VALIDITY_DATE NVARCHAR(20),
  @CREATED_BY    INT,
  @DELETE_FLAG   CHAR,
  @API_NAME      NVARCHAR(200),
  @API_METHOD    NVARCHAR(100)
AS
  BEGIN
      SET NOCOUNT ON;
      BEGIN TRY
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
          INSERT INTO TASK_ENDLIST_TRL_H
                      (HIST_DATE,
                       MKEY,
                       SR_NO,
                       DOCUMENT_MKEY,
                       DOCUMENT_NAME,
                       DOCUMENT_CATEGORY_MKEY,
                       DOCUMENT_CATEGORY,
                       DOC_NUM_APP_FLAG,
                       DOC_NUM_VALID_FLAG,
                       DOC_NUM_DATE_APP_FLAG,
                       DOC_ATTACH_APP_FLAG,
                       DOC_NUMBER,
                       DOC_DATE,
                       VALIDITY_DATE,
                       ATTRIBUTE1,
                       ATTRIBUTE2,
                       ATTRIBUTE3,
                       ATTRIBUTE4,
                       ATTRIBUTE5,
                       CREATED_BY,
                       CREATION_DATE,
                       LAST_UPDATED_BY,
                       LAST_UPDATE_DATE,
                       DELETE_FLAG)
          SELECT GETDATE(),
                 MKEY,
                 SR_NO,
                 DOCUMENT_MKEY,
                 DOCUMENT_NAME,
                 DOCUMENT_CATEGORY_MKEY,
                 DOCUMENT_CATEGORY,
                 DOC_NUM_APP_FLAG,
                 DOC_NUM_VALID_FLAG,
                 DOC_NUM_DATE_APP_FLAG,
                 DOC_ATTACH_APP_FLAG,
                 DOC_NUMBER,
                 DOC_DATE,
                 VALIDITY_DATE,
                 ATTRIBUTE1,
                 ATTRIBUTE2,
                 ATTRIBUTE3,
                 ATTRIBUTE4,
                 ATTRIBUTE5,
                 CREATED_BY,
                 CREATION_DATE,
                 LAST_UPDATED_BY,
                 LAST_UPDATE_DATE,
                 DELETE_FLAG
          FROM   TASK_ENDLIST_TRL
          WHERE  MKEY = @MKEY
                 AND SR_NO = @SR_NO
                 AND DOCUMENT_CATEGORY_MKEY = @DOC_MKEY
                 AND DELETE_FLAG = 'N';
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
          UPDATE TASK_ENDLIST_TRL
          SET    DOC_NUMBER = @DOC_NUMBER,
                 DOC_DATE = @DOC_DATE,
                 VALIDITY_DATE = @VALIDITY_DATE,
				 DELETE_FLAG = @DELETE_FLAG  
          WHERE  MKEY = @MKEY
                 AND SR_NO = @SR_NO
                 AND DOCUMENT_CATEGORY_MKEY = @DOC_MKEY
                 AND DELETE_FLAG = 'N';
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			SELECT ETRL.MKEY,SR_NO,THDR.PROJECT_ID AS PROPERTY_MKEY, THDR.SUB_PROJECT_ID AS BUILDING_MKEY
					, DOCUMENT_MKEY,DOCUMENT_NAME as TYPE_CODE,DOCUMENT_CATEGORY_MKEY as DOC_MKEY,DOCUMENT_CATEGORY as [TYPE_DESC]
					,DOC_NUM_APP_FLAG,DOC_NUM_VALID_FLAG,DOC_NUM_DATE_APP_FLAG,DOC_ATTACH_APP_FLAG,DOC_NUMBER,DOC_DATE,VALIDITY_DATE
					,Isnull(CONVERT(VARCHAR(50), ETRL.created_by), '') AS CREATED_BY_ID
					,Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME
					,CASE
						WHEN ETRL.creation_date IS NULL THEN ''
						ELSE Format(ETRL.creation_date, 'yyyy-MM-dd HH:mm:ss')
					END AS CREATION_DATE
					,Isnull(CONVERT(VARCHAR(50), ETRL.last_updated_by), '') AS LAST_UPDATED_BY
					,Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME
					,CASE
						WHEN ETRL.last_update_date IS NULL THEN ''
						ELSE Format(ETRL.last_update_date, 'yyyy-MM-dd HH:mm:ss')
					END AS LAST_UPDATE_DATE

					FROM TASK_ENDLIST_TRL ETRL INNER JOIN TASK_HDR THDR ON ETRL.MKEY = THDR.MKEY
					INNER JOIN EMPLOYEE_MST createdby ON ETRL.created_by = createdby.mkey
					LEFT JOIN EMPLOYEE_MST updatedby ON ETRL.last_updated_by = updatedby.mkey
					WHERE ETRL.DELETE_FLAG = 'N'
					AND THDR.DELETE_FLAG = 'N'
					AND THDR.PROJECT_ID = @PROPERTY_MKEY
					AND THDR.SUB_PROJECT_ID = @BUILDING_MKEY
					AND THDR.MKEY = @MKEY
					and SR_NO = @SR_NO;
      END TRY

      BEGIN CATCH
          -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
          SELECT ERROR_NUMBER()    AS ERRORNUMBER,
                 ERROR_SEVERITY()  AS ERRORSEVERITY,
                 ERROR_STATE()     AS ERRORSTATE,
                 ERROR_PROCEDURE() AS ERRORPROCEDURE,
                 ERROR_LINE()      AS ERRORLINE,
                 ERROR_MESSAGE()   AS ERRORMESSAGE;

          -------------------------------------------------------------------------------------------------------------------------------  
          DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;

          SET @ERROR_MESSAGE = ERROR_MESSAGE();

          -------------------------------------------------------------------------------------------------------------------------------  
          EXEC SP_P_TMS_INSERT_ERROR_DES
            @CREATED_BY,
            'TMS',
            @API_NAME,
            @ERROR_MESSAGE,
            @API_METHOD;
      -------------------------------------------------------------------------------------------------------------------------------  
      END CATCH
  END
GO
/****** Object:  StoredProcedure [dbo].[SP_PROJECT_SUBPROJ_Insert_Update]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_PROJECT_SUBPROJ_Insert_Update]
                                           ( @p_Insert_update varchar(50),
                                           @p_parent_flag varchar(1),
                                           @p_Parent_id numeric(18,0),
                                           @p_project_name varchar(100),
                                           @p_project_abbr varchar(10),
                                           @P_CREATED_BY numeric(18,0),
                                           @P_UPDATED_BY numeric(18,0)  )
AS
BEGIN
 
  DECLARE @i_Mkey  numeric(18,0),@i_master_mkey numeric(18,0);

set @i_Mkey   = (select isnull(max(Mkey),0)+1 from type_mst)

set @i_master_mkey   = (select isnull(max(master_mkey),0)+1 from type_mst)
   
--BEGIN TRY
 if (@p_Insert_update  = '0')     
 Begin    
  INSERT INTO [TYPE_MST]
           ([COMPANY_ID]
           ,[TYPE_CODE]
           ,[TYPE_DESC]
           ,[TYPE_ABBR]
           ,[PARENT_ID]
           ,[MASTER_MKEY]
           ,[EFFECTIVE_START_DATE]
           ,[EFFECTIVE_END_DATE]
           ,[ENABLE_FLAG]
           ,[CREATED_BY]
           ,[CREATION_DATE]
           ,[LAST_UPDATED_BY]
           ,[LAST_UPDATE_DATE]
           ,[DELETE_FLAG],
           Attribute1)
     VALUES
           (2
           ,'PROJECT'
           ,@p_project_name
           ,@p_project_abbr
           ,case when @p_parent_flag='Y' then @p_Parent_id else 0 end
           ,@i_master_mkey
           ,GETDATE()
           ,NULL
           ,'Y'
           ,@P_CREATED_BY
           ,GETDATE()
           ,@P_UPDATED_BY
           ,GETDATE()
           ,'N',@p_parent_flag)

   END
    if (@p_Insert_update  <> '0')     
 Begin    
 update [TYPE_MST] set [TYPE_DESC]=@p_project_name,[TYPE_ABBR]=@p_project_abbr,[PARENT_ID]=case when @p_parent_flag='Y' then @p_Parent_id else 0 end
  where mkey=@p_Insert_update
 print ('a');
   END
 --  END TRY
END

select * from [TYPE_MST]
GO
/****** Object:  StoredProcedure [dbo].[SP_TYPE_MST_Insert_Update]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
CREATE PROCEDURE [dbo].[SP_TYPE_MST_Insert_Update]
                                           (  @Parameter1          VARCHAR(100) = NULL,
                                              --@Mkey
                                              @Parameter2          VARCHAR(100) = NULL,                 
                                              --@COMPANY_ID
                                              @Parameter3          VARCHAR(100) = NULL,
                                              --@TYPE_CODE
                                              @Parameter4          VARCHAR(100) = NULL,
                                              --@TYPE_DESC
                                              @Parameter5          VARCHAR(100) = NULL,
                                              --@TYPE_ABBR
                                              @Parameter6          VARCHAR(100) = NULL,
                                              --@PARENT_ID
                                       /*   @Parameter7          VARCHAR(100) = NULL,
                                            --@MASTER_MKEY
                                            @Parameter8          VARCHAR(100) = NULL,
                                            --@EFFECTIVE_START_DATE
                                            @Parameter9          VARCHAR(100) = NULL,
                                            --@EFFECTIVE_END_DATE 
                                            @Parameter10         VARCHAR(100) = NULL,
                                            --@ENABLE_FLAG
                                            @Parameter11         VARCHAR(100) = NULL,
                                            --@ATTRIBUTE1
                                            @Parameter12         VARCHAR(100) = NULL,
                                            --@ATTRIBUTE2
                                            @Parameter13         VARCHAR(100) = NULL,
                                            --@ATTRIBUTE3
                                            @Parameter14         VARCHAR(100) = NULL,
                                            --@ATTRIBUTE4
                                            @Parameter15         VARCHAR(100) = NULL,
                                            --@ATTRIBUTE5
                                            @Parameter16         VARCHAR(100) = NULL,
                                            --@ATTRIBUTE6
                                            @Parameter17         VARCHAR(100) = NULL,
                                            --@ATTRIBUTE7
                                            @Parameter18         VARCHAR(100) = NULL,
                                            --@ATTRIBUTE8
                                            @Parameter19         VARCHAR(100) = NULL,
                                            --@ATTRIBUTE9
                                            @Parameter20         VARCHAR(100) = NULL,
                                            --@ATTRIBUTE10  */
                                              @Parameter21         VARCHAR(100) = NULL
                                              --@CREATED_BY
                                        /*  @Parameter22         VARCHAR(100) = NULL,
											--@CREATION_DATE
                                            @Parameter23         VARCHAR(100) = NULL,
                                            --@LAST_UPDATED_BY
                                            @Parameter24         VARCHAR(100) = NULL,
                                            --@LAST_UPDATE_DATE
                                            @Parameter25         VARCHAR(100) = NULL
                                            --@DELETE_FLAG  */
                                        )  
                                        
AS
BEGIN

 --DECLARE @ErrorLine INT;
 --DECLARE @ErrorNumber INT;
 --DECLARE @ErrorMessage NVARCHAR(4000);
   
   --set dateformat DMY  --SESSION DATE FORMATE
  
  declare @var1 varchar(50);
  declare @DCount int;   
 
  declare @EFFECTIVE_START_DATE	VARCHAR(100)
		 ,@EFFECTIVE_END_DATE	VARCHAR(100)
		 ,@ENABLE_FLAG			VARCHAR(100)
  
  declare @CREATION_DATE		VARCHAR(100)
         ,@DELETE_FLAG			VARCHAR(100)
		 ,@LAST_UPDATED_BY	    VARCHAR(100)
         ,@LAST_UPDATE_DATE	    VARCHAR(100)
         ,@ATTRIBUTE1	        VARCHAR(100)
         ,@ATTRIBUTE2	        VARCHAR(100)
         ,@ATTRIBUTE3	        VARCHAR(100)
         ,@ATTRIBUTE4	        VARCHAR(100)
         ,@ATTRIBUTE5	        VARCHAR(100)
         ,@ATTRIBUTE6	        VARCHAR(100)
         ,@ATTRIBUTE7	        VARCHAR(100)
         ,@ATTRIBUTE8	        VARCHAR(100)
         ,@ATTRIBUTE9	        VARCHAR(100)
         ,@ATTRIBUTE10	        VARCHAR(100)
         

          set @EFFECTIVE_START_DATE  =  GETDATE()
          set @EFFECTIVE_END_DATE	 =  null
          set @ENABLE_FLAG		     =  'Y'

	      set @CREATION_DATE         =  GETDATE()
		  set @DELETE_FLAG	         =  'N'
		  set @LAST_UPDATED_BY       =  null
		  set @LAST_UPDATE_DATE		 =  null
		  set @ATTRIBUTE1			 =  null
		  set @ATTRIBUTE2			 =  null
		  set @ATTRIBUTE3			 =  null
		  set @ATTRIBUTE4			 =  null
		  set @ATTRIBUTE5			 =  null
		  set @ATTRIBUTE6			 =  null
		  set @ATTRIBUTE7			 =  null
		  set @ATTRIBUTE8			 =  null
		  set @ATTRIBUTE9			 =  null
		  set @ATTRIBUTE10			 =  null

  
     
   declare @MASTER_MKEY	VARCHAR(100)
    SELECT @MASTER_MKEY = max(cast(isnull(tm.MASTER_MKEY,'0')as int))+1 FROM TYPE_MST tm --WHERE MKEY=@Parameter1
     Print 'MASTER_MKEY->'+@MASTER_MKEY
  
     
   SELECT @DCount = count(*) FROM TYPE_MST tm WHERE mkey=@Parameter1
      if(@DCount>0)     
         begin    
          print @DCount
          set @var1='Update'    
         end    
       else    
         begin    
          print @DCount
          set @var1='Insert'    
         end    
--RETURN

BEGIN TRY

  if (@var1 = 'Insert')     
  Begin    
  Print 'Start-Insert'
  
   --------------- INSERTION FOR TYPE_MST TABLE ---------
    INSERT INTO [dbo].[TYPE_MST] 
                  (                                      
                    --[MKEY],
					[COMPANY_ID],
					[TYPE_CODE],
					[TYPE_DESC],
					[TYPE_ABBR],
					[PARENT_ID],
					[MASTER_MKEY],
					[EFFECTIVE_START_DATE],
					[EFFECTIVE_END_DATE],
					[ENABLE_FLAG],
					[ATTRIBUTE1],
					[ATTRIBUTE2],
					[ATTRIBUTE3],
					[ATTRIBUTE4],
					[ATTRIBUTE5],
					[ATTRIBUTE6],
					[ATTRIBUTE7],
					[ATTRIBUTE8],
					[ATTRIBUTE9],
					[ATTRIBUTE10],
					[CREATED_BY],
					[CREATION_DATE],
					[LAST_UPDATED_BY],
					[LAST_UPDATE_DATE],
					[DELETE_FLAG]
                  )  
          VALUES (  
                    --@Parameter1,		--@Mkey
					@Parameter2,        --@COMPANY_ID
					@Parameter3,        --@TYPE_CODE
					@Parameter4,        --@TYPE_DESC
					@Parameter5,        --@TYPE_ABBR
					@Parameter6,        --@PARENT_ID
					@MASTER_MKEY,       --@MASTER_MKEY
					@EFFECTIVE_START_DATE,
					@EFFECTIVE_END_DATE,
					@ENABLE_FLAG,
					@ATTRIBUTE1,
					@ATTRIBUTE2,
					@ATTRIBUTE3,
					@ATTRIBUTE4,
					@ATTRIBUTE5,
					@ATTRIBUTE6,
					@ATTRIBUTE7,
					@ATTRIBUTE8,
					@ATTRIBUTE9,
					@ATTRIBUTE10,
					@Parameter21,        --@CREATED_BY
					@CREATION_DATE,
					@LAST_UPDATED_BY,
					@LAST_UPDATE_DATE,
					@DELETE_FLAG   
                  )   
          
     Print 'End-Insert'       
end 

  Else If(@var1 = 'Update')    
     Begin    

      print 'Start-Update' 
              
      --------------- UPDATION FOR TYPE_MST TABLE ------------     
             UPDATE [dbo].[TYPE_MST] SET 
                                     --Mkey					=   @Parameter1
									 COMPANY_ID				=   @Parameter2
									,TYPE_CODE				=	@Parameter3
									,TYPE_DESC				=	@Parameter4		
									,TYPE_ABBR				=	@Parameter5		
									,PARENT_ID				=	@Parameter6		
									--,MASTER_MKEY     		  =   @MASTER_MKEY
								    --,EFFECTIVE_START_DATE   =   @EFFECTIVE_START_DATE
								    --,EFFECTIVE_END_DATE     =   @EFFECTIVE_END_DATE
									--,ENABLE_FLAG            =   @ENABLE_FLAG
                                    ,ATTRIBUTE1				=	@ATTRIBUTE1
									,ATTRIBUTE2				=	@ATTRIBUTE2
                                    ,ATTRIBUTE3 			=	@ATTRIBUTE3
									,ATTRIBUTE4				=	@ATTRIBUTE4
                                    ,ATTRIBUTE5 			=	@ATTRIBUTE5
                                    ,ATTRIBUTE6				=	@ATTRIBUTE6
									,ATTRIBUTE7				=	@ATTRIBUTE7
                                    ,ATTRIBUTE8 			=	@ATTRIBUTE8
									,ATTRIBUTE9				=	@ATTRIBUTE9
                                    ,ATTRIBUTE10 			=	@ATTRIBUTE10
									--,CREATED_BY			  =	  @Parameter21	
									--,CREATION_DATE		  =	  GETDATE()			
									,LAST_UPDATED_BY		=	@Parameter21	  --@LAST_UPDATED_BY   
									,LAST_UPDATE_DATE		=	GETDATE()	      --@LAST_UPDATE_DATE  
									,DELETE_FLAG			=	@DELETE_FLAG   
                              WHERE mkey = @Parameter1
      
      print 'End-Update'  
     
     End    
     
     
  END TRY

  BEGIN CATCH  
  
      SELECT
        ERROR_NUMBER()    AS ErrorNumber,
        ERROR_STATE()     AS ErrorState,
        ERROR_SEVERITY()  AS ErrorSeverity,
        ERROR_PROCEDURE() AS ErrorProcedure,
        ERROR_LINE()      AS ErrorLine,
        ERROR_MESSAGE()   AS ErrorMessage;
  
   -- SET @MessageText = 'Invalid TYPE, Please Enter the Valid TYPE';
   -- RAISERROR (@MessageText, @ErrorNumber, 1); 
     
  END CATCH


END
GO
/****** Object:  StoredProcedure [dbo].[SP_UPDATE_APPROVAL_TASK_NO]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================    
-- Author:  AMIT SHUDDHALWAR    
-- Create date: 05-12-2024    
-- Description: FOR UPDATING THE TASK NO IN PROJECT_TRL_APPROVAL_ABBR TABLE     
--  exec SP_UPDATE_APPROVAL_TASK_NO @MKEY=28,@APPROVAL_MKEY=21,@TASK_NO_MKEY=10781    
-- =============================================    
CREATE PROCEDURE [dbo].[SP_UPDATE_APPROVAL_TASK_NO]
  -- Add the parameters for the stored procedure here    
  @MKEY                 INT,
  @APPROVAL_MKEY        INT,
  @TASK_NO_MKEY         NVARCHAR(100) = NULL,
  @COMPLETION_DATE      DATETIME = NULL,
  @TASK_DESCRIPTION     NVARCHAR(max) = NULL,
  @TENTATIVE_START_DATE DATETIME = NULL,
  @TENTATIVE_END_DATE   DATETIME = NULL,
  @INITIATOR            INT = NULL,
  @TAGS                 NVARCHAR (max) = NULL,
  @LAST_UPDATED_BY      INT,
  @DAYS_REQUIRED        INT = 0
AS
  BEGIN
      SET nocount ON;

      BEGIN try
          DECLARE @COUNT_APPROVAL INT,
                  @COUNT_MKEY     INT

          -- Insert statements for procedure here    
          SELECT @COUNT_APPROVAL = Count(*)
          FROM   project_trl_approval_abbr
          WHERE  delete_flag = 'N'
                 AND header_mkey = @MKEY
                 AND approval_mkey = @APPROVAL_MKEY;

          --------------------------------------------------------------------------------------------------------------------------    
          IF ( @COUNT_APPROVAL > 0 )
            BEGIN
                --------------------------------------------------------------------------------------------------------------------------    
                --------------------------------------------------------------------------------------------------------------------------    
                INSERT INTO project_hdr_h
                            (hist_date,
                             mkey,
                             building_mkey,
                             project_abbr,
                             property,
                             legal_entity,
                             project_address,
                             building_classification,
                             building_standard,
                             statutory_authority,
                             initiator,
                             attribute1,
                             attribute2,
                             attribute3,
                             attribute4,
                             attribute5,
                             created_by,
                             creation_date,
                             last_updated_by,
                             last_update_date,
                             delete_flag)
                SELECT Getdate(),
                       mkey,
                       building_mkey,
                       project_abbr,
                       property,
                       legal_entity,
                       project_address,
                       building_classification,
                       building_standard,
                       statutory_authority,
                       initiator,
                       attribute1,
                       attribute2,
                       attribute3,
                       attribute4,
                       attribute5,
                       created_by,
                       creation_date,
                       last_updated_by,
                       last_update_date,
                       delete_flag
                FROM   project_hdr
                WHERE  mkey = @MKEY
                       AND delete_flag = 'N';
                -------------------------------------------------------------------------------------------------------------------------------      
                INSERT INTO project_trl_approval_abbr_h
                            (hist_date,
                             header_mkey,
                             approval_mkey,
                             seq_no,
                             task_no_mkey,
                             approval_abbrivation,
                             approval_description,
                             days_required,
                             department,
                             job_role,
                             resposible_emp_mkey,
                             output_document,
                             tentative_start_date,
                             tentative_end_date,
                             status,
                             attribute1,
                             attribute2,
                             attribute3,
                             attribute4,
                             attribute5,
                             created_by,
                             creation_date,
                             last_updated_by,
                             last_update_date,
                             delete_flag)
                SELECT Getdate(),
                       header_mkey,
                       approval_mkey,
                       seq_no,
                       task_no_mkey,
                       approval_abbrivation,
                       approval_description,
                       days_required,
                       department,
                       job_role,
                       resposible_emp_mkey,
                       output_document,
                       tentative_start_date,
                       tentative_end_date,
                       status,
                       attribute1,
                       attribute2,
                       attribute3,
                       attribute4,
                       attribute5,
                       created_by,
                       creation_date,
                       last_updated_by,
                       last_update_date,
                       delete_flag
                FROM   project_trl_approval_abbr
                WHERE  delete_flag = 'N'
                       AND header_mkey = @MKEY
                       AND approval_mkey = @APPROVAL_MKEY;
                ----------------------------------------------------------------------------------------------------------------------------------  
                UPDATE project_hdr
                SET    [initiator] = Isnull(@INITIATOR, [initiator]),
                       last_updated_by = @LAST_UPDATED_BY,
                       last_update_date = Getdate()
                WHERE  mkey = @MKEY
                       AND delete_flag = 'N';
                ----------------------------------------------------------------------------------------------------------------------------------      
                INSERT INTO approval_template_hdr_h
                            (hist_date,
                             mkey,
                             building_type,
                             building_standard,
                             statutory_authority,
                             main_abbr,
                             short_description,
                             long_description,
                             authority_department,
                             resposible_emp_mkey,
                             job_role,
                             days_requierd,
                             sanction_authority,
                             sanction_department,
                             tags,
                             attribute1,
                             attribute2,
                             attribute3,
                             attribute4,
                             attribute5,
                             created_by,
                             creation_date,
                             last_updated_by,
                             last_update_date,
                             end_result_doc,
                             checklist_doc,
                             delete_flag)
                SELECT Getdate(),
                       mkey,
                       building_type,
                       building_standard,
                       statutory_authority,
                       main_abbr,
                       short_description,
                       long_description,
                       authority_department,
                       resposible_emp_mkey,
                       job_role,
                       days_requierd,
                       sanction_authority,
                       sanction_department,
                       tags,
                       attribute1,
                       attribute2,
                       attribute3,
                       attribute4,
                       attribute5,
                       created_by,
                       creation_date,
                       last_updated_by,
                       last_update_date,
                       end_result_doc,
                       checklist_doc,
                       delete_flag
                FROM   approval_template_hdr
                WHERE  delete_flag = 'N'
                       AND mkey = @APPROVAL_MKEY;
                --------------------------------------------------------------------------------------------------------------------------    
                UPDATE project_trl_approval_abbr
                SET    task_no_mkey = @TASK_NO_MKEY,
                       tentative_start_date = Isnull(@TENTATIVE_START_DATE,
                                              tentative_start_date
                                              ),
                       tentative_end_date = Isnull(@TENTATIVE_END_DATE,
                                            tentative_end_date
                                            ),
                       days_required = Isnull(@DAYS_REQUIRED, days_required),
                       status = 'Initiated',
                       last_updated_by = @LAST_UPDATED_BY,
                       last_update_date = Getdate()
                WHERE  delete_flag = 'N'
                       AND header_mkey = @MKEY
                       AND approval_mkey = @APPROVAL_MKEY;
                ------------------------------------------------------------------------------------------------------------------------- -------------------------------------------------------------------------------------------------------------------------    
                UPDATE approval_template_hdr
                SET    tags = Isnull(@TAGS, tags)
                WHERE  delete_flag = 'N'
                       AND mkey = @APPROVAL_MKEY;
                -------------------------------------------------------------------------------------------------------------------------    
                SELECT @COUNT_APPROVAL = Count(*)
                FROM   project_trl_approval_abbr
                WHERE  delete_flag = 'N'
                       AND header_mkey = @MKEY
                       AND approval_mkey = @APPROVAL_MKEY;
            -------------------------------------------------------------------------------------------------------------------------    
            END

          SELECT @COUNT_MKEY = Count(*)
          FROM   task_hdr
          WHERE  mkey = @TASK_NO_MKEY;

          IF ( @COUNT_MKEY > 0 )
            BEGIN
                UPDATE task_hdr
                SET    start_date = @TENTATIVE_START_DATE
                WHERE  mkey = @TASK_NO_MKEY;
            END

-------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------- checklist cursor
-------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------
print 'checklist data';

          DECLARE @SR_NO        INT,
                  @DOCUMENT_NAME     VARCHAR(100),
                  @DOCUMENT_CATEGORY NVARCHAR(100),
                  @Position          INT,
                  @NextComma         INT,
                  @DOC_MKEY          NVARCHAR(max),
				  @DOCUMENT_TYPE_MKEY INT;

				  --SET @APPROVAL_MKEY = 50;
				  --SET @TASK_NO_MKEY = 11082;

          DECLARE cursor_task_checklist CURSOR FOR
            SELECT document_name,
                   document_category
            FROM   approval_template_trl_checklist
            WHERE  delete_flag = 'N'
               AND mkey = @APPROVAL_MKEY
            ORDER  BY sr_no;

          OPEN cursor_task_checklist;

          FETCH next FROM cursor_task_checklist INTO  @DOCUMENT_NAME,@DOCUMENT_CATEGORY;

          WHILE @@FETCH_STATUS = 0
            BEGIN
                WHILE Len(@DOCUMENT_CATEGORY) > 0
                  BEGIN
                      SET @NextComma = Charindex(',', @DOCUMENT_CATEGORY);

                      IF @NextComma > 0
                        BEGIN
                            SET @DOC_MKEY = LEFT(@DOCUMENT_CATEGORY,
                                            @NextComma - 1);

                            PRINT '@String: ' + @DOC_MKEY;

                            SELECT @SR_NO = (Isnull(Max(sr_no), 0)) + 1
                            FROM   task_checklist_trl
                            WHERE  mkey = @TASK_NO_MKEY;

                            SET @DOCUMENT_CATEGORY = Substring(@DOCUMENT_CATEGORY, @NextComma + 1, Len(@DOCUMENT_CATEGORY) - @NextComma) ;

                            SELECT @DOCUMENT_TYPE_MKEY = doc_category
                            FROM   doc_template_hdr
                            WHERE  mkey = @DOC_MKEY

                            INSERT INTO task_checklist_trl
                                        (mkey,
                                         sr_no,
                                         document_mkey,
                                         document_name,
                                         document_category,
                                         created_by,
                                         creation_date,
                                         delete_flag)
                            VALUES      (@TASK_NO_MKEY,
                                         @SR_NO,
                                         @DOCUMENT_TYPE_MKEY,
                                         @DOCUMENT_NAME,
                                         @DOC_MKEY,
                                         @LAST_UPDATED_BY,
                                         Getdate(),
                                         'N')
                        END
                      ELSE
                        BEGIN
                            SET @DOC_MKEY = @DOCUMENT_CATEGORY;

                            PRINT '@DOC_MKEY: ' + @DOC_MKEY;
							SELECT @SR_NO = (Isnull(Max(sr_no), 0)) + 1
                            FROM   task_checklist_trl
                            WHERE  mkey = @TASK_NO_MKEY;

                            INSERT INTO task_checklist_trl
                                        (mkey,
                                         sr_no,
										 document_mkey,
                                         document_name,
                                         document_category,
                                         created_by,
                                         creation_date,
                                         delete_flag)
                            VALUES      (@TASK_NO_MKEY,
                                         @SR_NO,
										 @DOCUMENT_TYPE_MKEY,
                                         @DOCUMENT_NAME,
                                         @DOCUMENT_CATEGORY,
                                         @LAST_UPDATED_BY,
                                         Getdate(),
                                         'N');

                            SET @DOCUMENT_CATEGORY = '';
                        END
                  END

                FETCH next FROM cursor_task_checklist INTO  @DOCUMENT_NAME,@DOCUMENT_CATEGORY;
            END

          CLOSE cursor_task_checklist;

          DEALLOCATE cursor_task_checklist;

-------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------- Endlist cursor
-------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------
print 'endlist data';

DECLARE 
				--@DOC_MKEY          NVARCHAR(max),
				@DOC_NUM_APP_FLAG   NCHAR(2),
				@DOC_NUM_VALID_FLAG NCHAR(2),
				@DOC_NUM_DATE_APP_FLAG NCHAR(2),
				@DOC_ATTACH_APP_FLAG NCHAR(2),
				@DOC_NUMBER         NVARCHAR(400),
				@DOC_DATE           NVARCHAR(50),
				@VALIDITY_DATE      NVARCHAR(50),
				@DOC_DEPOSITORY_MKEY	INT,
				--@DOCUMENT_NAME      VARCHAR(100),
				--@DOCUMENT_CATEGORY  NVARCHAR(100),
				--@SR_NO              INT,
				--@DOCUMENT_TYPE_MKEY INT,
				@DOC_NAME           NVARCHAR(200),
				@FILE_NAME			NVARCHAR(500), 
				@FILE_PATH			NVARCHAR(MAX), 
				@PROPERTY_MKEY      INT,  -- Assuming you have this declared elsewhere
				@BUILDING_MKEY      INT;  -- Assuming you have this declared elsewhere
				--@LAST_UPDATED_BY    INT,
				--@TASK_NO_MKEY       INT,
				--@APPROVAL_MKEY      INT,
				--@Position           INT,
				--@NextComma          INT;

				  --set @Position = 0;
				  --set @NextComma = 0;
				  --SET @APPROVAL_MKEY = 22;
				  --SET @TASK_NO_MKEY = 11083;
				  --SET @LAST_UPDATED_BY = 926;
				    DECLARE cursor_task_ENDLIST CURSOR FOR
            SELECT document_name,
                   document_category
            FROM   APPROVAL_TEMPLATE_TRL_ENDRESULT
            WHERE  delete_flag = 'N'
               AND mkey = @APPROVAL_MKEY
            ORDER  BY sr_no;

          OPEN cursor_task_ENDLIST;

          FETCH next FROM cursor_task_ENDLIST INTO  @DOCUMENT_NAME,@DOCUMENT_CATEGORY;

          WHILE @@FETCH_STATUS = 0
            BEGIN
                WHILE Len(@DOCUMENT_CATEGORY) > 0
                  BEGIN
                      SET @NextComma = Charindex(',', @DOCUMENT_CATEGORY);

                      IF @NextComma > 0
                        BEGIN
                            SET @DOC_MKEY = LEFT(@DOCUMENT_CATEGORY,
                                            @NextComma - 1);

                            PRINT '@String: ' + @DOC_MKEY;

                            SELECT @SR_NO = (Isnull(Max(SR_NO), 0)) + 1
                            FROM   task_ENDLIST_trl
                            WHERE  mkey = @TASK_NO_MKEY;

                            SET @DOCUMENT_CATEGORY = Substring(@DOCUMENT_CATEGORY, @NextComma + 1, Len(@DOCUMENT_CATEGORY) - @NextComma);

                            SELECT @DOCUMENT_TYPE_MKEY = doc_category,@DOC_NAME = DOC_NAME, @DOC_NUM_APP_FLAG = DOC_NUM_APP_FLAG ,@DOC_NUM_VALID_FLAG = DOC_NUM_VALID_FLAG
							,@DOC_NUM_DATE_APP_FLAG  = DOC_NUM_DATE_APP_FLAG ,@DOC_ATTACH_APP_FLAG = DOC_ATTACH_APP_FLAG
                           FROM   doc_template_hdr
                            WHERE  mkey = @DOC_MKEY AND DELETE_FLAG = 'N';

							SELECT @DOC_NUMBER = ISNULL(DOC_NUMBER,NULL), @DOC_DATE = ISNULL(DOC_DATE,NULL), @VALIDITY_DATE = ISNULL(VALIDITY_DATE,NULL) 
							,@DOC_DEPOSITORY_MKEY =  MKEY 
							FROM PROJECT_DOC_DEPOSITORY_HDR WHERE DOC_MKEY = @DOC_MKEY AND DELETE_FLAG = 'N'
							AND  PROPERTY_TYPE = @PROPERTY_MKEY and  BUILDING_TYPE = @BUILDING_MKEY;
							
							PRINT '@DOC_MKEY: '+ CONVERT(VARCHAR(10),@DOC_MKEY);
							PRINT '@PROPERTY_MKEY: '+ CONVERT(VARCHAR(10),@PROPERTY_MKEY);
							PRINT '@@BUILDING_MKEY: '+ CONVERT(VARCHAR(10),@BUILDING_MKEY);
                            INSERT INTO task_ENDLIST_trl
                                        (mkey,
                                         sr_no,
                                         document_mkey,
                                         document_name,
                                         document_category_MKEY,
										 document_category,
										 DOC_NUM_APP_FLAG,
										 DOC_NUM_VALID_FLAG,
										 DOC_NUM_DATE_APP_FLAG,
										 DOC_ATTACH_APP_FLAG,
										 DOC_NUMBER,
										 DOC_DATE,
										 VALIDITY_DATE,
                                         created_by,
                                         creation_date,
                                         delete_flag)
                            VALUES      (@TASK_NO_MKEY,
                                         @SR_NO,
                                         @DOCUMENT_TYPE_MKEY,
                                         @DOCUMENT_NAME,
                                         @DOC_MKEY,
										 @DOC_NAME,
										 @DOC_NUM_APP_FLAG,
										 @DOC_NUM_VALID_FLAG,
										 @DOC_NUM_DATE_APP_FLAG,
										 @DOC_ATTACH_APP_FLAG,
										 @DOC_NUMBER,
										 @DOC_DATE,
										 @VALIDITY_DATE,
                                         @LAST_UPDATED_BY,
                                         Getdate(),
                                         'N');
							
							PRINT 'BEFOR ATT: '+ CONVERT(VARCHAR(10),@DOC_DEPOSITORY_MKEY);
							
							DECLARE cursor_task_ENDLIST_MEDIA CURSOR FOR
							SELECT  FILE_NAME, FILE_PATH
							FROM   PROJECT_DOC_DEPOSITORY_TRL_MEDIA
							WHERE  delete_flag = 'N'
								AND PROJECT_DOC_MKEY = @DOC_DEPOSITORY_MKEY
							ORDER  BY sr_no;

							OPEN cursor_task_ENDLIST_MEDIA;
							
							FETCH next FROM cursor_task_ENDLIST_MEDIA INTO  @FILE_NAME,@FILE_PATH;

							WHILE @@FETCH_STATUS = 0
							BEGIN
								PRINT 'ATTCHAMENT: '+ @FILE_NAME +': '+ @FILE_PATH;
								SELECT @SR_NO = (Isnull(Max(SR_NO), 0)) + 1
								FROM   TASK_ENDLIST_MEDIA_TRL
								WHERE  mkey = @TASK_NO_MKEY 
								AND DOC_CATEGORY_MKEY = @DOC_MKEY;

								INSERT INTO TASK_ENDLIST_MEDIA_TRL (
											MKEY
											,SR_NO
											,DOC_CATEGORY_MKEY
											,FILE_NAME
											,FILE_PATH
											,CREATED_BY
											,CREATION_DATE
											)
											VALUES
											(
											@TASK_NO_MKEY
											,@SR_NO
											,@DOC_MKEY
											,@FILE_NAME
											,@FILE_PATH
											,@LAST_UPDATED_BY
											,GETDATE()
											)

								FETCH next FROM cursor_task_ENDLIST_MEDIA INTO  @FILE_NAME,@FILE_PATH;
							END

						  CLOSE cursor_task_ENDLIST_MEDIA;

						  DEALLOCATE cursor_task_ENDLIST_MEDIA;
						END
                      ELSE
                        BEGIN
                            SET @DOC_MKEY = @DOCUMENT_CATEGORY;

                            PRINT '@DOC_MKEY: ' + @DOC_MKEY;
							
							SELECT @SR_NO = (Isnull(Max(sr_no), 0)) + 1
                            FROM   task_ENDLIST_trl
                            WHERE  mkey = @TASK_NO_MKEY;
							
							SELECT @DOCUMENT_TYPE_MKEY = doc_category,@DOC_NAME = DOC_NAME, @DOC_NUM_APP_FLAG = DOC_NUM_APP_FLAG ,@DOC_NUM_VALID_FLAG = DOC_NUM_VALID_FLAG
							,@DOC_NUM_DATE_APP_FLAG  = DOC_NUM_DATE_APP_FLAG ,@DOC_ATTACH_APP_FLAG = DOC_ATTACH_APP_FLAG
                            FROM   doc_template_hdr
                            WHERE  mkey = @DOC_MKEY AND DELETE_FLAG = 'N';

							SELECT @DOC_NUMBER = ISNULL(DOC_NUMBER,NULL), @DOC_DATE = ISNULL(DOC_DATE,NULL), @VALIDITY_DATE = ISNULL(VALIDITY_DATE,NULL) 
							FROM PROJECT_DOC_DEPOSITORY_HDR WHERE DOC_MKEY = @DOC_MKEY AND DELETE_FLAG = 'N'
							AND  PROPERTY_TYPE = @PROPERTY_MKEY and  BUILDING_TYPE = @BUILDING_MKEY;

                            INSERT INTO task_ENDLIST_trl
                                        (mkey,
                                         sr_no,
                                         document_mkey,
                                         document_name,
                                         document_category_MKEY,
										 document_category,
										 DOC_NUM_APP_FLAG,
										 DOC_NUM_VALID_FLAG,
										 DOC_NUM_DATE_APP_FLAG,
										 DOC_ATTACH_APP_FLAG,
										 DOC_NUMBER,
										 DOC_DATE,
										 VALIDITY_DATE,
                                         created_by,
                                         creation_date,
                                         delete_flag)
                            VALUES      (@TASK_NO_MKEY,
                                         @SR_NO,
                                         @DOCUMENT_TYPE_MKEY,
                                         @DOCUMENT_NAME,
                                         @DOC_MKEY,
										 @DOC_NAME,
										 @DOC_NUM_APP_FLAG,
										 @DOC_NUM_VALID_FLAG,
										 @DOC_NUM_DATE_APP_FLAG,
										 @DOC_ATTACH_APP_FLAG,
										 @DOC_NUMBER,
										 @DOC_DATE,
										 @VALIDITY_DATE,
                                         @LAST_UPDATED_BY,
                                         Getdate(),
                                         'N');

										 PRINT 'BEFOR ATT: '+ CONVERT(VARCHAR(10),@DOC_DEPOSITORY_MKEY);
							
							DECLARE cursor_task_ENDLIST_MEDIA CURSOR FOR
							SELECT  FILE_NAME, FILE_PATH
							FROM   PROJECT_DOC_DEPOSITORY_TRL_MEDIA
							WHERE  delete_flag = 'N'
								AND PROJECT_DOC_MKEY = @DOC_DEPOSITORY_MKEY
							ORDER  BY sr_no;

							OPEN cursor_task_ENDLIST_MEDIA;
							
							FETCH next FROM cursor_task_ENDLIST_MEDIA INTO  @FILE_NAME,@FILE_PATH;

							WHILE @@FETCH_STATUS = 0
							BEGIN
								PRINT 'ATTCHAMENT: '+ @FILE_NAME +': '+ @FILE_PATH;
								SELECT @SR_NO = (Isnull(Max(SR_NO), 0)) + 1
								FROM   TASK_ENDLIST_MEDIA_TRL
								WHERE  mkey = @TASK_NO_MKEY 
								AND DOC_CATEGORY_MKEY = @DOC_MKEY;

								INSERT INTO TASK_ENDLIST_MEDIA_TRL (
											MKEY
											,SR_NO
											,DOC_CATEGORY_MKEY
											,FILE_NAME
											,FILE_PATH
											,CREATED_BY
											,CREATION_DATE
											)
											VALUES
											(
											@TASK_NO_MKEY
											,@SR_NO
											,@DOC_MKEY
											,@FILE_NAME
											,@FILE_PATH
											,@LAST_UPDATED_BY
											,GETDATE()
											)

								FETCH next FROM cursor_task_ENDLIST_MEDIA INTO  @FILE_NAME,@FILE_PATH;
							END

						  CLOSE cursor_task_ENDLIST_MEDIA;

						  DEALLOCATE cursor_task_ENDLIST_MEDIA;

                            SET @DOCUMENT_CATEGORY = '';
                        END
                  END

                FETCH next FROM cursor_task_ENDLIST INTO  @DOCUMENT_NAME,@DOCUMENT_CATEGORY;
            END

          CLOSE cursor_task_ENDLIST;

          DEALLOCATE cursor_task_ENDLIST;

		  -------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------- SANCTIONING_AUTHORITY
-------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------


DECLARE			@LEVEL int,
				@SANCTIONING_DEPARTMENT NVARCHAR(200),
				@SANCTIONING_AUTHORITY NVARCHAR(200),
				@START_DATE DATETIME,
				@END_DATE DATETIME,
				@STATUS NVARCHAR(100),
				@SANCTIONING_AUTHORITY_NAME NVARCHAR(100);
				--@APPROVAL_MKEY INT,
				--@LAST_UPDATED_BY int,
				--@SR_NO INT,
				--@TASK_NO_MKEY INT,
    --              @Position          INT,
    --              @NextComma         INT;

				  --SET @APPROVAL_MKEY = 109;
				  --SET @TASK_NO_MKEY = 11082;
				  --set @LAST_UPDATED_BY = 926;
				 
          DECLARE cursor_task_SDEPARTMENT CURSOR FOR
            SELECT  LEVEL,SANCTIONING_DEPARTMENT,SANCTIONING_AUTHORITY,START_DATE,END_DATE,STATUS
            FROM   APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT
            WHERE  delete_flag = 'N'
            AND mkey = @APPROVAL_MKEY
            ORDER  BY sr_no;

          OPEN cursor_task_SDEPARTMENT;

          FETCH next FROM cursor_task_SDEPARTMENT INTO  @LEVEL,@SANCTIONING_DEPARTMENT,@SANCTIONING_AUTHORITY,@START_DATE,@END_DATE,@STATUS;

          WHILE @@FETCH_STATUS = 0
            BEGIN
               PRINT '@SANCTIONING_DEPARTMENT: '+ @SANCTIONING_DEPARTMENT;

						SELECT @SR_NO = (Isnull(Max(sr_no), 0)) + 1
							FROM   TASK_SANCTIONING_DEPARTMENT_TRL
                            WHERE  mkey = @TASK_NO_MKEY;

				SELECT  @SANCTIONING_AUTHORITY_NAME =  TYPE_DESC FROM TYPE_MST  WHERE TYPE_CODE = 'SAUTHORITY'  AND MKEY =  @SANCTIONING_AUTHORITY AND DELETE_FLAG = 'N';
			   INSERT INTO TASK_SANCTIONING_DEPARTMENT_TRL (MKEY
															,SR_NO
															,LEVEL
															,SANCTIONING_DEPARTMENT
															,SANCTIONING_AUTHORITY_MKEY
															,SANCTIONING_AUTHORITY
															,[STATUS]
															,START_DATE
															,END_DATE
															,created_by
															)
													VALUES (
															@TASK_NO_MKEY
															,@SR_NO 
															,@LEVEL
															,@SANCTIONING_DEPARTMENT
															,@SANCTIONING_AUTHORITY
															,@SANCTIONING_AUTHORITY_NAME  
															,@STATUS
															,@START_DATE
															,@END_DATE
															,@LAST_UPDATED_BY
															)


                FETCH next FROM cursor_task_SDEPARTMENT INTO  @LEVEL,@SANCTIONING_DEPARTMENT,@SANCTIONING_AUTHORITY,@START_DATE,@END_DATE,@STATUS;
            END

          CLOSE cursor_task_SDEPARTMENT;

          DEALLOCATE cursor_task_SDEPARTMENT;


		  -------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------- SANCTIONING_AUTHORITY
-------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------

      --    DECLARE cursor_task_ENDLIST CURSOR FOR
      --      SELECT document_name,
      --             document_category
      --      FROM   APPROVAL_TEMPLATE_TRL_ENDRESULT
      --      WHERE  delete_flag = 'N'
      --         AND mkey = @APPROVAL_MKEY
      --      ORDER  BY sr_no;

      --    OPEN cursor_task_ENDLIST;

      --    FETCH next FROM cursor_task_ENDLIST INTO  @DOCUMENT_NAME,@DOCUMENT_CATEGORY;

      --    WHILE @@FETCH_STATUS = 0
      --      BEGIN
      --          WHILE Len(@DOCUMENT_CATEGORY) > 0
      --            BEGIN
      --                SET @NextComma = Charindex(',', @DOCUMENT_CATEGORY);

      --                IF @NextComma > 0
      --                  BEGIN
      --                      SET @DOC_MKEY = LEFT(@DOCUMENT_CATEGORY,
      --                                      @NextComma - 1);

      --                      PRINT '@String: ' + @DOC_MKEY;

      --                      SELECT @SR_NO = (Isnull(Max(SR_NO), 0)) + 1
      --                      FROM   task_ENDLIST_trl
      --                      WHERE  mkey = @TASK_NO_MKEY;

      --                      SET @DOCUMENT_CATEGORY = Substring(@DOCUMENT_CATEGORY, @NextComma + 1, Len(@DOCUMENT_CATEGORY) - @NextComma);

      --                      SELECT @DOCUMENT_TYPE_MKEY = doc_category,@DOC_NAME = DOC_NAME, @DOC_NUM_APP_FLAG = DOC_NUM_APP_FLAG ,@DOC_NUM_VALID_FLAG = DOC_NUM_VALID_FLAG
						--	,@DOC_NUM_DATE_APP_FLAG  = DOC_NUM_DATE_APP_FLAG ,@DOC_ATTACH_APP_FLAG = DOC_ATTACH_APP_FLAG
      --                     FROM   doc_template_hdr
      --                      WHERE  mkey = @DOC_MKEY AND DELETE_FLAG = 'N';

						--	SELECT @DOC_NUMBER = ISNULL(DOC_NUMBER,NULL), @DOC_DATE = ISNULL(DOC_DATE,NULL), @VALIDITY_DATE = ISNULL(VALIDITY_DATE,NULL) 
						--	,@DOC_DEPOSITORY_MKEY =  MKEY 
						--	FROM PROJECT_DOC_DEPOSITORY_HDR WHERE DOC_MKEY = @DOC_MKEY AND DELETE_FLAG = 'N'
						--	AND  PROPERTY_TYPE = @PROPERTY_MKEY and  BUILDING_TYPE = @BUILDING_MKEY;

      --                      INSERT INTO task_ENDLIST_trl
      --                                  (mkey,
      --                                   sr_no,
      --                                   document_mkey,
      --                                   document_name,
      --                                   document_category_MKEY,
						--				 document_category,
						--				 DOC_NUM_APP_FLAG,
						--				 DOC_NUM_VALID_FLAG,
						--				 DOC_NUM_DATE_APP_FLAG,
						--				 DOC_ATTACH_APP_FLAG,
						--				 DOC_NUMBER,
						--				 DOC_DATE,
						--				 VALIDITY_DATE,
      --                                   created_by,
      --                                   creation_date,
      --                                   delete_flag)
      --                      VALUES      (@TASK_NO_MKEY,
      --                                   @SR_NO,
      --                                   @DOCUMENT_TYPE_MKEY,
      --                                   @DOCUMENT_NAME,
      --                                   @DOC_MKEY,
						--				 @DOC_NAME,
						--				 @DOC_NUM_APP_FLAG,
						--				 @DOC_NUM_VALID_FLAG,
						--				 @DOC_NUM_DATE_APP_FLAG,
						--				 @DOC_ATTACH_APP_FLAG,
						--				 @DOC_NUMBER,
						--				 @DOC_DATE,
						--				 @VALIDITY_DATE,
      --                                   @LAST_UPDATED_BY,
      --                                   Getdate(),
      --                                   'N');

						--	DECLARE cursor_task_ENDLIST_MEDIA CURSOR FOR
						--	SELECT  FILE_NAME, FILE_PATH
						--	FROM   PROJECT_DOC_DEPOSITORY_TRL_MEDIA
						--	WHERE  delete_flag = 'N'
						--		AND mkey = @DOC_DEPOSITORY_MKEY
						--	ORDER  BY sr_no;

						--	OPEN cursor_task_ENDLIST_MEDIA;
							
						--	FETCH next FROM cursor_task_ENDLIST_MEDIA INTO  @FILE_NAME,@FILE_PATH;

						--	WHILE @@FETCH_STATUS = 0
						--	BEGIN
								
						--		SELECT @SR_NO = (Isnull(Max(SR_NO), 0)) + 1
						--		FROM   TASK_ENDLIST_MEDIA_TRL
						--		WHERE  mkey = @TASK_NO_MKEY 
						--		AND DOC_CATEGORY_MKEY = @DOC_MKEY;

						--		INSERT INTO TASK_ENDLIST_MEDIA_TRL (
						--					MKEY
						--					,SR_NO
						--					,DOC_CATEGORY_MKEY
						--					,FILE_NAME
						--					,FILE_PATH
						--					,CREATED_BY
						--					,CREATION_DATE
						--					)
						--					VALUES
						--					(
						--					@TASK_NO_MKEY
						--					,@SR_NO
						--					,@DOC_MKEY
						--					,@FILE_NAME
						--					,@FILE_PATH
						--					,@LAST_UPDATED_BY
						--					,GETDATE()
						--					)

						--		FETCH next FROM cursor_task_ENDLIST_MEDIA INTO  @FILE_NAME,@FILE_PATH;
						--	END

						--  CLOSE cursor_task_ENDLIST_MEDIA;

						--  DEALLOCATE cursor_task_ENDLIST_MEDIA;
						--END
      --                ELSE
      --                  BEGIN
      --                      SET @DOC_MKEY = @DOCUMENT_CATEGORY;

      --                      PRINT '@DOC_MKEY: ' + @DOC_MKEY;
							
						--	SELECT @SR_NO = (Isnull(Max(sr_no), 0)) + 1
      --                      FROM   task_ENDLIST_trl
      --                      WHERE  mkey = @TASK_NO_MKEY;
							
						--	SELECT @DOCUMENT_TYPE_MKEY = doc_category,@DOC_NAME = DOC_NAME, @DOC_NUM_APP_FLAG = DOC_NUM_APP_FLAG ,@DOC_NUM_VALID_FLAG = DOC_NUM_VALID_FLAG
						--	,@DOC_NUM_DATE_APP_FLAG  = DOC_NUM_DATE_APP_FLAG ,@DOC_ATTACH_APP_FLAG = DOC_ATTACH_APP_FLAG
      --                      FROM   doc_template_hdr
      --                      WHERE  mkey = @DOC_MKEY AND DELETE_FLAG = 'N';

						--	SELECT @DOC_NUMBER = ISNULL(DOC_NUMBER,NULL), @DOC_DATE = ISNULL(DOC_DATE,NULL), @VALIDITY_DATE = ISNULL(VALIDITY_DATE,NULL) 
						--	FROM PROJECT_DOC_DEPOSITORY_HDR WHERE DOC_MKEY = @DOC_MKEY AND DELETE_FLAG = 'N'
						--	AND  PROPERTY_TYPE = @PROPERTY_MKEY and  BUILDING_TYPE = @BUILDING_MKEY;

      --                      INSERT INTO task_ENDLIST_trl
      --                                  (mkey,
      --                                   sr_no,
      --                                   document_mkey,
      --                                   document_name,
      --                                   document_category_MKEY,
						--				 document_category,
						--				 DOC_NUM_APP_FLAG,
						--				 DOC_NUM_VALID_FLAG,
						--				 DOC_NUM_DATE_APP_FLAG,
						--				 DOC_ATTACH_APP_FLAG,
						--				 DOC_NUMBER,
						--				 DOC_DATE,
						--				 VALIDITY_DATE,
      --                                   created_by,
      --                                   creation_date,
      --                                   delete_flag)
      --                      VALUES      (@TASK_NO_MKEY,
      --                                   @SR_NO,
      --                                   @DOCUMENT_TYPE_MKEY,
      --                                   @DOCUMENT_NAME,
      --                                   @DOC_MKEY,
						--				 @DOC_NAME,
						--				 @DOC_NUM_APP_FLAG,
						--				 @DOC_NUM_VALID_FLAG,
						--				 @DOC_NUM_DATE_APP_FLAG,
						--				 @DOC_ATTACH_APP_FLAG,
						--				 @DOC_NUMBER,
						--				 @DOC_DATE,
						--				 @VALIDITY_DATE,
      --                                   @LAST_UPDATED_BY,
      --                                   Getdate(),
      --                                   'N');

      --                      SET @DOCUMENT_CATEGORY = '';
      --                  END
      --            END

      --          FETCH next FROM cursor_task_ENDLIST INTO  @DOCUMENT_NAME,@DOCUMENT_CATEGORY;
      --      END

      --    CLOSE cursor_task_ENDLIST;

      --    DEALLOCATE cursor_task_ENDLIST;
-------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------


      END try

      BEGIN catch
          ------------------------------------------------------------------------------------------------------------------------------------    
          SELECT Error_number()    AS ERRORNUMBER,
                 Error_severity()  AS ERRORSEVERITY,
                 Error_state()     AS ERRORSTATE,
                 Error_procedure() AS ERRORPROCEDURE,
                 Error_line()      AS ERRORLINE,
                 Error_message()   AS ERRORMESSAGE;

          -------------------------------------------------------------------------------------------------------------------------------    
          DECLARE @ERROR_MESSAGE VARCHAR(max) = NULL;

          SET @ERROR_MESSAGE = Error_message();

          ------------------------------------------------------------------------------------------------------------------------------------    
          EXEC Sp_p_tms_insert_error_des
            @LAST_UPDATED_BY,
            'TMS',
            'APPROVAL TASK INITIATION',
            @ERROR_MESSAGE,
            'POST';
      ------------------------------------------------------------------------------------------------------------------------------------    
      END catch
  END 
GO
/****** Object:  StoredProcedure [dbo].[SP_UPDATE_APPROVAL_TEMPLATE]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	-- =============================================  
	-- Author:  AMIT SHUDDHALWAR  
	-- Create date: 2024-11-06  
	-- Description: TO CREATE APPROVAL TEMPLATE DETAILS  
	---- =============================================  
	CREATE PROCEDURE [dbo].[SP_UPDATE_APPROVAL_TEMPLATE]  
	-- Add the parameters for the stored procedure here  
	@MKEY      NUMERIC    
	,@BUILDING_TYPE    NUMERIC = NULL  
	,@BUILDING_STANDARD   NUMERIC = NULL   
	,@STATUTORY_AUTHORITY  NUMERIC  = NULL  
	,@SHORT_DESCRIPTION   NVARCHAR(MAX) = NULL  
	,@LONG_DESCRIPTION   NVARCHAR(MAX) = NULL  
	,@ABBR      NVARCHAR(50) = NULL  
	,@APPROVAL_DEPARTMENT  NUMERIC = NULL  
	,@RESPOSIBLE_EMP_MKEY  NUMERIC = NULL  
	,@JOB_ROLE     NUMERIC = NULL  
	,@NO_DAYS_REQUIRED   NUMERIC = NULL  
	,@SEQ_ORDER			nvarchar(10) = null
	,@TAGS      NVARCHAR(MAX) = NULL  
	,@ATTRIBUTE1    NVARCHAR(200) = NULL  -- FORM NAME  
	,@ATTRIBUTE2    NVARCHAR(200) = NULL    -- FUCNTION/METHOD NAME  
	,@LAST_UPDATED_BY   INT   
	--,@SANCTION_AUTHORITY  INT  = NULL  
	--,@SANCTION_DEPARTMENT  NVARCHAR(300)  
	,@DELETE_FLAG    NVARCHAR(300) = NULL  
	AS  
	BEGIN  
	-- SET NOCOUNT ON added to prevent extra result sets from  
	-- interfering with SELECT statements.  
	SET NOCOUNT ON;  
		BEGIN TRY  
		----------------------------------------------------------------------------------------------------------------------------------------  
		--SELECT  @MKEY = ISNULL(MAX(MKEY),0)+1 FROM APPROVAL_TEMPLATE_HDR;  
		----------------------------------------------------------------------------------------------------------------------------------------  
			DECLARE @COUNT INT;  
     
			SELECT @COUNT = COUNT(*)  
			FROM APPROVAL_TEMPLATE_HDR   
			WHERE MKEY = @MKEY;  
			PRINT '@COUNT '+ CONVERT(VARCHAR(100),@COUNT);  
  
			PRINT 'APPROVAL_TEMPLATE_HDR_H';  
					INSERT INTO APPROVAL_TEMPLATE_HDR_H (  
					HIST_DATE  
					,MKEY  
					,BUILDING_TYPE  
					,BUILDING_STANDARD  
					,STATUTORY_AUTHORITY  
					,MAIN_ABBR  
					,SHORT_DESCRIPTION  
					,LONG_DESCRIPTION  
					,AUTHORITY_DEPARTMENT  
					,RESPOSIBLE_EMP_MKEY  
					,JOB_ROLE  
					,DAYS_REQUIERD  
					,SEQ_ORDER
					--,SANCTION_AUTHORITY  
					--,SANCTION_DEPARTMENT  
					,CREATED_BY  
					,CREATION_DATE  
					,LAST_UPDATED_BY  
					,LAST_UPDATE_DATE  
					,END_RESULT_DOC  
					,CHECKLIST_DOC  
					,DELETE_FLAG  
					,TAGS)  
					SELECT      
					GETDATE()  
					,MKEY  
					,BUILDING_TYPE  
					,BUILDING_STANDARD  
					,STATUTORY_AUTHORITY  
					,MAIN_ABBR  
					,SHORT_DESCRIPTION  
					,LONG_DESCRIPTION  
					,AUTHORITY_DEPARTMENT  
					,RESPOSIBLE_EMP_MKEY  
					,JOB_ROLE  
					,DAYS_REQUIERD  
					,SEQ_ORDER
					--,SANCTION_AUTHORITY  
					--,SANCTION_DEPARTMENT  
					,CREATED_BY  
					,CREATION_DATE  
					,LAST_UPDATED_BY  
					,LAST_UPDATE_DATE  
					,END_RESULT_DOC  
					,CHECKLIST_DOC  
					,DELETE_FLAG  
					,TAGS   
					FROM APPROVAL_TEMPLATE_HDR   
					WHERE MKEY = @MKEY;  
			---------------------------------------------------------------------------------------------------------------------------------------------         
					UPDATE APPROVAL_TEMPLATE_HDR   
					SET    BUILDING_TYPE = ISNULL (@BUILDING_TYPE,BUILDING_TYPE) ,  
					building_standard = ISNULL(@BUILDING_STANDARD,BUILDING_STANDARD) ,  
					statutory_authority = ISNULL(@STATUTORY_AUTHORITY ,STATUTORY_AUTHORITY ),  
					main_abbr = ISNULL(@ABBR,main_abbr) ,  
					short_description = ISNULL(@SHORT_DESCRIPTION,SHORT_DESCRIPTION) ,  
					long_description = ISNULL(@LONG_DESCRIPTION,LONG_DESCRIPTION) ,  
					authority_department = ISNULL(@APPROVAL_DEPARTMENT,authority_department) ,  
					resposible_emp_mkey = ISNULL(@RESPOSIBLE_EMP_MKEY,RESPOSIBLE_EMP_MKEY) ,  
					job_role = ISNULL(@JOB_ROLE,JOB_ROLE),  
					days_requierd = ISNULL(@NO_DAYS_REQUIRED,days_requierd) ,  
					SEQ_ORDER =  ISNULL(@SEQ_ORDER,SEQ_ORDER),
										--sanction_authority = ISNULL(@SANCTION_AUTHORITY,SANCTION_AUTHORITY) ,  
					--sanction_department = ISNULL(@SANCTION_DEPARTMENT,SANCTION_DEPARTMENT) ,  
					TAGS = ISNULL(@TAGS,TAGS),  
					last_updated_by = @LAST_UPDATED_BY ,  
					last_update_date = getdate(),  
					DELETE_FLAG = ISNULL(@DELETE_FLAG,DELETE_FLAG)  
					WHERE  MKEY = @MKEY;  
					PRINT 'APPROVAL_TEMPLATE_HDR: '+ @LONG_DESCRIPTION;  
			----------------------------------------------------------------------------------------------------------------------------------------  
			---------------------------------------------------------------------------------------------------------------------------------------  
				SELECT   
				HDR.MKEY,  
				HDR.BUILDING_TYPE  
				,HDR.BUILDING_STANDARD  
				,HDR.STATUTORY_AUTHORITY  
				,HDR.MAIN_ABBR  
				,HDR.SHORT_DESCRIPTION  
				,HDR.LONG_DESCRIPTION  
				,HDR.AUTHORITY_DEPARTMENT  
				,HDR.RESPOSIBLE_EMP_MKEY  
				,HDR.JOB_ROLE  
				,HDR.DAYS_REQUIERD
				,HDR.SEQ_ORDER
				--,HDR.SANCTION_AUTHORITY  
				--,HDR.SANCTION_DEPARTMENT  
				,HDR.ATTRIBUTE1  
				,HDR.ATTRIBUTE2  
				,HDR.ATTRIBUTE3  
				,HDR.ATTRIBUTE4  
				,HDR.ATTRIBUTE5  
				,HDR.CREATED_BY  
				,HDR.CREATION_DATE  
				,HDR.LAST_UPDATED_BY  
				,HDR.LAST_UPDATE_DATE  
				,HDR.DELETE_FLAG   
				,HDR.TAGS  
				FROM APPROVAL_TEMPLATE_HDR HDR   
				WHERE HDR.MKEY = @MKEY  
				AND HDR.DELETE_FLAG = 'N';  
				PRINT 'SELECT APPROVAL_TEMPLATE_HDR';  
		----------------------------------------------------------------------------------------------------------------------------------------  
		END TRY  
		BEGIN CATCH  
		-------------------------------------------------------------------------------------------------------------------------------            
			SELECT ERROR_NUMBER()    AS ERRORNUMBER,  
			ERROR_SEVERITY()  AS ERRORSEVERITY,  
			ERROR_STATE()     AS ERRORSTATE,  
			ERROR_PROCEDURE() AS ERRORPROCEDURE,  
			ERROR_LINE()      AS ERRORLINE,  
			ERROR_MESSAGE()   AS ERRORMESSAGE;  
			-------------------------------------------------------------------------------------------------------------------------------  
			DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;  
			SET @ERROR_MESSAGE = ERROR_MESSAGE();  
			-------------------------------------------------------------------------------------------------------------------------------  
			EXEC sp_P_TMS_INSERT_ERROR_DES @ATTRIBUTE1,'TMS',@ATTRIBUTE2,@ERROR_MESSAGE,@ATTRIBUTE2;  
		-------------------------------------------------------------------------------------------------------------------------------  
		END CATCH  
	END  
GO
/****** Object:  StoredProcedure [dbo].[SP_UPDATE_COMPLIANCE_TASK]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[SP_UPDATE_COMPLIANCE_TASK]
	-- Add the parameters for the stored procedure here
	@MKEY INT,
	@TASK_NO_MKEY INT,
	@CREATED_BY INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	UPDATE COMPLIANCE_HDR
	SET TASK_NO_MKEY = @TASK_NO_MKEY,
	LAST_UPDATED_BY = @CREATED_BY 
	,LAST_UPDATE_DATE = GETDATE()
	WHERE MKEY = @MKEY
	AND DELETE_FLAG = 'N';

	SELECT * FROM COMPLIANCE_HDR WHERE MKEY = @MKEY
	AND DELETE_FLAG = 'N';

END
GO
/****** Object:  StoredProcedure [dbo].[sp_update_delete_approval_task_initiation]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- AUTHOR:  AMIT SHUDDHALWAR
-- CREATE DATE: 10-12-2024
-- DESCRIPTION: 

--exec Sp_update_delete_approval_task_initiation @MKEY=0,@APPROVAL_MKEY=82,@BUILDING_TYPE=221,@BUILDING_STANDARD=245,@STATUTORY_AUTHORITY=NULL,@MAIN_ABBR=N'AAA 2.1'
--,@SHORT_DESCRIPTION=N'test2.1.',@LONG_DESCRIPTION=N'fasdfk kjaks dfka sfdasjdfk asdjf asdkf asd',@AUTHORITY_DEPARTMENT=259,@RESPOSIBLE_EMP_MKEY=9,@JOB_ROLE=253
--,@DAYS_REQUIERD=100,@SANCTION_AUTHORITY=NULL,@SANCTION_DEPARTMENT=N''
--,@LAST_UPDATED_BY=9,@END_RESULT_DOC=N'',@CHECKLIST_DOC=N'',@DELETE_FLAG='N'

-- =============================================
CREATE PROCEDURE [dbo].[sp_update_delete_approval_task_initiation]
  -- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE
  @MKEY                 INT,
  @APPROVAL_MKEY        INT,
  @SHORT_DESCRIPTION    NVARCHAR(500) = NULL,
  @LONG_DESCRIPTION     NVARCHAR(max) = NULL,
  @RESPOSIBLE_EMP_MKEY  INT = NULL,
  @START_DATE     DATETIME = NULL,
  @END_DATE  DATETIME = NULL,
  @TAGS				NVARCHAR(MAX) = NULL,
  @LAST_UPDATED_BY      INT = NULL,
  @DELETE_FLAG          CHAR = NULL
AS
  BEGIN
      -- SET NOCOUNT ON ADDED TO PREVENT EXTRA RESULT SETS FROM
      -- INTERFERING WITH SELECT STATEMENTS.
      SET nocount ON;

      BEGIN try
          -- INSERT STATEMENTS FOR PROCEDURE HERE
          INSERT INTO approval_template_hdr_h
                      (hist_date,
                       mkey,
                       building_type,
                       building_standard,
                       statutory_authority,
                       main_abbr,
                       short_description,
                       long_description,
                       authority_department,
                       resposible_emp_mkey,
                       job_role,
                       days_requierd,
                       sanction_authority,
                       sanction_department,
                       attribute1,
                       attribute2,
                       attribute3,
                       attribute4,
                       attribute5,
                       created_by,
                       creation_date,
                       last_updated_by,
                       last_update_date,
                       end_result_doc,
                       checklist_doc,
                       delete_flag)
          SELECT Getdate(),
                 mkey,
                 building_type,
                 building_standard,
                 statutory_authority,
                 main_abbr,
                 short_description,
                 long_description,
                 authority_department,
                 resposible_emp_mkey,
                 job_role,
                 days_requierd,
                 sanction_authority,
                 sanction_department,
                 attribute1,
                 attribute2,
                 attribute3,
                 attribute4,
                 attribute5,
                 created_by,
                 creation_date,
                 last_updated_by,
                 last_update_date,
                 end_result_doc,
                 checklist_doc,
                 delete_flag
          FROM   approval_template_hdr
          WHERE  mkey = @APPROVAL_MKEY
                 AND delete_flag = 'N';

				INSERT INTO PROJECT_TRL_APPROVAL_ABBR_H (
														HIST_DATE
														,HEADER_MKEY
														,APPROVAL_MKEY
														,SEQ_NO
														,TASK_NO_MKEY
														,APPROVAL_ABBRIVATION
														,APPROVAL_DESCRIPTION
														,DAYS_REQUIRED
														,DEPARTMENT
														,JOB_ROLE
														,RESPOSIBLE_EMP_MKEY
														,OUTPUT_DOCUMENT
														,TENTATIVE_START_DATE
														,TENTATIVE_END_DATE
														,STATUS
														,ATTRIBUTE1
														,ATTRIBUTE2
														,ATTRIBUTE3
														,ATTRIBUTE4
														,ATTRIBUTE5
														,CREATED_BY
														,CREATION_DATE
														,LAST_UPDATED_BY
														,LAST_UPDATE_DATE
														,DELETE_FLAG)
													SELECT 
														GETDATE()
														,HEADER_MKEY
														,APPROVAL_MKEY
														,SEQ_NO
														,TASK_NO_MKEY
														,APPROVAL_ABBRIVATION
														,APPROVAL_DESCRIPTION
														,DAYS_REQUIRED
														,DEPARTMENT
														,JOB_ROLE
														,RESPOSIBLE_EMP_MKEY
														,OUTPUT_DOCUMENT
														,TENTATIVE_START_DATE
														,TENTATIVE_END_DATE
														,STATUS
														,ATTRIBUTE1
														,ATTRIBUTE2
														,ATTRIBUTE3
														,ATTRIBUTE4
														,ATTRIBUTE5
														,CREATED_BY
														,CREATION_DATE
														,LAST_UPDATED_BY
														,LAST_UPDATE_DATE
														,DELETE_FLAG
													FROM 
														PROJECT_TRL_APPROVAL_ABBR
													WHERE 
														HEADER_MKEY = @MKEY
													AND 
														APPROVAL_MKEY = @APPROVAL_MKEY;
          ------------------------------------------------------------------------------------------------------------------------------------------------------
			UPDATE 
				approval_template_hdr
			SET    
				short_description = Isnull(@SHORT_DESCRIPTION,short_description),
				long_description = Isnull(@LONG_DESCRIPTION,long_description),
				last_updated_by = Isnull(@LAST_UPDATED_BY, last_updated_by),
				last_update_date = Getdate(),
				delete_flag = Isnull(@DELETE_FLAG, delete_flag)
			WHERE  
				mkey = @APPROVAL_MKEY
				AND DELETE_FLAG = 'N';
---------------------------------------------------------------------------------------------------------------------------------------------------------    
		PRINT '@RESPOSIBLE_EMP_MKEY: '+ CONVERT(VARCHAR(100), @RESPOSIBLE_EMP_MKEY);
			UPDATE 
				PROJECT_TRL_APPROVAL_ABBR
			SET    
				TENTATIVE_START_DATE = ISNULL(@START_DATE,TENTATIVE_START_DATE),
				TENTATIVE_END_DATE	= ISNULL(@END_DATE,TENTATIVE_END_DATE),
				RESPOSIBLE_EMP_MKEY = @RESPOSIBLE_EMP_MKEY, --ISNULL(@RESPOSIBLE_EMP_MKEY,RESPOSIBLE_EMP_MKEY),
				last_updated_by = Isnull(@LAST_UPDATED_BY, last_updated_by),
				last_update_date = Getdate(),
				delete_flag = Isnull(@DELETE_FLAG, delete_flag)
			WHERE 
				APPROVAL_MKEY = @APPROVAL_MKEY
				AND HEADER_MKEY = @MKEY
				AND DELETE_FLAG = 'N';
		  ---------------------------------------------------------------------------------------------------------------------------------------------------------    
          
			SELECT HEADER_MKEY AS MKEY,CASE WHEN ABBR.TASK_NO_MKEY IS NULL THEN ABBR.SEQ_NO ELSE (select task_no from task_hdr where mkey = ABBR.TASK_NO_MKEY) 
			END as TASK_NO ,TEMPLATE_HDR.MKEY AS APPROVAL_MKEY, APPROVAL_ABBRIVATION
			,TEMPLATE_HDR.LONG_DESCRIPTION ,TEMPLATE_HDR.SHORT_DESCRIPTION,ABBR.DAYS_REQUIRED,ABBR.DEPARTMENT,ABBR.JOB_ROLE,ABBR.RESPOSIBLE_EMP_MKEY 
			,ABBR.TENTATIVE_START_DATE,ABBR.TENTATIVE_END_DATE,ABBR.STATUS, ABBR.OUTPUT_DOCUMENT 
			FROM PROJECT_TRL_APPROVAL_ABBR ABBR INNER JOIN APPROVAL_TEMPLATE_HDR TEMPLATE_HDR ON ABBR.APPROVAL_MKEY = TEMPLATE_HDR.MKEY 
			WHERE ABBR.HEADER_MKEY = @MKEY 
			AND ABBR.APPROVAL_MKEY = @APPROVAL_MKEY;
      -------------------------------------------------------------------------------------------------------------------------------
      END try
      BEGIN catch
          -------------------------------------------------------------------------------------------------------------------------------
          SELECT Error_number()    AS ERRORNUMBER,
                 Error_severity()  AS ERRORSEVERITY,
                 Error_state()     AS ERRORSTATE,
                 Error_procedure() AS ERRORPROCEDURE,
                 Error_line()      AS ERRORLINE,
                 Error_message()   AS ERRORMESSAGE;

          -------------------------------------------------------------------------------------------------------------------------------
          DECLARE @ERROR_MESSAGE VARCHAR(max) = NULL;

          SET @ERROR_MESSAGE = Error_message();
      -------------------------------------------------------------------------------------------------------------------------------
      EXEC SP_P_TMS_INSERT_ERROR_DES @LAST_UPDATED_BY,'TMS','ApprovalTaskInitiation/Put-Approval-Template-Subtask',@ERROR_MESSAGE,'Get';
      -------------------------------------------------------------------------------------------------------------------------------
      END catch
  END 
GO
/****** Object:  StoredProcedure [dbo].[SP_UPDATE_DOC_CATEGORY]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	-- =============================================
	-- AUTHOR:    AMIT SHUDDHALWAR
	-- CREATE DATE: 
	-- DESCRIPTION:  TO UPDATE DOC CATEGORY AND TYPE DESC
	-- =============================================
	CREATE PROCEDURE [dbo].[SP_UPDATE_DOC_CATEGORY]
	-- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE
	@MKEY INT, 
	@DOC_CATEGORY VARCHAR(200),
	@CREATED_BY   INT,
	@DELETE_FLAG   CHAR
	AS
	BEGIN
	-- SET NOCOUNT ON ADDED TO PREVENT EXTRA RESULT SETS FROM
	-- INTERFERING WITH SELECT STATEMENTS.
	SET NOCOUNT ON;

	BEGIN TRY
	DECLARE @MAXCOUNT INT;
		SELECT @MAXCOUNT = count(*) FROM V_Doc_Category where MKEY = @MKEY AND DELETE_FLAG = 'N';
	IF ( @MAXCOUNT > 0 ) 
		BEGIN
			UPDATE TYPE_MST 
			SET DELETE_FLAG = @DELETE_FLAG , TYPE_DESC =  @DOC_CATEGORY, LAST_UPDATED_BY = @CREATED_BY , LAST_UPDATE_DATE = GETDATE()
			WHERE MKEY = @MKEY AND DELETE_FLAG = 'N';
			-------------------------------------------------------------------------------------------------------------------
			SELECT * FROM V_Doc_Category where MKEY = @MKEY and DELETE_FLAG = 'N';
			-------------------------------------------------------------------------------------------------------------------
		END
		ELSE
		BEGIN
			SELECT 'CATEGORY NOT FOUND';
		END
		
	END TRY
	BEGIN CATCH
	-------------------------------------------------------------------------------------------------------------------------------            
	SELECT ERROR_NUMBER()    AS ERRORNUMBER,
	ERROR_SEVERITY()  AS ERRORSEVERITY,
	ERROR_STATE()     AS ERRORSTATE,
	ERROR_PROCEDURE() AS ERRORPROCEDURE,
	ERROR_LINE()      AS ERRORLINE,
	ERROR_MESSAGE()   AS ERRORMESSAGE;

	-------------------------------------------------------------------------------------------------------------------------------  
	DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
	SET @ERROR_MESSAGE = ERROR_MESSAGE();
	-------------------------------------------------------------------------------------------------------------------------------  
	EXEC SP_P_TMS_INSERT_ERROR_DES
	@CREATED_BY,
	'TMS',
	'UDAPTE DOC CATEGORY',
	@ERROR_MESSAGE,
	'UPDATE';
	-------------------------------------------------------------------------------------------------------------------------------  
	END CATCH
	END

GO
/****** Object:  StoredProcedure [dbo].[SP_UPDATE_DOCUMENT_TEMPLATES]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		AMIT SHUDDHALWAR
-- Create date: 28-10-2024
-- Description:	TO UPDTE THE DOCUMENT TEMPLATES
-- =============================================
CREATE PROCEDURE [dbo].[SP_UPDATE_DOCUMENT_TEMPLATES]
	-- Add the parameters for the stored procedure here
	@MKEY					NUMERIC
	,@DOC_CATEGORY				int	= NULL
	,@DOC_NAME				nvarchar(200)	= NULL
	,@DOC_ABBR				nvarchar(50)		= NULL
	,@DOC_NUM_FIELD_NAME	nvarchar(100)	= NULL
	,@DOC_NUM_DATE_NAME		nvarchar(100)	= NULL
	,@DOC_NUM_APP_FLAG		nchar(2)		= NULL
	,@DOC_NUM_VALID_FLAG	nchar(2)		= NULL
	,@DOC_NUM_DATE_APP_FLAG	nchar(2)		= NULL
	,@DOC_ATTACH_APP_FLAG	nchar(2)		= NULL
	,@LAST_UPDATED_BY		numeric			
	,@LAST_UPDATE_DATE		datetime		= NULL
	,@DELETE_FLAG			char
	,@ATTRIBUTE1			nvarchar(100)	= NULL
	,@ATTRIBUTE2			nvarchar(100)	= NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	BEGIN TRY
    -- Insert statements for procedure here
			INSERT INTO DOC_TEMPLATE_HDR_H
					(MKEY
					,DOC_CATEGORY
					,DOC_NAME
					,[DOC_ABBR]
					,[DOC_NUM_FIELD_NAME]
					,[DOC_NUM_DATE_NAME]
					,[DOC_NUM_APP_FLAG]
					,[DOC_NUM_VALID_FLAG]
					,[DOC_NUM_DATE_APP_FLAG]
					,[DOC_ATTACH_APP_FLAG]
					,[CREATED_BY]
					,[CREATION_DATE]
					,[LAST_UPDATED_BY]
					,[LAST_UPDATE_DATE]
					,[DELETE_FLAG])
				SELECT MKEY
					,DOC_CATEGORY
					,DOC_NAME
					,[DOC_ABBR]
					,[DOC_NUM_FIELD_NAME]
					,[DOC_NUM_DATE_NAME]
					,[DOC_NUM_APP_FLAG]
					,[DOC_NUM_VALID_FLAG]
					,[DOC_NUM_DATE_APP_FLAG]
					,[DOC_ATTACH_APP_FLAG]
					,[CREATED_BY]
					,[CREATION_DATE]
					,[LAST_UPDATED_BY]
					,[LAST_UPDATE_DATE]
					,[DELETE_FLAG]
			FROM DOC_TEMPLATE_HDR
			WHERE MKEY = @MKEY;
-----------------------------------------------------------------------------------------------------------------------------------
			UPDATE DOC_TEMPLATE_HDR
			SET	[DOC_ABBR] = ltrim(RTRIM(@DOC_ABBR))
			,DOC_CATEGORY = ISNULL(@DOC_CATEGORY,DOC_CATEGORY)
			,DOC_NAME =ISNULL(@DOC_NAME,DOC_NAME)
			,[DOC_NUM_FIELD_NAME] = @DOC_NUM_FIELD_NAME
			,[DOC_NUM_DATE_NAME]	= @DOC_NUM_DATE_NAME
			,[DOC_NUM_APP_FLAG]	= @DOC_NUM_APP_FLAG
			,[DOC_NUM_VALID_FLAG]	= @DOC_NUM_VALID_FLAG	
			,[DOC_NUM_DATE_APP_FLAG]	= @DOC_NUM_DATE_APP_FLAG
			,[DOC_ATTACH_APP_FLAG]	= @DOC_ATTACH_APP_FLAG	
			,[LAST_UPDATED_BY]	= @LAST_UPDATED_BY		
			,[LAST_UPDATE_DATE] = GETDATE()
			WHERE MKEY = @MKEY
			AND DELETE_FLAG = 'N';
-----------------------------------------------------------------------------------------------------------------------------------
	END TRY
	BEGIN CATCH
	-------------------------------------------------------------------------------------------------------------------------------          
		SELECT ERROR_NUMBER()    AS ERRORNUMBER,
				ERROR_SEVERITY()  AS ERRORSEVERITY,
				ERROR_STATE()     AS ERRORSTATE,
				ERROR_PROCEDURE() AS ERRORPROCEDURE,
				ERROR_LINE()      AS ERRORLINE,
				ERROR_MESSAGE()   AS ERRORMESSAGE;
	-------------------------------------------------------------------------------------------------------------------------------
		DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
		SET @ERROR_MESSAGE = ERROR_MESSAGE();
	-------------------------------------------------------------------------------------------------------------------------------
		EXEC sp_P_TMS_INSERT_ERROR_DES @LAST_UPDATED_BY,'TMS',@ATTRIBUTE1,@ERROR_MESSAGE,@ATTRIBUTE2;
	-------------------------------------------------------------------------------------------------------------------------------
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_UPDATE_INSTRUCTION]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	-- =============================================
	-- AUTHOR:    AMIT SHUDDHALWAR
	-- CREATE DATE: 
	-- DESCRIPTION:  TO UPDATE DOC CATEGORY AND TYPE DESC
	-- =============================================
	CREATE PROCEDURE [dbo].[SP_UPDATE_INSTRUCTION]
	-- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE
	@MKEY INT, 
	@DOC_INSTR VARCHAR(200),
	@CREATED_BY   INT,
	@DELETE_FLAG   CHAR
	AS
	BEGIN
	-- SET NOCOUNT ON ADDED TO PREVENT EXTRA RESULT SETS FROM
	-- INTERFERING WITH SELECT STATEMENTS.
	SET NOCOUNT ON;

	BEGIN TRY
	DECLARE @MAXCOUNT INT;
		SELECT @MAXCOUNT = COUNT(*) FROM TYPE_MST WHERE MKEY = @MKEY AND TYPE_CODE = 'INSTR' AND  DELETE_FLAG = 'N';
		IF ( @MAXCOUNT > 0 ) 
		BEGIN
			SELECT @MAXCOUNT = count(*) FROM TYPE_MST where LOWER([TYPE_DESC]) = LOWER(@DOC_INSTR) 
			AND MKEY NOT IN(@MKEY) AND TYPE_CODE = 'INSTR' AND DELETE_FLAG = 'N';
			if ( @MAXCOUNT > 0 ) 
				BEGIN
					SELECT 'ERROR' AS [TYPE_DESC] , 'Name already present' AS [TYPE_CODE];
				END
			ELSE
			BEGIN
				UPDATE TYPE_MST 
				SET DELETE_FLAG = @DELETE_FLAG , [TYPE_DESC] =  @DOC_INSTR, LAST_UPDATED_BY = @CREATED_BY, LAST_UPDATE_DATE = GETDATE()
				WHERE MKEY = @MKEY AND DELETE_FLAG = 'N';
				-------------------------------------------------------------------------------------------------------------------
				SELECT * FROM TYPE_MST where MKEY = @MKEY and DELETE_FLAG = 'N';
				-------------------------------------------------------------------------------------------------------------------
			END
		END
		ELSE
		BEGIN
			SELECT 'ERROR' AS [TYPE_DESC] , 'INSTRUCTION TYPE NOT FOUND' AS [TYPE_CODE];
		END
		
	END TRY
	BEGIN CATCH
	-------------------------------------------------------------------------------------------------------------------------------            
	SELECT ERROR_NUMBER()    AS ERRORNUMBER,
	ERROR_SEVERITY()  AS ERRORSEVERITY,
	ERROR_STATE()     AS ERRORSTATE,
	ERROR_PROCEDURE() AS ERRORPROCEDURE,
	ERROR_LINE()      AS ERRORLINE,
	ERROR_MESSAGE()   AS ERRORMESSAGE;

	-------------------------------------------------------------------------------------------------------------------------------  
	DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
	SET @ERROR_MESSAGE = ERROR_MESSAGE();
	-------------------------------------------------------------------------------------------------------------------------------  
	EXEC SP_P_TMS_INSERT_ERROR_DES
	@CREATED_BY,
	'TMS',
	'UDAPTE DOC INSTRUCTION',
	@ERROR_MESSAGE,
	'UPDATE';
	-------------------------------------------------------------------------------------------------------------------------------  
	END CATCH
	END

GO
/****** Object:  StoredProcedure [dbo].[SP_UPDATE_PROJECT_DEFINATION]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- AUTHOR:    AMIT SHUDDHALWAR
-- CREATE DATE: 19-09-2024
-- DESCRIPTION:  UPDATE THE DETAILS OF TASK RECURSIVE DETAILS
-- =============================================
CREATE PROCEDURE [dbo].[SP_UPDATE_PROJECT_DEFINATION]
  -- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE
	@MKEY             INT,
	@BUILDING_MKEY			   INT = NULL 	
	,@PROJECT_ABBR			   NVARCHAR(200) = NULL 	
	,@PROPERTY				   NUMERIC	 = NULL
	,@LEGAL_ENTITY			   NVARCHAR(500) = NULL
	,@PROJECT_ADDRESS		   NVARCHAR(MAX) = NULL
	,@BUILDING_CLASSIFICATION	   NUMERIC = NULL
	,@BUILDING_STANDARD		    NUMERIC = NULL 
	,@STATUTORY_AUTHORITY		   NUMERIC = NULL 
	,@LAST_UPDATED_BY			   NUMERIC	 
AS
  BEGIN
      -- SET NOCOUNT ON ADDED TO PREVENT EXTRA RESULT SETS FROM
      -- INTERFERING WITH SELECT STATEMENTS.
      SET NOCOUNT ON;

      BEGIN TRY
      -- TO CHECK THE MKEY IS PRESENT OR NOT IN THE TASK_RECURSIVE_HDR TABLE
      --IF ((SELECT COUNT(*) FROM TASK_RECURSIVE_HDR WHERE MKEY = @MKEY AND DELETE_FLAG = 'N') > 0)
      BEGIN
          ---------------------------------------------------------------------------------------------------------------------
          -- TO ADD THE ROW IN HISTORY TABLE FROM MAIN TABLE
						INSERT INTO PROJECT_HDR_H
								(
								Hist_date
								,MKEY
								,BUILDING_MKEY
								,PROJECT_ABBR
								,PROPERTY
								,LEGAL_ENTITY
								,PROJECT_ADDRESS
								,BUILDING_CLASSIFICATION
								,BUILDING_STANDARD
								,STATUTORY_AUTHORITY
								,INITIATOR
								,ATTRIBUTE1
								,ATTRIBUTE2
								,ATTRIBUTE3
								,ATTRIBUTE4
								,ATTRIBUTE5
								,CREATED_BY
								,CREATION_DATE
								,LAST_UPDATED_BY
								,LAST_UPDATE_DATE
								,DELETE_FLAG)
						SELECT GETDATE()
								,MKEY
								,BUILDING_MKEY
								,PROJECT_ABBR
								,PROPERTY
								,LEGAL_ENTITY
								,PROJECT_ADDRESS
								,BUILDING_CLASSIFICATION
								,BUILDING_STANDARD
								,STATUTORY_AUTHORITY
								,INITIATOR
								,ATTRIBUTE1
								,ATTRIBUTE2
								,ATTRIBUTE3
								,ATTRIBUTE4
								,ATTRIBUTE5
								,CREATED_BY
								,CREATION_DATE
								,LAST_UPDATED_BY
								,LAST_UPDATE_DATE
								,DELETE_FLAG
						FROM   
							PROJECT_HDR
						WHERE  
							MKEY = @MKEY
						AND
							DELETE_FLAG = 'N';
          ---------------------------------------------------------------------------------------------------------------------
          -- TO UPDATE THE ROWS IN MAIN TABLE 
          -- IF ANY COLUMN ROW VALUE IS NULL THEN UPDATE OLD VALUE 
          UPDATE PROJECT_HDR
          SET   
				BUILDING_MKEY            = isnull(@BUILDING_MKEY, BUILDING_MKEY)            
				,PROPERTY				 = isnull(@PROPERTY,PROPERTY)
				,BUILDING_CLASSIFICATION = isnull(@BUILDING_CLASSIFICATION,BUILDING_CLASSIFICATION)
				,BUILDING_STANDARD		 = isnull(@BUILDING_STANDARD,BUILDING_STANDARD)		
				,STATUTORY_AUTHORITY	 = isnull(@STATUTORY_AUTHORITY,STATUTORY_AUTHORITY)	
				,PROJECT_ABBR			 = isnull(@PROJECT_ABBR,PROJECT_ABBR)	
				,LEGAL_ENTITY			 = isnull(@LEGAL_ENTITY,@LEGAL_ENTITY)	
				,PROJECT_ADDRESS		 = isnull(@PROJECT_ADDRESS,PROJECT_ADDRESS)
				,LAST_UPDATED_BY		 = isnull(@LAST_UPDATED_BY,LAST_UPDATED_BY)			
				,LAST_UPDATE_DATE		 = GETDATE()		
			WHERE  MKEY = @MKEY			 
			AND DELETE_FLAG = 'N';
 ---------------------------------------------------------------------------------------------------------------------
						 INSERT INTO PROJECT_TRL_APPROVAL_ABBR_H
											  (	
												HIST_DATE
												,HEADER_MKEY
												,APPROVAL_MKEY
												,SEQ_NO
												,TASK_NO_MKEY
												,APPROVAL_ABBRIVATION
												,APPROVAL_DESCRIPTION
												,DAYS_REQUIRED
												,DEPARTMENT
												,JOB_ROLE
												,RESPOSIBLE_EMP_MKEY
												,OUTPUT_DOCUMENT
												,TENTATIVE_START_DATE
												,TENTATIVE_END_DATE
												,STATUS
												,ATTRIBUTE1
												,ATTRIBUTE2
												,ATTRIBUTE3
												,ATTRIBUTE4
												,ATTRIBUTE5
												,CREATED_BY
												,CREATION_DATE
												,LAST_UPDATED_BY
												,LAST_UPDATE_DATE
												,DELETE_FLAG)
									SELECT		
										GETDATE()
										,HEADER_MKEY
										,APPROVAL_MKEY
										,SEQ_NO
										,TASK_NO_MKEY
										,APPROVAL_ABBRIVATION
										,APPROVAL_DESCRIPTION
										,DAYS_REQUIRED
										,DEPARTMENT
										,JOB_ROLE
										,RESPOSIBLE_EMP_MKEY
										,OUTPUT_DOCUMENT
										,TENTATIVE_START_DATE
										,TENTATIVE_END_DATE
										,STATUS
										,ATTRIBUTE1
										,ATTRIBUTE2
										,ATTRIBUTE3
										,ATTRIBUTE4
										,ATTRIBUTE5
										,CREATED_BY
										,CREATION_DATE
										,LAST_UPDATED_BY
										,LAST_UPDATE_DATE
										,DELETE_FLAG
								  FROM   
									PROJECT_TRL_APPROVAL_ABBR
								  WHERE  
									HEADER_MKEY = @MKEY
								  AND
									DELETE_FLAG = 'N';
		END
	END TRY
	BEGIN CATCH
		SELECT  
		  ERROR_NUMBER() AS ERRORNUMBER  
		  ,ERROR_SEVERITY() AS ERRORSEVERITY  
		  ,ERROR_STATE() AS ERRORSTATE  
		  ,ERROR_PROCEDURE() AS ERRORPROCEDURE  
		  ,ERROR_LINE() AS ERRORLINE  
		  ,ERROR_MESSAGE() AS ERRORMESSAGE;
-------------------------------------------------------------------------------------------------------------------------------
		DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
		SET @ERROR_MESSAGE = ERROR_MESSAGE();
-------------------------------------------------------------------------------------------------------------------------------
		EXEC sp_P_TMS_INSERT_ERROR_DES @LAST_UPDATED_BY,'TMS','Project Definitin Update',@ERROR_MESSAGE,'Update';
-------------------------------------------------------------------------------------------------------------------------------
     END CATCH
  END 
GO
/****** Object:  StoredProcedure [dbo].[SP_UPDATE_PROJECT_DOC_DEPOSITORY_ATTACHMENT]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_UPDATE_PROJECT_DOC_DEPOSITORY_ATTACHMENT]
(
    @PROJECT_DOC_MKEY INT,
    @CREATED_BY INT,
    @APINAME NVARCHAR(100),
    @APIMETHOD NVARCHAR(100)
)
AS
BEGIN
    DECLARE @DCOUNT INT,@SR_NO INT;
    BEGIN TRY
	
	SELECT @DCOUNT = COUNT(*)
        FROM PROJECT_DOC_DEPOSITORY_TRL_MEDIA
        WHERE PROJECT_DOC_MKEY = @PROJECT_DOC_MKEY
              AND DELETE_FLAG = 'N';

        IF (@DCOUNT > 0)
        BEGIN

            Insert into PROJECT_DOC_DEPOSITORY_TRL_MEDIA_H
            select getdate(),
                   *
            from PROJECT_DOC_DEPOSITORY_TRL_MEDIA
            where PROJECT_DOC_MKEY = @PROJECT_DOC_MKEY
                  AND DELETE_FLAG = 'N';

            UPDATE PROJECT_DOC_DEPOSITORY_TRL_MEDIA
            SET DELETE_FLAG = 'Y'
            WHERE PROJECT_DOC_MKEY = @PROJECT_DOC_MKEY;

			SELECT '@DCOUNT '+ CONVERT(VARCHAR(100),@DCOUNT) AS DCount;
        END

		 END TRY
    BEGIN CATCH
        -------------------------------------------------------------------------------------------------------------------------------          
        SELECT ERROR_NUMBER() AS ERRORNUMBER,
               ERROR_SEVERITY() AS ERRORSEVERITY,
               ERROR_STATE() AS ERRORSTATE,
               ERROR_PROCEDURE() AS ERRORPROCEDURE,
               ERROR_LINE() AS ERRORLINE,
               ERROR_MESSAGE() AS ERRORMESSAGE;
        -------------------------------------------------------------------------------------------------------------------------------
        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
        SET @ERROR_MESSAGE = ERROR_MESSAGE();
        -------------------------------------------------------------------------------------------------------------------------------
        EXEC sp_P_TMS_INSERT_ERROR_DES @CREATED_BY,
                                       'TMS',
                                       @APINAME,
                                       @ERROR_MESSAGE,
                                       @APIMETHOD;
    -------------------------------------------------------------------------------------------------------------------------------
    END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_UPDATE_PROJECT_DOCUMENT_DEPOSITORY]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		AMIT SHUDDHALWAR
-- ALTER date: 28-10-2024
-- Description:	INSERT THE DOCUMENT TEMPLATE DETAILS
-- =============================================
  CREATE PROCEDURE [dbo].[SP_UPDATE_PROJECT_DOCUMENT_DEPOSITORY] -- Add the parameters for the stored procedure here
  @MKEY INT, 
  @PROPERTY_MKEY int = NULL, 
  @BUILDING_MKEY int = NULL, 
  @DOC_NAME nvarchar(500) = NULL, 
  @DOC_NUMBER nvarchar(200) = NULL, 
  @DOC_DATE nvarchar(100) = NULL, 
  @VALIDITY_DATE nvarchar(50) = NULL, 
  @ATTRIBUTE1 nvarchar(200) = NULL, 
  @ATTRIBUTE2 nvarchar(200) = NULL, 
  @ATTRIBUTE3 nvarchar(200) = NULL, 
  @CREATED_BY INT = NULL, 
  @DELETE_FLAG CHAR = NULL AS 
  BEGIN -- SET NOCOUNT ON added to prevent extra result sets from
  -- interfering with SELECT statements.
SET 
	
	NOCOUNT ON;
	BEGIN TRY -- Insert statements for procedure here
		INSERT INTO PROJECT_DOC_DEPOSITORY_HDR_H(
		  HIST_DATE, MKEY, BUILDING_TYPE, PROPERTY_TYPE, 
		  DOC_MKEY, DOC_NUMBER, DOC_DATE, 
		  VALIDITY_DATE, CREATED_BY, CREATION_DATE, 
		  LAST_UPDATED_BY, LAST_UPDATE_DATE, 
		  DELETE_FLAG
		) 
		SELECT 
		  GETDATE(),
		  MKEY, 
		  BUILDING_TYPE, 
		  PROPERTY_TYPE, 
		  DOC_MKEY, 
		  DOC_NUMBER, 
		  DOC_DATE, 
		  VALIDITY_DATE, 
		  CREATED_BY,
		  CREATION_DATE, 
		  LAST_UPDATED_BY, 
		  LAST_UPDATE_DATE, 
		  DELETE_FLAG 
		FROM 
		  PROJECT_DOC_DEPOSITORY_HDR 
		WHERE 
		  MKEY = @MKEY;
		UPDATE 
		  PROJECT_DOC_DEPOSITORY_HDR 
		SET 
		  BUILDING_TYPE = @BUILDING_MKEY, 
		  PROPERTY_TYPE = @PROPERTY_MKEY, 
		  DOC_MKEY = CONVERT(INT, @DOC_NAME), 
		  DOC_NUMBER = @DOC_NUMBER, 
		  DOC_DATE = @DOC_DATE, 
		  VALIDITY_DATE = @VALIDITY_DATE, 
		  LAST_UPDATED_BY = @CREATED_BY, 
		  LAST_UPDATE_DATE = GETDATE(), 
		  DELETE_FLAG = @DELETE_FLAG 
		WHERE 
		  MKEY = @MKEY 
		  AND DELETE_FLAG = 'N';
----------------------------------------------------------------------------------------------------------------------------------------
		SELECT 
		  HDR.MKEY, 
		  BUILDING_TYPE AS BUILDING_MKEY, 
		  PROPERTY_TYPE AS PROPERTY_MKEY, 
		  DOC_MKEY, 
		  DOC_NUMBER, 
		  DOC_DATE, 
		  VALIDITY_DATE 
		  ,Isnull(CONVERT(VARCHAR(50), HDR.created_by), '') AS CREATED_BY_ID
				,Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME
				,CASE
					WHEN HDR.creation_date IS NULL THEN
				''
				ELSE
					Format(HDR.creation_date, 'yyyy-MM-dd HH:mm:ss')
				END AS CREATION_DATE
				,Isnull(CONVERT(VARCHAR(50), HDR.last_updated_by), '') AS LAST_UPDATED_BY
				,Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME
				,CASE
					WHEN HDR.last_update_date IS NULL THEN
					''
				ELSE
					Format(HDR.last_update_date, 'yyyy-MM-dd HH:mm:ss')
				END AS LAST_UPDATE_DATE
		FROM 
		  PROJECT_DOC_DEPOSITORY_HDR HDR
		INNER JOIN 
			EMPLOYEE_MST createdby
		ON 
			HDR.created_by = createdby.mkey
		LEFT JOIN 
			EMPLOYEE_MST updatedby
		ON 
			HDR.last_updated_by = updatedby.mkey
		WHERE 
		  HDR.MKEY = @MKEY;
----------------------------------------------------------------------------------------------------------------------------------------
	END TRY BEGIN CATCH -------------------------------------------------------------------------------------------------------------------------------          
	SELECT 
	  ERROR_NUMBER() AS ERRORNUMBER, 
	  ERROR_SEVERITY() AS ERRORSEVERITY, 
	  ERROR_STATE() AS ERRORSTATE, 
	  ERROR_PROCEDURE() AS ERRORPROCEDURE, 
	  ERROR_LINE() AS ERRORLINE, 
	  ERROR_MESSAGE() AS ERRORMESSAGE;
-------------------------------------------------------------------------------------------------------------------------------
	DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
	SET 
	  @ERROR_MESSAGE = ERROR_MESSAGE();
-------------------------------------------------------------------------------------------------------------------------------
	EXEC sp_P_TMS_INSERT_ERROR_DES @ATTRIBUTE1, 'TMS', @ATTRIBUTE2, @ERROR_MESSAGE, @ATTRIBUTE3;
-------------------------------------------------------------------------------------------------------------------------------
END CATCH 
END
GO
/****** Object:  StoredProcedure [dbo].[SP_UPDATE_PROJECT_TRL_APPROVAL_ABBR]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		AMIT SHUDDHALWAR
-- Create date: 27-11-2024
-- Description:	TO UPDATE THE PROJECT SUBTASK
-- =============================================
CREATE PROCEDURE [dbo].[SP_UPDATE_PROJECT_TRL_APPROVAL_ABBR]
	-- Add the parameters for the stored procedure here
	@APPROVAL_ABBRIVATION nvarchar(400) = NULL
	,@APPROVAL_DESCRIPTION nvarchar(MAX) = NULL
	,@DAYS_REQUIRED int					 = NULL
	,@DEPARTMENT int					 = NULL
	,@JOB_ROLE int						 = NULL
	,@RESPOSIBLE_EMP_MKEY int			 = NULL
	,@OUTPUT_DOCUMENT nvarchar(MAX)		 = NULL
	,@TENTATIVE_START_DATE datetime		 = NULL
	,@TENTATIVE_END_DATE datetime		 = NULL
	,@STATUS nvarchar(200)				 = NULL
	,@MKEY int							 = NULL
	,@APPROVAL_MKEY int
	,@TASK_NO nvarchar(400)			 = NULL
	,@LAST_UPDATED_BY int				 = NULL
	,@ATTRIBUTE1 VARCHAR(100)			 = NULL
	,@ATTRIBUTE2 VARCHAR(100)			 = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	BEGIN TRY
		INSERT INTO  PROJECT_TRL_APPROVAL_ABBR_H
			(HIST_DATE
			,HEADER_MKEY
			,SEQ_NO
			,APPROVAL_MKEY
			,APPROVAL_ABBRIVATION
			,APPROVAL_DESCRIPTION
			,DAYS_REQUIRED
			,DEPARTMENT
			,JOB_ROLE
			,RESPOSIBLE_EMP_MKEY
			,OUTPUT_DOCUMENT
			,TENTATIVE_START_DATE
			,TENTATIVE_END_DATE
			,STATUS
			,ATTRIBUTE1
			,ATTRIBUTE2
			,ATTRIBUTE3
			,ATTRIBUTE4
			,ATTRIBUTE5
			,CREATED_BY
			,CREATION_DATE
			,LAST_UPDATED_BY
			,LAST_UPDATE_DATE
			,DELETE_FLAG)
		SELECT
			GETDATE()
			,HEADER_MKEY
			,SEQ_NO
			,APPROVAL_MKEY
			,APPROVAL_ABBRIVATION
			,APPROVAL_DESCRIPTION
			,DAYS_REQUIRED
			,DEPARTMENT
			,JOB_ROLE
			,RESPOSIBLE_EMP_MKEY
			,OUTPUT_DOCUMENT
			,TENTATIVE_START_DATE
			,TENTATIVE_END_DATE
			,STATUS
			,ATTRIBUTE1
			,ATTRIBUTE2
			,ATTRIBUTE3
			,ATTRIBUTE4
			,ATTRIBUTE5
			,CREATED_BY
			,CREATION_DATE
			,LAST_UPDATED_BY
			,LAST_UPDATE_DATE
			,DELETE_FLAG
		FROM PROJECT_TRL_APPROVAL_ABBR
-------------------------------------------------------------------------------------------------------------------------------
		-- Insert statements for procedure here
		UPDATE PROJECT_TRL_APPROVAL_ABBR 
		SET APPROVAL_ABBRIVATION = @APPROVAL_ABBRIVATION, APPROVAL_DESCRIPTION = @APPROVAL_DESCRIPTION
		,DAYS_REQUIRED = @DAYS_REQUIRED, DEPARTMENT = @DEPARTMENT, JOB_ROLE = @JOB_ROLE
		, RESPOSIBLE_EMP_MKEY = @RESPOSIBLE_EMP_MKEY, OUTPUT_DOCUMENT = @OUTPUT_DOCUMENT
		, TENTATIVE_START_DATE = @TENTATIVE_START_DATE, TENTATIVE_END_DATE = @TENTATIVE_END_DATE
		, STATUS = @STATUS, LAST_UPDATE_DATE = GETDATE(), LAST_UPDATED_BY = @LAST_UPDATED_BY 
		,APPROVAL_MKEY = @APPROVAL_MKEY
		WHERE HEADER_MKEY = @MKEY 
		AND SEQ_NO = @TASK_NO;
		print '@TENTATIVE_START_DATE: '+ convert(varchar(50), @TENTATIVE_START_DATE);
-------------------------------------------------------------------------------------------------------------------------------
	END TRY
	BEGIN CATCH
	-------------------------------------------------------------------------------------------------------------------------------          
		SELECT ERROR_NUMBER()    AS ERRORNUMBER,
				ERROR_SEVERITY()  AS ERRORSEVERITY,
				ERROR_STATE()     AS ERRORSTATE,
				ERROR_PROCEDURE() AS ERRORPROCEDURE,
				ERROR_LINE()      AS ERRORLINE,
				ERROR_MESSAGE()   AS ERRORMESSAGE;
	-------------------------------------------------------------------------------------------------------------------------------
		DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
		SET @ERROR_MESSAGE = ERROR_MESSAGE();
	-------------------------------------------------------------------------------------------------------------------------------
		EXEC sp_P_TMS_INSERT_ERROR_DES @LAST_UPDATED_BY,'TMS',@ATTRIBUTE1,@ERROR_MESSAGE,@ATTRIBUTE2;
	-------------------------------------------------------------------------------------------------------------------------------
	END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[SP_UPDATE_TASK_RECURSIVE_DETAILS]    Script Date: 27-02-2025 18:34:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- AUTHOR:    AMIT SHUDDHALWAR
-- CREATE DATE: 19-09-2024
-- DESCRIPTION:  UPDATE THE DETAILS OF TASK RECURSIVE DETAILS
-- =============================================
CREATE PROCEDURE [dbo].[SP_UPDATE_TASK_RECURSIVE_DETAILS]
  -- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE
  @MKEY             INT,
  @TASK_NAME        VARCHAR(250) = NULL,
  @TASK_DESCRIPTION VARCHAR(250) = NULL,
  @TERM             VARCHAR(250) = NULL,
  @CAREGORY			numeric = NULL,
  @PROJECT_ID		numeric = NULL,
  @SUB_PROJECT_ID	numeric = NULL,
  @ASSIGNED_TO		numeric = NULL,
  @TAGS				NVARCHAR(max) = NULL,
  @NO_DAYS			numeric = NULL,
  @START_DATE       DATETIME = NULL,
  @ENDS             VARCHAR(250) = NULL,
  @END_DATE         DATETIME = NULL,
  @CREATED_BY       NUMERIC = NULL,
  @LAST_UPDATED_BY  NUMERIC = NULL,
  @FILE_NAME       VARCHAR(500) = NULL,
  @FILE_PATH       VARCHAR(MAX) = NULL,
  @FILE_MKEY       NUMERIC(18,0) = NULL,
  @FILE_SR_NO       NUMERIC(18,0)= NULL,
  @ATTRIBUTE1       VARCHAR(250) = NULL,
  @ATTRIBUTE2       VARCHAR(250) = NULL,
  @ATTRIBUTE3       VARCHAR(250) = NULL,
  @ATTRIBUTE4       VARCHAR(250) = NULL,
  @ATTRIBUTE5       VARCHAR(250) = NULL,
  @ATTRIBUTE6       VARCHAR(250) = NULL,
  @ATTRIBUTE7       VARCHAR(250) = NULL,
  @ATTRIBUTE8       VARCHAR(100) = NULL,
  @ATTRIBUTE9       VARCHAR(100) = NULL,
  @ATTRIBUTE10      VARCHAR(100) = NULL,
  @ATTRIBUTE11      VARCHAR(100) = NULL,
  @ATTRIBUTE12      VARCHAR(100) = NULL,
  @ATTRIBUTE13      VARCHAR(100) = NULL,	
  @ATTRIBUTE14	  VARCHAR(100) = NULL, -- USER ID
  @ATTRIBUTE15	  VARCHAR(100) = NULL, -- FORM NAME
  @ATTRIBUTE16	  VARCHAR(100) = NULL -- FUCNTION/METHOD NAME
AS
  BEGIN
      -- SET NOCOUNT ON ADDED TO PREVENT EXTRA RESULT SETS FROM
      -- INTERFERING WITH SELECT STATEMENTS.
      SET NOCOUNT ON;

      BEGIN TRY
      -- TO CHECK THE MKEY IS PRESENT OR NOT IN THE TASK_RECURSIVE_HDR TABLE
      --IF ((SELECT COUNT(*) FROM TASK_RECURSIVE_HDR WHERE MKEY = @MKEY AND DELETE_FLAG = 'N') > 0)
      BEGIN
          ---------------------------------------------------------------------------------------------------------------------
          -- TO ADD THE ROW IN HISTORY TABLE FROM MAIN TABLE
          INSERT INTO TASK_RECURSIVE_HDR_H
                      (Hist_date,
					  MKEY,
					  TASK_NAME,
                       TASK_DESCRIPTION,
                       TERM,
					   CAREGORY,
					   PROJECT_ID,
					   SUB_PROJECT_ID,
					   ASSIGNED_TO,
					   TAGS,
					   NO_DAYS,
                       [START_DATE],
                       ENDS,
                       END_DATE,
                       CREATED_BY,
                       CREATION_DATE,
                       LAST_UPDATED_BY,
                       LAST_UPDATE_DATE,
					   DELETE_FLAG)
          SELECT GETDATE(),
				 MKEY, 
				 TASK_NAME,
                 TASK_DESCRIPTION,
                 TERM,
				 CAREGORY,
				PROJECT_ID,
				SUB_PROJECT_ID,
				ASSIGNED_TO,
				TAGS,
				NO_DAYS,
                 [START_DATE],
                 ENDS,
				 END_DATE,
                 CREATED_BY,
                 CREATION_DATE,
                 LAST_UPDATED_BY,
                 LAST_UPDATE_DATE,
				 DELETE_FLAG
          FROM   TASK_RECURSIVE_HDR
          WHERE  MKEY = @MKEY;

          ---------------------------------------------------------------------------------------------------------------------
          -- TO UPDATE THE ROWS IN MAIN TABLE 
          -- IF ANY COLUMN ROW VALUE IS NULL THEN UPDATE OLD VALUE 
          UPDATE TASK_RECURSIVE_HDR
          SET    TASK_NAME = ISNULL(@TASK_NAME, TASK_NAME),
                 TASK_DESCRIPTION = ISNULL(@TASK_DESCRIPTION, TASK_DESCRIPTION),
                 TERM = ISNULL(@TERM, TERM),
				 CAREGORY = ISNULL(@CAREGORY, CAREGORY),
				 PROJECT_ID = ISNULL(@PROJECT_ID, PROJECT_ID),
				 SUB_PROJECT_ID = ISNULL(@SUB_PROJECT_ID, SUB_PROJECT_ID),
				 ASSIGNED_TO = ISNULL(@ASSIGNED_TO, ASSIGNED_TO),
				 TAGS = ISNULL(@TAGS, TAGS),
				 NO_DAYS = ISNULL(@NO_DAYS, NO_DAYS),
                 [START_DATE] = ISNULL(@START_DATE, [START_DATE]),
                 ENDS = ISNULL(@ENDS, ENDS),
                 END_DATE = ISNULL(@END_DATE, @END_DATE),
                 LAST_UPDATED_BY = @LAST_UPDATED_BY,
                 LAST_UPDATE_DATE = GETDATE()
          WHERE  MKEY = @MKEY
                 AND DELETE_FLAG = 'N';

          ---------------------------------------------------------------------------------------------------------------------
          -- TO INSERT TRL TASK RECURSIVE HISTORY TABLE
          INSERT INTO TASK_RECURSIVE_TRL_H
                      (Hist_date,
					   MKEY,
					   SR_NO,
                       TERM_TYPE,
                       CREATED_BY,
                       CREATION_DATE,
                       LAST_UPDATED_BY,
                       LAST_UPDATE_DATE,
                       ATTRIBUTE1,
                       ATTRIBUTE2,
                       ATTRIBUTE3,
                       ATTRIBUTE4,
                       ATTRIBUTE5,
                       ATTRIBUTE6,
                       ATTRIBUTE7,
					   ATTRIBUTE8,
                       ATTRIBUTE9,
                       ATTRIBUTE10,
                       ATTRIBUTE11,
                       ATTRIBUTE12,
					   ATTRIBUTE13,
					   DELETE_FLAG)
          SELECT
				 GETDATE(),
				 MKEY,
				 SR_NO,
				 TERM_TYPE,
				 CREATED_BY,
				 CREATION_DATE,
				 LAST_UPDATED_BY,
				 LAST_UPDATE_DATE,
				 ATTRIBUTE1,
				 ATTRIBUTE2,
				 ATTRIBUTE3,
				 ATTRIBUTE4,
				 ATTRIBUTE5,
				 ATTRIBUTE6,
				 ATTRIBUTE7,
				 ATTRIBUTE8,
				 ATTRIBUTE9,
				 ATTRIBUTE10,
				 ATTRIBUTE11,
				 ATTRIBUTE12,
				 ATTRIBUTE13,
				 DELETE_FLAG
          FROM   TASK_RECURSIVE_TRL
          WHERE  MKEY = @MKEY;

          ---------------------------------------------------------------------------------------------------------------------
          -- TO UPDATE THE MAIN TRL TABLE 
          UPDATE TASK_RECURSIVE_TRL
          SET    TERM_TYPE = ISNULL(@TERM, TERM_TYPE),
                 LAST_UPDATED_BY = @LAST_UPDATED_BY,
                 LAST_UPDATE_DATE = GETDATE(),
                 ATTRIBUTE1 = ISNULL(@ATTRIBUTE1, ATTRIBUTE1),
                 ATTRIBUTE2 = ISNULL(@ATTRIBUTE2, ATTRIBUTE2),
                 ATTRIBUTE3 = ISNULL(@ATTRIBUTE3, ATTRIBUTE3),
                 ATTRIBUTE4 = ISNULL(@ATTRIBUTE4, ATTRIBUTE4),
                 ATTRIBUTE5 = ISNULL(@ATTRIBUTE5, ATTRIBUTE5),
                 ATTRIBUTE6 = ISNULL(@ATTRIBUTE6, ATTRIBUTE6),
                 ATTRIBUTE7 = ISNULL(@ATTRIBUTE7, ATTRIBUTE7),
				 ATTRIBUTE8 = ISNULL(@ATTRIBUTE8, ATTRIBUTE8),
                 ATTRIBUTE9 = ISNULL(@ATTRIBUTE9, ATTRIBUTE9),
                 ATTRIBUTE10 = ISNULL(@ATTRIBUTE10, ATTRIBUTE10),
                 ATTRIBUTE11 = ISNULL(@ATTRIBUTE11, ATTRIBUTE11),
                 ATTRIBUTE12 = ISNULL(@ATTRIBUTE12, ATTRIBUTE12),
				 ATTRIBUTE13 = ISNULL(@ATTRIBUTE13, ATTRIBUTE13)
          WHERE  MKEY = @MKEY
                 AND DELETE_FLAG = 'N';
      ---------------------------------------------------------------------------------------------------------------------
	  INSERT INTO TASK_RECURSIVE_MEDIA_TRL_H
								  (MKEY,SR_NO,
								  TASK_MKEY,
								  FILE_NAME,
								  FILE_PATH,
								  CREATED_BY,
								  CREATION_DATE,
								  LAST_UPDATED_BY,
								  LAST_UPDATE_DATE,
								  DELETE_FLAG
								  )	
						SELECT MKEY,SR_NO,
								  TASK_MKEY,
								  FILE_NAME,
								  FILE_PATH,
								  CREATED_BY,
								  CREATION_DATE,
								  LAST_UPDATED_BY,
								  LAST_UPDATE_DATE,
								  DELETE_FLAG 
						FROM TASK_RECURSIVE_MEDIA_TRL
						WHERE MKEY = @MKEY
						AND SR_NO =  @FILE_SR_NO;
	  ---------------------------------------------------------------------------------------------------------------------
					UPDATE TASK_RECURSIVE_MEDIA_TRL
					SET FILE_NAME = @FILE_NAME,
					FILE_PATH = @FILE_PATH
					WHERE MKEY = @FILE_MKEY 
					AND SR_NO = @FILE_SR_NO;
	  ---------------------------------------------------------------------------------------------------------------------
		END
	END TRY
	BEGIN CATCH
		SELECT  
		  ERROR_NUMBER() AS ERRORNUMBER  
		  ,ERROR_SEVERITY() AS ERRORSEVERITY  
		  ,ERROR_STATE() AS ERRORSTATE  
		  ,ERROR_PROCEDURE() AS ERRORPROCEDURE  
		  ,ERROR_LINE() AS ERRORLINE  
		  ,ERROR_MESSAGE() AS ERRORMESSAGE;
-------------------------------------------------------------------------------------------------------------------------------
		DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
		SET @ERROR_MESSAGE = ERROR_MESSAGE();
-------------------------------------------------------------------------------------------------------------------------------
		EXEC sp_P_TMS_INSERT_ERROR_DES @ATTRIBUTE14,'TMS',@ATTRIBUTe15,@ERROR_MESSAGE,@ATTRIBUTE16;
-------------------------------------------------------------------------------------------------------------------------------
     END CATCH
  END 
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "TYPE_MST"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 243
               Right = 291
            End
            DisplayFlags = 280
            TopColumn = 15
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'V_Doc_Category'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'V_Doc_Category'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "MST"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 252
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "HDR"
            Begin Extent = 
               Top = 6
               Left = 290
               Bottom = 136
               Right = 530
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'V_Doc_Type'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'V_Doc_Type'
GO


GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_DASHBOARD_NT]    Script Date: 20-05-2025 15:09:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--  EXEC SP_TASK_DASHBOARD_NT 926,'CANCELCLOSE','Today'
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Overdue'
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next 3 Days'
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next 7 Days'
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next 2 Weeks'
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next Month'
--  EXEC SP_TASK_DASHBOARD_NT 926,'ALLOCATEDBYME','Review'
ALTER procedure [dbo].[SP_TASK_DASHBOARD_NT] (@CURRENT_EMP_MKEY INT,
                                              @FILTER           NVARCHAR(100),
                                              @STATUS_FILTER     NVARCHAR(255) = NULL)
AS
  BEGIN
      DECLARE @DAY INT

      SET @DAY=0

      IF( @FILTER = NULL OR @FILTER = '' OR @FILTER = 'DEFAULT' )
        BEGIN 
		print '@FILTER = DEFAULT '
            SELECT T_HDR.mkey,
                   Isnull(TMST.type_desc, 'NA')
                   CATEGORY
                   ,
                   T_HDR.task_no,
                   dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))
                   CREATOR,
                   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))
                   RESPONSIBLE,
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
                   ACTIONABLE,
                   T_HDR.creation_date,
                   CASE
                     WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'
                     WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status IN ( 'WORK IN PROGRESS',
                                            'CLOSE INITIATED',
                                            'CANCEL INITIATED',
                                            'RE-WORK' ) THEN 'In Progress'
                     WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN
                     'Completed'
                     ELSE 'Others'
                   END                                                    AS
                   Dashboard_Status,
                   CONVERT(VARCHAR, T_HDR.completion_date, 103)
                   COMPLETION_DATE,
                   dbo.[Initcap](T_HDR.task_name)
                   TASK_NAME,
                   T_HDR.task_description,
                   T_HDR.tags,
                   dbo.[Initcap](T_HDR.status)                            STATUS
                   ,
                   CASE
                     WHEN Isnull(CREATOR.first_name, 'NA') !=
                          Isnull(RESPONSIBLE.first_name, 'NA')
                   THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   + ' > '
                   + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA') )
                     ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   END
                   RESPONSIBLE_TAG,
                   dbo.[Initcap](Isnull(PMST.type_desc, ''))
                   PROJECT_NAME
                   ,
                   dbo.Tasknamestring(T_HDR.mkey)
                   AS
                   'TASK_HISTORY',
                   Isnull(Rtrim(T_HDR.[priority]), '')                    AS
                   [Priority],
                   Isnull(T_HDR.percent_complete, '0')                    AS
                   Progress_Percentage,
                   Isnull(parent_counts.parenttaskcount, 0)               AS
                   SubTask_Count,
				   T_HDR.CREATED_BY 
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by
                             AND CREATOR.delete_flag = 'N'
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to
                             AND RESPONSIBLE.delete_flag = 'N'
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
                             AND ACTIONABLE.delete_flag = 'N'
                   --LEFT JOIN v_category CATEGORY
                   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
                   LEFT JOIN type_mst TMST
                          ON TMST.master_mkey = T_HDR.caregory
                             AND TMST.type_code = 'CATEGORY'
                             AND TMST.delete_flag = 'N'
                   --LEFT JOIN v_project PROJ
                   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
                   LEFT JOIN type_mst PMST
                          ON PMST.master_mkey = T_HDR.project_id
                             AND PMST.type_code = 'PROJECT'
                             AND PMST.delete_flag = 'N'
                   LEFT JOIN (SELECT task_parent_id,
                                     Count(*) AS ParentTaskCount
                              FROM   task_hdr
                              WHERE  task_parent_id IS NOT NULL
                                     AND mkey NOT IN ( task_parent_id )
                                     AND delete_flag = 'N'
                              GROUP  BY task_parent_id) parent_counts
                          ON T_HDR.mkey = parent_counts.task_parent_id
            WHERE  (
                   --T_HDR.Created_by=@CURRENT_EMP_MKEY  
                   --OR  
                   --T_HDR.ASSIGNED_TO=@CURRENT_EMP_MKEY  
                   --OR  
                   --T_HDR.RESPOSIBLE_EMP_MKEY=@CURRENT_EMP_MKEY  
                   --T_HDR.ASSIGNED_TO=@CURRENT_EMP_MKEY  
                   --OR  
                   T_HDR.resposible_emp_mkey = @CURRENT_EMP_MKEY )
                   AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED', 'Cancel')
                   AND Isnull(T_HDR.status_flag, 'A') IN ( 'A' )
                   AND T_HDR.delete_flag = 'N'
				 --   And CASE
					--	WHEN @STATUS_FILTER    = 'Today' and @STATUS_FILTER    IS NULL THEN 
					--		CASE WHEN CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) THEN 1 ELSE 0 END
        
					--	WHEN @STATUS_FILTER    = 'Overdue' THEN 
					--		CASE WHEN T_HDR.completion_date < GETDATE() THEN 1 ELSE 0 END
        
					--	WHEN @STATUS_FILTER    = 'Next 3 Days' THEN 
					--		CASE WHEN T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 3, GETDATE()) THEN 1 ELSE 0 END
        
					--	WHEN @STATUS_FILTER    = 'Next 7 Days' THEN 
					--		CASE WHEN T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE()) THEN 1 ELSE 0 END
        
					--	WHEN @STATUS_FILTER    = 'Next 2 Weeks' THEN 
					--		CASE WHEN T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(WEEK, 2, GETDATE()) THEN 1 ELSE 0 END
        
					--	WHEN @STATUS_FILTER    = 'Next Month' THEN 
					--		CASE WHEN T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(MONTH, 1, GETDATE()) THEN 1 ELSE 0 END
        
					--	WHEN @STATUS_FILTER    = 'Review' THEN 
					--		CASE WHEN T_HDR.status IN ( 'CANCEL INITIATED', 'CLOSE INITIATED' ) THEN 1 ELSE 0 END
        
					--	WHEN @STATUS_FILTER    IS NULL THEN 
					--		CASE WHEN CONVERT(VARCHAR, T_HDR.completion_date, 103) = 'S' THEN 1 ELSE 0 END
        
					--	ELSE 0  -- If none of the conditions match, return false
					--END = 1
            ORDER  BY creation_date DESC
        END

      IF( @FILTER = 'ALLOCATEDBYME' )
        BEGIN
				SELECT T_HDR.mkey,
                   Isnull(TMST.type_desc, 'NA')
                   CATEGORY
                   ,
                   T_HDR.task_no,
                   dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))
                   CREATOR,
                   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))
                   RESPONSIBLE,
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
                   ACTIONABLE,
                   T_HDR.creation_date,
                   CASE
                     WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'
                     WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status IN ( 'WORK IN PROGRESS',
                                            'CLOSE INITIATED',
                                            'CANCEL INITIATED',
                                            'RE-WORK' ) THEN 'In Progress'
                     WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN
                     'Completed'
                     ELSE 'Others'
                   END                                                    AS
                   Dashboard_Status,
                   CONVERT(VARCHAR, T_HDR.completion_date, 103)           AS
                   COMPLETION_DATE
                   ,
                   dbo.[Initcap](T_HDR.task_name)                         AS
                   TASK_NAME,
                   T_HDR.task_description,
                   T_HDR.tags,
                   dbo.[Initcap](T_HDR.status)                            AS
                   STATUS,
                   CASE
                     WHEN Isnull(CREATOR.first_name, 'NA') !=
                          Isnull(RESPONSIBLE.first_name, 'NA')
                   THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   + ' > '
                   + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA'))
                     ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   END                                                    AS
                   RESPONSIBLE_TAG
                   ,
                   dbo.[Initcap](Isnull(PMST.type_desc, ''))              AS
                   PROJECT_NAME,
                   dbo.Tasknamestring(T_HDR.mkey)                         AS
                   TASK_HISTORY,
                   Isnull(Rtrim(T_HDR.[priority]), '')                    AS
                   [Priority],
                   Isnull(T_HDR.percent_complete, '0')                    AS
                   Progress_Percentage,
                   Isnull(parent_counts.parenttaskcount, 0)               AS
                   SubTask_Count,
				   T_HDR.CREATED_BY
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by
                             AND CREATOR.delete_flag = 'N'
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to
                             AND RESPONSIBLE.delete_flag = 'N'
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
                             AND ACTIONABLE.delete_flag = 'N'
                   --LEFT JOIN v_category CATEGORY
                   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
                   LEFT JOIN type_mst TMST
                          ON TMST.master_mkey = T_HDR.caregory
                             AND TMST.type_code = 'CATEGORY'
                             AND TMST.delete_flag = 'N'
                   --LEFT JOIN v_project PROJ
                   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
                   LEFT JOIN type_mst PMST
                          ON PMST.master_mkey = T_HDR.project_id
                             AND PMST.type_code = 'PROJECT'
                             AND PMST.delete_flag = 'N'
                   LEFT JOIN (SELECT task_parent_id,
                                     Count(*) AS ParentTaskCount
                              FROM   task_hdr
                              WHERE  task_parent_id IS NOT NULL
                                     AND mkey NOT IN ( task_parent_id )
                                     AND delete_flag = 'N'
                              GROUP  BY task_parent_id) parent_counts
                          ON T_HDR.mkey = parent_counts.task_parent_id
            WHERE  ( T_HDR.created_by = @CURRENT_EMP_MKEY )
                   AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED', 'Cancel'
                                           )
                   AND Isnull(T_HDR.status_flag, 'A') IN ( 'A' )
                   AND T_HDR.delete_flag = 'N'
				   AND (
					@STATUS_FILTER    IS NULL
					OR (
							(@STATUS_FILTER    = 'Today' AND CONVERT(DATE, T_HDR.completion_date) = CONVERT(DATE, GETDATE()))
							OR (@STATUS_FILTER    = 'Overdue' AND T_HDR.completion_date < GETDATE())
							OR (@STATUS_FILTER    = 'Next 3 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 3, GETDATE()))
							OR (@STATUS_FILTER    = 'Next 7 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE()))
							OR (@STATUS_FILTER    = 'Next 2 Weeks' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 14, GETDATE()))
							OR (@STATUS_FILTER    = 'Next Month' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(MONTH, 1, GETDATE()))
							OR (@STATUS_FILTER    = 'Review' AND T_HDR.status IN ('CANCEL INITIATED', 'CLOSE INITIATED'))
						)
					)
            ORDER  BY creation_date DESC;
        END

      IF( @FILTER = 'ALLOCATEDTOME' )
        BEGIN
            SELECT T_HDR.mkey,
                   Isnull(TMST.type_desc, 'NA')
                   CATEGORY
                   ,
                   T_HDR.task_no,
                   dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))
                   CREATOR,
                   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))
                   RESPONSIBLE,
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
                   ACTIONABLE,
                   T_HDR.creation_date,
                   CASE
                     WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'
                     WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status IN ( 'WORK IN PROGRESS',
                                            'CLOSE INITIATED',
                                            'CANCEL INITIATED',
                                            'RE-WORK' ) THEN 'In Progress'
                     WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN
                     'Completed'
                     ELSE 'Others'
                   END                                                    AS
                   Dashboard_Status,
                   CONVERT(VARCHAR, T_HDR.completion_date, 103)           AS
                   COMPLETION_DATE
                   ,
                   dbo.[Initcap](T_HDR.task_name)                         AS
                   TASK_NAME,
                   T_HDR.task_description,
                   T_HDR.tags,
                   dbo.[Initcap](T_HDR.status)                            AS
                   STATUS,
                   CASE
                     WHEN Isnull(CREATOR.first_name, 'NA') !=
                          Isnull(RESPONSIBLE.first_name, 'NA')
                   THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   + ' > '
                   + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA'))
                     ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   END                                                    AS
                   RESPONSIBLE_TAG
                   ,
                   dbo.[Initcap](Isnull(PMST.type_desc, ''))              AS
                   PROJECT_NAME,
                   dbo.Tasknamestring(T_HDR.mkey)                         AS
                   TASK_HISTORY,
                   Isnull(Rtrim(T_HDR.[priority]), '')                    AS
                   [Priority],
                   Isnull(T_HDR.percent_complete, '0')                    AS
                   Progress_Percentage,
                   Isnull(parent_counts.parenttaskcount, 0)               AS
                   SubTask_Count,
				   T_HDR.CREATED_BY
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by
                             AND CREATOR.delete_flag = 'N'
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to
                             AND RESPONSIBLE.delete_flag = 'N'
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
                             AND ACTIONABLE.delete_flag = 'N'
                   --LEFT JOIN v_category CATEGORY
                   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
                   LEFT JOIN type_mst TMST
                          ON TMST.master_mkey = T_HDR.caregory
                             AND TMST.type_code = 'CATEGORY'
                             AND TMST.delete_flag = 'N'
                   --LEFT JOIN v_project PROJ
                   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
                   LEFT JOIN type_mst PMST
                          ON PMST.master_mkey = T_HDR.project_id
                             AND PMST.type_code = 'PROJECT'
                             AND PMST.delete_flag = 'N'
                   LEFT JOIN (SELECT task_parent_id,
                                     Count(*) AS ParentTaskCount
                              FROM   task_hdr
                              WHERE  task_parent_id IS NOT NULL
                                     AND mkey NOT IN ( task_parent_id )
                                     AND delete_flag = 'N'
                              GROUP  BY task_parent_id) parent_counts
                          ON T_HDR.mkey = parent_counts.task_parent_id
            WHERE  ( T_HDR.assigned_to = @CURRENT_EMP_MKEY
                      OR T_HDR.resposible_emp_mkey = @CURRENT_EMP_MKEY )
                   AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED', 'Cancel')
                   AND Isnull(T_HDR.status_flag, 'A') IN ( 'A' )
                   AND T_HDR.delete_flag = 'N'
				   AND (
						@STATUS_FILTER    IS NULL
						OR (
								(@STATUS_FILTER    = 'Today' AND CONVERT(DATE, T_HDR.completion_date) = CONVERT(DATE, GETDATE()))
								OR (@STATUS_FILTER    = 'Overdue' AND T_HDR.completion_date < GETDATE())
								OR (@STATUS_FILTER    = 'Next 3 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 3, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 7 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 2 Weeks' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 14, GETDATE()))
								OR (@STATUS_FILTER    = 'Next Month' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(MONTH, 1, GETDATE()))
								OR (@STATUS_FILTER    = 'Review' AND T_HDR.status IN ('CANCEL INITIATED', 'CLOSE INITIATED'))
							)
						)
            ORDER  BY creation_date DESC;
        END

      IF( @FILTER = 'COMPLETEDBYME' )
        BEGIN
            SELECT T_HDR.mkey,
                   Isnull(TMST.type_desc, 'NA')
                   CATEGORY
                   ,
                   T_HDR.task_no,
                   dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))
                   CREATOR,
                   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))
                   RESPONSIBLE,
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
                   ACTIONABLE,
                   T_HDR.creation_date,
                   CASE
                     WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'
                     WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status IN ( 'WORK IN PROGRESS',
                                            'CLOSE INITIATED',
                                            'CANCEL INITIATED',
                                            'RE-WORK' ) THEN 'In Progress'
                     WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN
                     'Completed'
                     ELSE 'Others'
                   END                                                    AS
                   Dashboard_Status,
                   CONVERT(VARCHAR, T_HDR.completion_date, 103)           AS
                   COMPLETION_DATE
                   ,
                   dbo.[Initcap](T_HDR.task_name)                         AS
                   TASK_NAME,
                   T_HDR.task_description,
                   T_HDR.tags,
                   dbo.[Initcap](T_HDR.status)                            AS
                   STATUS,
                   CASE
                     WHEN Isnull(CREATOR.first_name, 'NA') !=
                          Isnull(RESPONSIBLE.first_name, 'NA')
                   THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   + ' > '
                   + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA'))
                     ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   END                                                    AS
                   RESPONSIBLE_TAG
                   ,
                   dbo.[Initcap](Isnull(PMST.type_desc, ''))              AS
                   PROJECT_NAME,
                   dbo.Tasknamestring(T_HDR.mkey)                         AS
                   TASK_HISTORY,
                   Isnull(Rtrim(T_HDR.[priority]), '')                    AS
                   [Priority],
                   Isnull(T_HDR.percent_complete, '0')                    AS
                   Progress_Percentage,
                   Isnull(parent_counts.parenttaskcount, 0)               AS
                   SubTask_Count,
				   T_HDR.CREATED_BY
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by
                             AND CREATOR.delete_flag = 'N'
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to
                             AND RESPONSIBLE.delete_flag = 'N'
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
                             AND ACTIONABLE.delete_flag = 'N'
                   --LEFT JOIN v_category CATEGORY
                   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
                   LEFT JOIN type_mst TMST
                          ON TMST.master_mkey = T_HDR.caregory
                             AND TMST.type_code = 'CATEGORY'
                             AND TMST.delete_flag = 'N'
                   --LEFT JOIN v_project PROJ
                   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
                   LEFT JOIN type_mst PMST
                          ON PMST.master_mkey = T_HDR.project_id
                             AND PMST.type_code = 'PROJECT'
                             AND PMST.delete_flag = 'N'
                   LEFT JOIN (SELECT task_parent_id,
                                     Count(*) AS ParentTaskCount
                              FROM   task_hdr
                              WHERE  task_parent_id IS NOT NULL
                                     AND mkey NOT IN ( task_parent_id )
                                     AND delete_flag = 'N'
                              GROUP  BY task_parent_id) parent_counts
                          ON T_HDR.mkey = parent_counts.task_parent_id
            WHERE  ( T_HDR.assigned_to = @CURRENT_EMP_MKEY )
                   AND T_HDR.status IN ( 'COMPLETED' )
                   AND Isnull(T_HDR.status_flag, 'A') IN ( 'A' )
                   AND T_HDR.delete_flag = 'N'
				   AND (
						@STATUS_FILTER    IS NULL
						OR (
								(@STATUS_FILTER    = 'Today' AND CONVERT(DATE, T_HDR.completion_date) = CONVERT(DATE, GETDATE()))
								OR (@STATUS_FILTER    = 'Overdue' AND T_HDR.completion_date < GETDATE())
								OR (@STATUS_FILTER    = 'Next 3 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 3, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 7 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 2 Weeks' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 14, GETDATE()))
								OR (@STATUS_FILTER    = 'Next Month' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(MONTH, 1, GETDATE()))
								OR (@STATUS_FILTER    = 'Review' AND T_HDR.status IN ('CANCEL INITIATED', 'CLOSE INITIATED'))
							)
						)
            ORDER  BY creation_date DESC;
        END

      IF( @FILTER = 'COMPLETEDFORME' )
        BEGIN
            SELECT T_HDR.mkey,
                   Isnull(TMST.type_desc, 'NA')
                   CATEGORY
                   ,
                   T_HDR.task_no,
                   dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))
                   CREATOR,
                   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))
                   RESPONSIBLE,
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
                   ACTIONABLE,
                   T_HDR.creation_date,
                   CASE
                     WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'
                     WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status IN ( 'WORK IN PROGRESS',
                                            'CLOSE INITIATED',
                                            'CANCEL INITIATED',
                                            'RE-WORK' ) THEN 'In Progress'
                     WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN
                     'Completed'
                     ELSE 'Others'
                   END                                                    AS
                   Dashboard_Status,
                   CONVERT(VARCHAR, T_HDR.completion_date, 103)           AS
                   COMPLETION_DATE
                   ,
                   dbo.[Initcap](T_HDR.task_name)                         AS
                   TASK_NAME,
                   T_HDR.task_description,
                   T_HDR.tags,
                   dbo.[Initcap](T_HDR.status)                            AS
                   STATUS,
                   CASE
                     WHEN Isnull(CREATOR.first_name, 'NA') !=
                          Isnull(RESPONSIBLE.first_name, 'NA')
                   THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   + ' > '
                   + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA'))
                     ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   END                                                    AS
                   RESPONSIBLE_TAG
                   ,
                   dbo.[Initcap](Isnull(PMST.type_desc, ''))              AS
                   PROJECT_NAME,
                   dbo.Tasknamestring(T_HDR.mkey)                         AS
                   TASK_HISTORY,
                   Isnull(Rtrim(T_HDR.[priority]), '')                    AS
                   [Priority],
                   Isnull(T_HDR.percent_complete, '0')                    AS
                   Progress_Percentage,
                   Isnull(parent_counts.parenttaskcount, 0)               AS
                   SubTask_Count,
				   T_HDR.CREATED_BY
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by
                             AND CREATOR.delete_flag = 'N'
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to
                             AND RESPONSIBLE.delete_flag = 'N'
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
                             AND ACTIONABLE.delete_flag = 'N'
                   --LEFT JOIN v_category CATEGORY
                   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
                   LEFT JOIN type_mst TMST
                          ON TMST.master_mkey = T_HDR.caregory
                             AND TMST.type_code = 'CATEGORY'
                             AND TMST.delete_flag = 'N'
                   --LEFT JOIN v_project PROJ
                   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
                   LEFT JOIN type_mst PMST
                          ON PMST.master_mkey = T_HDR.project_id
                             AND PMST.type_code = 'PROJECT'
                             AND PMST.delete_flag = 'N'
                   LEFT JOIN (SELECT task_parent_id,
                                     Count(*) AS ParentTaskCount
                              FROM   task_hdr
                              WHERE  task_parent_id IS NOT NULL
                                     AND mkey NOT IN ( task_parent_id )
                                     AND delete_flag = 'N'
                              GROUP  BY task_parent_id) parent_counts
                          ON T_HDR.mkey = parent_counts.task_parent_id
            WHERE  ( T_HDR.created_by = @CURRENT_EMP_MKEY
                     AND T_HDR.assigned_to != @CURRENT_EMP_MKEY
                    --OR  
                    --T_HDR.ASSIGNED_TO=@CURRENT_EMP_MKEY  
                    --OR  
                    --T_HDR.RESPOSIBLE_EMP_MKEY=@CURRENT_EMP_MKEY  
                    )
                   AND T_HDR.status IN ( 'COMPLETED' )
                   --and Isnull(T_HDR.STATUS_Flag,'A') in ('A')  
                   AND T_HDR.delete_flag = 'N'
					AND (
						@STATUS_FILTER    IS NULL
						OR (
								(@STATUS_FILTER    = 'Today' AND CONVERT(DATE, T_HDR.completion_date) = CONVERT(DATE, GETDATE()))
								OR (@STATUS_FILTER    = 'Overdue' AND T_HDR.completion_date < GETDATE())
								OR (@STATUS_FILTER    = 'Next 3 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 3, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 7 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 2 Weeks' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 14, GETDATE()))
								OR (@STATUS_FILTER    = 'Next Month' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(MONTH, 1, GETDATE()))
								OR (@STATUS_FILTER    = 'Review' AND T_HDR.status IN ('CANCEL INITIATED', 'CLOSE INITIATED'))
							)
						)
            ORDER  BY creation_date DESC;
        END

      IF( @FILTER = 'CANCELCLOSE' )
        BEGIN
            SELECT T_HDR.mkey,
                   Isnull(TMST.type_desc, 'NA')
                   CATEGORY
                   ,
                   T_HDR.task_no,
                   dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))
                   CREATOR,
                   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))
                   RESPONSIBLE,
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
                   ACTIONABLE,
                   T_HDR.creation_date,
                   CASE
                     WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'
                     WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status IN ( 'WORK IN PROGRESS',
                                            'CLOSE INITIATED',
                                            'CANCEL INITIATED',
                                            'RE-WORK' ) THEN 'In Progress'
                     WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN
                     'Completed'
                     ELSE 'Others'
                   END                                                    AS
                   Dashboard_Status,
                   CONVERT(VARCHAR, T_HDR.completion_date, 103)           AS
                   COMPLETION_DATE
                   ,
                   dbo.[Initcap](T_HDR.task_name)                         AS
                   TASK_NAME,
                   T_HDR.task_description,
                   T_HDR.tags,
                   dbo.[Initcap](T_HDR.status)                            AS
                   STATUS,
                   CASE
                     WHEN Isnull(CREATOR.first_name, 'NA') !=
                          Isnull(RESPONSIBLE.first_name, 'NA')
                   THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   + ' > '
                   + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA'))
                     ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   END                                                    AS
                   RESPONSIBLE_TAG
                   ,
                   dbo.[Initcap](Isnull(PMST.type_desc, ''))              AS
                   PROJECT_NAME,
                   dbo.Tasknamestring(T_HDR.mkey)                         AS
                   TASK_HISTORY,
                   Isnull(Rtrim(T_HDR.[priority]), '')                    AS
                   [Priority],
                   Isnull(T_HDR.percent_complete, '0')                    AS
                   Progress_Percentage,
                   Isnull(parent_counts.parenttaskcount, 0)               AS
                   SubTask_Count,
				   T_HDR.CREATED_BY
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by
                             AND CREATOR.delete_flag = 'N'
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to
                             AND RESPONSIBLE.delete_flag = 'N'
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
                             AND ACTIONABLE.delete_flag = 'N'
                   --LEFT JOIN v_category CATEGORY
                   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
                   LEFT JOIN type_mst TMST
                          ON TMST.master_mkey = T_HDR.caregory
                             AND TMST.type_code = 'CATEGORY'
                             AND TMST.delete_flag = 'N'
                   --LEFT JOIN v_project PROJ
                   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
                   LEFT JOIN type_mst PMST
                          ON PMST.master_mkey = T_HDR.project_id
                             AND PMST.type_code = 'PROJECT'
                             AND PMST.delete_flag = 'N'
                   LEFT JOIN (SELECT task_parent_id,
                                     Count(*) AS ParentTaskCount
                              FROM   task_hdr
                              WHERE  task_parent_id IS NOT NULL
                                     AND mkey NOT IN ( task_parent_id )
                                     AND delete_flag = 'N'
                              GROUP  BY task_parent_id) parent_counts
                          ON T_HDR.mkey = parent_counts.task_parent_id
            WHERE  ( T_HDR.created_by = @CURRENT_EMP_MKEY
                      OR T_HDR.resposible_emp_mkey = @CURRENT_EMP_MKEY )
                   AND T_HDR.status IN ( 'CANCEL', 'CANCELLED' )
                   AND T_HDR.delete_flag = 'N'
				   AND (
						@STATUS_FILTER    IS NULL
						OR (
								(@STATUS_FILTER    = 'Today' AND CONVERT(DATE, T_HDR.completion_date) = CONVERT(DATE, GETDATE()))
								OR (@STATUS_FILTER    = 'Overdue' AND T_HDR.completion_date < GETDATE())
								OR (@STATUS_FILTER    = 'Next 3 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 3, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 7 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 2 Weeks' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 14, GETDATE()))
								OR (@STATUS_FILTER    = 'Next Month' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(MONTH, 1, GETDATE()))
								OR (@STATUS_FILTER    = 'Review' AND T_HDR.status IN ('CANCEL INITIATED', 'CLOSE INITIATED'))
							)
						)
            ORDER  BY creation_date DESC;
        END
		--SELECT  T_HDR.MKEY,T_HDR.TASK_NO,T_HDR.CREATION_DATE,T_HDR.TASK_NAME,T_HDR.TASK_DESCRIPTION,E_MST.EMP_FULL_NAME,T_HDR.TAGS,T_HDR.STATUS FROM TASK_HDR  T_HDR  
      --INNER JOIN EMPLOYEE_MST E_MST ON E_MST.MKEY= T_HDR.ASSIGNED_TO  
      --  IF( @FILTER = NULL
      --       OR @FILTER = '' )
      --    BEGIN
      --SELECT T_HDR.mkey,
      --   Isnull(TMST.type_desc, 'NA')                           AS
      --               CATEGORY,
      --               T_HDR.task_no,
      --               dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))     AS
      --               CREATOR,
      --               dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA')) AS
      --               RESPONSIBLE
      --               ,
      --               dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))  AS
      --               ACTIONABLE,
      --               T_HDR.creation_date,
      --               CASE
      --                 WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'
      --                 WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN
      --                 'Not Started'
      --                 WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN
      --                 'Not Started'
      --                 WHEN T_HDR.status IN ( 'WORK IN PROGRESS',
      --                                        'CLOSE INITIATED',
      --                                        'CANCEL INITIATED',
      --                                        'RE-WORK' ) THEN 'In Progress'
      --                 WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN
      --                 'Completed'
      --                 ELSE 'Others'
      --               END                                                    AS
      --               Dashboard_Status,
      --               CONVERT(VARCHAR, T_HDR.completion_date, 103)           AS
      --               COMPLETION_DATE
      --               ,
      --               dbo.[Initcap](T_HDR.task_name)                         AS
      --               TASK_NAME,
      --               T_HDR.task_description,
      --               T_HDR.tags,
      --               dbo.[Initcap](T_HDR.status)                            AS
      --               STATUS,
      --               CASE
      --                 WHEN Isnull(CREATOR.first_name, 'NA') !=
      --                      Isnull(RESPONSIBLE.first_name, 'NA')
      --               THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
      --               + ' > '
      --               + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA'))
      --                 ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
      --               END                                                    AS
      --               RESPONSIBLE_TAG
      --               ,
      --               dbo.[Initcap](Isnull(PMST.type_desc, ''))              AS
      --               PROJECT_NAME,
      --               dbo.Tasknamestring(T_HDR.mkey)                         AS
      --               TASK_HISTORY,
      --               Isnull(Rtrim(T_HDR.[priority]), '')                    AS
      --               [Priority],
      --               Isnull(T_HDR.percent_complete, '0')                    AS
      --               Progress_Percentage,
      --               Isnull(parent_counts.parenttaskcount, 0)               AS
      --               SubTask_Count
      --        FROM   task_hdr T_HDR
      --               LEFT JOIN employee_mst CREATOR
      --                      ON CREATOR.mkey = T_HDR.created_by
      --                         AND CREATOR.delete_flag = 'N'
      --               LEFT JOIN employee_mst RESPONSIBLE
      --                      ON RESPONSIBLE.mkey = T_HDR.assigned_to
      --                         AND RESPONSIBLE.delete_flag = 'N'
      --               LEFT JOIN employee_mst ACTIONABLE
      --                      ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
      --                         AND ACTIONABLE.delete_flag = 'N'
      --               --LEFT JOIN v_category CATEGORY
      --               --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
      --               LEFT JOIN type_mst TMST
      --                      ON TMST.master_mkey = T_HDR.caregory
      --                         AND TMST.type_code = 'CATEGORY'
      --                         AND TMST.delete_flag = 'N'
      --               --LEFT JOIN v_project PROJ
      --               --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
      --               LEFT JOIN type_mst PMST
      --                      ON PMST.master_mkey = T_HDR.project_id
      --                         AND PMST.type_code = 'PROJECT'
      --                         AND PMST.delete_flag = 'N'
      --               LEFT JOIN (SELECT task_parent_id,
      --                                 Count(*) AS ParentTaskCount
      --                          FROM   task_hdr
      --                          WHERE  task_parent_id IS NOT NULL
      --                                 AND mkey NOT IN ( task_parent_id )
      --                                 AND delete_flag = 'N'
      --                          GROUP  BY task_parent_id) parent_counts
      --                      ON T_HDR.mkey = parent_counts.task_parent_id
      --        WHERE  T_HDR.resposible_emp_mkey = @CURRENT_EMP_MKEY
      --                OR T_HDR.created_by = @CURRENT_EMP_MKEY
      --                OR T_HDR.assigned_to = @CURRENT_EMP_MKEY
      --                   AND T_HDR.delete_flag = 'N'
      --        ORDER  BY T_HDR.creation_date DESC;
      --    END
      --  ELSE
      --    BEGIN
      
      -- END
      EXEC Sp_dashboard_count   @CURRENT_EMP_MKEY
  --EXEC Sp_dashboard_count
  --       @CURRENT_EMP_MKEY
  --SELECT
  --      T_HDR.mkey,
  --      Isnull(CATEGORY.type_desc, 'NA')                       CATEGORY,
  --      T_HDR.task_no,
  --      dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))     CREATOR,
  --      dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA')) RESPONSIBLE,
  --      dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))  ACTIONABLE,
  --      T_HDR.creation_date,
  --'' as Dashboard_Status,
  --      CONVERT(VARCHAR, T_HDR.completion_date, 103)           COMPLETION_DATE,
  --      dbo.[Initcap](T_HDR.task_name)                         TASK_NAME,
  --      T_HDR.task_description,
  --      T_HDR.tags,
  --      dbo.[Initcap](T_HDR.status)                            STATUS,
  --      CASE
  --        WHEN Isnull(CREATOR.first_name, 'NA') !=
  --             Isnull(RESPONSIBLE.first_name, 'NA')
  --      THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
  --      + ' > '
  --      + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA') )
  --        ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
  --      END
  --      RESPONSIBLE_TAG,
  --      dbo.[Initcap](Isnull(PROJ.type_desc, ''))              PROJECT_NAME,
  --      dbo.Tasknamestring(T_HDR.mkey)                         AS
  --      'TASK_HISTORY'
  --,isnull(RTRIM(T_HDR.[Priority]),'') as [Priority]
  ----,ISNULL(T_HDR.Percent_Complete,'1212') AS Percent_Complete
  --,isnull(T_HDR.Percent_Complete,'0') as Progress_Percentage
  --,'2' as SubTask_Count
  --          FROM   task_hdr T_HDR
  --                 LEFT JOIN employee_mst CREATOR
  --                        ON CREATOR.mkey = T_HDR.created_by
  --                 LEFT JOIN employee_mst RESPONSIBLE
  --                        ON RESPONSIBLE.mkey = T_HDR.assigned_to
  --                 LEFT JOIN employee_mst ACTIONABLE
  --                        ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
  --                 LEFT JOIN v_category CATEGORY
  --                        ON CATEGORY.mkey = T_HDR.caregory
  --                 LEFT JOIN v_project PROJ
  --                        ON T_HDR.project_id = PROJ.master_mkey
  --          WHERE  (
  --                 T_HDR.resposible_emp_mkey = @CURRENT_EMP_MKEY )
  --          ORDER  BY creation_date DESC
  END 



GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_DASHBOARD_NT]    Script Date: 26-05-2025 12:32:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--  EXEC SP_TASK_DASHBOARD_NT 926,null,'Default',null,null,926,1
--  EXEC SP_TASK_DASHBOARD_NT 926,null,null
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT',''
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next 7 Days'
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next 2 Weeks'
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next Month'
--  EXEC SP_TASK_DASHBOARD_NT 926,'ALLOCATEDBYME','Review'
ALTER PROCEDURE [dbo].[SP_TASK_DASHBOARD_NT] (@CURRENT_EMP_MKEY  INT,
                                              @STATUS_FILTER     NVARCHAR(max) = NULL,--'Today,Completed,Overdue,Pending,Cancelled,Future,Review',
                                              @USER_FILTER       VARCHAR(max) =NULL,--'ALLOCATEDBYME,ALLOCATEDTOME,COMPLETEDBYME,COMPLETEDFORME,CANCELCLOSE',
                                              @PriorityFilter    VARCHAR(max) =NULL,--'High,Medium,Low',
                                              @TypeFilter        VARCHAR(max) =NULL,--'RECURRING,APPROVAL,COMPLIANCE,APPROVAL,GENERAL,SYSTEM,EMAIL,RERA COMPLAIN';
                                              @Session_User_Id   INT,
                                              @Business_Group_Id INT)
AS
  BEGIN
      DECLARE @DAY INT

      SET @DAY=0

      --DECLARE @STATUS_FILTER VARCHAR(max) = null,-- 'Today,Completed,Overdue,Pending,Cancelled,Future,Review',
      --     @USER_FILTER   VARCHAR(max) = null,--'ALLOCATEDBYME,ALLOCATEDTOME,COMPLETEDBYME,COMPLETEDFORME,CANCELCLOSE',
      --     @PriorityFilter VARCHAR(max) = null,--'High,Medium,Low',
      --     @TypeFilter VARCHAR(max) = null--'RECURRING,APPROVAL,COMPLIANCE,APPROVAL,GENERAL,SYSTEM,EMAIL,RERA COMPLAIN';
      DECLARE @sql NVARCHAR(max) = '';
      DECLARE @start INT = 1,
              @end   INT;
      DECLARE @hasWhereClause BIT = 0;
      DECLARE @WhereClause    NVARCHAR(max) = '',
              @filter         VARCHAR(100),
              @PriorityClause NVARCHAR(max) = '',
              @TypeClause     NVARCHAR(max) = '',
              @TaskTypeMkey   NVARCHAR(50),
              @STATUSClause   NVARCHAR(max) = ''

      SET @sql ='SELECT  '''' as Sr_No, T_HDR.mkey,Isnull(TMST.type_desc, ''NA'') CATEGORY,T_HDR.task_no,dbo.[Initcap](Isnull(CREATOR.emp_full_name, ''NA'')) CREATOR,
	  dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, ''NA'')) RESPONSIBLE,
	  dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, ''NA'')) ACTIONABLE,
	  T_HDR.creation_date,                    
	  CASE                      
	  WHEN T_HDR.status IN ( ''CREATED'' ) THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUB TASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUBTASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status IN ( ''WORK IN PROGRESS'', ''CLOSE INITIATED'', ''CANCEL INITIATED'', ''RE-WORK'' ) THEN ''In Progress''                      
	  WHEN T_HDR.status IN ( ''CLOSE'', ''COMPLETED'' ) THEN ''Completed''                      ELSE ''Others''                    END AS Dashboard_Status, 
	  CONVERT(VARCHAR, T_HDR.completion_date, 103) AS COMPLETION_DATE,                    
	  dbo.[Initcap](T_HDR.task_name) AS TASK_NAME,                    
	  T_HDR.task_description,                    
	  T_HDR.tags,                    
	  dbo.[Initcap](T_HDR.status) AS STATUS,                   
	  CASE                      
	  WHEN Isnull(CREATOR.first_name, ''NA'') != Isnull(RESPONSIBLE.first_name, ''NA'') 
	  THEN dbo.[Initcap](Isnull(CREATOR.first_name, ''NA'')) + '' > '' + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, ''NA''))                      
	  ELSE dbo.[Initcap](Isnull(CREATOR.first_name, ''NA''))                    
	  END AS RESPONSIBLE_TAG,                   
	  dbo.[Initcap](Isnull(PMST.type_desc, '''')) AS PROJECT_NAME,                    
	  dbo.Tasknamestring(T_HDR.mkey) AS TASK_HISTORY,                    
	  Isnull(Rtrim(T_HDR.[priority]), '''') AS [Priority],                    
	  Isnull(T_HDR.percent_complete, ''0'') AS Progress_Percentage,                    
	  Isnull(parent_counts.parenttaskcount, 0) AS SubTask_Count,                    
	  T_HDR.CREATED_BY             
	  FROM task_hdr T_HDR             
	  LEFT JOIN employee_mst CREATOR ON CREATOR.mkey = T_HDR.created_by AND CREATOR.delete_flag = ''N''             
	  LEFT JOIN employee_mst RESPONSIBLE ON RESPONSIBLE.mkey = T_HDR.assigned_to AND RESPONSIBLE.delete_flag = ''N''             
	  LEFT JOIN employee_mst ACTIONABLE ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey AND ACTIONABLE.delete_flag = ''N''            
	  LEFT JOIN type_mst TMST ON TMST.master_mkey = T_HDR.caregory AND TMST.type_code = ''CATEGORY'' AND TMST.delete_flag = ''N''             
	  LEFT JOIN type_mst PMST ON PMST.master_mkey = T_HDR.project_id AND PMST.type_code = ''PROJECT'' AND PMST.delete_flag = ''N''             
	  LEFT JOIN (SELECT task_parent_id, Count(*) AS ParentTaskCount                        
	  FROM task_hdr WHERE task_parent_id IS NOT NULL AND mkey NOT IN (task_parent_id) AND delete_flag = ''N''                        
	  GROUP BY task_parent_id) parent_counts ON T_HDR.mkey = parent_counts.task_parent_id             
	  WHERE Isnull(T_HDR.status_flag, ''A'') IN (''A'') AND T_HDR.delete_flag = ''N'' ';

    PRINT '@USER_FILTER: ' + @USER_FILTER + ' Val ';

    /* @USER_FILTER */
    IF ( @USER_FILTER <> '' AND @USER_FILTER IS NOT NULL ) -- @USER_FILTER is not null OR
      BEGIN
          WHILE @start <= Len(@USER_FILTER)
            BEGIN
                SET @end = Charindex(',', @USER_FILTER, @start);

                IF @end = 0
                  SET @end = Len(@USER_FILTER) + 1;

                SET @filter = Ltrim(Rtrim(Substring(@USER_FILTER, @start, @end - @start)));

				
                IF @filter = 'Default'
                  BEGIN
				  print 'def 1'
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @sql += ' OR ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' ) ';
                        END
						PRINT '@WhereClause:Default: ' + @WhereClause;
                  END

                IF @filter = 'ALLOCATEDBYME' 
                  BEGIN
				  print 'allo 2'
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.created_by = '
                                                + CONVERT(NVARCHAR,
                                                @CURRENT_EMP_MKEY)
                                                +
                                                ' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @WhereClause += ' OR ( T_HDR.created_by = '
                                        + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +
                                        ' ) '
                            ;
                        END
						PRINT '@WhereClause:ALLOCATEDBYME: ' + @WhereClause;
                  END

                IF @filter = 'ALLOCATEDTOME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            PRINT 'ALLOCATEDTOME1'

                            SET @WhereClause +=
                            ' ( CONVERT(int,T_HDR.assigned_to) = '
                            + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                            + ' OR T_HDR.resposible_emp_mkey = '
                            + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                            +
                            ')'
                            ;
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                        SET @WhereClause +=
                        ' OR ( CONVERT(int,T_HDR.assigned_to) = '
                        + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' OR T_HDR.resposible_emp_mkey = '
                        + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +
                        ')';
                  END

                IF @filter = 'COMPLETEDBYME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause +=
                            ' ( CONVERT(int,T_HDR.assigned_to) = '
                            + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                            +
                            ' AND T_HDR.status IN (''COMPLETED''))';
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause +=
                        ' OR ( CONVERT(int,T_HDR.assigned_to) = '
                        + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'COMPLETEDFORME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @WhereClause += ' ( T_HDR.created_by = '
                                                + CONVERT(NVARCHAR,
                                                @CURRENT_EMP_MKEY)
                                                +
                            ' AND CONVERT(int,T_HDR.assigned_to) != '
                                                + CONVERT(NVARCHAR,
                                                @CURRENT_EMP_MKEY)
                                                +
                            ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause += ' OR ( T_HDR.created_by = '
                                            + CONVERT(NVARCHAR,
                                            @CURRENT_EMP_MKEY)
                                            +
                        ' AND CONVERT(int,T_HDR.assigned_to) != '
                                            + CONVERT(NVARCHAR,
                                            @CURRENT_EMP_MKEY)
                                            +
                        ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'CANCELCLOSE'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' ( T_HDR.created_by = '
                                                + CONVERT(NVARCHAR,
                                                @CURRENT_EMP_MKEY)
                                                +
                            ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
                        SET @WhereClause += ' OR ( T_HDR.created_by = '
                                            + CONVERT(NVARCHAR,
                                            @CURRENT_EMP_MKEY)
                                            +
                        ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'') ) ';
                  --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                  END
				
                SET @start = @end + 1;
            END
			
			SET @sql += ' AND ( ' + @WhereClause + ' ) ';
			
      END
    ELSE IF( @USER_FILTER IS NULL OR @USER_FILTER = 'Default'  OR @USER_FILTER = '' )
      BEGIN
         SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = '
                              + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
          SET @STATUSClause = 1;
          SET @sql += ' AND ( ' + @WhereClause + ' ) ';
      END

    -----------------------------------------------------------------------------------------------------
    /* @PriorityFilter */
    IF ( @PriorityFilter IS NOT NULL
         AND @PriorityFilter <> '' )
      BEGIN
          SET @start = 1;
          SET @hasWhereClause = 0;

          WHILE @start <= Len(@PriorityFilter)
            BEGIN
                SET @end = Charindex(',', @PriorityFilter, @start);

                IF @end = 0
                  SET @end = Len(@PriorityFilter) + 1;

                SET @filter = Ltrim(Rtrim(Substring(@PriorityFilter, @start,
                                          @end
                                          - @start
                                          ))
                              );

                -- Append the priority condition
                IF @filter = 'High'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                            SET @PriorityClause +=
                            ' (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                        SET @PriorityClause +=
                        ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')'
                      ;
                  END

                IF @filter = 'Low'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                            SET @PriorityClause +=
                            ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')'
                            ;
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                        SET @PriorityClause +=
                        ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
                  END

                IF @filter = 'Medium'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                            SET @PriorityClause +=
                            ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                        SET @PriorityClause +=
                        ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'''
                      ;
                  END

                SET @start = @end + 1;
            END

          SET @sql += ' AND ( ' + @PriorityClause + ' ) ';
      END

    -----------------------------------------------------------------------------------------------------
    /* @TypeFilter */
    IF ( @TypeFilter IS NOT NULL
         AND @TypeFilter <> '' )
      BEGIN
          SET @start = 1;
          SET @hasWhereClause = 0;

          WHILE @start <= Len(@TypeFilter)
            BEGIN
                SET @end = Charindex(',', @TypeFilter, @start);

                IF @end = 0
                  SET @end = Len(@TypeFilter) + 1;

                SET @filter = Ltrim(Rtrim(Substring(@TypeFilter, @start, @end
                                          - @start
                                          )));

                IF @filter = 'RECURRING'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey
                                               +
                                               ') '
                            ;
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +
                                           ') ';
                  END

                IF @filter = 'Approval'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey
                                               +
                                               ') '
                            ;
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +
                                           ') ';
                  END

                IF @filter = 'COMPLIANCE'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey
                                               +
                                               ') '
                            ;
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +
                                           ') ';
                  END

                IF @filter = 'GENERAL'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey
                                               +
                                               ') '
                            ;
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +
                                           ') ';
                  END

                IF @filter = 'SYSTEM'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey
                                               +
                                               ') '
                            ;
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +
                                           ') ';
                  END

                IF @filter = 'Email'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey
                                               +
                                               ') '
                            ;
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +
                                           ') ';
                  END

                IF @filter = 'RERA COMPLAIN'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey
                                               +
                                               ') '
                            ;
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +
                                           ') ';
                  END

                SET @start = @end + 1;
            END

          SET @sql += ' AND ( ' + @TypeClause + ' ) ';
      END

    -----------------------------------------------------------------------------------------------------
    /* @STATUS_FILTER */
    IF ( @STATUS_FILTER IS NOT NULL
         AND @STATUS_FILTER <> '' )
      BEGIN
          SET @start = 1;
          SET @hasWhereClause = 0;

          WHILE @start <= Len(@STATUS_FILTER)
            BEGIN
                SET @end = Charindex(',', @STATUS_FILTER, @start);

                IF @end = 0
                  SET @end = Len(@STATUS_FILTER) + 1;

                SET @filter = Ltrim(Rtrim(Substring(@STATUS_FILTER, @start, @end
                                          - @start)
                                    ))
                ;

                IF @filter = 'Today'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @STATUSClause += ' (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
							SET @hasWhereClause = 1;
            END
          ELSE
							SET @STATUSClause += ' OR (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) 
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
				END

                IF @filter = 'Pending'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @STATUSClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
												and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
							SET @hasWhereClause = 1;
						END
						ELSE
							SET @STATUSClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
													and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
						END

						IF @filter = 'Overdue'
							BEGIN
								IF @hasWhereClause = 0
								BEGIN
									SET @STATUSClause +=' (T_HDR.completion_date < GETDATE() 
															AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
									SET @hasWhereClause = 1;
								END
								ELSE
									SET @STATUSClause += ' OR (T_HDR.completion_date < GETDATE() 
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
							END

							IF @filter = 'Future'
							BEGIN
								IF @hasWhereClause = 0
								BEGIN
									SET @STATUSClause += ' (T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
															and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
								SET @hasWhereClause = 1;
								END
								ELSE
									SET @STATUSClause += ' OR ((T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
															and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103)) ';
							END

							IF @filter = 'Review'
							BEGIN
								IF @hasWhereClause = 0
								BEGIN
									SET @STATUSClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
									SET @hasWhereClause = 1;
								END
								ELSE
									SET @STATUSClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
							END

							IF @filter = 'Completed'
							BEGIN
								IF @hasWhereClause = 0
								BEGIN
									SET @STATUSClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
									SET @hasWhereClause = 1;
								END
								ELSE
									SET @TypeClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
							END

							IF @filter = 'Cancelled'
							BEGIN
								IF @hasWhereClause = 0
								BEGIN
									SET @STATUSClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
									SET @hasWhereClause = 1;
								END
								ELSE
									SET @STATUSClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
							END

							SET @start = @end + 1;
						END

							SET @sql += ' AND ( ' + @STATUSClause + ' ) ';
						END
					PRINT @sql;

    --print len(@sql)
    EXEC Sp_executesql @sql;

    EXEC Sp_dashboard_count @CURRENT_EMP_MKEY;
END

---------------------------------------------------------------------------------------------------------------------------------------------------




GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_DETAILS_BY_MKEY_NT]    Script Date: 26-05-2025 13:17:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	exec SP_TASK_DETAILS_BY_MKEY_NT 845,937,0
ALTER procedure [dbo].[SP_TASK_DETAILS_BY_MKEY_NT](@HDR_MKEY VARCHAR(250),@Session_User_Id          INT = null,  
@Business_Group_Id	  INT = null)
AS
  BEGIN
      DECLARE @DAY INT

      SET @DAY=0

      SELECT T_HDR.mkey,
             T_HDR.task_no,
             T_HDR.isnode,
             T_HDR.task_parent_id,
             T_HDR.task_main_node_id,
			 T_HDR.Task_Type,
             T_HDR.status,
             T_HDR.status_perc,
             T_HDR.task_created_by,
             T_HDR.approver_id,
             T_HDR.approve_action_date,
			 T_HDR.ASSIGNED_TO,
			 E_MST.EMP_FULL_NAME			AS 'Assigned_To_Name',
             T_MST.type_desc                           CAREGORY,
             T_HDR.project_id                          PROJECT_MKEY,
			 T_HDR.sub_project_id                    AS BUILDING_MKEY,
             P_MST.type_desc                           'PROJECT',
			 P_MST.type_desc                           'Project_Name',
             S_P_MST.type_desc                         'Sub_PROJECT',
			 S_P_MST.type_desc						AS 'Building_Name',
             T_HDR.caregory                            CATEGORY_MKEY,
             T_HDR.creation_date,
             T_HDR.task_name,
             T_HDR.task_description,
             E_MST.emp_full_name,
			 
			 case when T_HDR.TASK_CREATED_BY = @Session_User_Id --When Task owner created the task /* Inside Task Owner login*/
			 and T_HDR.STATUS in ('CREATED','SUB TASK CREATED','WORK IN PROGRESS') and T_HDR.STATUS_PERC = 0.0 then 'Y'  /*Task owner created the task and 
			 it is currently on created status and progress is 0%  then all tabs are enabled for task owner and task owner can add tabs list like Checklist, Authority,
			 Outcome and Compliance via remark but with 0%  progress and WIP status update.  Otherwise any progress between 0% to 100%  
			 with WIP status will lead to disable all tabs for task owner.*/ 
			 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id) --When Task owner created the task /* Inside assignee login */
			 and T_HDR.STATUS_PERC = 0.0  /* Inside assignee login also all tabs are enabled because progress % is 0, however when assignee change 
			 the progress percent % between 0% to 100% then tabs are disabled for the task owner,but enabled at the assignee side. Assignee can able to update all tabs  */
			 and T_HDR.STATUS in ('CREATED','SUB TASK CREATED','WORK IN PROGRESS') Then 'Y'  
			 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 /*When Assignee change to close initiate(100%) */
							-- Inside assignee login 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id) 
			 and T_HDR.STATUS_PERC = 100.0 
			 and  T_HDR.STATUS in ('CLOSE INITIATED')  then 'N'/* If an assignee changes the status to cancel initiate or close initiate 
			 it means progress % is whether 0% or 100% so, in this scenario all tabs are disabled to the assignee side. Assignee will never change any of tab/s 
			 and inside the task owner log in all tabs are enabled for the task owner. Task owner can update all tabs. */
			 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id)/* When Assignee change to  cancel initiate (0%) Inside assignee login */
			 and T_HDR.STATUS in ('CANCEL INITIATED')  then 'N' /* If an assignee changes the status to cancel initiate or close initiate 
			 it means progress % is whether 0% or 100% so, in this scenario all tabs are disabled to the assignee side. Assignee will never change any of tab/s 
			 and inside the task owner log in all tabs are enabled for the task owner. Task owner can update all tabs. */

			 /*When Assignee change to close initiate(100%) or cancel initiate (0%) */
			  --Inside Task Owner login 
			 when  T_HDR.TASK_CREATED_BY = @Session_User_Id	 
			 and T_HDR.STATUS_PERC between 0.0 and 100.0 and T_HDR.STATUS in ('CLOSE INITIATED','CANCEL INITIATED')  then 'Y' 
			 /* Now inside task owner log in all tabs are enabled and task owner can do all changes in tabs and the status which are visible 
			 to the task owner is Cancel or Close and Re-work as per the assignee action if assignee triggered Close initiate then task owner can see 
			 the Close or if Cancel Initiate is triggered by the assignee then task owner can see Cancel and re-work is by default */
			 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 /*When Task owner change status to re-work  */
			 ---Inside Task Owner login
			 WHEN  T_HDR.TASK_CREATED_BY= @Session_User_Id	
			 and T_HDR.STATUS in ('RE-WORK')  then 'N' /*-- When task owner change status to re-work instead of Close or Cancel then all tabs are disabled 
														at task owner side now task owner is not able to do any changes inside any tab.*/
			 /* When Task owner change status to re-work */
			 --- Inside assignee login
			 WHEN  (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id) 
			 and T_HDR.STATUS in ('RE-WORK')  then 'Y' /* When the task owner gives a task to re-work to the assignee then status will change to re-work for the assignee 
														 and now all tabs are enabled for assignee and can do any changes inside any tab.*/
	 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 WHEN  (T_HDR.TASK_CREATED_BY = @Session_User_Id) or (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id)
			 and T_HDR.STATUS in ('CANCEL','CANCELLED','CLOSE')  then 'N' /* When task owner can do Cancel or Close instead of re-work 
																			 then all tabs are disabled for task owner as well as assignee */
 ---------------------------------------------------------------------------------------------------------------------------------------------------
			WHEN  (T_HDR.TASK_CREATED_BY = @Session_User_Id) and (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id)
			 and T_HDR.STATUS not in ('CANCEL','CANCELLED','CLOSE')  then 'Y' /* When Task Owner and Assignee are same then enabled  */
---------------------------------------------------------------------------------------------------------------------------------------------------
			 ELSE 'N'
			 end as 'Process_Flag',
             T_HDR.tags,
             CONVERT(VARCHAR(10), completion_date, 120)COMPLETION_DATE,
             --Isnull(file_name, '')                     [FILE_NAME],
             --Isnull(file_path, '')                     FILE_PATH,
             T_HDR.resposible_emp_mkey
			,ISNULL(RTrim(T_HDR.Priority),'') AS [Priority] 
			,ISNULL(CONVERT(NVARCHAR(20), T_HDR.Tentative_Start_Date),null) AS Tentative_Start_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Tentative_End_Date),null) AS Tentative_End_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Actual_Start_Date),null) AS Actual_Start_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Actual_End_Date),null) AS Actual_End_Date
      FROM   task_hdr T_HDR
             JOIN employee_mst E_MST
               ON E_MST.mkey = T_HDR.assigned_to
             LEFT JOIN type_mst T_MST
                    ON T_MST.master_mkey = T_HDR.caregory
             --AND T_MST.TYPE_CODE='CATEGORY'
             LEFT JOIN type_mst P_MST
                    ON P_MST.master_mkey = T_HDR.project_id
             LEFT JOIN type_mst S_P_MST
                    ON S_P_MST.master_mkey = T_HDR.sub_project_id
             --LEFT JOIN task_media_trl T_MEDIA
             --       ON T_MEDIA.mkey = T_HDR.mkey
             --          AND T_MEDIA.delete_flag = 'N'
      WHERE  T_HDR.mkey = @HDR_MKEY
  END 
----------------------------------------------------------------------------------------------------------------------------------------



--  EXEC SP_TASK_DASHBOARD_NT 926,null,'Default',null,null,926,1
ALTER PROCEDURE [dbo].[SP_TASK_DASHBOARD_NT] (@CURRENT_EMP_MKEY  INT,
                                              @STATUS_FILTER     NVARCHAR(max) = NULL,--'Today,Completed,Overdue,Pending,Cancelled,Future,Review',
                                              @USER_FILTER       VARCHAR(max) =NULL,--'ALLOCATEDBYME,ALLOCATEDTOME,COMPLETEDBYME,COMPLETEDFORME,CANCELCLOSE',
                                              @PriorityFilter    VARCHAR(max) =NULL,--'High,Medium,Low',
                                              @TypeFilter        VARCHAR(max) =NULL,--'RECURRING,APPROVAL,COMPLIANCE,APPROVAL,GENERAL,SYSTEM,EMAIL,RERA COMPLAIN';
                                              @Session_User_Id   INT,
                                              @Business_Group_Id INT)
AS
  BEGIN
      DECLARE @DAY INT
      SET @DAY=0
      DECLARE @sql NVARCHAR(max) = '';
      DECLARE @start INT = 1,
              @end   INT;
      DECLARE @hasWhereClause BIT = 0;
      DECLARE @WhereClause    NVARCHAR(max) = '',
              @filter         VARCHAR(100),
              @PriorityClause NVARCHAR(max) = '',
              @TypeClause     NVARCHAR(max) = '',
              @TaskTypeMkey   NVARCHAR(50),
              @STATUSClause   NVARCHAR(max) = ''

	SET @sql ='SELECT  T_HDR.mkey as Sr_No, T_HDR.mkey,Isnull(TMST.type_desc, ''NA'') CATEGORY,T_HDR.task_no,dbo.[Initcap](Isnull(CREATOR.emp_full_name, ''NA'')) CREATOR,
	  dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, ''NA'')) RESPONSIBLE,
	  dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, ''NA'')) ACTIONABLE,
	  T_HDR.creation_date,                    
	  CASE                      
	  WHEN T_HDR.status IN ( ''CREATED'' ) THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUB TASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUBTASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status IN ( ''WORK IN PROGRESS'', ''CLOSE INITIATED'', ''CANCEL INITIATED'', ''RE-WORK'' ) THEN ''In Progress''                      
	  WHEN T_HDR.status IN ( ''CLOSE'', ''COMPLETED'' ) THEN ''Completed''                      ELSE ''Others''                    END AS Dashboard_Status, 
	  CONVERT(VARCHAR, T_HDR.completion_date, 103) AS COMPLETION_DATE,                    
	  dbo.[Initcap](T_HDR.task_name) AS TASK_NAME,                    
	  T_HDR.task_description,                    
	  T_HDR.tags,                    
	  dbo.[Initcap](T_HDR.status) AS STATUS,                   
	  CASE                      
	  WHEN Isnull(CREATOR.first_name, ''NA'') != Isnull(RESPONSIBLE.first_name, ''NA'') 
	  THEN dbo.[Initcap](Isnull(CREATOR.first_name, ''NA'')) + '' > '' + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, ''NA''))                      
	  ELSE dbo.[Initcap](Isnull(CREATOR.first_name, ''NA''))                    
	  END AS RESPONSIBLE_TAG,                   
	  dbo.[Initcap](Isnull(PMST.type_desc, '''')) AS PROJECT_NAME,                    
	  dbo.Tasknamestring(T_HDR.mkey) AS TASK_HISTORY,                    
	  Isnull(Rtrim(T_HDR.[priority]), '''') AS [Priority],                    
	  Isnull(T_HDR.percent_complete, ''0'') AS Progress_Percentage,                    
	  Isnull(parent_counts.parenttaskcount, 0) AS SubTask_Count,                    
	  T_HDR.CREATED_BY             
	  FROM task_hdr T_HDR             
	  LEFT JOIN employee_mst CREATOR ON CREATOR.mkey = T_HDR.created_by AND CREATOR.delete_flag = ''N''             
	  LEFT JOIN employee_mst RESPONSIBLE ON RESPONSIBLE.mkey = T_HDR.assigned_to AND RESPONSIBLE.delete_flag = ''N''             
	  LEFT JOIN employee_mst ACTIONABLE ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey AND ACTIONABLE.delete_flag = ''N''            
	  LEFT JOIN type_mst TMST ON TMST.master_mkey = T_HDR.caregory AND TMST.type_code = ''CATEGORY'' AND TMST.delete_flag = ''N''             
	  LEFT JOIN type_mst PMST ON PMST.master_mkey = T_HDR.project_id AND PMST.type_code = ''PROJECT'' AND PMST.delete_flag = ''N''             
	  LEFT JOIN (SELECT task_parent_id, Count(*) AS ParentTaskCount                        
	  FROM task_hdr WHERE task_parent_id IS NOT NULL AND mkey NOT IN (task_parent_id) AND delete_flag = ''N''                        
	  GROUP BY task_parent_id) parent_counts ON T_HDR.mkey = parent_counts.task_parent_id             
	  WHERE Isnull(T_HDR.status_flag, ''A'') IN (''A'') AND T_HDR.delete_flag = ''N'' ';

	--PRINT '@USER_FILTER: ' + @USER_FILTER + ' Val ';

    /* @USER_FILTER */
    IF ( @USER_FILTER <> '' AND @USER_FILTER IS NOT NULL ) -- @USER_FILTER is not null OR
      BEGIN
          WHILE @start <= Len(@USER_FILTER)
            BEGIN
                SET @end = Charindex(',', @USER_FILTER, @start);
                IF @end = 0
                  SET @end = Len(@USER_FILTER) + 1;
                SET @filter = Ltrim(Rtrim(Substring(@USER_FILTER, @start, @end - @start)));
				
                IF @filter = 'Default'
                  BEGIN
				 -- print 'def 1'
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @sql += ' OR ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' ) ';
                        END
						--PRINT '@WhereClause:Default: ' + @WhereClause;
                  END

                IF @filter = 'ALLOCATEDBYME' 
                  BEGIN
				--  print 'allo 2'
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +' ) ';
                        END
                  END

                IF @filter = 'ALLOCATEDTOME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN

                            SET @WhereClause +=' ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+ 
							' OR T_HDR.resposible_emp_mkey = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+')';
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                        SET @WhereClause +=' OR ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +')';
                  END

                IF @filter = 'COMPLETEDBYME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' ( CONVERT(int,T_HDR.assigned_to) = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+
                            ' AND T_HDR.status IN (''COMPLETED''))';
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause += ' OR ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'COMPLETEDFORME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @WhereClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) +
                            ' AND CONVERT(int,T_HDR.assigned_to) != '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+' AND CONVERT(int,T_HDR.assigned_to) != '
                                            + CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+ ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'CANCELCLOSE'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' ( T_HDR.created_by = ' + CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) +
                            ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
                        SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+
                        ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'') ) ';
                  --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                  END
				
                SET @start = @end + 1;
            END
			
		
			SET @sql += ' AND ( ' + @WhereClause + ' ) ';
			
      END
    ELSE IF( @USER_FILTER IS NULL OR @USER_FILTER = 'Default'  OR @USER_FILTER = '' )
      BEGIN
         SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
          SET @hasWhereClause = 1;
          SET @sql += ' AND ( ' + @WhereClause + ' ) ';
      END
    -----------------------------------------------------------------------------------------------------
    /* @PriorityFilter */
    IF ( @PriorityFilter IS NOT NULL
         AND @PriorityFilter <> '' )
      BEGIN
          SET @start = 1;
          SET @hasWhereClause = 0;

          WHILE @start <= Len(@PriorityFilter)
            BEGIN
                SET @end = Charindex(',', @PriorityFilter, @start);

                IF @end = 0
                  SET @end = Len(@PriorityFilter) + 1;

                SET @filter = Ltrim(Rtrim(Substring(@PriorityFilter, @start,@end - @start )) );

                -- Append the priority condition
                IF @filter = 'High'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                            SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                        SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
                  END

                IF @filter = 'Low'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                            SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                        SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
						END

                IF @filter = 'Medium'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                            SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                        SET @PriorityClause += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                  END

                SET @start = @end + 1;
            END
			
			SET @sql += ' AND ( ' + @PriorityClause + ' ) ';
      END

    -----------------------------------------------------------------------------------------------------
    /* @TypeFilter */
    IF ( @TypeFilter IS NOT NULL
         AND @TypeFilter <> '' )
      BEGIN
          SET @start = 1;
          SET @hasWhereClause = 0;

          WHILE @start <= Len(@TypeFilter)
            BEGIN
                SET @end = Charindex(',', @TypeFilter, @start);

                IF @end = 0
                  SET @end = Len(@TypeFilter) + 1;

                SET @filter = Ltrim(Rtrim(Substring(@TypeFilter, @start, @end - @start)));

                IF @filter = 'RECURRING'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'Approval'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'COMPLIANCE'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') '
                            ;
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'GENERAL'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'SYSTEM'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
                  END

                IF @filter = 'Email'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'RERA COMPLAIN'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
                  END

                SET @start = @end + 1;
            END

          SET @sql += ' AND ( ' + @TypeClause + ' ) ';
      END

    -----------------------------------------------------------------------------------------------------
    /* @STATUS_FILTER */
    IF ( @STATUS_FILTER IS NOT NULL
         AND @STATUS_FILTER <> '' )
      BEGIN
          SET @start = 1;
          SET @hasWhereClause = 0;

			WHILE @start <= Len(@STATUS_FILTER)
            BEGIN
                SET @end = Charindex(',', @STATUS_FILTER, @start);

                IF @end = 0
                  SET @end = Len(@STATUS_FILTER) + 1;

                SET @filter = Ltrim(Rtrim(Substring(@STATUS_FILTER, @start, @end - @start)));

				IF @filter = 'Today'
				BEGIN
				print '@filter = Today';
					IF @hasWhereClause = 0
                        BEGIN
                            SET @STATUSClause += ' (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
							SET @hasWhereClause = 1;
							print 'today 12';
						END
						ELSE
							begin
							SET @STATUSClause += ' OR (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) 
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
							print 'today 56';
							end
				END

				IF @filter = 'Pending'
				BEGIN
					IF @hasWhereClause = 0
					BEGIN
						SET @STATUSClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
												and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
						SET @hasWhereClause = 1;
					END
				ELSE
					SET @STATUSClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
											and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
				END

				IF @filter = 'Overdue'
				BEGIN
					IF @hasWhereClause = 0
					BEGIN
						SET @STATUSClause +=' (T_HDR.completion_date < GETDATE() 
											AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
						SET @hasWhereClause = 1;
					END
				ELSE
					SET @STATUSClause += ' OR (T_HDR.completion_date < GETDATE() 
											AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
				END

				IF @filter = 'Future'
				BEGIN
					IF @hasWhereClause = 0
					BEGIN
						SET @STATUSClause += ' (T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
											and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
						SET @hasWhereClause = 1;
					END
				ELSE
						SET @STATUSClause += ' OR ((T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
										and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103)) ';
				END

				IF @filter = 'Review'
				BEGIN
					IF @hasWhereClause = 0
					BEGIN
						SET @STATUSClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
						SET @hasWhereClause = 1;
					END
					ELSE
						SET @STATUSClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
				END

				IF @filter = 'Completed'
				BEGIN
					IF @hasWhereClause = 0
					BEGIN
						SET @STATUSClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
						SET @hasWhereClause = 1;
					END
				ELSE
						SET @TypeClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
				END

				IF @filter = 'Cancelled'
				BEGIN
					IF @hasWhereClause = 0
					BEGIN
						SET @STATUSClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
						SET @hasWhereClause = 1;
					END
					ELSE
						SET @STATUSClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
				END

				SET @start = @end + 1;
			END
					if(@STATUSClause is not null )
					begin
						print '@STATUSClause:dgdf '+ @STATUSClause;
						SET @sql += ' AND ( ' + @STATUSClause + ' ) ';
					end
				END
				print '@@sql: '+ @sql;
    EXEC Sp_executesql @sql;

    EXEC Sp_dashboard_count @CURRENT_EMP_MKEY;
END

------------------------------------------------------------------------------------------------------------------------------------
--	exec SP_TASK_DETAILS_BY_MKEY_NT 845,937,0
ALTER procedure [dbo].[SP_TASK_DETAILS_BY_MKEY_NT](@HDR_MKEY VARCHAR(250),@Session_User_Id          INT = null,  
@Business_Group_Id	  INT = null)
AS
  BEGIN
      DECLARE @DAY INT

      SET @DAY=0

      SELECT T_HDR.mkey,
             T_HDR.task_no,
             T_HDR.isnode,
             T_HDR.task_parent_id,
             T_HDR.task_main_node_id,
			 T_HDR.Task_Type,
             T_HDR.status,
             T_HDR.status_perc,
             T_HDR.task_created_by,
             T_HDR.approver_id,
             T_HDR.approve_action_date,
			 T_HDR.ASSIGNED_TO,
			 E_MST.EMP_FULL_NAME			AS 'Assigned_To_Name',
             T_MST.type_desc                           CAREGORY,
             T_HDR.project_id                          PROJECT_MKEY,
			 T_HDR.sub_project_id                    AS BUILDING_MKEY,
             P_MST.type_desc                           'PROJECT',
			 P_MST.type_desc                           'Project_Name',
             S_P_MST.type_desc                         'Sub_PROJECT',
			 S_P_MST.type_desc						AS 'Building_Name',
             T_HDR.caregory                            CATEGORY_MKEY,
             T_HDR.creation_date,
             T_HDR.task_name,
             T_HDR.task_description,
             E_MST.emp_full_name,
			 
			 case when T_HDR.TASK_CREATED_BY = @Session_User_Id --When Task owner created the task /* Inside Task Owner login*/
			 and T_HDR.STATUS in ('CREATED','SUB TASK CREATED','WORK IN PROGRESS') and T_HDR.STATUS_PERC = 0.0 then 'Y'  /*Task owner created the task and 
			 it is currently on created status and progress is 0%  then all tabs are enabled for task owner and task owner can add tabs list like Checklist, Authority,
			 Outcome and Compliance via remark but with 0%  progress and WIP status update.  Otherwise any progress between 0% to 100%  
			 with WIP status will lead to disable all tabs for task owner.*/ 
			 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id) --When Task owner created the task /* Inside assignee login */
			 and T_HDR.STATUS_PERC = 0.0  /* Inside assignee login also all tabs are enabled because progress % is 0, however when assignee change 
			 the progress percent % between 0% to 100% then tabs are disabled for the task owner,but enabled at the assignee side. Assignee can able to update all tabs  */
			 and T_HDR.STATUS in ('CREATED','SUB TASK CREATED','WORK IN PROGRESS') Then 'Y'  
			 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 /*When Assignee change to close initiate(100%) */
							-- Inside assignee login 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id) 
			 and T_HDR.STATUS_PERC = 100.0 
			 and  T_HDR.STATUS in ('CLOSE INITIATED')  then 'N'/* If an assignee changes the status to cancel initiate or close initiate 
			 it means progress % is whether 0% or 100% so, in this scenario all tabs are disabled to the assignee side. Assignee will never change any of tab/s 
			 and inside the task owner log in all tabs are enabled for the task owner. Task owner can update all tabs. */
			 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id)/* When Assignee change to  cancel initiate (0%) Inside assignee login */
			 and T_HDR.STATUS in ('CANCEL INITIATED')  then 'N' /* If an assignee changes the status to cancel initiate or close initiate 
			 it means progress % is whether 0% or 100% so, in this scenario all tabs are disabled to the assignee side. Assignee will never change any of tab/s 
			 and inside the task owner log in all tabs are enabled for the task owner. Task owner can update all tabs. */

			 /*When Assignee change to close initiate(100%) or cancel initiate (0%) */
			  --Inside Task Owner login 
			 when  T_HDR.TASK_CREATED_BY = @Session_User_Id	 
			 and T_HDR.STATUS_PERC between 0.0 and 100.0 and T_HDR.STATUS in ('CLOSE INITIATED','CANCEL INITIATED')  then 'Y' 
			 /* Now inside task owner log in all tabs are enabled and task owner can do all changes in tabs and the status which are visible 
			 to the task owner is Cancel or Close and Re-work as per the assignee action if assignee triggered Close initiate then task owner can see 
			 the Close or if Cancel Initiate is triggered by the assignee then task owner can see Cancel and re-work is by default */
			 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 /*When Task owner change status to re-work  */
			 ---Inside Task Owner login
			 WHEN  T_HDR.TASK_CREATED_BY= @Session_User_Id	
			 and T_HDR.STATUS in ('RE-WORK')  then 'N' /*-- When task owner change status to re-work instead of Close or Cancel then all tabs are disabled 
														at task owner side now task owner is not able to do any changes inside any tab.*/
			 /* When Task owner change status to re-work */
			 --- Inside assignee login
			 WHEN  (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id) 
			 and T_HDR.STATUS in ('RE-WORK')  then 'Y' /* When the task owner gives a task to re-work to the assignee then status will change to re-work for the assignee 
														 and now all tabs are enabled for assignee and can do any changes inside any tab.*/
	 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 WHEN  (T_HDR.TASK_CREATED_BY = @Session_User_Id) or (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id)
			 and T_HDR.STATUS in ('CANCEL','CANCELLED','CLOSE')  then 'N' /* When task owner can do Cancel or Close instead of re-work 
																			 then all tabs are disabled for task owner as well as assignee */
 ---------------------------------------------------------------------------------------------------------------------------------------------------
			WHEN  (T_HDR.TASK_CREATED_BY = @Session_User_Id) and (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id)
			 and T_HDR.STATUS not in ('CANCEL','CANCELLED','CLOSE')  then 'Y' /* When Task Owner and Assignee are same then enabled  */
---------------------------------------------------------------------------------------------------------------------------------------------------
			 ELSE 'N'
			 end as 'Process_Flag',
             T_HDR.tags,
             CONVERT(VARCHAR(10), completion_date, 120)COMPLETION_DATE,
             --Isnull(file_name, '')                     [FILE_NAME],
             --Isnull(file_path, '')                     FILE_PATH,
             T_HDR.resposible_emp_mkey
			,ISNULL(RTrim(T_HDR.Priority),'') AS [Priority] 
			,ISNULL(CONVERT(NVARCHAR(20), T_HDR.Tentative_Start_Date),null) AS Tentative_Start_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Tentative_End_Date),null) AS Tentative_End_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Actual_Start_Date),null) AS Actual_Start_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Actual_End_Date),null) AS Actual_End_Date
      FROM   task_hdr T_HDR
             JOIN employee_mst E_MST
               ON E_MST.mkey = T_HDR.assigned_to
             LEFT JOIN type_mst T_MST
                    ON T_MST.master_mkey = T_HDR.caregory
             --AND T_MST.TYPE_CODE='CATEGORY'
             LEFT JOIN type_mst P_MST
                    ON P_MST.master_mkey = T_HDR.project_id
             LEFT JOIN type_mst S_P_MST
                    ON S_P_MST.master_mkey = T_HDR.sub_project_id
             --LEFT JOIN task_media_trl T_MEDIA
             --       ON T_MEDIA.mkey = T_HDR.mkey
             --          AND T_MEDIA.delete_flag = 'N'
      WHERE  T_HDR.mkey = @HDR_MKEY
  END 
-----------------------------------------------------------------------------------------------------------------------
GO
-- EXEC SP_GET_PROJECT_DOC_DEPOSITORY 0,926,'asd','sdf'
-- =============================================
ALTER PROCEDURE [dbo].[SP_GET_PROJECT_DOC_DEPOSITORY]
	-- Add the parameters for the stored procedure here
	@MKEY int = NULL,
	@USER_ID int = NULL, -- USER ID
	@API_NAME VARCHAR(100) = NULL, -- FORM NAME
	@API_METHOD VARCHAR(100) = NULL -- FUCNTION/METHOD NAME
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
BEGIN TRY ;
          -- TO CHECK THE @MKEY IS NULL OR EMPTY IF EMPTY THE SHOW ALL ROWS    
		  print '@MKEY: '+convert(varchar(10),@MKEY)
         
		  IF ( @MKEY IS NOT NULL
               AND LEN(@MKEY) > 0 and @MKEY != 0)
            BEGIN
				SELECT	
					HDR.MKEY
					,BUILDING_TYPE as BUILDING_MKEY
					,Smst.TYPE_DESC as buildinG_NAME
					,PROPERTY_TYPE AS PROPERTY_MKEY
					,tmst.TYPE_DESC as PROPERTY_name
					,DOC_MKEY 
					,DOC_NUMBER
					,DOC_DATE
					,dhdr.DOC_NAME
					,VALIDITY_DATE
					,HDR.ATTRIBUTE1
					,HDR.ATTRIBUTE2
					,HDR.ATTRIBUTE3
					,HDR.ATTRIBUTE4
					,HDR.ATTRIBUTE5
					,Isnull(CONVERT(VARCHAR(50), HDR.created_by), '') AS CREATED_BY_ID
				,Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME
				,CASE WHEN HDR.creation_date IS NULL THEN '' ELSE Format(HDR.creation_date, 'yyyy-MM-dd HH:mm:ss')	END AS CREATION_DATE
				,Isnull(CONVERT(VARCHAR(50), HDR.last_updated_by), '') AS LAST_UPDATED_BY
				,Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME
				,CASE WHEN HDR.last_update_date IS NULL THEN ''	ELSE Format(HDR.last_update_date, 'yyyy-MM-dd HH:mm:ss')
				END AS LAST_UPDATE_DATE
				FROM PROJECT_DOC_DEPOSITORY_HDR HDR
				INNER JOIN DOC_TEMPLATE_HDR dhdr on dhdr.MKEY = HDR.DOC_MKEY
				INNER JOIN EMPLOYEE_MST createdby ON HDR.created_by = createdby.mkey
				LEFT JOIN EMPLOYEE_MST updatedby ON HDR.last_updated_by = updatedby.mkey
				inner join TYPE_MST tmst on HDR.PROPERTY_TYPE = tmst.MASTER_MKEY and  tmst.TYPE_CODE = 'Project'
				inner join TYPE_MST Smst on HDR.BUILDING_TYPE = Smst.MASTER_MKEY and  Smst.TYPE_CODE = 'Project'
				WHERE HDR.MKEY = @MKEY
				AND HDR.DELETE_FLAG = 'N'
				AND createdby.DELETE_FLAG = 'N'
				ORDER BY  HDR.MKEY;
            END
          ELSE
            BEGIN
              SELECT	
					HDR.MKEY
					,BUILDING_TYPE as BUILDING_MKEY
					,Smst.TYPE_DESC as buildinG_NAME
					,PROPERTY_TYPE AS PROPERTY_MKEY
					,tmst.TYPE_DESC as PROPERTY_name
					,DOC_MKEY 
					,DOC_NUMBER
					,DOC_DATE
					,dhdr.DOC_NAME
					,VALIDITY_DATE
					,HDR.ATTRIBUTE1
					,HDR.ATTRIBUTE2
					,HDR.ATTRIBUTE3
					,HDR.ATTRIBUTE4
					,HDR.ATTRIBUTE5
					,Isnull(CONVERT(VARCHAR(50), HDR.created_by), '') AS CREATED_BY_ID
				,Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME
				,CASE WHEN HDR.creation_date IS NULL THEN '' ELSE Format(HDR.creation_date, 'yyyy-MM-dd HH:mm:ss')	END AS CREATION_DATE
				,Isnull(CONVERT(VARCHAR(50), HDR.last_updated_by), '') AS LAST_UPDATED_BY
				,Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME
				,CASE WHEN HDR.last_update_date IS NULL THEN '' ELSE Format(HDR.last_update_date, 'yyyy-MM-dd HH:mm:ss') END AS LAST_UPDATE_DATE
				FROM PROJECT_DOC_DEPOSITORY_HDR HDR
				INNER JOIN DOC_TEMPLATE_HDR dhdr on dhdr.MKEY = HDR.DOC_MKEY
				INNER JOIN 	EMPLOYEE_MST createdby	ON 	HDR.created_by = createdby.mkey
				LEFT JOIN EMPLOYEE_MST updatedby ON HDR.last_updated_by = updatedby.mkey
				inner join TYPE_MST tmst on HDR.PROPERTY_TYPE = tmst.MASTER_MKEY and  tmst.TYPE_CODE = 'Project'
				inner join TYPE_MST Smst on HDR.BUILDING_TYPE = Smst.MASTER_MKEY and  Smst.TYPE_CODE = 'Project'
				WHERE HDR.DELETE_FLAG = 'N'
				AND createdby.DELETE_FLAG = 'N'
				ORDER BY  HDR.MKEY;
            END
      END TRY
      BEGIN CATCH
------------------------------------------------------------------------------------------------------------------------------------
          SELECT ERROR_NUMBER()    AS ERRORNUMBER,
                 ERROR_SEVERITY()  AS ERRORSEVERITY,
                 ERROR_STATE()     AS ERRORSTATE,
                 ERROR_PROCEDURE() AS ERRORPROCEDURE,
                 ERROR_LINE()      AS ERRORLINE,
                 ERROR_MESSAGE()   AS ERRORMESSAGE;
-------------------------------------------------------------------------------------------------------------------------------
			DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
			SET @ERROR_MESSAGE = ERROR_MESSAGE();
------------------------------------------------------------------------------------------------------------------------------------
		EXEC sp_P_TMS_INSERT_ERROR_DES @USER_ID,'TMS',@API_NAME,@ERROR_MESSAGE,@API_METHOD;
------------------------------------------------------------------------------------------------------------------------------------
      END CATCH
END

-----------------------------------------------------------------------------------------------------------------------
GO
CREATE view V_USER_FILTER as   
  Select  TMST.MKEY, tmst.TYPE_CODE, tmst.TYPE_DESC as 'Key'  
  , Case when tmst.TYPE_DESC = 'DEFAULT' THEN 'Actionable'   
  when tmst.TYPE_DESC = 'ALLOCATEDTOME' THEN 'Allocated To Me'   
  when tmst.TYPE_DESC = 'ALLOCATEDBYME' THEN 'Allocated By Me'   
  when tmst.TYPE_DESC = 'COMPLETEDBYME' THEN 'Completed By Me'   
  when tmst.TYPE_DESC = 'COMPLETEDFORME' THEN 'Completed For Me'   
  when tmst.TYPE_DESC = 'CANCELCLOSE' THEN 'Cancelled'   
  ELSE tmst.TYPE_DESC  
  END AS 'DisplayName',TMST.ATTRIBUTE4,TMST.ATTRIBUTE5  
   ,Isnull(CONVERT(VARCHAR(50), TMST.created_by), '') AS CREATED_BY_ID,    
   Isnull(CONVERT(VARCHAR(50), EMST.emp_full_name), '') AS CREATED_BY_NAME,    
   CASE  WHEN TMST.creation_date IS NULL THEN  ''  ELSE  Format(TMST.creation_date, 'yyyy-MM-dd HH:mm:ss') END AS CREATION_DATE,    
   Isnull(CONVERT(VARCHAR(50), TMST.last_updated_by), '') AS LAST_UPDATED_BY,    
   Isnull(LMST.emp_full_name, '') UPDATED_BY_NAME,    
   CASE WHEN TMST.last_update_date IS NULL THEN  ''  ELSE  Format(TMST.last_update_date, 'yyyy-MM-dd HH:mm:ss') END AS LAST_UPDATE_DATE    
  From TYPE_MST TMST INNER JOIN EMPLOYEE_MST EMST ON TMST.CREATED_BY = EMST.MKEY  
  LEFT JOIN EMPLOYEE_MST LMST ON TMST.LAST_UPDATED_BY = EMST.MKEY  
  where TMST.ATTRIBUTE2 ='Filter' and TMST.DELETE_FLAG = 'N';


-----------------------------------------------------------------------------------------------------------------------
GO
-- exec SP_GET_TASK_DASHBOARD_FILTER 926,1
ALTER Procedure [dbo].[SP_GET_TASK_DASHBOARD_FILTER] (@Session_User_Id          INT,  
@Business_Group_Id	  INT)
AS 
BEGIN
	Begin Try
	SELECT * FROM  V_USER_FILTER ORDER BY CONVERT(int,CONVERT(int,ATTRIBUTE5)) asc, CONVERT(int,CONVERT(int,ATTRIBUTE4));
	--SELECT * FROM  V_PRIORITY_FILTER  -- need to delete after deploy in uat
	--SELECT * FROM  V_DURATION_FILTER -- need to delete after deploy in uat
	--SELECT * FROM  V_TASK_TYPE -- need to delete after deploy in uat
	End try
	 BEGIN CATCH
        -------------------------------------------------------------------------------------------------------------------------------            
        SELECT ERROR_NUMBER() AS ERRORNUMBER,
               ERROR_SEVERITY() AS ERRORSEVERITY,
               ERROR_STATE() AS ERRORSTATE,
               ERROR_PROCEDURE() AS ERRORPROCEDURE,
               ERROR_LINE() AS ERRORLINE,
               ERROR_MESSAGE() AS ERRORMESSAGE;
        -------------------------------------------------------------------------------------------------------------------------------  
        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
        SET @ERROR_MESSAGE = ERROR_MESSAGE();
        -------------------------------------------------------------------------------------------------------------------------------  
        EXEC SP_P_TMS_INSERT_ERROR_DES @Session_User_Id,
                                       'TMS',
                                       'Task Dashboard Filter',
                                       @ERROR_MESSAGE,
                                       'Get Task Dashboard Filter';
    -------------------------------------------------------------------------------------------------------------------------------  
    END CATCH

END

-----------------------------------------------------------------------------------------------------------------------
GO
