GO
alter table TASK_ENDLIST_MEDIA_TRL
add COMMENT	nvarchar(MAX)

GO
alter table TASK_ENDLIST_MEDIA_TRL_H
add COMMENT	nvarchar(MAX)

GO
  ALTER TABLE MSP_Default_Migration_Table DROP COLUMN Mkey 
  ALTER TABLE MSP_Default_Migration_Table ADD Mkey INT IDENTITY(1,1)

  alter table TASK_SANCTIONING_DEPARTMENT_TRL_MOVEMENT_HISTORY
  add  COMMENT nvarchar(max)

  alter table TASK_SANCTIONING_DEPARTMENT_TRL_MOVEMENT_HISTORY_H
  add  COMMENT nvarchar(max)
GO


GO

/****** Object:  Table [dbo].[MSP_Default_Migration_Table]    Script Date: 16-05-2025 12:24:09 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[MSP_Default_Migration_Table](
	[Mkey] [decimal](18, 0) IDENTITY(1,1) NOT NULL,
	[WBS] [nvarchar](50) NOT NULL,
	[Name] [nvarchar](500) NOT NULL,
	[Duration] [nvarchar](50) NOT NULL,
	[Start_Date] [smalldatetime] NOT NULL,
	[Finish_Date] [smalldatetime] NOT NULL,
	[Predecessors] [nvarchar](100) NULL,
	[Resource_Names] [nvarchar](100) NULL,
	[Text1] [nvarchar](100) NULL,
	[Outline_Level] [int] NOT NULL,
	[Number1] [int] NOT NULL,
	[Unique_ID] [decimal](18, 0) NOT NULL,
	[Percent_Complete] [decimal](18, 2) NULL,
	[Created_By] [decimal](18, 0) NOT NULL,
	[Creation_Date] [datetime] NOT NULL,
	[Updated_By] [decimal](18, 0) NULL,
	[Updation_Date] [datetime] NULL,
	[Process_Flag] [nchar](1) NULL,
	[Remarks] [nvarchar](500) NULL,
	[FileName] [nvarchar](100) NULL,
	[mpp_name] [nvarchar](100) NULL
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[MSP_Default_Migration_Table] ADD  CONSTRAINT [DF_MSP_Default_Migration_Table_Created_By]  DEFAULT ((0)) FOR [Created_By]
GO

ALTER TABLE [dbo].[MSP_Default_Migration_Table] ADD  CONSTRAINT [DF_MSP_Default_Migration_Table_Creation_Date]  DEFAULT (getdate()) FOR [Creation_Date]
GO




GO
/****** Object:  StoredProcedure [dbo].[sp_EMP_TAGS_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_EMP_TAGS_NT] (@EMP_MKEY varchar(250),@Session_User_Id          INT = null,  
@Business_Group_Id	  INT null
)
as
begin
select TAGS_DESC name from EMP_TAGS where emp_mkey=@EMP_MKEY
end

GO
/****** Object:  StoredProcedure [dbo].[SP_GET_ACTIONS_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--		exec SP_GET_ACTIONS_NT 424,926,'SUB TASK CREATED',926,1
CREATE PROCEDURE [dbo].[SP_GET_ACTIONS_NT](@TASK_MKEY         INT,
                                          @CURRENT_EMP_MKEY  INT,
                                          @CURR_ACTION       NVARCHAR(100),
                                          @Session_User_Id   INT = NULL,
                                          @Business_Group_Id INT = NULL)
AS
  BEGIN
      DECLARE @dCount    INT,
              @dAllCount INT

      IF( @CURR_ACTION = 'WIP'
           OR @CURR_ACTION = 'PROGRESS UPDATED'
           OR @CURR_ACTION = 'WORK IN PROCESS'
           OR @CURR_ACTION = 'RE-WORK'
           OR @CURR_ACTION = 'WORK IN PROGRESS'
           OR @CURR_ACTION = 'CREATED' )
        BEGIN
            SELECT mkey,
                   type_desc
            FROM   v_status
            WHERE  mkey IN ( 75, 70, 69, 72 )
        END

      --or @CURR_ACTION= 'SUB TASK CREATED'
      IF( @CURR_ACTION = 'COMPLETED'
           OR @CURR_ACTION = 'CANCELLED'
           OR @CURR_ACTION = 'CANCELED'
           OR @CURR_ACTION = 'CANCEL' )
        BEGIN
            SELECT mkey,
                   type_desc
            FROM   v_status
            WHERE  mkey IN ( 0 )
        END

      IF( @CURR_ACTION = 'SUB TASK CREATED' )
        BEGIN
            SELECT @dCount = Count(*)
            FROM   task_hdr
            WHERE  task_parent_id = @TASK_MKEY
                   AND mkey != @TASK_MKEY

            SELECT @dAllCount = Count(*)
            FROM   task_hdr
            WHERE  task_parent_id = @TASK_MKEY
                   AND status IN ( 'COMPLETED', 'Cancel', 'Close' )

            IF( @dCount = @dAllCount )
              BEGIN
                  SELECT @dCount = Count(*)
                  FROM   task_hdr
                  WHERE  mkey = @TASK_MKEY
                         AND resposible_emp_mkey = @CURRENT_EMP_MKEY

                  IF( @dCount > 0 )
                    BEGIN
                        SELECT mkey,
                               type_desc
                        FROM   v_status
                        WHERE  mkey IN ( 75, 70, 69, 72 )
                    END
                  ELSE
                    BEGIN
                        SELECT mkey,
                               type_desc
                        FROM   v_status
                        WHERE  mkey IN ( 0 )
                    END
              END
            ELSE
              BEGIN
                  SELECT mkey,
                         type_desc
                  FROM   v_status
                  WHERE  mkey IN ( 0 )
              END
        END

      IF( @CURR_ACTION = 'CLOSE INITIATED' )
        BEGIN
            SELECT @dCount = Count(*)
            FROM   task_hdr
            WHERE  mkey = @TASK_MKEY
                   AND resposible_emp_mkey = @CURRENT_EMP_MKEY

            IF( @dCount > 0 )
              BEGIN
                  SELECT mkey,
                         type_desc
                  FROM   v_status
                  WHERE  mkey IN ( 71, 82 )
              END
            ELSE
              BEGIN
                  SELECT mkey,
                         type_desc
                  FROM   v_status
                  WHERE  mkey IN ( 0 )
              END
        END

      IF( @CURR_ACTION = 'Cancel Initiated' )
        BEGIN
            SELECT @dCount = Count(*)
            FROM   task_hdr
            WHERE  mkey = @TASK_MKEY
                   AND resposible_emp_mkey = @CURRENT_EMP_MKEY

            IF( @dCount > 0 )
              BEGIN
                  SELECT mkey,
                         type_desc
                  FROM   v_status
                  WHERE  mkey IN ( 73, 82 )
              END
            ELSE
              BEGIN
                  SELECT mkey,
                         type_desc
                  FROM   v_status
                  WHERE  mkey IN ( 0 )
              END
        END
					SELECT  * 
					FROM (
						SELECT 'History' as [Type],--CONVERT(datetime,trl.CREATION_DATE) CREATION_DATE,
									progress_perc
									,CONVERT(nvarchar(max),action_type +' '+  DESCRIPTION_COMMENT +' '+ convert(nvarchar(100),PROGRESS_PERC) +' '+ action_type +' '+ dbo.[Initcap](status))                   STATUS
									,dbo.[Initcap](action_type)              ACTION_TYPE
									,dbo.[Initcap](description_comment)      COMMENT
									,Isnull(file_name, '')                   FILE_NAME
									,Isnull(file_path, '')                   FILE_PATH
									,trl.created_by                                        CREATED_BY_ID,
								   createdby.emp_full_name                               CREATED_BY_NAME,
								   CASE
									 WHEN trl.creation_date IS NULL THEN ''
									 ELSE Format(trl.creation_date, 'yyyy-MM-dd HH:mm:ss')
								   END                                                   AS CREATION_DATE,
								   Isnull(CONVERT(VARCHAR(50), trl.last_updated_by), '') AS LAST_UPDATED_BY,
								   Isnull(updatedby.emp_full_name, '')                   UPDATED_BY_NAME,
								   CASE
									 WHEN trl.last_update_date IS NULL THEN ''
									 ELSE Format(trl.last_update_date, 'yyyy-MM-dd HH:mm:ss')
								   END                                                   AS LAST_UPDATE_DATE
							FROM   task_action_trl trl  JOIN employee_mst createdby
									 ON trl.created_by = createdby.mkey
								   LEFT JOIN employee_mst updatedby
										  ON trl.last_updated_by = updatedby.mkey
							WHERE  trl.delete_flag = 'N'
									AND trl.mkey = @TASK_MKEY
						union all
						Select 'Movement' as [Type],--MHST.CREATION_DATE,
						0 as progress_perc
								--,'Level '+ CONVERT(NVARCHAR,FROM_LEVEL)+ ' ' + CURRENT_STATUS +' To '+ ' Level '+CONVERT(NVARCHAR,TO_LEVEL)+ ' ' + UPDATED_STATUS as [Status]
								,ISNULL('Level '+ CONVERT(NVARCHAR,FROM_LEVEL)+ ' ' + CURRENT_STATUS +' To '+ ' Level '+CONVERT(NVARCHAR,TO_LEVEL)+ ' ' + UPDATED_STATUS, concat('The level ', TO_LEVEL,' is added'))  as [Status]
								,null as ACTION_TYPE
								,COMMENT as Comment
								,null as [FILE_NAME]
								,null as FILE_PATH
								,MHST.created_by                                        CREATED_BY_ID,
								   createdby.emp_full_name                               CREATED_BY_NAME,
								   CASE
									 WHEN MHST.creation_date IS NULL THEN ''
									 ELSE Format(MHST.creation_date, 'yyyy-MM-dd HH:mm:ss')
								   END                                                   AS CREATION_DATE,
								   Isnull(CONVERT(VARCHAR(50), MHST.last_updated_by), '') AS LAST_UPDATED_BY,
								   Isnull(updatedby.emp_full_name, '')                   UPDATED_BY_NAME,
								   CASE
									 WHEN MHST.last_update_date IS NULL THEN ''
									 ELSE Format(MHST.last_update_date, 'yyyy-MM-dd HH:mm:ss')
								   END                                                   AS LAST_UPDATE_DATE
						From TASK_SANCTIONING_DEPARTMENT_TRL_MOVEMENT_HISTORY MHST JOIN employee_mst createdby
									 ON MHST.created_by = createdby.mkey
								   LEFT JOIN employee_mst updatedby
										  ON MHST.last_updated_by = updatedby.mkey
						where MHST.TASK_MKEY = @TASK_MKEY
					) ActionType
					ORDER BY ActionType.CREATION_DATE 
	   --SELECT CONVERT(VARCHAR(50), creation_date, 103)CREATION_DATE,
      --    progress_perc,
      --    dbo.[Initcap](status)                   STATUS,
      --    dbo.[Initcap](action_type)              ACTION_TYPE,
      --    dbo.[Initcap](description_comment)      COMMENT,
      --    Isnull(file_name, '')                   FILE_NAME,
      --    Isnull(file_path, '')                   FILE_PATH
      --FROM   task_action_trl
      --WHERE  delete_flag = 'N'
      --    AND mkey = @TASK_MKEY
      --ORDER  BY sr_no DESC
  END
--EXEC [SP_GET_ACTIONS] 154,248,'SUB TASK CREATED'
--SELECT CREATION_DATE,PROGRESS_PERC,STATUS,ACTION_TYPE,DESCRIPTION_COMMENT COMMENT,ISNULL(FILE_NAME,'NA') FILE_NAME FROM TASK_ACTION_TRL ORDER BY SR_NO DESC --SELECT * FROM TASK_ACTION_TRL
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_DEPARTMENT_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--EXEC SP_GET_DEPARTMENT_NT 1,1
CREATE PROCEDURE [dbo].[SP_GET_DEPARTMENT_NT]
	-- Add the parameters for the stored procedure here
	@Session_User_Id INT,
	@Business_Group_Id INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

   SELECT * FROM V_Department
	
END
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_EMP_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_GET_EMP_NT]
(
@CURRENT_EMP_MKEY INT,
@FILTER NVARCHAR(100) =null,
@Session_User_Id          INT = null,  
@Business_Group_Id	  INT = null
)
AS
BEGIN

SELECT MKEY
,COMPANY_ID
,EMP_CODE
, DBO.[InitCap](EMP_FULL_NAME) EMP_FULL_NAME
, DBO.[InitCap](FIRST_NAME) FIRST_NAME
, DBO.[InitCap](LAST_NAME) LAST_NAME
,ROLE_ID
,PROJECT_ID
,DESIGNATION_ID
,DEPARTMENT_ID
,CONTACT_NO
,EMAIL_ID_OFFICIAL
,EMAIL_ID_PERSONAL
,LOGIN_NAME
,CONVERT(VARCHAR, LOGIN_PASSWORD) AS LOGIN_PASSWORD
,RA1_MKEY
,RA2_MKEY
,EFFECTIVE_START_DATE
,EFFECTIVE_END_DATE
,EMAIL_FREQUENCY
,BROWSER_NOTIFICATION
,WEB_TOKEN
,MOBILE_TOKEN
,ATTRIBUTE1
,ATTRIBUTE2
,ATTRIBUTE3
,ATTRIBUTE4
,ATTRIBUTE5
,CREATED_BY
,CREATION_DATE
,LAST_UPDATED_BY
,lAST_UPDATE_DATE
,DELETE_FLAG
,ISFORGOTPASSWORD
,CONVERT(VARCHAR,TEMPPASSWORD) AS TEMPPASSWORD
FROM EMPLOYEE_MST where DELETE_FLAG='N'
END
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_JOBROLE_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--EXEC SP_GET_JOBROLE_NT 1,1
CREATE PROCEDURE [dbo].[SP_GET_JOBROLE_NT]
	-- Add the parameters for the stored procedure here
	@Session_User_Id INT,
	@Business_Group_Id INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

   SELECT * FROM V_JOB_ROLE
	
END
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_PROJECT_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[SP_GET_PROJECT_NT](@TYPE_CODE VARCHAR(MAX),@MASTER_MKEY VARCHAR(250),@Session_User_Id INT = null,  
@Business_Group_Id	  INT = null)
AS
BEGIN
if(@TYPE_CODE='CATEGORY')
begin
SELECT * FROM TYPE_MST WHERE TYPE_CODE=@TYPE_CODE
--AND MASTER_MKEY = COALESCE(NULLIF('' + @MASTER_MKEY + '', '0'), MASTER_MKEY) 
ORDER BY 1 
end
if(@TYPE_CODE='PROJECT')
begin
SELECT * FROM TYPE_MST WHERE TYPE_CODE=@TYPE_CODE and PARENT_ID=0
end
if(@TYPE_CODE='PROJECT_VIEW')
begin
--SELECT * FROM TYPE_MST WHERE TYPE_CODE=@TYPE_CODE and PARENT_ID=0
SELECT * FROM V_PROJECT_VIEW WHERE TYPE_CODE='PROJECT' and PARENT_ID=0
end
END



GO
/****** Object:  StoredProcedure [dbo].[SP_GET_SUBPROJECT_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_GET_SUBPROJECT_NT](@PROJECT_MKEY VARCHAR(250),@Session_User_Id          INT =null,  
@Business_Group_Id	  INT =null)
AS
BEGIN
    SELECT * FROM TYPE_MST 
	WHERE TYPE_CODE='PROJECT' 
	AND PARENT_ID = @PROJECT_MKEY
	AND DELETE_FLAG = 'N' 
	Order By Convert(int,isnull(ATTRIBUTE3,0)) asc, type_desc;
END
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_TASK_CHECKLIST_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:    
-- Create date: 
-- Description:  
--  EXEC SP_GET_TASK_CHECKLIST_NT 440,443, 307,'ffg','fgfg',926
-- =============================================
 CREATE PROCEDURE [dbo].[SP_GET_TASK_CHECKLIST_NT]
  -- Add the parameters for the stored procedure here
  @PROPERTY_MKEY INT,
  @BUILDING_MKEY INT,
  @TASK_MKEY     INT,
  @API_NAME      NVARCHAR(200),
  @API_METHOD    NVARCHAR(100),
  @USER_ID       INT,
  @Session_User_Id          INT = NULL,  
@Business_Group_Id	  INT = NULL
AS
  BEGIN
      SET nocount ON;

      BEGIN try

	  SELECT CTRL.mkey,
                 CTRL.sr_no,
                 THDR.project_id                                           AS                 PROPERTY_MKEY,
                 THDR.sub_project_id                                       AS                 BUILDING_MKEY,
				 CTRL.DOCUMENT_MKEY					AS Doc_Cat_mkey,
				 CTRL.DOCUMENT_NAME					as Doc_Cat_Name,
				 CTRL.DOCUMENT_CATEGORY				as Doc_Type_Mkey,
				 MST.TYPE_DESC						as  Doc_Type_Name,
				 CTRL.document_mkey											AS DOC_MKEY,
				 MST.TYPE_DESC as  Doc_Cat_Name,
                 CASE WHEN DocMST.DOC_NAME IS NULL THEN (SELECT TYPE_DESC FROM TYPE_MST WHERE MKEY = CTRL.DOCUMENT_MKEY) ELSE DocMST.DOC_NAME END AS  document_name,
				 CTRL.DOCUMENT_NAME as  Doc_Cat_Name,
                 CTRL.document_category,
				 MST.TYPE_DESC                                             AS
                 [TYPE_DESC],
                 CTRL.app_check,
				 Isnull(CONVERT(VARCHAR(50), CTRL.created_by), '')         AS
                 CREATED_BY_ID,
                 Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS
                 CREATED_BY_NAME,
                 CASE
                   WHEN CTRL.creation_date IS NULL THEN ''
                   ELSE Format(CTRL.creation_date, 'yyyy-MM-dd HH:mm:ss')
                 END                                                       AS
                 CREATION_DATE,
                 Isnull(CONVERT(VARCHAR(50), CTRL.last_updated_by), '')    AS
                 LAST_UPDATED_BY,
                 Isnull(updatedby.emp_full_name, '')
                 UPDATED_BY_NAME
                 ,
                 CASE
                   WHEN CTRL.last_update_date IS NULL THEN ''
                   ELSE Format(CTRL.last_update_date, 'yyyy-MM-dd HH:mm:ss')
                 END                                                       AS
                 LAST_UPDATE_DATE
		 FROM   task_checklist_trl CTRL
                 INNER JOIN task_hdr THDR
                        ON CTRL.mkey = THDR.mkey
				INNER JOIN TYPE_MST MST ON MST.MASTER_MKEY =  CTRL.DOCUMENT_CATEGORY AND MST.DELETE_FLAG = 'N'
				LEFT JOIN TYPE_MST INSTRMST ON INSTRMST.MKEY =  CTRL.DOCUMENT_CATEGORY AND MST.DELETE_FLAG = 'N'
				LEFT JOIN DOC_TEMPLATE_HDR DocMST ON DocMST.MKEY =  CTRL.DOCUMENT_MKEY AND DocMST.DELETE_FLAG = 'N'
                INNER JOIN employee_mst createdby
                         ON CTRL.created_by = createdby.mkey
                 LEFT JOIN employee_mst updatedby
                        ON CTRL.last_updated_by = updatedby.mkey
		where CTRL.DOCUMENT_MKEY is not null and CTRL.DOCUMENT_NAME is not null
		and CTRL.DOCUMENT_CATEGORY is not null 
		AND CTRL.mkey = @TASK_MKEY
		AND CTRL.DELETE_FLAG = 'N'
		AND THDR.DELETE_FLAG = 'N'
		AND MST.DELETE_FLAG = 'N'
		AND createdby.DELETE_FLAG = 'N'
		ORDER BY SR_NO,CONVERT(INT, CTRL.document_category);
      
      END try

      BEGIN catch
          -------------------------------------------------------------------------------------------------------------------------------            
          SELECT Error_number()    AS ERRORNUMBER,
                 Error_severity()  AS ERRORSEVERITY,
                 Error_state()     AS ERRORSTATE,
                 Error_procedure() AS ERRORPROCEDURE,
                 Error_line()      AS ERRORLINE,
                 Error_message()   AS ERRORMESSAGE;

          -------------------------------------------------------------------------------------------------------------------------------  
          DECLARE @ERROR_MESSAGE VARCHAR(max) = NULL;

          SET @ERROR_MESSAGE = Error_message();

          -------------------------------------------------------------------------------------------------------------------------------  
          EXEC Sp_p_tms_insert_error_des
            @USER_ID,
            'TMS',
            @API_NAME,
            @ERROR_MESSAGE,
            @API_METHOD;
      -------------------------------------------------------------------------------------------------------------------------------  
      END catch
  END 
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_TASK_ENDLIST_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:    
-- Create date: 
-- Description:  
-- EXEC SP_GET_TASK_ENDLIST_NT 409,  443,149,'ddfd','sdf',926
-- =============================================
CREATE PROCEDURE [dbo].[SP_GET_TASK_ENDLIST_NT]
  -- Add the parameters for the stored procedure here
  @PROPERTY_MKEY INT,
  @BUILDING_MKEY INT,
  @TASK_MKEY     INT,
  @API_NAME      NVARCHAR(200),
  @API_METHOD    NVARCHAR(100),
  @USER_ID       INT,
  @Session_User_Id          INT = NULL,  
@Business_Group_Id	  INT = NULL
AS
  BEGIN
      SET nocount ON;

      BEGIN try
          SELECT ETRL.mkey,
                 sr_no,
                 THDR.project_id                                           AS                 PROPERTY_MKEY,
                 THDR.sub_project_id                                       AS                 BUILDING_MKEY,
                 document_mkey                                             AS                 Doc_Cat_mkey,
                 document_name                                             AS                 Doc_Cat_Name,
                 document_category_mkey                                    AS                 Doc_Type_Mkey,
                 document_category                                         AS                 Doc_Type_Name,
                 document_mkey,
                 document_name                                             AS                 TYPE_CODE,
                 document_category_mkey                                    AS                 DOC_MKEY,
                 document_category							               AS				  [TYPE_DESC],
                 doc_num_app_flag,
                 doc_num_valid_flag,
                 doc_num_date_app_flag,
                 doc_attach_app_flag,
                 Isnull(doc_number, '')                                    AS                 DOC_NUMBER,
                 Isnull(doc_date, '')                                      AS                 DOC_DATE,
                 Isnull(validity_date, '')								   AS                 VALIDITY_DATE,
                 Isnull(CONVERT(VARCHAR(50), ETRL.created_by), '')         AS                 CREATED_BY_ID,
                 Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS                 CREATED_BY_NAME,
                 CASE
                   WHEN ETRL.creation_date IS NULL THEN ''
                   ELSE Format(ETRL.creation_date, 'yyyy-MM-dd HH:mm:ss')
                 END                                                       AS                 CREATION_DATE,
                 Isnull(CONVERT(VARCHAR(50), ETRL.last_updated_by), '')    AS                 LAST_UPDATED_BY,
                 Isnull(updatedby.emp_full_name, '')						                  UPDATED_BY_NAME,
                 CASE
                   WHEN ETRL.last_update_date IS NULL THEN ''
                   ELSE Format(ETRL.last_update_date, 'yyyy-MM-dd HH:mm:ss')
                 END                                                       AS                 LAST_UPDATE_DATE
          FROM   task_endlist_trl ETRL
                 INNER JOIN task_hdr THDR
                         ON ETRL.mkey = THDR.mkey
                 INNER JOIN employee_mst createdby
                         ON ETRL.created_by = createdby.mkey
                 LEFT JOIN employee_mst updatedby
                        ON ETRL.last_updated_by = updatedby.mkey and updatedby.DELETE_FLAG = 'N'
          WHERE  ETRL.delete_flag = 'N'
                 AND THDR.delete_flag = 'N'
				 and createdby.DELETE_FLAG = 'N'
                 --AND (THDR.PROJECT_ID = @PROPERTY_MKEY OR THDR.PROJECT_ID IS NULL)
                 --AND (THDR.SUB_PROJECT_ID = @BUILDING_MKEY OR THDR.SUB_PROJECT_ID IS NULL)
                 AND THDR.mkey = @TASK_MKEY;
      --ORDER BY 
      END try

      BEGIN catch
          -------------------------------------------------------------------------------------------------------------------------------            
          SELECT Error_number()    AS ERRORNUMBER,
                 Error_severity()  AS ERRORSEVERITY,
                 Error_state()     AS ERRORSTATE,
                 Error_procedure() AS ERRORPROCEDURE,
                 Error_line()      AS ERRORLINE,
                 Error_message()   AS ERRORMESSAGE;

          -------------------------------------------------------------------------------------------------------------------------------  
          DECLARE @ERROR_MESSAGE VARCHAR(max) = NULL;

          SET @ERROR_MESSAGE = Error_message();

          -------------------------------------------------------------------------------------------------------------------------------  
          EXEC Sp_p_tms_insert_error_des
            @USER_ID,
            'TMS',
            @API_NAME,
            @ERROR_MESSAGE,
            @API_METHOD;
      -------------------------------------------------------------------------------------------------------------------------------  
      END catch
  END 
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_TASK_SANCTIONING_DEPARTMENT_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
--  EXEC SP_GET_TASK_SANCTIONING_DEPARTMENT_NT 11082,11,11, 'DFD','SDFG',926
-- =============================================
CREATE PROCEDURE [dbo].[SP_GET_TASK_SANCTIONING_DEPARTMENT_NT]
	-- Add the parameters for the stored procedure here
	@MKEY INT,
	@PROPERTY_MKEY INT,
	@BUILDING_MKEY INT,
	--@TASK_MKEY INT,
	@API_NAME NVARCHAR(200),
	@API_METHOD NVARCHAR(100),
	@Session_User_Id          INT = null,  
	@Business_Group_Id	  INT = null,
	@USER_ID INT
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY

				SELECT DTRL.MKEY,DTRL.SR_NO, THDR.PROJECT_ID AS PROPERTY_MKEY,THDR.SUB_PROJECT_ID AS BUILDING_MKEY, 
				DTRL.SANCTIONING_DEPARTMENT AS TYPE_CODE,DTRL.SANCTIONING_AUTHORITY AS [TYPE_DESC],DTRL.SANCTIONING_DEPARTMENT as SANCTIONING_DEPARTMENT,
				DTRL.SANCTIONING_AUTHORITY_MKEY AS SANCTIONING_AUTHORITY ,
				DTRL.SANCTIONING_AUTHORITY_MKEY as SANCTIONING_AUTHORITY_MKEY,
				smst.TYPE_DESC as Sanctioning_Authority_Name,
				DTRL.[STATUS] AS [STATUS],
				DTRL.STATUS_MODE AS MODE,
				--CASE WHEN  DTRL.[STATUS] = NULL THEN 'In-Progress' end AS [STATUS],
				DTRL.[START_DATE], DTRL.END_DATE, DTRL.[level] 
				,Isnull(CONVERT(VARCHAR(50), DTRL.created_by), '') AS CREATED_BY_ID,
				Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME,
				CASE
					WHEN DTRL.creation_date IS NULL THEN
				''
				ELSE
					Format(DTRL.creation_date, 'yyyy-MM-dd HH:mm:ss')
				END AS CREATION_DATE,
				Isnull(CONVERT(VARCHAR(50), DTRL.last_updated_by), '') AS LAST_UPDATED_BY,
				Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME,
				CASE
					WHEN DTRL.last_update_date IS NULL THEN
					''
				ELSE
					Format(DTRL.last_update_date, 'yyyy-MM-dd HH:mm:ss')
				END AS LAST_UPDATE_DATE
				FROM  TASK_SANCTIONING_DEPARTMENT_TRL DTRL INNER JOIN TASK_HDR THDR ON DTRL.MKEY = THDR.MKEY
				Left join type_mst Smst on (smst.MASTER_MKEY = DTRL.SANCTIONING_AUTHORITY_MKEY or smst.MKEY = DTRL.SANCTIONING_AUTHORITY_MKEY) and type_code = 'SAUTHORITY'
				INNER JOIN EMPLOYEE_MST createdby ON DTRL.CREATED_BY = createdby.mkey
				LEFT JOIN EMPLOYEE_MST updatedby ON DTRL.last_updated_by = updatedby.mkey
				WHERE  DTRL.DELETE_FLAG = 'N'
				AND createdby.DELETE_FLAG = 'N'
				AND DTRL.MKEY =  @MKEY 
				ORDER BY DTRL.[level] ;

				--AND THDR.PROJECT_ID = @PROPERTY_MKEY
				--AND THDR.SUB_PROJECT_ID  = @BUILDING_MKEY
				--ORDER BY  DTRL.MKEY, DTRL.SR_NO;


				--SELECT  SDEPT.MKEY, TASK_NO_MKEY,PHDR.PROPERTY AS PROPERTY_MKEY,PHDR.BUILDING_MKEY,
				--SDEPT.SANCTIONING_DEPARTMENT AS TYPE_CODE,SDEPT.SANCTIONING_DEPARTMENT AS [TYPE_DESC]
				--,SDEPT.SR_NO,SDEPT.SANCTIONING_AUTHORITY AS SANCTIONING_AUTHORITY_MKEY, THDR.[TYPE_DESC] as SANCTIONING_AUTHORITY_NAME, 
				--CASE WHEN  ISNULL(SDEPT.[STATUS],'') = '' OR ISNULL(SDEPT.[STATUS],'') = NULL THEN 'In-Progress' end AS [STATUS],SDEPT.LEVEL
				--,Isnull(CONVERT(VARCHAR(50), SDEPT.created_by), '') AS CREATED_BY_ID,
				--Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME,
				--CASE
				--	WHEN SDEPT.creation_date IS NULL THEN
				--''
				--ELSE
				--	Format(SDEPT.creation_date, 'yyyy-MM-dd HH:mm:ss')
				--END AS CREATION_DATE,
				--Isnull(CONVERT(VARCHAR(50), SDEPT.last_updated_by), '') AS LAST_UPDATED_BY,
				--Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME,
				--CASE
				--	WHEN SDEPT.last_update_date IS NULL THEN
				--	''
				--ELSE
				--	Format(SDEPT.last_update_date, 'yyyy-MM-dd HH:mm:ss')
				--END AS LAST_UPDATE_DATE
				--FROM APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT SDEPT
				--INNER JOIN PROJECT_TRL_APPROVAL_ABBR ABBR ON  SDEPT.MKEY =  ABBR.APPROVAL_MKEY
				--INNER JOIN PROJECT_HDR PHDR ON PHDR.MKEY = ABBR.HEADER_MKEY
				--INNER JOIN TYPE_MST THDR on SDEPT.SANCTIONING_AUTHORITY = THDR.MKEY
				--INNER JOIN EMPLOYEE_MST createdby ON SDEPT.CREATED_BY = createdby.mkey
				--LEFT JOIN EMPLOYEE_MST updatedby ON SDEPT.last_updated_by = updatedby.mkey
				--WHERE SDEPT.DELETE_FLAG = 'N' 
				--AND ABBR.DELETE_FLAG = 'N'
				--AND PHDR.DELETE_FLAG = 'N'
				--AND createdby.DELETE_FLAG = 'N'
				--AND ABBR.TASK_NO_MKEY =  @TASK_MKEY
				--AND PHDR.PROPERTY = @PROPERTY_MKEY
				--AND PHDR.BUILDING_MKEY  = @BUILDING_MKEY
				--ORDER BY SDEPT.MKEY,SDEPT.SANCTIONING_DEPARTMENT;


	--		SELECT  ADEPT.MKEY, TASK_NO_MKEY,PHDR.PROPERTY AS PROPERTY_MKEY,PHDR.BUILDING_MKEY,
	--ADEPT.SANCTIONING_DEPARTMENT AS TYPE_CODE,ADEPT.SANCTIONING_DEPARTMENT AS [TYPE_DESC]
	--,ADEPT.SANCTIONING_AUTHORITY,ISNULL(ADEPT.[STATUS],'') AS [STATUS],ADEPT.LEVEL
	--,Isnull(CONVERT(VARCHAR(50), ADEPT.created_by), '') AS CREATED_BY_ID,
	--			Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME,
	--			CASE
	--				WHEN ADEPT.creation_date IS NULL THEN
	--			''
	--			ELSE
	--				Format(ADEPT.creation_date, 'yyyy-MM-dd HH:mm:ss')
	--			END AS CREATION_DATE,
	--			Isnull(CONVERT(VARCHAR(50), ADEPT.last_updated_by), '') AS LAST_UPDATED_BY,
	--			Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME,
	--			CASE
	--				WHEN ADEPT.last_update_date IS NULL THEN
	--				''
	--			ELSE
	--				Format(ADEPT.last_update_date, 'yyyy-MM-dd HH:mm:ss')
	--			END AS LAST_UPDATE_DATE
	--FROM PROJECT_TRL_APPROVAL_ABBR ABBR
	--INNER JOIN PROJECT_HDR PHDR ON ABBR.HEADER_MKEY = PHDR.MKEY
	--INNER JOIN APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT ADEPT ON ABBR.APPROVAL_MKEY = ADEPT.MKEY
	--INNER JOIN EMPLOYEE_MST createdby ON ADEPT.created_by = createdby.mkey
	--LEFT JOIN EMPLOYEE_MST updatedby ON ADEPT.last_updated_by = updatedby.mkey
	--WHERE 1 = 1  
	--AND ABBR.DELETE_FLAG = 'N'
	--AND ADEPT.DELETE_FLAG = 'N'
	--AND PHDR.DELETE_FLAG = 'N'
	--AND createdby.DELETE_FLAG = 'N'
	--and TASK_NO_MKEY =   @TASK_MKEY
	--AND PHDR.PROPERTY =  @PROPERTY_MKEY 
	--AND PHDR.BUILDING_MKEY =  @BUILDING_MKEY;
	
	--SELECT 
		 --       TMST.MKEY
			--	,TMST.TYPE_CODE
			--	,TMST.TYPE_DESC  
			--	,PHDR.PROPERTY AS PROPERTY_MKEY
			--	,PHDR.BUILDING_MKEY
			--	,SDEPART.SANCTIONING_AUTHORITY,
			--	Isnull(CONVERT(VARCHAR(50), HDR.created_by), '') AS CREATED_BY_ID,
			--	Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME,
			--	CASE
			--		WHEN HDR.creation_date IS NULL THEN
			--	''
			--	ELSE
			--		Format(HDR.creation_date, 'yyyy-MM-dd HH:mm:ss')
			--	END AS CREATION_DATE,
			--	Isnull(CONVERT(VARCHAR(50), HDR.last_updated_by), '') AS LAST_UPDATED_BY,
			--	Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME,
			--	CASE
			--		WHEN HDR.last_update_date IS NULL THEN
			--		''
			--	ELSE
			--		Format(HDR.last_update_date, 'yyyy-MM-dd HH:mm:ss')
			--	END AS LAST_UPDATE_DATE
			--FROM 
			--	TYPE_MST TMST 
			--INNER JOIN 
			--	APPROVAL_TEMPLATE_TRL_SANCTIONING_DEPARTMENT SDEPART ON TMST.MKEY = SDEPART.SANCTIONING_AUTHORITY
			--INNER JOIN 
			--	APPROVAL_TEMPLATE_HDR HDR
			--ON 
			--	SDEPART.mkey = HDR.mkey
			--INNER JOIN 
			--	PROJECT_TRL_APPROVAL_ABBR ABBR
			--ON 
			--	HDR.MKEY = ABBR.APPROVAL_MKEY
			--INNER JOIN 
			--	PROJECT_HDR PHDR
			--ON 
			--	PHDR.MKEY = ABBR.HEADER_MKEY
			--INNER JOIN 
			--	EMPLOYEE_MST createdby
			--ON 
			--	HDR.created_by = createdby.mkey
			--LEFT JOIN 
			--	EMPLOYEE_MST updatedby
			--ON 
			--	HDR.last_updated_by = updatedby.mkey
			--WHERE  1 = 1
			--AND 
			--	TMST.TYPE_CODE = 'SAUTHORITY'
			--AND 
			--	PHDR.PROPERTY = @PROPERTY_MKEY
			--AND 
			--	PHDR.BUILDING_MKEY = @BUILDING_MKEY
			--AND 
			--	SDEPART.DELETE_FLAG = 'N'
			--AND 
			--	HDR.DELETE_FLAG = 'N'
			--AND 
			--	ABBR.DELETE_FLAG = 'N'
			--AND 
			--	PHDR.DELETE_FLAG = 'N'
			--AND 
			--	createdby.DELETE_FLAG = 'N';
		
	END TRY
    BEGIN CATCH
        -------------------------------------------------------------------------------------------------------------------------------            
        SELECT ERROR_NUMBER() AS ERRORNUMBER,
               ERROR_SEVERITY() AS ERRORSEVERITY,
               ERROR_STATE() AS ERRORSTATE,
               ERROR_PROCEDURE() AS ERRORPROCEDURE,
               ERROR_LINE() AS ERRORLINE,
               ERROR_MESSAGE() AS ERRORMESSAGE;

        -------------------------------------------------------------------------------------------------------------------------------  
        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
        SET @ERROR_MESSAGE = ERROR_MESSAGE();
        -------------------------------------------------------------------------------------------------------------------------------  
        EXEC SP_P_TMS_INSERT_ERROR_DES @USER_ID,
                                       'TMS',
                                       @API_NAME,
                                       @ERROR_MESSAGE,
                                       @API_METHOD;
    -------------------------------------------------------------------------------------------------------------------------------  
    END CATCH

END

GO
/****** Object:  StoredProcedure [dbo].[SP_GET_TASK_TREE_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	exec SP_GET_TASK_TREE_NT 130,null
CREATE PROCEDURE [dbo].[SP_GET_TASK_TREE_NT](@TASK_MKEY INT,
                                         @Completed INT=NULL, @Session_User_Id INT = null,  
@Business_Group_Id	  INT = null)
AS
  BEGIN
      DECLARE @DTASK_NO NVARCHAR(100);

      SELECT @DTASK_NO = task_no
      FROM   task_hdr
      WHERE  mkey = @TASK_MKEY

      IF( @Completed = NULL )
        BEGIN
            SET @Completed=0
        END

      IF( @Completed = 1 )
        BEGIN
		print '@Completed = 1';
			--with actiontype as (
			--	SELECT T_HDR.mkey,
   --                T_HDR.unique_id,
   --                CASE
   --                  WHEN T_HDR.mkey = @TASK_MKEY THEN 0
   --                  ELSE task_parent_id
   --                END
   --                TASK_PARENT_ID
   --                ,
   --                task_no,
   --                dbo.[Initcap](task_name)
   --                TASK_NAME,
   --                dbo.[Initcap](task_description)
   --                TASK_DESCRIPTION,
   --                CONVERT(VARCHAR, completion_date, 105)
   --                COMPLETION_DATE,
   --                assigned_to,
   --                resposible_emp_mkey,
   --                --dbo.[Initcap](T_HDR.status) STATUS,
   --                status_perc,
			--	   LTRIM(RTRIM(T_HDR.[Priority])) AS [Priority],
   --                dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA')) RESPONSIBLE,
   --                dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))ACTIONABLE,
   --                CONVERT(VARCHAR, completion_date, 105)END_DATE,
   --                CASE
   --                  WHEN CONVERT(VARCHAR, start_date, 105) = '01-01-1900' THEN
   --                  ''
   --                  ELSE CONVERT(VARCHAR, start_date, 105)
   --                END START_DATE,
   --                CASE
   --                  WHEN CONVERT(VARCHAR, close_date, 105) = '01-01-1900' THEN
   --                  ''
   --                  ELSE CONVERT(VARCHAR, close_date, 105)END ACTUAL_COMPLETION_DATE,
   --                dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
   --                CREATOR, 
			--	   '0.00' AS progress_perc,null AS ACTION_TYPE,null AS COMMENT,null AS FILE_NAME,null AS FILE_PATH
			--	   ,dbo.[Initcap](T_HDR.status) STATUS,T_HDR.CREATION_DATE
   --         FROM   task_hdr T_HDR
   --                LEFT JOIN employee_mst RESPONSIBLE
   --                       ON RESPONSIBLE.mkey = T_HDR.assigned_to and RESPONSIBLE.DELETE_FLAG = 'N'
   --                LEFT JOIN employee_mst ACTIONABLE
   --                       ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey and ACTIONABLE.DELETE_FLAG = 'N'
   --                LEFT JOIN employee_mst CREATOR
   --                       ON CREATOR.mkey = T_HDR.created_by and CREATOR.DELETE_FLAG = 'N'
   --         WHERE  task_no LIKE '' + @DTASK_NO + '%' and  T_HDR.delete_flag = 'N'
   --                AND status_perc > 0
   --         union all
			--SELECT
			-- mkey,NULL AS unique_id,TASK_PARENT_ID,NULL AS task_no,NULL AS TASK_NAME,NULL AS TASK_DESCRIPTION,NULL AS COMPLETION_DATE,NULL AS assigned_to
			--,NULL AS resposible_emp_mkey,NULL AS status_perc,NULL AS Priority,NULL AS RESPONSIBLE
			--,NULL AS ACTIONABLE,NULL AS END_DATE,NULL AS START_DATE,NULL AS ACTUAL_COMPLETION_DATE,NULL AS CREATOR
   --             --,CONVERT(VARCHAR(50), creation_date, 103)CREATION_DATE,
   --            , progress_perc,
   --            -- dbo.[Initcap](status)                   STATUS,
   --             dbo.[Initcap](action_type)              ACTION_TYPE,
   --             dbo.[Initcap](description_comment)      COMMENT,
   --             Isnull(file_name, '')                   FILE_NAME,
   --             Isnull(file_path, '')                   FILE_PATH,
			--	dbo.[Initcap](status)                   STATUS,
			--	CREATION_DATE
   --      FROM   task_action_trl
   --      WHERE  delete_flag = 'N'
   --             AND mkey = @TASK_MKEY -- 24-03-2025
			--	) 
			--	select *
			--	from actiontype
			--	order by CREATION_DATE


            SELECT T_HDR.mkey,
                   T_HDR.unique_id,
                   CASE
                     WHEN T_HDR.mkey = @TASK_MKEY THEN 0
                     ELSE task_parent_id
                   END
                   TASK_PARENT_ID
                   ,
                   task_no,
                   dbo.[Initcap](task_name)
                   TASK_NAME,
                   dbo.[Initcap](task_description)
                   TASK_DESCRIPTION,
                   CONVERT(VARCHAR, completion_date, 105)
                   COMPLETION_DATE,
                   assigned_to,
                   resposible_emp_mkey,
                   dbo.[Initcap](T_HDR.status)                            STATUS
                   ,
                   status_perc,
				   LTRIM(RTRIM(T_HDR.[Priority])) AS [Priority],
                   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))
                   RESPONSIBLE,
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
                   ACTIONABLE,
                   CONVERT(VARCHAR, completion_date, 105)
                   END_DATE
                   ,
                   CASE
                     WHEN CONVERT(VARCHAR, start_date, 105) = '01-01-1900' THEN
                     ''
                     ELSE CONVERT(VARCHAR, start_date, 105)
                   END
                   START_DATE,
                   CASE
                     WHEN CONVERT(VARCHAR, close_date, 105) = '01-01-1900' THEN
                     ''
                     ELSE CONVERT(VARCHAR, close_date, 105)
                   END
                   ACTUAL_COMPLETION_DATE,
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
                   CREATOR
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by
            WHERE  task_no LIKE '' + @DTASK_NO + '%'
                   AND status_perc > 0
            ORDER  BY 1
        END
      ELSE
        BEGIN
			print '@Completed <> 1';
			--with actiontype as (
			--	SELECT T_HDR.mkey,
   --                T_HDR.unique_id,
   --                CASE
   --                  WHEN T_HDR.mkey = @TASK_MKEY THEN 0
   --                  ELSE task_parent_id
   --                END
   --                TASK_PARENT_ID
   --                ,
   --                task_no,
   --                dbo.[Initcap](task_name)
   --                TASK_NAME,
   --                dbo.[Initcap](task_description)
   --                TASK_DESCRIPTION,
   --                CONVERT(VARCHAR, completion_date, 105)
   --                COMPLETION_DATE,
   --                assigned_to,
   --                resposible_emp_mkey,
   --                --dbo.[Initcap](T_HDR.status) STATUS,
   --                status_perc,
			--	   LTRIM(RTRIM(T_HDR.[Priority])) AS [Priority],
   --                dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA')) RESPONSIBLE,
   --                dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))ACTIONABLE,
   --                CONVERT(VARCHAR, completion_date, 105)END_DATE,
   --                CASE
   --                  WHEN CONVERT(VARCHAR, start_date, 105) = '01-01-1900' THEN
   --                  ''
   --                  ELSE CONVERT(VARCHAR, start_date, 105)
   --                END START_DATE,
   --                CASE
   --                  WHEN CONVERT(VARCHAR, close_date, 105) = '01-01-1900' THEN
   --                  ''
   --                  ELSE CONVERT(VARCHAR, close_date, 105)END ACTUAL_COMPLETION_DATE,
   --                dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
   --                CREATOR, 
			--	   '0.00' AS progress_perc,null AS ACTION_TYPE,null AS COMMENT,null AS FILE_NAME,null AS FILE_PATH
			--	   ,dbo.[Initcap](T_HDR.status) STATUS,T_HDR.CREATION_DATE
   --         FROM   task_hdr T_HDR
   --                LEFT JOIN employee_mst RESPONSIBLE
   --                       ON RESPONSIBLE.mkey = T_HDR.assigned_to and RESPONSIBLE.DELETE_FLAG = 'N'
   --                LEFT JOIN employee_mst ACTIONABLE
   --                       ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey and ACTIONABLE.DELETE_FLAG = 'N'
   --                LEFT JOIN employee_mst CREATOR
   --                       ON CREATOR.mkey = T_HDR.created_by and CREATOR.DELETE_FLAG = 'N'
   --         WHERE  task_no LIKE '' + @DTASK_NO + '%' and  T_HDR.delete_flag = 'N'
   --               -- AND status_perc > 0
   --         union all
			--SELECT
			-- mkey,NULL AS unique_id,TASK_PARENT_ID,NULL AS task_no,NULL AS TASK_NAME,NULL AS TASK_DESCRIPTION,NULL AS COMPLETION_DATE,NULL AS assigned_to
			--,NULL AS resposible_emp_mkey,NULL AS status_perc,NULL AS Priority,NULL AS RESPONSIBLE
			--,NULL AS ACTIONABLE,NULL AS END_DATE,NULL AS START_DATE,NULL AS ACTUAL_COMPLETION_DATE,NULL AS CREATOR
   --             --,CONVERT(VARCHAR(50), creation_date, 103)CREATION_DATE,
   --            , progress_perc,
   --            -- dbo.[Initcap](status)                   STATUS,
   --             dbo.[Initcap](action_type)              ACTION_TYPE,
   --             dbo.[Initcap](description_comment)      COMMENT,
   --             Isnull(file_name, '')                   FILE_NAME,
   --             Isnull(file_path, '')                   FILE_PATH,
			--	dbo.[Initcap](status)                   STATUS,
			--	CREATION_DATE
   --      FROM   task_action_trl
   --      WHERE  delete_flag = 'N'
   --             AND mkey = @TASK_MKEY -- 24-03-2025
			--	) 
			--	select *
			--	from actiontype
			--	order by CREATION_DATE
            SELECT T_HDR.mkey,
                   T_HDR.unique_id,
                   CASE
                     WHEN T_HDR.mkey = @TASK_MKEY THEN 0
                     ELSE task_parent_id
                   END
                   TASK_PARENT_ID
                   ,
                   task_no,
                   dbo.[Initcap](task_name)
                   TASK_NAME,
                   dbo.[Initcap](task_description)
                   TASK_DESCRIPTION,
                   CONVERT(VARCHAR, completion_date, 105)
                   COMPLETION_DATE,
                   assigned_to,
                   resposible_emp_mkey,
                   dbo.[Initcap](T_HDR.status)                            STATUS
                   ,
                   status_perc,
				   LTRIM(RTRIM(T_HDR.[Priority])) AS [Priority],
                   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))
                   RESPONSIBLE,
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
                   ACTIONABLE,
                   CONVERT(VARCHAR, completion_date, 105)
                   END_DATE
                   ,
                   CASE
                     WHEN CONVERT(VARCHAR, start_date, 105) = '01-01-1900' THEN
                     ''
                     ELSE CONVERT(VARCHAR, start_date, 105)
                   END
                   START_DATE,
                   CASE
                     WHEN CONVERT(VARCHAR, close_date, 105) = '01-01-1900' THEN
                     ''
                     ELSE CONVERT(VARCHAR, close_date, 105)
                   END
                   ACTUAL_COMPLETION_DATE,
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
                   CREATOR
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by
            WHERE  task_no LIKE '' + @DTASK_NO + '%'
            ORDER  BY 1
        END
  END
--exec [SP_GET_TASK_TREE] 2  
GO
/****** Object:  StoredProcedure [dbo].[Sp_get_team_progress_nt]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Sp_get_team_progress_nt](@CURRENT_EMP_MKEY  INT,
                                                 @Session_User_Id   INT,
                                                 @Business_Group_Id INT)
AS
  BEGIN
      DECLARE @dCount      INT,
              @dErpEmpMkey INT

      SELECT @dErpEmpMkey = erp_emp_mkey
      FROM   employee_mst
      WHERE  mkey = @CURRENT_EMP_MKEY;

      WITH reportees
           AS (SELECT mkey         'CURRENT_EMP_MKEY',
                      department_id,
                      erp_emp_mkey,
                      emp_full_name'MEMBER_NAME',
                      ra1_mkey,
                      1            AS Level
               FROM   employee_mst
               WHERE  Isnull(delete_flag, 'N') = 'N'
                      AND ra1_mkey = @dErpEmpMkey
                      AND emp_code != 1
               UNION ALL
               SELECT E.mkey          'CURRENT_EMP_MKEY',
                      E.department_id,
                      E.erp_emp_mkey,
                      E.emp_full_name 'MEMBER_NAME',
                      E.ra1_mkey,
                      level + 1
               FROM   employee_mst AS E
                      INNER JOIN reportees
                              ON E.ra1_mkey = reportees.erp_emp_mkey
                                 AND Isnull(delete_flag, 'N') = 'N')
      SELECT *
      INTO   #temp_reportees
      FROM   reportees;

      --select * from #TEMP_REPORTEES order by level,MEMBER_NAME;  
      SELECT
  RPT.*,
  --T_HDR.*  
  T_HDR.mkey,
  Isnull(CATEGORY.type_desc, 'NA')                       CATEGORY,
  T_HDR.task_no,
  dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))     CREATOR,
  dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA')) RESPONSIBLE,
  dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))  ACTIONABLE,
  T_HDR.creation_date
  ,
  CONVERT(VARCHAR, T_HDR.completion_date, 103)           COMPLETION_DATE,
  dbo.[Initcap](T_HDR.task_name)                         TASK_NAME,
  T_HDR.task_description,
  T_HDR.tags,
  dbo.[Initcap](T_HDR.status)                            STATUS,
  CASE
    WHEN Isnull(CREATOR.first_name, 'NA') !=
         Isnull(RESPONSIBLE.first_name, 'NA')
  THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
  + ' > '
  + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA') )
    ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
  END
  RESPONSIBLE_TAG,
  ASSIGNEE.emp_full_name                                 'ASSIGNEE',
  ASSIGNEE.department_id
  'ASSIGNEE_DEPARTMENT_ID',
  CASE
    WHEN RPT.department_id = ASSIGNEE.department_id THEN 'DEPERTMENT'
    WHEN RPT.department_id != ASSIGNEE.department_id THEN
    'INTER-DEPERTMENT'
  END                                                    AS 'TASKTYPE',
  CASE
    WHEN RPT.department_id = ASSIGNEE.department_id
         AND ( T_HDR.assigned_to = RPT.current_emp_mkey
                OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
         AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
         AND CONVERT(VARCHAR, T_HDR.completion_date, 103) =
             CONVERT(VARCHAR, Getdate(), 103)
         AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN 'DEPT-TODAY'
    WHEN RPT.department_id = ASSIGNEE.department_id
         AND ( T_HDR.assigned_to = RPT.current_emp_mkey
                OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
         AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
         AND T_HDR.completion_date < CONVERT(DATETIME,
                                     CONVERT(VARCHAR, Getdate(),
                                     103),
                                     103)
         AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN 'DEPT-OVERDUE'
    WHEN RPT.department_id = ASSIGNEE.department_id
         AND ( T_HDR.assigned_to = RPT.current_emp_mkey
                OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
         AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
                    --AND T_HDR.STATUS  in ('Close Initiated','Cancel Initiated')  
                    AND T_HDR.completion_date > CONVERT(DATETIME,
                                                CONVERT(VARCHAR, Getdate(),
                                                103),
                                                103)
                    AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN 'DEPT-FUTURE'
               WHEN RPT.department_id != ASSIGNEE.department_id
                    AND ( T_HDR.assigned_to = RPT.current_emp_mkey
                           OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
                    AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
                    AND CONVERT(VARCHAR, T_HDR.completion_date, 103) =
                        CONVERT(VARCHAR, Getdate(), 103)
                    AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN
               'INTERDEPT-TODAY'
               WHEN RPT.department_id != ASSIGNEE.department_id
                    AND ( T_HDR.assigned_to = RPT.current_emp_mkey
                           OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
                    AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
                    AND T_HDR.completion_date < CONVERT(DATETIME,
                                                CONVERT(VARCHAR, Getdate(),
                                                103),
                                                103)
                    AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN
               'INTERDEPT-OVERDUE'
               WHEN RPT.department_id != ASSIGNEE.department_id
                    AND ( T_HDR.assigned_to = RPT.current_emp_mkey
                           OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
                    AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
                    --AND T_HDR.STATUS  in ('Close Initiated','Cancel Initiated')  
                    AND T_HDR.completion_date > CONVERT(DATETIME,
                                                CONVERT(VARCHAR, Getdate(),
                                                103),
                                                103)
                    AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN
               'INTERDEPT-FUTURE'
             END                                                    AS
             'TASKTYPE_DESC'
             ,
             dbo.[Initcap](Isnull(PROJ.type_desc, ''))
             PROJECT_NAME
      INTO   #temp_reportees_details
      FROM   #temp_reportees RPT
             LEFT JOIN task_hdr T_HDR
                    ON ( RPT.current_emp_mkey = T_HDR.assigned_to
                          OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
             LEFT JOIN employee_mst ASSIGNEE
                    ON T_HDR.created_by = ASSIGNEE.mkey
             LEFT JOIN employee_mst CREATOR
                    ON CREATOR.mkey = T_HDR.created_by
             LEFT JOIN employee_mst RESPONSIBLE
                    ON RESPONSIBLE.mkey = T_HDR.assigned_to
             LEFT JOIN employee_mst ACTIONABLE
                    ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
             LEFT JOIN v_category CATEGORY
                    ON CATEGORY.mkey = T_HDR.caregory
             LEFT JOIN v_project PROJ
                    ON T_HDR.project_id = PROJ.master_mkey
      WHERE  T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' );

      --ORDER BY RPT.MEMBER_NAME;  
      SELECT *,
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'DEPT-TODAY'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'DEPTTODAY'
             ,
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'DEPT-OVERDUE'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'DEPTOVERDUE',
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'DEPT-FUTURE'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'DEPTFUTURE',
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'INTERDEPT-TODAY'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'INTERDEPTTODAY',
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'INTERDEPT-OVERDUE'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'INTERDEPTOVERDUE',
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'INTERDEPT-FUTURE'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'INTERDEPTFUTURE'
      FROM   #temp_reportees A
      ORDER  BY level,
                member_name

      SELECT *
      FROM   #temp_reportees_details
      ORDER  BY member_name;

      DROP TABLE #temp_reportees;

      DROP TABLE #temp_reportees_details;
  /*  
  select emp_code, EMP_FULL_NAME, 'Direct Report' Report_type ,mkey,DEPARTMENT_ID  
  from EMPLOYEE_MST where    
   RA1_MKEY in   
  (  
  @dErpEmpMkey  
  )   
  union    
  select emp_code, EMP_FULL_NAME , 'Indirect Report' Report_type ,mkey,DEPARTMENT_ID   
  from EMPLOYEE_MST where   RA2_MKEY in   
  (  
    @dErpEmpMkey  
  )  
  and emp_code not in (select emp_code  
  from EMPLOYEE_MST where    
   RA1_MKEY in   
  (  
  @dErpEmpMkey  
  ))    
  UNION  
  SELECT emp_code, EMP_FULL_NAME ,'Subordinate Report' Report_type ,mkey,DEPARTMENT_ID  
  from EMPLOYEE_MST where    
   RA1_MKEY in   
  (  
  select ERP_EMP_MKEY   
  from EMPLOYEE_MST where    
   RA1_MKEY in   
  (  
  @dErpEmpMkey  
  )   
  )   
  and emp_code not in (select emp_code  
  from EMPLOYEE_MST where    
   RA2_MKEY in   
  (  
  @dErpEmpMkey  
  ))  
    
  order by 1  
  */
  END
--EXEC [SP_GET_TEAM_PROGRESS] 9  
--select * from EMPLOYEE_MST where emp_name like '%vyom%'  
GO
/****** Object:  StoredProcedure [dbo].[SP_INERT_TASK_SANCTIONING_AUTHORITY_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- EXEC SP_INERT_TASK_SANCTIONING_AUTHORITY 11082,1,1,440,443,'COMPLETED', 'UPDATE','UPDATE',926
--exec SP_INERT_TASK_SANCTIONING_AUTHORITY @MKEY=152,@SR_NO=5,@LEVEL=N'3',@PROPERTY_MKEY=208,@BUILDING_MKEY=285,@STATUS=N'Re-Work'
--,@APINAME=N'UPDATE SANSACTING DEPARTMENT',@APIMETHOD=N'UPDATE',@CREATED_BY=926
-- =============================================
 CREATE PROCEDURE [dbo].[SP_INERT_TASK_SANCTIONING_AUTHORITY_NT]
	-- Add the parameters for the stored procedure here
	@MKEY INT,
	@SR_NO INT,
	@LEVEL NVARCHAR(10),
	@PROPERTY_MKEY INT,
	@BUILDING_MKEY INT,
	@Mode NVARCHAR(200) = null,
	@STATUS NVARCHAR(100),
	@COMMENT NVARCHAR(max)= null,
	@Session_User_Id          INT,  
	@Business_Group_Id	  INT,
	@APINAME NVARCHAR(200),
	@APIMETHOD NVARCHAR(100),
	@CREATED_BY INT
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
			DECLARE @NEXTLEVEL INT,@PreviousSrNo int, @CurrentStatus Nvarchar(100),@ToLevel int,@NextSR_NO int;
---------------------------------------------------------------------------------------------------------------------------------------------------
			print 'start SP';
			INSERT INTO TASK_SANCTIONING_DEPARTMENT_TRL_H(
															HIST_DATE
															,MKEY
															,SR_NO
															,LEVEL
															,SANCTIONING_DEPARTMENT
															,SANCTIONING_AUTHORITY_MKEY
															,SANCTIONING_AUTHORITY
															,STATUS
															,STATUS_MODE
															,START_DATE
															,END_DATE
															,COMMENT
															,ATTRIBUTE1
															,ATTRIBUTE2
															,ATTRIBUTE3
															,ATTRIBUTE4
															,ATTRIBUTE5
															,CREATED_BY
															,CREATION_DATE
															,LAST_UPDATED_BY
															,LAST_UPDATE_DATE
															,DELETE_FLAG
															)
															SELECT GETDATE()
															,MKEY
															,SR_NO
															,LEVEL
															,SANCTIONING_DEPARTMENT
															,SANCTIONING_AUTHORITY_MKEY
															,SANCTIONING_AUTHORITY
															,STATUS
															,STATUS_MODE
															,START_DATE
															,END_DATE
															,COMMENT
															,ATTRIBUTE1
															,ATTRIBUTE2
															,ATTRIBUTE3
															,ATTRIBUTE4
															,ATTRIBUTE5
															,CREATED_BY
															,CREATION_DATE
															,LAST_UPDATED_BY
															,LAST_UPDATE_DATE
															,DELETE_FLAG
													FROM TASK_SANCTIONING_DEPARTMENT_TRL
													WHERE DELETE_FLAG = 'N'
													AND MKEY = @MKEY
													AND SR_NO = @SR_NO
---------------------------------------------------------------------------------------------------------------------------------------------------
					UPDATE 
						TASK_SANCTIONING_DEPARTMENT_TRL
					SET [STATUS] = @STATUS, STATUS_MODE = @Mode 
					WHERE DELETE_FLAG = 'N' 
					AND MKEY = @MKEY
					AND LEVEL = @LEVEL
					AND SR_NO = @SR_NO;
					print 'update sp'
				
---------------------------------------------------------------------------------------------------------------------------------------------------											
                      SELECT @NextSR_NO = (Isnull(Max(sr_no), 0) + 1), @PreviousSrNo = Max(sr_no)
                      FROM   TASK_SANCTIONING_DEPARTMENT_TRL_MOVEMENT_HISTORY
                      WHERE  task_mkey = @MKEY
                             -- AND [level] = @LEVEL
                             AND delete_flag = 'N';
							 print '@SR_NO: '+ convert(nvarchar(100), @SR_NO);
							 print '@@PreviousSrNo: '+ convert(nvarchar(100), @PreviousSrNo);
---------------------------------------------------------------------------------------------------------------------------------------------------						
                      SELECT @ToLevel = TO_LEVEL,@CurrentStatus = UPDATED_STATUS 
                      FROM   TASK_SANCTIONING_DEPARTMENT_TRL_MOVEMENT_HISTORY
                      WHERE  task_mkey = @MKEY
                             AND SR_NO = @PreviousSrNo
                             AND delete_flag = 'N';
					print '@@ToLevel: '+ convert(nvarchar(100), @ToLevel);
					print '@CurrentStatus: '+ convert(nvarchar(100), @CurrentStatus);
---------------------------------------------------------------------------------------------------------------------------------------------------									
                     
					  INSERT INTO
								  TASK_SANCTIONING_DEPARTMENT_TRL_MOVEMENT_HISTORY
								  (sr_no,
								   task_mkey,
								   FROM_LEVEL,
								   TO_LEVEL,
								   current_status,
								   updated_status,
								   COMMENT,
								   HISTORY_DATE,
								   LAST_UPDATED_BY,
								   LAST_UPDATE_DATE,
								   delete_flag, CREATED_BY)
							VALUES	(@NextSR_NO,
									@MKEY,
									isnull(@ToLevel,@LEVEL),
									@LEVEL,
									isnull(@CurrentStatus,@Status),
									@Status,
									@COMMENT,
									Getdate(),
									@CREATED_BY,
									Getdate(),
									'N',@CREATED_BY)
									print 'insert into movvment table';
									
---------------------------------------------------------------------------------------------------------------------------------------------------
				SELECT  @NEXTLEVEL = (CONVERT(INT,LEVEL)+1) FROM TASK_SANCTIONING_DEPARTMENT_TRL 
				WHERE DELETE_FLAG='N'
				--AND SR_NO = @SR_NO
				AND MKEY = @MKEY;
				
				--Declare @CurrentStatus nvarchar(100), @FromLevel int;	

				--SELECT @CurrentStatus = status, @FromLevel = level
    --                  FROM   task_sanctioning_department_trl
    --                  WHERE  mkey = @MKEY
    --                         AND sr_no = @SR_NO
    --                         AND delete_flag = 'N';

    --                  SELECT @SR_NO = Isnull(Max(sr_no), 0) + 1
    --                  FROM   TASK_SANCTIONING_DEPARTMENT_TRL_MOVEMENT_HISTORY
    --                  WHERE  task_mkey = @MKEY
    --                         --AND [level] = @LEVEL
    --                         AND delete_flag = 'N';

    --                  INSERT INTO
				--				  TASK_SANCTIONING_DEPARTMENT_TRL_MOVEMENT_HISTORY
				--				  (sr_no,
				--				   task_mkey,
				--				   FROM_LEVEL,
				--				   TO_LEVEL,
				--				   current_status,
				--				   updated_status,
				--				   HISTORY_DATE,
				--				   LAST_UPDATED_BY,
				--				   LAST_UPDATE_DATE,
				--				   delete_flag)
				--		VALUES     (@SR_NO,
				--					@MKEY,
				--					@FromLevel,
				--					@LEVEL,
				--					@CurrentStatus,
				--					@Status,
				--					Getdate(),
				--					@CREATED_BY,
				--					Getdate(),
				--					'N')


				PRINT '@NEXTLEVEL: '+ CONVERT(VARCHAR(100), @NEXTLEVEL );
				--SELECT  CONVERT(INT,LEVEL), (CONVERT(INT,LEVEL)+1) FROM TASK_SANCTIONING_DEPARTMENT_TRL
				--WHERE DELETE_FLAG='N'
				--AND SR_NO = 1
				--AND MKEY =11082;

				--SELECT * FROM TASK_SANCTIONING_DEPARTMENT_TRL 
				--WHERE DELETE_FLAG = 'N' 
				--AND MKEY = @MKEY
				----AND SR_NO = @SR_NO
				--AND LEVEL = CONVERT(VARCHAR, @NEXTLEVEL);
	
				UPDATE 
					TASK_SANCTIONING_DEPARTMENT_TRL
					SET [STATUS] = @STATUS, STATUS_MODE = @Mode 
					WHERE DELETE_FLAG = 'N' 
					AND MKEY = @MKEY
					AND LEVEL = @NEXTLEVEL
					--AND SR_NO = @SR_NO ;
			

				SELECT DTRL.MKEY,DTRL.SR_NO, THDR.PROJECT_ID AS PROPERTY_MKEY,THDR.SUB_PROJECT_ID AS BUILDING_MKEY, 
				DTRL.SANCTIONING_DEPARTMENT AS TYPE_CODE,DTRL.SANCTIONING_AUTHORITY AS [TYPE_DESC],
				DTRL.SANCTIONING_AUTHORITY_MKEY AS SANCTIONING_AUTHORITY ,
				DTRL.[STATUS] AS [STATUS],
				DTRL.STATUS_MODE AS MODE,
				--CASE WHEN  ISNULL(DTRL.[STATUS],'') = '' OR ISNULL(DTRL.[STATUS],'') = NULL THEN 'In-Progress' ELSE DTRL.[STATUS]  end AS [STATUS],
				DTRL.[START_DATE], DTRL.END_DATE, DTRL.[level] 
				,Isnull(CONVERT(VARCHAR(50), DTRL.created_by), '') AS CREATED_BY_ID,
				Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME,
				CASE
					WHEN DTRL.creation_date IS NULL THEN
				''
				ELSE
					Format(DTRL.creation_date, 'yyyy-MM-dd HH:mm:ss')
				END AS CREATION_DATE,
				Isnull(CONVERT(VARCHAR(50), DTRL.last_updated_by), '') AS LAST_UPDATED_BY,
				Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME,
				CASE
					WHEN DTRL.last_update_date IS NULL THEN
					''
				ELSE
					Format(DTRL.last_update_date, 'yyyy-MM-dd HH:mm:ss')
				END AS LAST_UPDATE_DATE,
				@MKEY as MKEY ,
				@SR_NO as SR_NO,
				@LEVEL as LEVEL,
				DTRL.STATUS_MODE as MODE,
				@PROPERTY_MKEY as PROPERTY_MKEY,
				@BUILDING_MKEY as BUILDING_MKEY,
				@STATUS as STATUS,	@CREATED_BY as CREATED_BY_ID
				FROM  TASK_SANCTIONING_DEPARTMENT_TRL DTRL INNER JOIN TASK_HDR THDR ON DTRL.MKEY = THDR.MKEY
				INNER JOIN EMPLOYEE_MST createdby ON DTRL.CREATED_BY = createdby.mkey
				LEFT JOIN EMPLOYEE_MST updatedby ON DTRL.last_updated_by = updatedby.mkey
				WHERE  DTRL.DELETE_FLAG = 'N'
				AND createdby.DELETE_FLAG = 'N'
				AND DTRL.MKEY =  @MKEY
				AND SR_NO = @SR_NO
				ORDER BY DTRL.[level] ;
				

	END TRY
    BEGIN CATCH
        -------------------------------------------------------------------------------------------------------------------------------            
        SELECT ERROR_NUMBER() AS ERRORNUMBER,
               ERROR_SEVERITY() AS ERRORSEVERITY,
               ERROR_STATE() AS ERRORSTATE,
               ERROR_PROCEDURE() AS ERRORPROCEDURE,
               ERROR_LINE() AS ERRORLINE,
               ERROR_MESSAGE() AS ERRORMESSAGE;

        -------------------------------------------------------------------------------------------------------------------------------  
        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
        SET @ERROR_MESSAGE = ERROR_MESSAGE();
        -------------------------------------------------------------------------------------------------------------------------------  
        EXEC SP_P_TMS_INSERT_ERROR_DES @CREATED_BY,
                                       'TMS',
                                       @APINAME,
                                       @ERROR_MESSAGE,
                                       @APIMETHOD;
    -------------------------------------------------------------------------------------------------------------------------------  
    END CATCH

END



GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_SCHEDULED_MSP]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    
    
CREATE PROCEDURE [dbo].[SP_INSERT_SCHEDULED_MSP](@Parameter1 VARCHAR(100) = NULL,     
    
                                                --[MKEY]       
                                                @Parameter2 VARCHAR(100) = NULL,     
    
                                                --SR_NO      
                                                @Parameter3 VARCHAR(100) = NULL,     
    
                                                --TASK_NO         
                                                @Parameter4 VARCHAR(100) = NULL,     
    
                                                --TASK_DESC      
                                                @Parameter5 VARCHAR(100) = NULL,     
    
                                                --DURATION        
                                                @Parameter6 VARCHAR(100) = NULL,     
    
                                                --START       
                                                @Parameter7 VARCHAR(100) = NULL     
--FINISH       
)     
AS     
  BEGIN     
      DECLARE @DCount            INT,     
              @ROOT_MKEY         INT,     
              @ROOT_NUMBER       NVARCHAR(50),     
              @Mkey              INT,     
              @WBS               NVARCHAR(50),     
              @Name              NVARCHAR(500),     
              @Duration          NVARCHAR(100),     
              @Start_Date        DATETIME,     
              @Finish_Date       DATETIME,     
              @Predecessors      NVARCHAR(100),     
              @Resource_Names    NVARCHAR(100),     
              @Text1             NVARCHAR(100),     
              @Outline_Level     INT,     
              @Number1           INT,     
              @Unique_ID         INT,     
     @Percent_Complete  NUMERIC(18,2),    
              @Created_By        INT,     
              @Creation_Date     DATETIME,     
              @CreatorID         INT,     
              @AssigneeID        INT,     
              @TaskMkey          INT,     
              @Task_Parent_ID    INT,     
              @Task_Main_Node_ID INT,     
              @Task_No           NVARCHAR(20)     
      DECLARE @lastIndex INT     
    
      SET @DCount=0     
    
      SET @lastIndex=0     
    
set @Parameter1=isnull(@Parameter1,'0')    
    
set @Parameter2=isnull(@Parameter2,'0')    
    
update msp_default_migration_table set remarks='Error : Resource Not Found'    
FROM   msp_default_migration_table MT     
                     LEFT JOIN employee_mst EMP     
                            ON MT.resource_names = EMP.emp_full_name     
                     LEFT JOIN employee_mst Creator     
                            ON MT.text1 = Creator.emp_full_name     
where (isnull(Creator.mkey,0)=0 or isnull(EMP.mkey,0)=0)    
    
select wbs,count(wbs) C_WBS into #TempWBS FROM   msp_default_migration_table     
 group by wbs     
 having count(wbs)>1    
    
update msp_default_migration_table set remarks='Error : Duplicate WBS No'    
FROM   msp_default_migration_table MT join #TempWBS temp on MT.wbs=temp.wbs    
    
drop table #TempWBS    
    
select unique_id,count(unique_id) C_unique_id into #TempUniqueId FROM   msp_default_migration_table     
 group by unique_id     
 having count(unique_id)>1    
    
update msp_default_migration_table set remarks='Error : Duplicate unique_id'    
FROM   msp_default_migration_table MT join #TempUniqueId temp on MT.unique_id=temp.unique_id    
    
drop table #TempUniqueId    
    
      SELECT @DCount = Isnull(Count(*), 0)     
      FROM   msp_default_migration_table MT     
      WHERE  remarks like '%Error%'    
          
  IF( @DCount <= 0 )     
  BEGIN     
                      
    
    
      SELECT @DCount = Isnull(Count(*), 0)     
      FROM   msp_default_migration_table MT     
      WHERE  outline_level = 1     
             --AND unique_id = 1     
    
      --order by Unique_id      
      IF( @DCount > 0 )     
        BEGIN     
    
            SELECT @WBS = wbs,     
                   @Name = NAME,     
                @Duration = duration,     
                   @Start_Date = start_date,     
                   @Finish_Date = finish_date,     
                   @Predecessors = predecessors,     
                   @Resource_Names = resource_names,     
                   @Text1 = text1,     
                   @Outline_Level = outline_level,     
                   @Number1 = number1,     
                   @Unique_ID = unique_id,     
       @Percent_Complete=Percent_Complete,    
                   @Created_By = MT.created_by,     
                   @Creation_Date = MT.creation_date,     
                   @AssigneeID = emp.mkey,     
                   @CreatorID = Creator.mkey     
            FROM   msp_default_migration_table MT     
                   LEFT JOIN employee_mst EMP     
                          ON MT.resource_names = EMP.emp_full_name     
                   LEFT JOIN employee_mst Creator     
                          ON MT.text1 = Creator.emp_full_name     
            WHERE  outline_level = 1     
    
            IF( @Number1 > 0 )/* CHECK WHETHER PROJECT ALREADY DEFINED*/     
              BEGIN     
                  PRINT 'SONI'     
    
                  SELECT @ROOT_MKEY = mkey,     
                         @ROOT_NUMBER = task_no,     
                         @Task_Main_Node_ID = mkey     
                  FROM   task_hdr     
                  WHERE  mkey = @Number1     
    
                  INSERT INTO task_hdr_h     
                  SELECT Getdate(),     
                         *     
                  FROM   task_hdr     
                  WHERE  mkey = @Number1     
    
                  UPDATE task_hdr     
                  SET    task_name = @Name,     
                         task_description = @Name,     
                         assigned_to = @AssigneeID,     
                         task_created_by = @CreatorID,     
                         start_date = @start_date,     
                         completion_date = @Finish_Date,     
                         Is_Scheduled = 'Y',     
                         wbs = @WBS,     
                         duration = @Duration,     
                         sch_start_date = @Start_Date,     
                         finish_date = @Finish_Date,     
                         predecessors = @Predecessors,     
                         resource_names = @Resource_Names,     
                         text1 = @Text1,     
                         outline_level = @Outline_Level,     
                         number1 = @Number1,     
                         unique_id = @Unique_ID,    
       Percent_Complete=@Percent_Complete     
                  WHERE  mkey = @Number1     
                         AND (    
                         status NOT IN ( 'COMPLETED', 'CANCEL' )     
                         or predecessors>0    
                         )    
                         AND Is_Scheduled = 'Y'     
    
                  UPDATE msp_default_migration_table     
                  SET    process_flag = 'Y',     
                         remarks = 'Task_No Updated Successfully'     
                  WHERE  unique_id = @Unique_ID     
                         AND outline_level = @Outline_Level     
              END     
            ELSE/* PROJECT NOT DEFINED SO CREATE A ROOT TASK WITH DETAILS*/     
              BEGIN     
                  DECLARE @TableOutput_TASK_DETAILS TABLE     
                    (     
                       mkey              INT,     
                       task_parent_id    NVARCHAR(20),     
                       task_main_node_id NVARCHAR(20),     
                       task_no           NVARCHAR(20)     
                    )     
     print 'INM'+@Resource_Names  
    
                  INSERT INTO @TableOutput_TASK_DETAILS     
                  EXEC [dbo].[Sp_insert_task_details]     
                    '0000',     
                    @Name,     
                    @Name,     
                    '64',     
                    @Parameter1,     
                    @Parameter2,     
                    @Finish_Date,     
     @AssigneeID,  
                   -- @Resource_Names,     
                    'Scheduled',     
                    'N',     
                    --@START_DATE          DATETIME,       
                    '1900-01-01 00:00:00.000',     
                    '1900-01-01 00:00:00.000',     
                    0,     
                    'WIP',     
                    '0',     
                    @CreatorID,     
                 1,   
     0,  
     '',     
                    '',     
                    '',     
                    '',     
                    '',     
                    '',     
                    @CreatorID,     
                    '1900-01-01 00:00:00.000',     
                    @CreatorID,     
                    '1900-01-01 00:00:00.000'     
    
   print 'INsert ed'+@Resource_Names  
    
                  --select * from task_hdr      
                  SELECT @TaskMkey = mkey,     
                         @Task_Parent_ID = task_parent_id,     
                         @Task_Main_Node_ID = task_main_node_id,     
                         @Task_No = task_no     
                  FROM   @TableOutput_TASK_DETAILS     
    
                  UPDATE task_hdr     
                  SET    start_date = @start_date,     
                         Is_Scheduled = 'Y',     
                         wbs = @WBS,     
                         duration = @Duration,     
                         sch_start_date = @Start_Date,     
                         finish_date = @Finish_Date,     
                         predecessors = @Predecessors,     
                         resource_names = @Resource_Names,     
                         text1 = @Text1,     
                         outline_level = @Outline_Level,     
                         number1 = @Number1,     
                         unique_id = @Unique_ID,    
       Percent_Complete=@Percent_Complete     
                  WHERE  mkey = @TaskMkey     
    
                  UPDATE msp_default_migration_table     
                  SET    number1 = @TaskMkey,     
                         process_flag = 'Y',     
                         remarks = 'Created Successfully--Task_No-->'     
                                   + @Task_No     
                  WHERE  unique_id = @Unique_ID     
                         AND outline_level = @Outline_Level     
              END     
    
            /*Logic For SubTask Creation */     
            DECLARE pcursurbreak CURSOR FOR     
              SELECT wbs,     
                     NAME,     
                     duration,     
                     start_date,     
                     finish_date,     
                     predecessors,     
                     resource_names,     
                     text1,     
                     outline_level,     
                     number1,     
                     unique_id,    
      Percent_Complete,     
                     --MT.created_by,     
      Creator.mkey   created_by,  
                     MT.creation_date,     
                     Creator.mkey     'CreatorID',     
                     emp.mkey 'AssigneeID'     
              FROM   msp_default_migration_table MT     
                     LEFT JOIN employee_mst EMP     
                            ON MT.resource_names = EMP.emp_full_name     
                     LEFT JOIN employee_mst Creator     
                            ON MT.text1 = Creator.emp_full_name     
              WHERE  outline_level > 1     
                     AND Isnull(process_flag, 'N') = 'N'     
              ORDER  BY MT.mkey,     
                        unique_id     
    
            OPEN pcursurbreak     
    
            FETCH next FROM pcursurbreak INTO @WBS, @Name, @Duration,     
            @Start_Date,     
            @Finish_Date, @Predecessors, @Resource_Names, @Text1, @Outline_Level     
            ,     
            @Number1, @Unique_ID,@Percent_Complete, @Created_By, @Creation_Date, @CreatorID,     
            @AssigneeID     
    
    WHILE @@FETCH_STATUS = 0     
              BEGIN     
              print '@Number1-->'+cast(@Number1 as varchar)    
                  IF( @Number1 <= 0 )     
                    BEGIN     
                        SET @lastIndex=0;     
                        SET @TaskMkey=0;     
                        SET @Task_Parent_ID=0;     
                        SET @Task_No=''     
                        SET @lastIndex = ( Len(@WBS) ) - Charindex('.', Reverse(     
                                                         @WBS))     
    
                        SELECT @Task_No = Substring(@WBS, 0, @lastindex + 1)     
    
                        SELECT @TaskMkey = number1     
                        FROM   msp_default_migration_table     
                        WHERE  wbs = '' + @Task_No + ''     
    
                        PRINT '@TaskMkey-->'     
                              + Cast(@TaskMkey AS VARCHAR)     
    
                        SELECT @TaskMkey = mkey,     
                               @Task_Parent_ID = mkey,     
                               @ROOT_NUMBER = task_no     
                        FROM   task_hdr     
                        WHERE  mkey = @TaskMkey     
    
                        IF( @TaskMkey = 0 )     
                          BEGIN     
                              SET @ROOT_NUMBER='';     
                              SET @Task_Parent_ID=0;     
                          END     
                        ELSE IF( @TaskMkey > 0 )     
                          BEGIN     
                              --select * from [TEMPLATE_TASK_DETAILS]      
                              DECLARE @TableOutput_TASK_NODE_DETAILS TABLE     
                                (     
                                   mkey              INT,     
                                   task_parent_id    NVARCHAR(20),     
                                   task_main_node_id NVARCHAR(20),     
                                   task_no           NVARCHAR(20)     
                                )     
  print 'in insert sub node'  
                              INSERT INTO @TableOutput_TASK_NODE_DETAILS     
                              EXEC [dbo].[Sp_insert_task_node_details]     
                                @Task_Parent_ID,     
                                @Name,     
                                @Name,     
                                '64',     
                                @Parameter1,     
                                @Parameter2,     
                                @Finish_Date,     
                                @Resource_Names,     
                                'Scheduled',     
                                'N',     
                                '1900-01-01 00:00:00.000',     
                                '1900-01-01 00:00:00.000',     
                                @Task_Parent_ID,     
                                @Task_Main_Node_ID,     
                                @ROOT_NUMBER,     
        0,  
                                'WIP',     
                                '0',     
                                @CreatorID,     
                                1,     
                                '',     
                                '',     
                                '',     
                                '',     
                                '',     
                                '',     
                                @CreatorID,     
                                '1900-01-01 00:00:00.000',     
                                @CreatorID,     
                                '1900-01-01 00:00:00.000',     
                                @Task_Parent_ID ,  
        'Low'  
        print 'Sub node inserted'  
    
                              SELECT @TaskMkey = mkey,     
                                     @Task_Parent_ID = task_parent_id,     
                                     @Task_Main_Node_ID = task_main_node_id,     
                                     @Task_No = task_no     
     FROM   @TableOutput_TASK_NODE_DETAILS     
    
                              UPDATE task_hdr     
                              SET    start_date = @start_date,     
                                     Is_Scheduled = 'Y',     
                                     wbs = @WBS,     
                                     duration = @Duration,     
                                     sch_start_date = @Start_Date,     
                                     finish_date = @Finish_Date,     
                                     predecessors = @Predecessors,     
                                     resource_names = @Resource_Names,     
                                     text1 = @Text1,     
                                     outline_level = @Outline_Level,     
                                     number1 = @Number1,     
                                     unique_id = @Unique_ID,    
          Percent_Complete=@Percent_Complete     
                              WHERE  mkey = @TaskMkey     
    
                              UPDATE msp_default_migration_table     
                              SET    number1 = @TaskMkey,     
                                     process_flag = 'Y',     
                          remarks = 'Created Successfully--Task_No-->'     
                                    + @Task_No     
                              WHERE  unique_id = @Unique_ID     
                                     AND outline_level = @Outline_Level     
                          END     
    
                        PRINT 'for @WBS' + @WBS + '-->@ROOT_NUMBER is '     
                              + @ROOT_NUMBER     
    
                        PRINT 'for @WBS @Task_Parent_ID '     
                              + Cast(@Task_Parent_ID AS VARCHAR)     
    
                        PRINT 'for @WBS @Task_Main_Node_ID '     
                              + Cast(@Task_Main_Node_ID AS VARCHAR)     
                    END     
                  ELSE IF( @Number1 > 0 )/*Start update logic*/     
                    BEGIN     
                        PRINT 'update'     
    
                        INSERT INTO task_hdr_h     
                        SELECT Getdate(),     
                               *     
                        FROM   task_hdr     
                        WHERE  mkey = @Number1     
    
                        UPDATE task_hdr     
                        SET    task_name = @Name,     
                               task_description = @Name,     
                               assigned_to = @AssigneeID,     
                               task_created_by = @CreatorID,     
                               start_date = @start_date,     
                               completion_date = @Finish_Date,     
                               Is_Scheduled = 'Y',     
                               wbs = @WBS,     
                               duration = @Duration,     
                               sch_start_date = @Start_Date,     
                               finish_date = @Finish_Date,     
                               predecessors = @Predecessors,     
                               resource_names = @Resource_Names,     
                               text1 = @Text1,     
                               outline_level = @Outline_Level,     
                               number1 = @Number1,     
                               unique_id = @Unique_ID,    
          Percent_Complete=@Percent_Complete     
                        WHERE  mkey = @Number1     
                               AND (status NOT IN ( 'COMPLETED', 'CANCEL' )     
                                or isnull(predecessors,'0')!='0'    
        )    
                               AND Is_Scheduled = 'Y'     
    
                        UPDATE msp_default_migration_table     
                        SET    process_flag = 'Y',     
                               remarks = 'Task_No Updated Successfully'     
                        WHERE  unique_id = @Unique_ID     
                               AND outline_level = @Outline_Level     
                    END     
    
                  FETCH next FROM pcursurbreak INTO @WBS, @Name, @Duration,     
                  @Start_Date,     
                  @Finish_Date, @Predecessors, @Resource_Names, @Text1,     
                  @Outline_Level     
                  ,     
                  @Number1, @Unique_ID,@Percent_Complete, @Created_By, @Creation_Date, @CreatorID,     
                  @AssigneeID     
              END     
    
            CLOSE pcursurbreak     
    
            DEALLOCATE pcursurbreak     
        END     
   END    
   select * from MSP_Default_Migration_Table    
   --delete from  MSP_Default_Migration_Table    
  END     
--exec [SP_INSERT_SCHEDULED_MSP]  323,324    
--select * from task_hdr where mkey>237  and task_main_node_id=238    
--UPDATE task_hdr SET TASK_NAME='TEST',TASK_DESCRIPTION='TEST',PROJECT_ID=1,SUB_PROJECT_id=0,Is_Scheduled='N',RESPOSIBLE_EMP_MKEY=0,CREATED_BY=0,TASK_CREATED_BY=0,ASSIGNED_TO=0 WHERE MKEY=235    
--update task_hdr set SUB_PROJECT_ID=0 where  mkey>237  and task_main_node_id=238    
--SELECT * FROM TYPE_MST WHERE TYPE_CODE='PROJECT'    
--select * from MSP_Default_Migration_Table      
/*      
declare @x nvarchar(20)       
set @x= '1.2'      
 DECLARE @lastIndex int      
       SET @lastIndex = (LEN(@x)) -  CHARINDEX('.', REVERSE(@x))       
    
     select SUBSTRING(@x, 0, @lastindex + 1)       
           
select REVERSE(@x)      
SELECT RIGHT(@x , CHARINDEX ('.' ,REVERSE(@x))-1)      
select SUBSTRING(@x,len(@x),CHARINDEX('.',@x)-1 )      
*/ 
GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_TASK_DETAILS_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_INSERT_TASK_DETAILS_NT](@TASK_NO              VARCHAR(250),
                                                  @TASK_NAME            VARCHAR(250),
                                                  @TASK_DESCRIPTION     VARCHAR(250) = NULL,
                                                  @CATEGORY             VARCHAR(250)= NULL,
                                                  @PROJECT_ID           VARCHAR(250)= NULL,
                                                  @SUBPROJECT_ID        VARCHAR(250)= NULL,
                                                  @ASSING_BY_EMAIL      NVARCHAR(max)= NULL,
                                                  @CREATED_BY_EMAIL     NVARCHAR(max)= NULL,
                                                  @COMPLETION_DATE      DATETIME= NULL,
                                                  @ASSIGNED_TO          VARCHAR(250) = NULL,
                                                  @TAGS                 VARCHAR(250) = NULL,
                                                  @ISNODE               CHAR(1),
                                                  --@START_DATE          DATETIME, 
                                                  @CLOSE_DATE           DATETIME= NULL,
                                                  @DUE_DATE             DATETIME= NULL,
                                                  @TASK_PARENT_ID       INT,
                                                  @STATUS               VARCHAR(250) = NULL,
                                                  @STATUS_PERC          VARCHAR(250) = NULL,
                                                  @TASK_CREATED_BY      INT,
                                                  @APPROVER_ID          INT =NULL,
                                                  @TASK_TYPE            INT =NULL,
                                                  @IS_ARCHIVE           CHAR(1)= NULL,
                                                  @ATTRIBUTE1           VARCHAR(250)= NULL,
                                                  @ATTRIBUTE2           VARCHAR(250)= NULL,
                                                  @ATTRIBUTE3           VARCHAR(250)= NULL,
                                                  @ATTRIBUTE4           VARCHAR(250)= NULL,
                                                  @ATTRIBUTE5           VARCHAR(250)= NULL,
                                                  @CREATED_BY           INT,
                                                  @CREATION_DATE        DATETIME,
                                                  @LAST_UPDATED_BY      INT,
                                                  @APPROVE_ACTION_DATE  DATETIME= NULL,
                                                  @Priority             NCHAR(40) = NULL,
                                                  @Tentative_Start_Date DATETIME= NULL,
                                                  @Tentative_End_Date   DATETIME= NULL,
                                                  @Actual_Start_Date    DATETIME= NULL,
                                                  @Actual_End_Date      DATETIME= NULL)
AS
  BEGIN
		DECLARE @ASSING_MKEY INT, @CREATED_MKEY INT;
		IF (@ASSING_BY_EMAIL IS NOT NULL AND @CREATED_BY_EMAIL IS NOT NULL)
		BEGIN

			SELECT @ASSING_MKEY = MKEY FROM EMPLOYEE_MST WHERE (EMAIL_ID_PERSONAL = @ASSING_BY_EMAIL OR EMAIL_ID_OFFICIAL = @ASSING_BY_EMAIL) AND DELETE_FLAG = 'N';
			SELECT @CREATED_MKEY = MKEY FROM EMPLOYEE_MST WHERE (EMAIL_ID_PERSONAL = @CREATED_BY_EMAIL OR EMAIL_ID_OFFICIAL = @CREATED_BY_EMAIL) AND DELETE_FLAG = 'N';

			IF((@ASSING_MKEY IS NULL OR @CREATED_MKEY IS NULL) OR (@ASSING_MKEY = 0 OR @CREATED_MKEY = 0))
			BEGIN
				 SELECT Mkey = 0,
				 	 'ASSING_BY_EMAIL AND CREATED_BY_EMAIL NOT PRESENT' AS '@ATTRIBUTE1';
					 GOTO ENDTASK;
			END

		END
			 INSERT INTO [dbo].[TEMPLATE_TASK_DETAILS]
           ([TASK_NO]
           ,[TASK_NAME]
           ,[TASK_DESCRIPTION]
           ,[CATEGORY]
           ,[PROJECT_ID]
           ,[SUBPROJECT_ID]
           ,[COMPLETION_DATE]
           ,[ASSIGNED_TO]
           ,[TAGS]
           ,[ISNODE]
           ,[CLOSE_DATE]
           ,[DUE_DATE]
           ,[TASK_PARENT_ID]
           ,[STATUS]
           ,[STATUS_PERC]
           ,[TASK_CREATED_BY]
           ,[APPROVER_ID]
		   ,[TASK_TYPE]
           ,[IS_ARCHIVE]
           ,[ATTRIBUTE1]
           ,[ATTRIBUTE2]
           ,[ATTRIBUTE3]
           ,[ATTRIBUTE4]
           ,[ATTRIBUTE5]
           ,[CREATED_BY]
           ,[CREATION_DATE]
           ,[LAST_UPDATED_BY]
           ,[APPROVE_ACTION_DATE]
		   ,FunctionCall
		   ,Priority
			,Tentative_Start_Date
			,Tentative_End_Date
			,Actual_Start_Date
			,Actual_End_Date
		   )
     VALUES
           (@TASK_NO             , 
                                        @TASK_NAME           , 
                                        @TASK_DESCRIPTION    , 
                                        @CATEGORY            , 
                                        @PROJECT_ID          , 
                                        @SUBPROJECT_ID       , 
                                        @COMPLETION_DATE     , 
                                        --@ASSIGNED_TO         , 
										CASE WHEN @ASSING_MKEY IS NULL THEN @ASSIGNED_TO ELSE @ASSING_MKEY END,
                                        @TAGS                , 
                                        @ISNODE              , 
                                        --@START_DATE          DATETIME, 
                                        @CLOSE_DATE          , 
                                        @DUE_DATE            , 
                                        @TASK_PARENT_ID      , 
                                        @STATUS              , 
                                        @STATUS_PERC         , 
                                        @TASK_CREATED_BY     , 
                                        @APPROVER_ID         , 
										@TASK_TYPE	         ,
                                        @IS_ARCHIVE          , 
                                        @ATTRIBUTE1          , 
                                        @ATTRIBUTE2          , 
                                        @ATTRIBUTE3          , 
                                        @ATTRIBUTE4          , 
                                        @ATTRIBUTE5          , 
                                        --@CREATED_BY          , 
										CASE WHEN @CREATED_MKEY IS NULL THEN @CREATED_BY ELSE @CREATED_MKEY END,
                                        @CREATION_DATE       , 
                                        @LAST_UPDATED_BY     , 
                                        @APPROVE_ACTION_DATE,'SP_INSERT_TASK_DETAILS',
										@Priority ,
										 @Tentative_Start_Date,
										 @Tentative_End_Date ,
										 @Actual_Start_Date ,
										 @Actual_End_Date 
										 )

      --return;
      DECLARE @Dcount INT;

      SET @TASK_NO='100';

      SELECT @Dcount = Count(*)
      FROM   task_hdr
      WHERE  task_no NOT LIKE '%.%'
             AND mkey = (SELECT Max(mkey)
                         FROM   task_hdr
                         WHERE  task_no NOT LIKE '%.%');

      IF @Dcount > 0
        BEGIN
            SELECT @TASK_NO = Cast(Cast(Isnull(task_no, '100') AS FLOAT) + 1 AS
                                   VARCHAR)
            FROM   task_hdr
            WHERE  task_no NOT LIKE '%.%'
                   AND mkey = (SELECT Max(mkey)
                               FROM   task_hdr
                               WHERE  task_no NOT LIKE '%.%');
        END

      SET @STATUS='CREATED';
      SET @TASK_PARENT_ID = 0;

      --select * from type_mst where type_code='STATUS'
      SELECT @ASSIGNED_TO = Cast(mkey AS VARCHAR)
      FROM   employee_mst
      WHERE  emp_full_name = @ASSIGNED_TO;

      IF( @TASK_CREATED_BY = @ASSIGNED_TO )
        BEGIN
            SET @STATUS='WORK IN PROGRESS';
        END

       INSERT INTO [DBO].[task_hdr] 
                  ([task_no], 
                   [task_name], 
                   [task_description], 
                   [caregory], 
                   [project_id], 
                   [sub_project_id], 
                   [start_date], 
                   [completion_date], 
                   [close_date], 
                   [due_date], 
                   [assigned_to], 
                   [tags], 
                   [isnode], 
                   [task_parent_id],
                   [TASK_MAIN_NODE_ID], 
                   [status], 
                   [status_perc], 
                   [task_created_by], 
				   [task_type],
                   [approver_id], 
                   [approve_action_date], 
                   [is_archive], 
                   [attribute1], 
                   [attribute2], 
                   [attribute3], 
                   [attribute4], 
                   [attribute5], 
                   [created_by], 
                   [creation_date], 
                   [last_updated_by], 
                   [last_update_date], 
                   [delete_flag],RESPOSIBLE_EMP_MKEY,
				   Priority
				  ,Tentative_Start_Date
				  ,Tentative_End_Date
				  ,Actual_Start_Date
				  ,Actual_End_Date
				  ) 
      VALUES      ( @TASK_NO, 
                    @TASK_NAME, 
                    @TASK_DESCRIPTION, 
                    @CATEGORY, 
                    @PROJECT_ID, 
                    @SUBPROJECT_ID, 
                    GETDATE(),--@START_DATE, 
                    @COMPLETION_DATE, 
                    @CLOSE_DATE, 
                    @DUE_DATE, 
                    --@ASSIGNED_TO, 
					CASE WHEN @ASSING_MKEY IS NULL THEN @ASSIGNED_TO ELSE @ASSING_MKEY END,
                    @TAGS, 
                    @ISNODE, 
                    @TASK_PARENT_ID, 
                    @TASK_PARENT_ID,
                    @STATUS, 
                    @STATUS_PERC, 
                    @TASK_CREATED_BY, 
					@TASK_TYPE,
                    @APPROVER_ID, 
                    @APPROVE_ACTION_DATE, 
                    @IS_ARCHIVE, 
                    @ATTRIBUTE1, 
                    @ATTRIBUTE2, 
                    @ATTRIBUTE3, 
                    @ATTRIBUTE4, 
                    @ATTRIBUTE5, 
                    --@CREATED_BY, 
					CASE WHEN @CREATED_MKEY IS NULL THEN @CREATED_BY ELSE @CREATED_MKEY END,
                    getdate(), 
                    @LAST_UPDATED_BY, 
                    getdate(), 
                    'N',@ASSIGNED_TO ,@Priority ,
										 @Tentative_Start_Date,
										 @Tentative_End_Date ,
										 @Actual_Start_Date ,
										 @Actual_End_Date) 

      SET @ATTRIBUTE2 =  CASE WHEN Cast(@CREATED_MKEY AS VARCHAR) IS NULL THEN Cast(@CREATED_BY AS VARCHAR) ELSE Cast(@CREATED_MKEY AS VARCHAR)END;

      SELECT @ATTRIBUTE1 = Scope_identity();

      SELECT Scope_identity()Mkey,
             @ATTRIBUTE1     TASK_PARENT_ID,
             @ATTRIBUTE1     TASK_MAIN_NODE_ID,
             @TASK_NO        TASK_NO;

      --select * from type_mst
      PRINT Cast(@TASK_PARENT_ID AS VARCHAR);

      UPDATE [task_hdr]
      SET    task_parent_id = @ATTRIBUTE1,
             task_main_node_id = @ATTRIBUTE1
      WHERE  mkey = @ATTRIBUTE1

		EXEC Sp_task_action_trl_insert_update
			@ATTRIBUTE1,--    @Parameter1       @MKEY,
			@ATTRIBUTE1,-- @Parameter2          @TASK_MKEY,                 
			@ATTRIBUTE1,--@Parameter3 @TASK_PARENT_ID
			'ROOTTASKCREATED',--    @Parameter4 @ACTION_TYPE
			'TASK CREATED',--    @Parameter5 @DESCRIPTION_COMMENT
			'0',--  @Parameter6 @PROGRESS_PERC
			'CREATED',--  @Parameter7 @STATUS
			@ATTRIBUTE2,--@Parameter8 @CREATED_BY
			@ATTRIBUTE1;--@Parameter9 @TASK_MAIN_NODE_ID
		EXEC [Sp_emp_tags_insert_update] @CREATED_BY,@TAGS,@CREATED_BY;
		ENDTASK:
  END 
GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_TASK_ENDLIST_ATTACHMENT_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- exec SP_INSERT_TASK_ENDLIST_ATTACHMENT @MKEY=11083,@SR_NO=1,@DOC_MKEY=4,@FILE_NAME='ABCDF-4444',@CREATED_BY=N'926',@DELETE_FLAG=N'Y',@APINAME=N'CreateTaskEndlistAttach',@API_METHOD=N'Create/Update'  
-- EXEC SP_INSERT_TASK_ENDLIST_ATTACHMENT 11083,2,15, '5110617.PNG','\ATTACHMENTS\DOCUMENT DEPOSITORY\21\4_13_26_5110617.PNG',926,'Y','INSERT','INSERT'  
CREATE PROCEDURE [dbo].[SP_INSERT_TASK_ENDLIST_ATTACHMENT_NT]  
(  
    @MKEY INT,  
    @SR_NO INT,  
    @DOC_MKEY INT,  
    @FILE_NAME NVARCHAR(200)=  null,  
    @FILE_PATH NVARCHAR(MAX) =  null,  
	@COMMENT  NVARCHAR(max) = NULL,
    @CREATED_BY INT =  null,  
    @DELETE_FLAG CHAR(1),  
    @APINAME NVARCHAR(100),  
    @API_METHOD NVARCHAR(100) ,
	@Session_User_Id          INT = NULL,  
	@Business_Group_Id	  INT = NULL
)  
AS  
BEGIN  
    BEGIN TRY  
  DECLARE @DCOUNT INT;  
  SELECT @DCOUNT = COUNT(*) FROM TASK_ENDLIST_MEDIA_TRL WHERE MKEY = @MKEY AND DOC_CATEGORY_MKEY = @DOC_MKEY AND DELETE_FLAG = 'N';  
    
        IF (@DCOUNT = 0 AND @DELETE_FLAG = 'N')  
        BEGIN  
   PRINT 'INSERT';  
            SELECT @SR_NO = ISNULL(MAX(SR_NO), 0) + 1  
            FROM TASK_ENDLIST_MEDIA_TRL  
            WHERE MKEY = @MKEY;  
  
            INSERT INTO TASK_ENDLIST_MEDIA_TRL  
            (  
                MKEY,  
                SR_NO,  
                DOC_CATEGORY_MKEY,
                FILE_NAME,  
                FILE_PATH,  
				COMMENT,
                CREATED_BY,  
                CREATION_DATE  
            )  
            VALUES  
            (@MKEY, @SR_NO, @DOC_MKEY, @FILE_NAME, @FILE_PATH,@COMMENT,  @CREATED_BY, GETDATE())  
        END  
        ELSE IF (@DCOUNT > 0 AND @DELETE_FLAG = 'N')  
        BEGIN  
   PRINT '@DCOUNT > 0 @DELETE_FLAG: '+ @DELETE_FLAG;  
            INSERT INTO TASK_ENDLIST_MEDIA_TRL_H  
            (  
                HIST_DATE,  
                MKEY,  
                SR_NO,  
                DOC_CATEGORY_MKEY,  
                FILE_NAME,  
                FILE_PATH,
				COMMENT,
                ATTRIBUTE1,  
                ATTRIBUTE2,  
                ATTRIBUTE3,  
                ATTRIBUTE4,  
                ATTRIBUTE5,  
                CREATED_BY,  
                CREATION_DATE,  
                LAST_UPDATED_BY,  
                LAST_UPDATE_DATE,  
                DELETE_FLAG  
            )  
            SELECT GETDATE(),  
                   MKEY,  
                   SR_NO,  
                   DOC_CATEGORY_MKEY,  
                   FILE_NAME,  
                   FILE_PATH, 
				   @COMMENT,
                   ATTRIBUTE1,  
                   ATTRIBUTE2,  
                   ATTRIBUTE3,  
                   ATTRIBUTE4,  
                   ATTRIBUTE5,  
                   CREATED_BY,  
                   CREATION_DATE,  
                   LAST_UPDATED_BY,  
                   LAST_UPDATE_DATE,  
                   DELETE_FLAG  
            FROM TASK_ENDLIST_MEDIA_TRL  
            WHERE MKEY = @MKEY  
                 -- AND SR_NO = @SR_NO  
                  AND DOC_CATEGORY_MKEY = @DOC_MKEY  
                  AND DELETE_FLAG = 'N';  
            
			UPDATE TASK_ENDLIST_MEDIA_TRL  
            SET SR_NO = @SR_NO,  
                DOC_CATEGORY_MKEY = @DOC_MKEY,  
                FILE_NAME = @FILE_NAME,  
                FILE_PATH = @FILE_PATH,
				COMMENT = @COMMENT,
                LAST_UPDATED_BY = @CREATED_BY,  
                LAST_UPDATE_DATE = GETDATE(),  
    DELETE_FLAG = @DELETE_FLAG  
            WHERE MKEY = @MKEY  
                  AND SR_NO = @SR_NO  
                  AND DOC_CATEGORY_MKEY = @DOC_MKEY  
                  AND DELETE_FLAG = 'N';  
        END  
  ELSE IF(@DELETE_FLAG = 'Y')  
  BEGIN  
  PRINT '@DELETE_FLAG: '+ @DELETE_FLAG;  
    INSERT INTO TASK_ENDLIST_MEDIA_TRL_H  
            (  
                HIST_DATE,  
                MKEY,  
                SR_NO,  
                DOC_CATEGORY_MKEY,  
                FILE_NAME,  
                FILE_PATH,
				COMMENT,
                ATTRIBUTE1,  
                ATTRIBUTE2,  
                ATTRIBUTE3,  
                ATTRIBUTE4,  
                ATTRIBUTE5,  
                CREATED_BY,  
                CREATION_DATE,  
                LAST_UPDATED_BY,  
                LAST_UPDATE_DATE,  
                DELETE_FLAG  
				)  
            SELECT GETDATE(),  
                   MKEY,  
                   SR_NO,  
                   DOC_CATEGORY_MKEY,  
                   FILE_NAME,  
                   FILE_PATH,  
				   COMMENT,
                   ATTRIBUTE1,  
                   ATTRIBUTE2,  
                   ATTRIBUTE3,  
                   ATTRIBUTE4,  
                   ATTRIBUTE5,  
                   CREATED_BY,  
                   CREATION_DATE,  
                   LAST_UPDATED_BY,  
                   LAST_UPDATE_DATE,  
                   DELETE_FLAG  
            FROM TASK_ENDLIST_MEDIA_TRL  
            WHERE MKEY = @MKEY  
                  AND DOC_CATEGORY_MKEY = @DOC_MKEY  
                  AND DELETE_FLAG = 'N';  
--------------------------------------------------------------------------------------------------------  
   UPDATE TASK_ENDLIST_MEDIA_TRL  
            SET DOC_CATEGORY_MKEY = @DOC_MKEY,  
                FILE_NAME = @FILE_NAME,  
                FILE_PATH = @FILE_PATH,  
				COMMENT = @COMMENT,
                LAST_UPDATED_BY = @CREATED_BY,  
                LAST_UPDATE_DATE = GETDATE(),  
    DELETE_FLAG = @DELETE_FLAG  
            WHERE MKEY = @MKEY  
                  AND DOC_CATEGORY_MKEY = @DOC_MKEY;  
--------------------------------------------------------------------------------------------------------                    
  END  
--------------------------------------------------------------------------------------------------------                            
  SELECT ETRL.MKEY,  
               ETRL.SR_NO,  
               ETRL.DOC_CATEGORY_MKEY,  
               ETRL.FILE_NAME,  
               ETRL.FILE_PATH,  
               ISNULL(CONVERT(VARCHAR(50), ETRL.CREATED_BY), '') AS CREATED_BY_ID,  
               ISNULL(CONVERT(VARCHAR(50), CREATEDBY.EMP_FULL_NAME), '') AS CREATED_BY_NAME,  
               ETRL.CREATION_DATE AS CREATION_DATE,  
               ISNULL(CONVERT(VARCHAR(50), ETRL.LAST_UPDATED_BY), '') AS LAST_UPDATED_BY,  
               ISNULL(UPDATEDBY.EMP_FULL_NAME, '') UPDATED_BY_NAME,  
               CASE  
                   WHEN ETRL.LAST_UPDATE_DATE IS NULL THEN  
                       ''  
                   ELSE  
                       FORMAT(ETRL.LAST_UPDATE_DATE, 'YYYY-MM-DD HH:MM:SS')  
               END AS LAST_UPDATE_DATE  
        FROM TASK_ENDLIST_MEDIA_TRL ETRL  
            INNER JOIN EMPLOYEE_MST CREATEDBY  
                ON ETRL.CREATED_BY = CREATEDBY.MKEY  
            LEFT JOIN EMPLOYEE_MST UPDATEDBY  
                ON ETRL.LAST_UPDATED_BY = UPDATEDBY.MKEY  
        WHERE ETRL.MKEY = @MKEY  
              AND DOC_CATEGORY_MKEY = @DOC_MKEY  
     --AND SR_NO = @SR_NO  
              AND ETRL.DELETE_FLAG = 'N'  
              AND CREATEDBY.DELETE_FLAG = 'N';  
    END TRY  
    BEGIN CATCH  
        -------------------------------------------------------------------------------------------------------------------------------            
        SELECT ERROR_NUMBER() AS ERRORNUMBER,  
               ERROR_SEVERITY() AS ERRORSEVERITY,  
               ERROR_STATE() AS ERRORSTATE,  
               ERROR_PROCEDURE() AS ERRORPROCEDURE,  
               ERROR_LINE() AS ERRORLINE,  
               ERROR_MESSAGE() AS ERRORMESSAGE;  
  
        -------------------------------------------------------------------------------------------------------------------------------  
        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;  
  
        SET @ERROR_MESSAGE = ERROR_MESSAGE();  
  
        -------------------------------------------------------------------------------------------------------------------------------  
        EXEC SP_P_TMS_INSERT_ERROR_DES @CREATED_BY,  
                                       'TMS',  
                                       @APINAME,  
                                       @ERROR_MESSAGE,  
                                       @API_METHOD;  
    -------------------------------------------------------------------------------------------------------------------------------  
    END CATCH  
END  
GO
/****** Object:  StoredProcedure [dbo].[Sp_insert_update_table_sanctioning_department_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- EXEC SP_INSERT_UPDATE_TABLE_SANCTIONING_DEPARTMENT 78,0,3,'',0,926,'N','INSERT TASK S', 'INSERT',NULL,NULL
-- =============================================
CREATE PROCEDURE [dbo].[Sp_insert_update_table_sanctioning_department_NT]
  -- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE
  @TASK_MKEY                  INT,
  @SR_NO                      INT,
  @LEVEL                      INT,
  @SANCTIONING_DEPARTMENT     NVARCHAR(255),
  @SANCTIONING_AUTHORITY_MKEY INT,
  @Mode                     NVARCHAR(100) = NULL,
  @Status                     NVARCHAR(100) = NULL,
  @Comment                     NVARCHAR(max) = NULL,
  @CREATED_BY                 INT,
  @DELETE_FLAG                NVARCHAR(2),
  @Session_User_Id            INT = null,
  @Business_Group_Id          int = null,
  @METHOD_NAME                NVARCHAR(200),
  @METHOD                     NVARCHAR(200),
  @OUT_STATUS                 NVARCHAR(200) output,
  @OUT_MESSAGE                NVARCHAR(200) output
AS
  BEGIN
      -- SET NOCOUNT ON ADDED TO PREVENT EXTRA RESULT SETS FROM
      -- INTERFERING WITH SELECT STATEMENTS.
      SET nocount ON;

      DECLARE @DCOUNT                INT,
              @SANCTIONING_AUTHORITY NVARCHAR(255);

      BEGIN try
          IF( @CREATED_BY = 0
               OR @CREATED_BY IS NULL )
            BEGIN
                SET @OUT_STATUS = 'ERROR';
                SET @OUT_MESSAGE = 'Please enter created by';

                SELECT @OUT_STATUS  AS OUT_STATUS,
                       @OUT_MESSAGE AS OUT_MESSAGE;
            END
          ELSE IF( @TASK_MKEY = 0
               OR @TASK_MKEY IS NULL )
            BEGIN
                SET @OUT_STATUS = 'ERROR';
                SET @OUT_MESSAGE = 'Please enter Task No';

                SELECT @OUT_STATUS  AS OUT_STATUS,
                       @OUT_MESSAGE AS OUT_MESSAGE;
            END
          ELSE IF( @LEVEL = 0
               OR @LEVEL IS NULL )
            BEGIN
                SET @OUT_STATUS = 'ERROR';
                SET @OUT_MESSAGE = 'Please enter Level';

                SELECT @OUT_STATUS  AS OUT_STATUS,
                       @OUT_MESSAGE AS OUT_MESSAGE;
            END
          ELSE IF( @SANCTIONING_AUTHORITY_MKEY = 0
               OR @SANCTIONING_AUTHORITY_MKEY IS NULL )
            BEGIN
                SET @OUT_STATUS = 'ERROR';
                SET @OUT_MESSAGE = 'Please enter Sanctioning Authority';

                SELECT @OUT_STATUS  AS OUT_STATUS,
                       @OUT_MESSAGE AS OUT_MESSAGE;
            END
          ELSE IF( @SANCTIONING_DEPARTMENT = ''
               OR @SANCTIONING_DEPARTMENT IS NULL )
            BEGIN
                SET @OUT_STATUS = 'ERROR';
                SET @OUT_MESSAGE = 'Please enter Sanctioning Department';

                SELECT @OUT_STATUS  AS OUT_STATUS,
                       @OUT_MESSAGE AS OUT_MESSAGE;
            END
          ELSE
            BEGIN
                IF ( @SR_NO = 0
                      OR @SR_NO IS NULL )
                  BEGIN
                      SELECT @DCOUNT = Count(*)
                      FROM   task_sanctioning_department_trl
                      WHERE  mkey = @TASK_MKEY
                             AND Lower(sanctioning_department) = Lower(@SANCTIONING_DEPARTMENT)
                             AND sanctioning_authority_mkey = @SANCTIONING_AUTHORITY_MKEY
							 AND LEVEL = @LEVEL
                             AND delete_flag = 'N';

                      IF ( @DCOUNT > 0 )
                        BEGIN
                            PRINT '@SR_NO: ' + CONVERT(NVARCHAR(100), @SR_NO);

                            SET @OUT_STATUS = 'ERROR';
                            SET @OUT_MESSAGE = 'Already exists';

                            PRINT '@OUT_MESSAGE: '
                                  + CONVERT(VARCHAR(10), @OUT_MESSAGE );

                            SELECT DTRL.mkey,
                                   DTRL.sr_no,
                                   THDR.project_id
                                   AS
                                   PROPERTY_MKEY,
                                   THDR.sub_project_id
                                   AS
                                   BUILDING_MKEY,
                                   DTRL.sanctioning_department
                                   AS
                                   TYPE_CODE,
                                   DTRL.sanctioning_authority
                                   AS
                                   [TYPE_DESC],
                                   DTRL.sanctioning_authority_mkey
                                   AS
                                   SANCTIONING_AUTHORITY,
                                   DTRL.[status] AS [STATUS] ,
								   DTRL.STATUS_MODE AS MODE ,
                                   --CASE WHEN  DTRL.[STATUS] = NULL THEN 'IN-PROGRESS' END AS [STATUS],
                                   DTRL.[start_date],
                                   DTRL.end_date,
                                   DTRL.[level],
                                   Isnull(CONVERT(VARCHAR(50), DTRL.created_by),
                                   '')
                                   AS
                                   CREATED_BY_ID,
                                   Isnull(CONVERT(VARCHAR(50),
                                          CREATEDBY.emp_full_name),
                                   '')
                                   AS
                                   CREATED_BY_NAME,
                                   CASE
                                     WHEN DTRL.creation_date IS NULL THEN ''
                                     ELSE Format(DTRL.creation_date,
                                          'YYYY-MM-DD HH:MM:SS'
                                          )
                                   END
                                   AS
                                   CREATION_DATE,
                                   Isnull(CONVERT(VARCHAR(50),
                                          DTRL.last_updated_by),
                                   '')
                                   AS
                                   LAST_UPDATED_BY,
                                   Isnull(UPDATEDBY.emp_full_name, '')
                                   UPDATED_BY_NAME
                                   ,
                                   CASE
                                     WHEN DTRL.last_update_date IS NULL THEN ''
                                     ELSE Format(DTRL.last_update_date,
                                          'YYYY-MM-DD HH:MM:SS')
                                   END
                                   AS
                                   LAST_UPDATE_DATE,
                                   @OUT_STATUS
                                   AS
                                   OUT_STATUS,
                                   @OUT_MESSAGE
                                   AS
                                   OUT_MESSAGE
                            FROM   task_sanctioning_department_trl DTRL
                                   INNER JOIN task_hdr THDR
                                           ON DTRL.mkey = THDR.mkey
                                   INNER JOIN employee_mst CREATEDBY
                                           ON DTRL.created_by = CREATEDBY.mkey
                                   LEFT JOIN employee_mst UPDATEDBY
                                          ON DTRL.last_updated_by =
                                             UPDATEDBY.mkey
                            WHERE  DTRL.delete_flag = 'N'
                                   AND CREATEDBY.delete_flag = 'N'
                                   AND DTRL.mkey = @TASK_MKEY;
                        END
                      ELSE
            BEGIN
                DECLARE @CurrentStatus NVARCHAR(100),
                        @FromLevel     INT,
						@PreSrNo       INT,
						@TaskSrNo       INT;

                PRINT 'insert new';

                SELECT @SR_NO = Isnull(Max(sr_no), 0) + 1
                FROM   task_sanctioning_department_trl
                WHERE  mkey = @TASK_MKEY;
				
                SELECT @SANCTIONING_AUTHORITY = [type_desc]
                FROM   type_mst
                WHERE  type_code = 'SAUTHORITY'
                       AND master_mkey = @SANCTIONING_AUTHORITY_MKEY
                       AND delete_flag = 'N';

                INSERT INTO task_sanctioning_department_trl
                            (mkey,
                             sr_no,
                             [level],
                             sanctioning_department,
                             sanctioning_authority_mkey,
                             sanctioning_authority,
							 STATUS_MODE,
                             [status],
							 COMMENT,
                             delete_flag,
                             created_by,
                             creation_date)
                VALUES      (@TASK_MKEY,
                             @SR_NO,
                             @LEVEL,
                             @SANCTIONING_DEPARTMENT,
                             @SANCTIONING_AUTHORITY_MKEY,
                             @SANCTIONING_AUTHORITY,
							 @Mode,
                             @Status,
							 @Comment,
                             @DELETE_FLAG,
                             @CREATED_BY,
                             Getdate())

                PRINT 'TASK_SANCTIONING_DEPARTMENT_TRL_MOVEMENT_HISTORY SAUTHORITY';

                SELECT @SR_NO = Isnull(Max(sr_no), 0) + 1, @PreSrNo =  Max(sr_no) 
                FROM   TASK_SANCTIONING_DEPARTMENT_TRL_MOVEMENT_HISTORY
                WHERE  task_mkey = @TASK_MKEY
				AND		delete_flag = @DELETE_FLAG;

				if (@PreSrNo is null)
				Begin
					Select @PreSrNo = SR_NO from TASK_SANCTIONING_DEPARTMENT_TRL where MKEY = @TASK_MKEY and DELETE_FLAG = 'N';
					--select @TaskSrNo = TASK_SR_NO from TASK_SANCTIONING_DEPARTMENT_TRL_MOVEMENT_HISTORY where task_mkey = @TASK_MKEY AND delete_flag = @DELETE_FLAG 
					--and SR_NO =  @PreSrNo;
				End

                SELECT @CurrentStatus = status,
                       @FromLevel = level,
					   @TaskSrNo = SR_NO
                FROM   task_sanctioning_department_trl
                WHERE  mkey = @TASK_MKEY
                       AND sr_no = @PreSrNo
                       AND delete_flag = 'N';
					   print '@TaskSrNo: '+ convert(nvarchar,@TaskSrNo)

                INSERT INTO TASK_SANCTIONING_DEPARTMENT_TRL_MOVEMENT_HISTORY
                            (sr_no,
                             task_mkey,
							 TASK_SR_NO,
                             from_level,
                             to_level,
                             current_status,
                             updated_status,
                             history_date,
                             CREATED_BY,
                             CREATION_DATE,
                             delete_flag)
                VALUES      (@SR_NO,
                             @TASK_MKEY,
							 @TaskSrNo,
                             @FromLevel,
                             @LEVEL,
                             @CurrentStatus,
                             @CurrentStatus,
                             Getdate(),
                             @CREATED_BY,
                             Getdate(),
                             @DELETE_FLAG)
                
                SET @OUT_STATUS = 'OK';
                SET @OUT_MESSAGE = 'SUCCESSFULY INSERTED';

                SELECT DTRL.mkey,
                       DTRL.sr_no,
                       THDR.project_id AS PROPERTY_MKEY,
                       THDR.sub_project_id AS BUILDING_MKEY,
                       DTRL.sanctioning_department AS TYPE_CODE,
                       DTRL.sanctioning_authority AS [TYPE_DESC],
                       DTRL.sanctioning_authority_mkey AS SANCTIONING_AUTHORITY,
                       DTRL.[status] AS [STATUS],
					   DTRL.STATUS_MODE as MODE,
                       DTRL.[start_date],
                       DTRL.end_date,
                       DTRL.[level],
                       Isnull(CONVERT(VARCHAR(50), DTRL.created_by), '') AS CREATED_BY_ID,
                       Isnull(CONVERT(VARCHAR(50), CREATEDBY.emp_full_name), '') AS CREATED_BY_NAME,
                       CASE
                         WHEN DTRL.creation_date IS NULL THEN ''
                         ELSE Format(DTRL.creation_date, 'YYYY-MM-DD HH:MM:SS')
                       END AS CREATION_DATE,
                       Isnull(CONVERT(VARCHAR(50), DTRL.last_updated_by), '')
                       AS
                       LAST_UPDATED_BY,
                       Isnull(UPDATEDBY.emp_full_name, '')
                       UPDATED_BY_NAME
                       ,
                       CASE
                         WHEN DTRL.last_update_date IS NULL THEN ''
                         ELSE Format(DTRL.last_update_date,
                              'YYYY-MM-DD HH:MM:SS')
                       END
                       AS
                       LAST_UPDATE_DATE,
                       @OUT_STATUS
                       AS
                       OUT_STATUS,
                       @OUT_MESSAGE
                       AS
                       OUT_MESSAGE
                FROM   task_sanctioning_department_trl DTRL
                       INNER JOIN task_hdr THDR
                               ON DTRL.mkey = THDR.mkey
                       INNER JOIN employee_mst CREATEDBY
                               ON DTRL.created_by = CREATEDBY.mkey
                       LEFT JOIN employee_mst UPDATEDBY
                              ON DTRL.last_updated_by = UPDATEDBY.mkey
                WHERE  DTRL.delete_flag = 'N'
                       AND CREATEDBY.delete_flag = 'N'
                       AND DTRL.mkey = @TASK_MKEY;
            END
                  END
                ELSE
                  BEGIN
                      SELECT @SANCTIONING_AUTHORITY = [type_desc]
                      FROM   type_mst
                      WHERE  type_code = 'SAUTHORITY'
                             AND master_mkey = @SANCTIONING_AUTHORITY_MKEY
                             AND delete_flag = 'N';

                      PRINT 'insert SAUTHORITY';

                      INSERT INTO task_sanctioning_department_trl_h
                                  (hist_date,
                                   mkey,
                                   sr_no,
                                   level,
                                   sanctioning_department,
                                   sanctioning_authority_mkey,
                                   sanctioning_authority,
                                   status,
								   STATUS_MODE,
                                   start_date,
                                   end_date,
								   COMMENT,
                                   attribute1,
                                   attribute2,
                                   attribute3,
                                   attribute4,
                                   attribute5,
                                   created_by,
                                   creation_date,
                                   last_updated_by,
                                   last_update_date,
                                   delete_flag)
                      SELECT Getdate(),
                             mkey,
                             sr_no,
                             level,
                             sanctioning_department,
                             sanctioning_authority_mkey,
                             sanctioning_authority,
                             status,
							 STATUS_MODE,
                             start_date,
                             end_date,
							 COMMENT,
                             attribute1,
                             attribute2,
                             attribute3,
                             attribute4,
                             attribute5,
                             created_by,
                             creation_date,
                             last_updated_by,
                             last_update_date,
                             delete_flag
                      FROM   task_sanctioning_department_trl
                      WHERE  mkey = @TASK_MKEY
                             AND sr_no = @SR_NO
                             AND delete_flag = 'N';

                      UPDATE task_sanctioning_department_trl
                      SET    level = @LEVEL,
                             sanctioning_department = @SANCTIONING_DEPARTMENT,
                             sanctioning_authority_mkey =
                             @SANCTIONING_AUTHORITY_MKEY,
                             sanctioning_authority = @SANCTIONING_AUTHORITY,
                             [status] = @Status,
							 COMMENT = @Comment,
							 STATUS_MODE = @Mode,
                             last_updated_by = @CREATED_BY,
                             last_update_date = Getdate(),
                             delete_flag = @DELETE_FLAG
                      WHERE  mkey = @TASK_MKEY
                             AND sr_no = @SR_NO
                             AND delete_flag = 'N';

                      SET @OUT_STATUS = 'OK';
                      SET @OUT_MESSAGE = 'SUCCESSFULY INSERTED';

                      SELECT DTRL.mkey,
                             DTRL.sr_no,
                             THDR.project_id
                             AS
                             PROPERTY_MKEY,
                             THDR.sub_project_id
                             AS
                             BUILDING_MKEY,
                             DTRL.sanctioning_department
                             AS
                             TYPE_CODE,
                             DTRL.sanctioning_authority
                             AS
                             [TYPE_DESC],
                             DTRL.sanctioning_authority_mkey
                             AS
                             SANCTIONING_AUTHORITY,
                             DTRL.[status] AS [STATUS],
							 DTRL.STATUS_MODE as MODE,
                             DTRL.[start_date],
                             DTRL.end_date,
                             DTRL.[level],
                             Isnull(CONVERT(VARCHAR(50), DTRL.created_by), '')
                             AS
                             CREATED_BY_ID,
                             Isnull(CONVERT(VARCHAR(50),
                                    CREATEDBY.emp_full_name),
                             '')
                             AS
                             CREATED_BY_NAME,
                             CASE
                               WHEN DTRL.creation_date IS NULL THEN ''
                               ELSE Format(DTRL.creation_date,
                                    'YYYY-MM-DD HH:MM:SS')
                             END
                             AS
                             CREATION_DATE,
                             Isnull(CONVERT(VARCHAR(50), DTRL.last_updated_by),
                             ''
                             )
                             AS
                             LAST_UPDATED_BY,
                             Isnull(UPDATEDBY.emp_full_name, '')
                             UPDATED_BY_NAME
                             ,
                             CASE
                               WHEN DTRL.last_update_date IS NULL THEN ''
                               ELSE Format(DTRL.last_update_date,
                                    'YYYY-MM-DD HH:MM:SS')
                             END
                             AS
                             LAST_UPDATE_DATE,
                             @OUT_STATUS
                             AS
                             OUT_STATUS,
                             @OUT_MESSAGE
                             AS
                             OUT_MESSAGE
                      FROM   task_sanctioning_department_trl DTRL
                             INNER JOIN task_hdr THDR
                                     ON DTRL.mkey = THDR.mkey
                             INNER JOIN employee_mst CREATEDBY
                                     ON DTRL.created_by = CREATEDBY.mkey
                             LEFT JOIN employee_mst UPDATEDBY
                                    ON DTRL.last_updated_by = UPDATEDBY.mkey
                      WHERE  DTRL.delete_flag = 'N'
                             AND CREATEDBY.delete_flag = 'N'
                             AND DTRL.mkey = @TASK_MKEY;
                  END
            END
      END try

      BEGIN catch
          -------------------------------------------------------------------------------------------------------------------------------          
          SELECT Error_number()    AS ERRORNUMBER,
                 Error_severity()  AS ERRORSEVERITY,
                 Error_state()     AS ERRORSTATE,
                 Error_procedure() AS ERRORPROCEDURE,
                 Error_line()      AS ERRORLINE,
                 Error_message()   AS ERRORMESSAGE;

          -------------------------------------------------------------------------------------------------------------------------------
          DECLARE @ERROR_MESSAGE VARCHAR(max) = NULL;

          SET @ERROR_MESSAGE = Error_message();

          -------------------------------------------------------------------------------------------------------------------------------
          EXEC Sp_p_tms_insert_error_des
            @CREATED_BY,
            @METHOD_NAME,
            @METHOD,
            @ERROR_MESSAGE,
            'SAVE';
      -------------------------------------------------------------------------------------------------------------------------------
      END catch
  END 


GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_UPDATE_TABLE_TASK_CHECKLIST_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- exec SP_INSERT_UPDATE_TABLE_TASK_CHECKLIST_NT 408,0,41,380,926,'N','added checlist',null,null,nullnull,926,1
-- =============================================
CREATE PROCEDURE [dbo].[SP_INSERT_UPDATE_TABLE_TASK_CHECKLIST_NT]
    -- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE
    @TASK_MKEY INT,
    @SR_NO INT,
    @DOCUMENT_MKEY INT,
    @DOCUMENT_CATEGORY INT,
    @CREATED_BY INT,
    @DELETE_FLAG NVARCHAR(2),
	@COMMENT NVARCHAR(max) = NULL,
    @METHOD_NAME NVARCHAR(200),
    @METHOD NVARCHAR(200),
    @OUT_STATUS NVARCHAR(200) OUTPUT,
    @OUT_MESSAGE NVARCHAR(200) OUTPUT,
	@Session_User_Id          INT = NULL,  
	@Business_Group_Id	  INT = NULL
AS
BEGIN
    -- SET NOCOUNT ON ADDED TO PREVENT EXTRA RESULT SETS FROM
    -- INTERFERING WITH SELECT STATEMENTS.
    SET NOCOUNT ON;

    DECLARE @DOCUMENT_NAME NVARCHAR(300),
            @DCOUNT INT,@DOC_TYPE_MKEY INT;

    BEGIN TRY
		Select @DOC_TYPE_MKEY = TYPE_MST_DOC_TYPE_MKEY from DOC_TEMPLATE_HDR where mkey = @DOCUMENT_MKEY;

        SELECT @DCOUNT = COUNT(*)
        FROM TASK_CHECKLIST_TRL
        WHERE MKEY = @TASK_MKEY
              and DOCUMENT_MKEY = @DOC_TYPE_MKEY
              and DOCUMENT_CATEGORY = @DOCUMENT_CATEGORY
              AND DELETE_FLAG = 'N';

        --print '@DCOUNT: ' + convert(varchar(100), @DCOUNT);
		print 'start if';
        IF (@DCOUNT > 0 AND @SR_NO = 0)
        BEGIN
            Set @OUT_STATUS = 'Error';
            Set @OUT_MESSAGE = 'Already exist Checklist in Task';
            print '@OUT_MESSAGE: ' + convert(varchar(10), @OUT_MESSAGE);
            SELECT CTRL.mkey as TASK_MKEY,
                   CTRL.sr_no,
                   THDR.project_id AS PROPERTY_MKEY,
                   THDR.sub_project_id AS BUILDING_MKEY,
                   CTRL.document_mkey,
                   CTRL.document_name,
                   CTRL.document_category,
                   DHDR.doc_name AS [TYPE_DESC],
                   CTRL.app_check,
				   CTRL.COMMENT,
                   Isnull(CONVERT(VARCHAR(50), CTRL.created_by), '') AS CREATED_BY_ID,
                   Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME,
                   CASE
                       WHEN CTRL.creation_date IS NULL THEN
                           ''
                       ELSE
                           Format(CTRL.creation_date, 'yyyy-MM-dd HH:mm:ss')
                   END AS CREATION_DATE,
                   Isnull(CONVERT(VARCHAR(50), CTRL.last_updated_by), '') AS LAST_UPDATED_BY,
                   Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME,
                   CASE
                       WHEN CTRL.last_update_date IS NULL THEN
                           ''
                       ELSE
                           Format(CTRL.last_update_date, 'yyyy-MM-dd HH:mm:ss')
                   END AS LAST_UPDATE_DATE,
                   @OUT_STATUS as OUT_STATUS,
                   @OUT_MESSAGE as OUT_MESSAGE
            FROM task_checklist_trl CTRL
                INNER JOIN task_hdr THDR
                    ON CTRL.mkey = THDR.mkey
                LEFT JOIN doc_template_hdr DHDR
                    ON DHDR.TYPE_MST_DOC_TYPE_MKEY = CTRL.document_category
                INNER JOIN employee_mst createdby
                    ON CTRL.created_by = createdby.mkey
                LEFT JOIN employee_mst updatedby
                    ON CTRL.last_updated_by = updatedby.mkey
            WHERE CTRL.delete_flag = 'N'
                 -- AND DHDR.delete_flag = 'N'
                  AND createdby.delete_flag = 'N'
                  AND THDR.delete_flag = 'N'
                  AND CTRL.mkey = @TASK_MKEY
            ORDER BY SR_NO,
                     CONVERT(INT, CTRL.document_category)
        END
        ELSE
        BEGIN
			print 'start';
            SELECT @DOCUMENT_NAME = TYPE_DESC
            FROM TYPE_MST
            WHERE MASTER_MKEY = @DOCUMENT_CATEGORY
                  AND DELETE_FLAG = 'N';

            IF (@SR_NO = 0 OR @SR_NO IS NULL)
            BEGIN

                SELECT @SR_NO = ISNULL(MAX(SR_NO), 0) + 1
                FROM TASK_CHECKLIST_TRL
                WHERE MKEY = @TASK_MKEY
                      AND DELETE_FLAG = 'N';

                INSERT INTO TASK_CHECKLIST_TRL
                (
                    MKEY,
                    SR_NO,
                    DOCUMENT_MKEY,
                    DOCUMENT_NAME,
                    DOCUMENT_CATEGORY,
					COMMENT,
                    DELETE_FLAG,
                    CREATED_BY,
                    CREATION_DATE
                )
                VALUES
                (@TASK_MKEY, @SR_NO, @DOC_TYPE_MKEY, @DOCUMENT_NAME, @DOCUMENT_CATEGORY,@COMMENT, 'N', @CREATED_BY, GETDATE())

				declare @ActionTrlSR_NO int,@TASK_PARENT_ID	int,@TASK_MAIN_NODE_ID int; 
				
				SELECT @ActionTrlSR_NO = isnull(max(t.SR_NO),0)+1 FROM TASK_ACTION_TRL t WHERE MKEY = @TASK_MKEY;   --SR_NO
				select @TASK_PARENT_ID = TASK_PARENT_ID from task_hdr where mkey = @TASK_MKEY and delete_flag = 'N';
				select @TASK_MAIN_NODE_ID = TASK_MAIN_NODE_ID from task_hdr where mkey = @TASK_MKEY and delete_flag = 'N';

				INSERT INTO [dbo].[TASK_ACTION_TRL] 
								(                                      
								[MKEY],
								[SR_NO],
								[TASK_MKEY],
								[TASK_PARENT_ID],
								[TASK_MAIN_NODE_ID],
								[ACTION_TYPE],
								PROGRESS_PERC,
								[DESCRIPTION_COMMENT],
								[STATUS],
								[CREATED_BY],
								[CREATION_DATE],
								[DELETE_FLAG]
								)  
						VALUES (  
								@TASK_MKEY,		--@Mkey
								@ActionTrlSR_NO,
								@TASK_MKEY,		--@TASK_MKEY
								ISNULL(@TASK_PARENT_ID,@TASK_MKEY),		--@TASK_PARENT_ID
								ISNULL(@TASK_MAIN_NODE_ID,@TASK_MKEY),		--@TASK_MAIN_NODE_ID
								'Checklist is added',		--@ACTION_TYPE
								'0',                       --PROGRESS_PERC
								@COMMENT,		--@DESCRIPTION_COMMENT
								'CREATED',		--@STATUS
								@CREATED_BY,		--@CREATED_BY
								GETDATE(),			--@CREATION_DATE
								'N'
								)


            END
            ELSE
            BEGIN
			print '375'
                INSERT INTO TASK_CHECKLIST_TRL_H
                (
                    HIST_DATE,
                    MKEY,
                    SR_NO,
                    DOCUMENT_MKEY,
                    DOCUMENT_NAME,
                    DOCUMENT_CATEGORY,
					COMMENT,
                    ATTRIBUTE1,
                    ATTRIBUTE2,
                    ATTRIBUTE3,
                    ATTRIBUTE4,
                    ATTRIBUTE5,
                    CREATED_BY,
                    CREATION_DATE,
                    LAST_UPDATED_BY,
                    LAST_UPDATE_DATE,
                    DELETE_FLAG,
                    APP_CHECK
                )
                SELECT GETDATE(),
                       MKEY,
                       SR_NO,
                       DOCUMENT_MKEY,
                       DOCUMENT_NAME,
                       DOCUMENT_CATEGORY,
					   COMMENT,
                       ATTRIBUTE1,
                       ATTRIBUTE2,
                       ATTRIBUTE3,
                       ATTRIBUTE4,
                       ATTRIBUTE5,
                       CREATED_BY,
                       CREATION_DATE,
                       LAST_UPDATED_BY,
                       LAST_UPDATE_DATE,
                       DELETE_FLAG,
                       APP_CHECK
                FROM TASK_CHECKLIST_TRL
                WHERE MKEY = @TASK_MKEY
                      AND SR_NO = @SR_NO
                      AND DELETE_FLAG = 'N';

				print '@@DOCUMENT_MKEY '+ convert(nvarchar,@DOCUMENT_MKEY);
				print '@DOCUMENT_CATEGORY '+ convert(nvarchar,@DOCUMENT_CATEGORY);
				print '@@DOCUMENT_NAME '+ convert(nvarchar,@DOCUMENT_NAME);
				
				UPDATE TASK_CHECKLIST_TRL
                SET DOCUMENT_MKEY = @DOC_TYPE_MKEY,
                    DOCUMENT_CATEGORY = @DOCUMENT_CATEGORY,
                    DOCUMENT_NAME = @DOCUMENT_NAME,
					COMMENT = @COMMENT,
                    LAST_UPDATED_BY = @CREATED_BY,
                    LAST_UPDATE_DATE = GETDATE(),
                    DELETE_FLAG = @DELETE_FLAG
                WHERE MKEY = @TASK_MKEY
                      AND SR_NO = @SR_NO
                      AND DELETE_FLAG = 'N';
            END

            Set @OUT_STATUS = 'OK';
            Set @OUT_MESSAGE = 'Successfuly Inserted';

            SELECT CTRL.mkey as TASK_MKEY,
                   CTRL.sr_no,
                   THDR.project_id AS PROPERTY_MKEY,
                   THDR.sub_project_id AS BUILDING_MKEY,
                   CTRL.document_mkey,
                   CTRL.document_name,
                   CTRL.document_category,
                   DHDR.doc_name AS [TYPE_DESC],
                   CTRL.app_check,
				   CTRL.COMMENT,
                   Isnull(CONVERT(VARCHAR(50), CTRL.created_by), '') AS CREATED_BY_ID,
                   Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME,
                   CASE
                       WHEN CTRL.creation_date IS NULL THEN
                           ''
                       ELSE
                           Format(CTRL.creation_date, 'yyyy-MM-dd HH:mm:ss')
                   END AS CREATION_DATE,
                   Isnull(CONVERT(VARCHAR(50), CTRL.last_updated_by), '') AS LAST_UPDATED_BY,
                   Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME,
                   CASE
                       WHEN CTRL.last_update_date IS NULL THEN
                           ''
                       ELSE
                           Format(CTRL.last_update_date, 'yyyy-MM-dd HH:mm:ss')
                   END AS LAST_UPDATE_DATE,
                   @OUT_STATUS as OUT_STATUS,
                   @OUT_MESSAGE as OUT_MESSAGE
            FROM task_checklist_trl CTRL
                INNER JOIN task_hdr THDR
                    ON CTRL.mkey = THDR.mkey
                LEFT JOIN doc_template_hdr DHDR
                    ON DHDR.TYPE_MST_DOC_TYPE_MKEY = CTRL.document_category
                INNER JOIN employee_mst createdby
                    ON CTRL.created_by = createdby.mkey
                LEFT JOIN employee_mst updatedby
                    ON CTRL.last_updated_by = updatedby.mkey
            WHERE CTRL.delete_flag = 'N'
                  --AND DHDR.delete_flag = 'N'
                  AND createdby.delete_flag = 'N'
                  AND THDR.delete_flag = 'N'
                  AND CTRL.mkey = @TASK_MKEY
            ORDER BY SR_NO,
                     CONVERT(INT, CTRL.document_category)
        END
    END TRY
    BEGIN CATCH
        -------------------------------------------------------------------------------------------------------------------------------          
        SELECT ERROR_NUMBER() AS ERRORNUMBER,
               ERROR_SEVERITY() AS ERRORSEVERITY,
               ERROR_STATE() AS ERRORSTATE,
               ERROR_PROCEDURE() AS ERRORPROCEDURE,
               ERROR_LINE() AS ERRORLINE,
               ERROR_MESSAGE() AS ERRORMESSAGE;

        -------------------------------------------------------------------------------------------------------------------------------
        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;

        SET @ERROR_MESSAGE = ERROR_MESSAGE();

        -------------------------------------------------------------------------------------------------------------------------------
        EXEC SP_P_TMS_INSERT_ERROR_DES @CREATED_BY,
                                       'TMS',
                                       'ADD PROJECT',
                                       @ERROR_MESSAGE,
                                       'SAVE';
    -------------------------------------------------------------------------------------------------------------------------------
    END CATCH
END

GO
/****** Object:  StoredProcedure [dbo].[SP_Get_Overall_DB]    Script Date: 16-05-2025 11:59:15 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		exec SP_Get_Overall_DB 926,'%22%22'
ALTER PROCEDURE [dbo].[SP_Get_Overall_DB] (
	@CURRENT_EMP_MKEY INT
	,@CURR_ACTION NVARCHAR(100)
	)
AS
BEGIN
	SET @CURRENT_EMP_MKEY = @CURRENT_EMP_MKEY

	SELECT 'Today' AS 'StatusVal'
		,T_HDR.MKEY
		,ISNULL(CATEGORY.TYPE_DESC, 'NA') CATEGORY
		,T_HDR.TASK_NO
		,DBO.[InitCap](ISNULL(CREATOR.EMP_FULL_NAME, 'NA')) CREATOR
		,DBO.[InitCap](ISNULL(RESPONSIBLE.EMP_FULL_NAME, 'NA')) RESPONSIBLE
		,DBO.[InitCap](ISNULL(ACTIONABLE.EMP_FULL_NAME, 'NA')) ACTIONABLE
		,T_HDR.CREATION_DATE
		,convert(VARCHAR, T_HDR.COMPLETION_DATE, 103) COMPLETION_DATE
		,DBO.[InitCap](T_HDR.TASK_NAME) TASK_NAME
		,T_HDR.TASK_DESCRIPTION
		,T_HDR.TAGS
		,DBO.[InitCap](T_HDR.STATUS) STATUS
		,CASE 
			WHEN ISNULL(CREATOR.FIRST_NAME, 'NA') != ISNULL(RESPONSIBLE.FIRST_NAME, 'NA')
				THEN DBO.[InitCap](ISNULL(CREATOR.FIRST_NAME, 'NA')) + ' > ' + DBO.[InitCap](ISNULL(RESPONSIBLE.FIRST_NAME, 'NA'))
			ELSE DBO.[InitCap](ISNULL(CREATOR.FIRST_NAME, 'NA'))
			END RESPONSIBLE_TAG
		,CREATOR.EMAIL_ID_OFFICIAL
		,CREATOR.mkey
		,RESPONSIBLE.EMAIL_ID_OFFICIAL
		,RESPONSIBLE.mkey
		,ACTIONABLE.EMAIL_ID_OFFICIAL
		,ACTIONABLE.mkey
		--,T_HDR.Status_Flag  
		,CASE 
			WHEN T_HDR.Status_Flag = 'F'
				THEN 'Future'
			ELSE 'Active'
			END AS 'STATUS_FLAG'
	FROM TASK_HDR T_HDR
	LEFT JOIN EMPLOYEE_MST CREATOR ON CREATOR.MKEY = T_HDR.Created_by AND CREATOR.DELETE_FLAG = 'N'
	LEFT JOIN EMPLOYEE_MST RESPONSIBLE ON RESPONSIBLE.MKEY = T_HDR.ASSIGNED_TO AND RESPONSIBLE.DELETE_FLAG = 'N'
	LEFT JOIN EMPLOYEE_MST ACTIONABLE ON ACTIONABLE.MKEY = T_HDR.RESPOSIBLE_EMP_MKEY AND ACTIONABLE.DELETE_FLAG = 'N'
	LEFT JOIN V_CATEGORY CATEGORY ON CATEGORY.MKEY = T_HDR.CAREGORY AND CATEGORY.DELETE_FLAG = 'N'
	WHERE (
			--T_HDR.Created_by=@CURRENT_EMP_MKEY  
			--OR  
			T_HDR.ASSIGNED_TO = @CURRENT_EMP_MKEY
			OR T_HDR.RESPOSIBLE_EMP_MKEY = @CURRENT_EMP_MKEY
			--T_HDR.ASSIGNED_TO=@CURRENT_EMP_MKEY  
			--OR  
			--T_HDR.RESPOSIBLE_EMP_MKEY=@CURRENT_EMP_MKEY  
			)
		AND T_HDR.STATUS NOT IN (
			'COMPLETED'
			,'CANCELLED'
			,'Close Initiated'
			,'Cancel Initiated'
			)
		AND convert(VARCHAR, T_HDR.COMPLETION_DATE, 103) = convert(VARCHAR, getdate(), 103)
		AND isnull(T_HDR.delete_flag, 'N') = 'N'
		AND Isnull(T_HDR.STATUS_Flag, 'A') IN (
			'A'
			,'N'
			)
		

	SELECT 'Overdue' AS 'StatusVal'
		,T_HDR.MKEY
		,ISNULL(CATEGORY.TYPE_DESC, 'NA') CATEGORY
		,T_HDR.TASK_NO
		,DBO.[InitCap](ISNULL(CREATOR.EMP_FULL_NAME, 'NA')) CREATOR
		,DBO.[InitCap](ISNULL(RESPONSIBLE.EMP_FULL_NAME, 'NA')) RESPONSIBLE
		,DBO.[InitCap](ISNULL(ACTIONABLE.EMP_FULL_NAME, 'NA')) ACTIONABLE
		,T_HDR.CREATION_DATE
		,convert(VARCHAR, T_HDR.COMPLETION_DATE, 103) COMPLETION_DATE
		,DBO.[InitCap](T_HDR.TASK_NAME) TASK_NAME
		,T_HDR.TASK_DESCRIPTION
		,T_HDR.TAGS
		,DBO.[InitCap](T_HDR.STATUS) STATUS
		,CASE 
			WHEN ISNULL(CREATOR.FIRST_NAME, 'NA') != ISNULL(RESPONSIBLE.FIRST_NAME, 'NA')
				THEN DBO.[InitCap](ISNULL(CREATOR.FIRST_NAME, 'NA')) + ' > ' + DBO.[InitCap](ISNULL(RESPONSIBLE.FIRST_NAME, 'NA'))
			ELSE DBO.[InitCap](ISNULL(CREATOR.FIRST_NAME, 'NA'))
			END RESPONSIBLE_TAG
		,CREATOR.EMAIL_ID_OFFICIAL
		,CREATOR.mkey
		,RESPONSIBLE.EMAIL_ID_OFFICIAL
		,RESPONSIBLE.mkey
		,ACTIONABLE.EMAIL_ID_OFFICIAL
		,ACTIONABLE.mkey
		,CASE 
			WHEN T_HDR.Status_Flag = 'F'
				THEN 'Future'
			ELSE 'Active'
			END AS 'STATUS_FLAG'
	FROM TASK_HDR T_HDR
	LEFT JOIN EMPLOYEE_MST CREATOR ON CREATOR.MKEY = T_HDR.Created_by AND CREATOR.DELETE_FLAG = 'N'
	LEFT JOIN EMPLOYEE_MST RESPONSIBLE ON RESPONSIBLE.MKEY = T_HDR.ASSIGNED_TO AND RESPONSIBLE.DELETE_FLAG = 'N'
	LEFT JOIN EMPLOYEE_MST ACTIONABLE ON ACTIONABLE.MKEY = T_HDR.RESPOSIBLE_EMP_MKEY AND ACTIONABLE.DELETE_FLAG = 'N'
	LEFT JOIN V_CATEGORY CATEGORY ON CATEGORY.MKEY = T_HDR.CAREGORY AND CATEGORY.DELETE_FLAG = 'N'
	WHERE (
			--T_HDR.Created_by=@CURRENT_EMP_MKEY  
			--OR  
			--T_HDR.ASSIGNED_TO=@CURRENT_EMP_MKEY OR   
			T_HDR.RESPOSIBLE_EMP_MKEY = @CURRENT_EMP_MKEY
			--T_HDR.ASSIGNED_TO=@CURRENT_EMP_MKEY  
			--OR  
			--T_HDR.RESPOSIBLE_EMP_MKEY=@CURRENT_EMP_MKEY  
			)
		AND T_HDR.STATUS NOT IN (
			'COMPLETED'
			,'CANCELLED'
			--,'SUB TASK CREATED'
			)
		AND T_HDR.COMPLETION_DATE < convert(DATETIME, convert(VARCHAR, getdate(), 103), 103)
		AND isnull(T_HDR.delete_flag, 'N') = 'N'
		AND Isnull(T_HDR.STATUS_Flag, 'A') IN (
			'A'
			,'N'
			)
		

	--select distinct STATUS from TASK_HDR  
	SELECT 'Review' AS 'StatusVal'
		,T_HDR.MKEY
		,ISNULL(CATEGORY.TYPE_DESC, 'NA') CATEGORY
		,T_HDR.TASK_NO
		,DBO.[InitCap](ISNULL(CREATOR.EMP_FULL_NAME, 'NA')) CREATOR
		,DBO.[InitCap](ISNULL(RESPONSIBLE.EMP_FULL_NAME, 'NA')) RESPONSIBLE
		,DBO.[InitCap](ISNULL(ACTIONABLE.EMP_FULL_NAME, 'NA')) ACTIONABLE
		,T_HDR.CREATION_DATE
		,convert(VARCHAR, T_HDR.COMPLETION_DATE, 103) COMPLETION_DATE
		,DBO.[InitCap](T_HDR.TASK_NAME) TASK_NAME
		,T_HDR.TASK_DESCRIPTION
		,T_HDR.TAGS
		,DBO.[InitCap](T_HDR.STATUS) STATUS
		,CASE 
			WHEN ISNULL(CREATOR.FIRST_NAME, 'NA') != ISNULL(RESPONSIBLE.FIRST_NAME, 'NA')
				THEN DBO.[InitCap](ISNULL(CREATOR.FIRST_NAME, 'NA')) + ' > ' + DBO.[InitCap](ISNULL(RESPONSIBLE.FIRST_NAME, 'NA'))
			ELSE DBO.[InitCap](ISNULL(CREATOR.FIRST_NAME, 'NA'))
			END RESPONSIBLE_TAG
		,CREATOR.EMAIL_ID_OFFICIAL
		,CREATOR.mkey
		,RESPONSIBLE.EMAIL_ID_OFFICIAL
		,RESPONSIBLE.mkey
		,ACTIONABLE.EMAIL_ID_OFFICIAL
		,ACTIONABLE.mkey
		,CASE 
			WHEN T_HDR.Status_Flag = 'F'
				THEN 'Future'
			ELSE 'Active'
			END AS 'STATUS_FLAG'
	FROM TASK_HDR T_HDR
	LEFT JOIN EMPLOYEE_MST CREATOR ON CREATOR.MKEY = T_HDR.Created_by AND CREATOR.DELETE_FLAG = 'N'
	LEFT JOIN EMPLOYEE_MST RESPONSIBLE ON RESPONSIBLE.MKEY = T_HDR.ASSIGNED_TO AND RESPONSIBLE.DELETE_FLAG = 'N'
	LEFT JOIN EMPLOYEE_MST ACTIONABLE ON ACTIONABLE.MKEY = T_HDR.RESPOSIBLE_EMP_MKEY AND ACTIONABLE.DELETE_FLAG = 'N'
	LEFT JOIN V_CATEGORY CATEGORY ON CATEGORY.MKEY = T_HDR.CAREGORY AND CATEGORY.DELETE_FLAG = 'N'
	WHERE (
			--T_HDR.Created_by=@CURRENT_EMP_MKEY  
			--OR T_HDR.ASSIGNED_TO=@CURRENT_EMP_MKEY OR T_HDR.RESPOSIBLE_EMP_MKEY=@CURRENT_EMP_MKEY  
			--T_HDR.ASSIGNED_TO=@CURRENT_EMP_MKEY  
			--OR  
			T_HDR.RESPOSIBLE_EMP_MKEY = @CURRENT_EMP_MKEY
			)
		--AND T_HDR.STATUS not in ('COMPLETED','CANCELLED','SUB TASK CREATED','Created')  
		AND T_HDR.STATUS IN (
			'Close Initiated'
			,'Cancel Initiated'
			)
		--and convert(varchar,T_HDR.COMPLETION_DATE,103)>= convert(varchar,convert(varchar,getdate(),103),103)  
		AND isnull(T_HDR.delete_flag, 'N') = 'N'

	SELECT 'Allocated But Not Started' AS 'StatusVal'
		,T_HDR.MKEY
		,ISNULL(CATEGORY.TYPE_DESC, 'NA') CATEGORY
		,T_HDR.TASK_NO
		,DBO.[InitCap](ISNULL(CREATOR.EMP_FULL_NAME, 'NA')) CREATOR
		,DBO.[InitCap](ISNULL(RESPONSIBLE.EMP_FULL_NAME, 'NA')) RESPONSIBLE
		,DBO.[InitCap](ISNULL(ACTIONABLE.EMP_FULL_NAME, 'NA')) ACTIONABLE
		,T_HDR.CREATION_DATE
		,convert(VARCHAR, T_HDR.COMPLETION_DATE, 103) COMPLETION_DATE
		,DBO.[InitCap](T_HDR.TASK_NAME) TASK_NAME
		,T_HDR.TASK_DESCRIPTION
		,T_HDR.TAGS
		,DBO.[InitCap](T_HDR.STATUS) STATUS
		,CASE 
			WHEN ISNULL(CREATOR.FIRST_NAME, 'NA') != ISNULL(RESPONSIBLE.FIRST_NAME, 'NA')
				THEN DBO.[InitCap](ISNULL(CREATOR.FIRST_NAME, 'NA')) + ' > ' + DBO.[InitCap](ISNULL(RESPONSIBLE.FIRST_NAME, 'NA'))
			ELSE DBO.[InitCap](ISNULL(CREATOR.FIRST_NAME, 'NA'))
			END RESPONSIBLE_TAG
		,CREATOR.EMAIL_ID_OFFICIAL
		,CREATOR.mkey
		,RESPONSIBLE.EMAIL_ID_OFFICIAL
		,RESPONSIBLE.mkey
		,ACTIONABLE.EMAIL_ID_OFFICIAL
		,ACTIONABLE.mkey
		,CASE 
			WHEN T_HDR.Status_Flag = 'F'
				THEN 'Future'
			ELSE 'Active'
			END AS 'STATUS_FLAG'
	FROM TASK_HDR T_HDR
	LEFT JOIN EMPLOYEE_MST CREATOR ON CREATOR.MKEY = T_HDR.Created_by AND CREATOR.DELETE_FLAG = 'N'
	LEFT JOIN EMPLOYEE_MST RESPONSIBLE ON RESPONSIBLE.MKEY = T_HDR.ASSIGNED_TO AND RESPONSIBLE.DELETE_FLAG = 'N'
	LEFT JOIN EMPLOYEE_MST ACTIONABLE ON ACTIONABLE.MKEY = T_HDR.RESPOSIBLE_EMP_MKEY AND ACTIONABLE.DELETE_FLAG = 'N'
	LEFT JOIN V_CATEGORY CATEGORY ON CATEGORY.MKEY = T_HDR.CAREGORY AND CATEGORY.DELETE_FLAG = 'N'
	WHERE (
			--T_HDR.Created_by=@CURRENT_EMP_MKEY  
			--OR  
			T_HDR.ASSIGNED_TO = @CURRENT_EMP_MKEY
			OR T_HDR.RESPOSIBLE_EMP_MKEY = @CURRENT_EMP_MKEY
			--T_HDR.ASSIGNED_TO=@CURRENT_EMP_MKEY  
			--OR  
			--T_HDR.RESPOSIBLE_EMP_MKEY=@CURRENT_EMP_MKEY  
			)
		AND T_HDR.STATUS IN ('CREATED','SUB TASK CREATED','WORK IN PROGRESS')
		AND isnull(T_HDR.delete_flag, 'N') = 'N'
		AND Isnull(T_HDR.STATUS_Flag, 'A') IN (
			'A'
			,'N'
			)

	SELECT 'Future' AS 'StatusVal'
		,T_HDR.MKEY
		,ISNULL(CATEGORY.TYPE_DESC, 'NA') CATEGORY
		,T_HDR.TASK_NO
		,DBO.[InitCap](ISNULL(CREATOR.EMP_FULL_NAME, 'NA')) CREATOR
		,DBO.[InitCap](ISNULL(RESPONSIBLE.EMP_FULL_NAME, 'NA')) RESPONSIBLE
		,DBO.[InitCap](ISNULL(ACTIONABLE.EMP_FULL_NAME, 'NA')) ACTIONABLE
		,T_HDR.CREATION_DATE
		,convert(VARCHAR, T_HDR.COMPLETION_DATE, 103) COMPLETION_DATE
		,DBO.[InitCap](T_HDR.TASK_NAME) TASK_NAME
		,T_HDR.TASK_DESCRIPTION
		,T_HDR.TAGS
		,DBO.[InitCap](T_HDR.STATUS) STATUS
		,CASE 
			WHEN ISNULL(CREATOR.FIRST_NAME, 'NA') != ISNULL(RESPONSIBLE.FIRST_NAME, 'NA')
				THEN DBO.[InitCap](ISNULL(CREATOR.FIRST_NAME, 'NA')) + ' > ' + DBO.[InitCap](ISNULL(RESPONSIBLE.FIRST_NAME, 'NA'))
			ELSE DBO.[InitCap](ISNULL(CREATOR.FIRST_NAME, 'NA'))
			END RESPONSIBLE_TAG
		,CREATOR.EMAIL_ID_OFFICIAL
		,CREATOR.mkey
		,RESPONSIBLE.EMAIL_ID_OFFICIAL
		,RESPONSIBLE.mkey
		,ACTIONABLE.EMAIL_ID_OFFICIAL
		,ACTIONABLE.mkey
		,CASE 
			WHEN T_HDR.Status_Flag = 'F'
				THEN 'Future'
			ELSE 'Active'
			END AS 'STATUS_FLAG'
	FROM TASK_HDR T_HDR
	LEFT JOIN EMPLOYEE_MST CREATOR ON CREATOR.MKEY = T_HDR.Created_by AND CREATOR.DELETE_FLAG = 'N'
	LEFT JOIN EMPLOYEE_MST RESPONSIBLE ON RESPONSIBLE.MKEY = T_HDR.ASSIGNED_TO AND RESPONSIBLE.DELETE_FLAG = 'N'
	LEFT JOIN EMPLOYEE_MST ACTIONABLE ON ACTIONABLE.MKEY = T_HDR.RESPOSIBLE_EMP_MKEY AND ACTIONABLE.DELETE_FLAG = 'N'
	LEFT JOIN V_CATEGORY CATEGORY ON CATEGORY.MKEY = T_HDR.CAREGORY AND CATEGORY.DELETE_FLAG = 'N'
	WHERE (
			--T_HDR.Created_by=@CURRENT_EMP_MKEY  
			--OR  
			T_HDR.RESPOSIBLE_EMP_MKEY = @CURRENT_EMP_MKEY
			or T_HDR.ASSIGNED_TO=@CURRENT_EMP_MKEY  
			--OR  
			--T_HDR.RESPOSIBLE_EMP_MKEY=@CURRENT_EMP_MKEY  
			)
		AND T_HDR.STATUS NOT IN (
			'COMPLETED'
			,'CANCELLED'
			,'Close Initiated'
			,'Cancel Initiated'
			)
		--AND T_HDR.STATUS  in ('Close Initiated','Cancel Initiated')  
		and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103)  
		AND isnull(T_HDR.delete_flag, 'N') = 'N'

	--and Isnull(T_HDR.STATUS_Flag,'A') in ('F')  
	/*Assigned by me and details Count*/
	SELECT 'Assigned by me and details Count' AS 'StatusVal'
		,RESPONSIBLE
		,sum(future) 'Future'
		,sum(Overdue) 'Overdue'
		,sum(today) 'Today'
	FROM (
		SELECT DBO.[InitCap](ISNULL(RESPONSIBLE.EMP_FULL_NAME, 'NA')) RESPONSIBLE
			,convert(VARCHAR, T_HDR.COMPLETION_DATE, 103) COMPLETION_DATE
			,CASE 
				WHEN T_HDR.COMPLETION_DATE > getdate()
					AND Isnull(T_HDR.STATUS_Flag, 'A') IN ('F')
					THEN 1
				ELSE 0
				END AS 'Future'
			,CASE 
				WHEN convert(DATETIME, convert(VARCHAR, T_HDR.COMPLETION_DATE, 103), 103) < convert(DATETIME, convert(VARCHAR, getdate(), 103), 103)
					THEN 1
				ELSE 0
				END AS 'Overdue'
			,CASE 
				WHEN convert(DATETIME, convert(VARCHAR, T_HDR.COMPLETION_DATE, 103), 103) = convert(DATETIME, convert(VARCHAR, getdate(), 103), 103)
					THEN 1
				ELSE 0
				END 'Today'
			,CASE 
				WHEN T_HDR.Status_Flag = 'F'
					THEN 'Future'
				ELSE 'Active'
				END AS 'STATUS_FLAG'
		FROM TASK_HDR T_HDR
		LEFT JOIN EMPLOYEE_MST CREATOR ON CREATOR.MKEY = T_HDR.Created_by AND CREATOR.DELETE_FLAG = 'N'
	LEFT JOIN EMPLOYEE_MST RESPONSIBLE ON RESPONSIBLE.MKEY = T_HDR.ASSIGNED_TO AND RESPONSIBLE.DELETE_FLAG = 'N'
	LEFT JOIN EMPLOYEE_MST ACTIONABLE ON ACTIONABLE.MKEY = T_HDR.RESPOSIBLE_EMP_MKEY AND ACTIONABLE.DELETE_FLAG = 'N'
	LEFT JOIN V_CATEGORY CATEGORY ON CATEGORY.MKEY = T_HDR.CAREGORY AND CATEGORY.DELETE_FLAG = 'N'
		WHERE ISNULL(CATEGORY.TYPE_DESC, 'NA') = 'PUBLIC'
			AND T_HDR.Created_by = @CURRENT_EMP_MKEY
			AND T_HDR.STATUS NOT IN (
				'Close Initiated'
				,'Cancel Initiated'
				,'COMPLETED'
				,'CANCELLED'
				)
			AND isnull(T_HDR.delete_flag, 'N') = 'N'
		) AS A
	GROUP BY A.RESPONSIBLE

	/* Tasks Assigned to me but action not taken*/
	SELECT 'Tasks Assigned to me but action not taken' AS 'StatusVal'
		,T_HDR.MKEY
		,ISNULL(CATEGORY.TYPE_DESC, 'NA') CATEGORY
		,T_HDR.TASK_NO
		,DBO.[InitCap](ISNULL(CREATOR.EMP_FULL_NAME, 'NA')) CREATOR
		,DBO.[InitCap](ISNULL(RESPONSIBLE.EMP_FULL_NAME, 'NA')) RESPONSIBLE
		,DBO.[InitCap](ISNULL(ACTIONABLE.EMP_FULL_NAME, 'NA')) ACTIONABLE
		,T_HDR.CREATION_DATE
		,convert(VARCHAR, T_HDR.COMPLETION_DATE, 103) COMPLETION_DATE
		,DBO.[InitCap](T_HDR.TASK_NAME) TASK_NAME
		,T_HDR.TASK_DESCRIPTION
		,T_HDR.TAGS
		,DBO.[InitCap](T_HDR.STATUS) STATUS
		,CASE 
			WHEN ISNULL(CREATOR.FIRST_NAME, 'NA') != ISNULL(RESPONSIBLE.FIRST_NAME, 'NA')
				THEN DBO.[InitCap](ISNULL(CREATOR.FIRST_NAME, 'NA')) + ' > ' + DBO.[InitCap](ISNULL(RESPONSIBLE.FIRST_NAME, 'NA'))
			ELSE DBO.[InitCap](ISNULL(CREATOR.FIRST_NAME, 'NA'))
			END RESPONSIBLE_TAG
		,CREATOR.EMAIL_ID_OFFICIAL
		,CREATOR.mkey
		,RESPONSIBLE.EMAIL_ID_OFFICIAL
		,RESPONSIBLE.mkey
		,ACTIONABLE.EMAIL_ID_OFFICIAL
		,ACTIONABLE.mkey
		,CASE 
			WHEN T_HDR.Status_Flag = 'F'
				THEN 'Future'
			ELSE 'Active'
			END AS 'STATUS_FLAG'
	FROM TASK_HDR T_HDR
	LEFT JOIN EMPLOYEE_MST CREATOR ON CREATOR.MKEY = T_HDR.Created_by AND CREATOR.DELETE_FLAG = 'N'
	LEFT JOIN EMPLOYEE_MST RESPONSIBLE ON RESPONSIBLE.MKEY = T_HDR.ASSIGNED_TO AND RESPONSIBLE.DELETE_FLAG = 'N'
	LEFT JOIN EMPLOYEE_MST ACTIONABLE ON ACTIONABLE.MKEY = T_HDR.RESPOSIBLE_EMP_MKEY AND ACTIONABLE.DELETE_FLAG = 'N'
	LEFT JOIN V_CATEGORY CATEGORY ON CATEGORY.MKEY = T_HDR.CAREGORY AND CATEGORY.DELETE_FLAG = 'N'
	WHERE (
			T_HDR.ASSIGNED_TO = @CURRENT_EMP_MKEY
			OR T_HDR.RESPOSIBLE_EMP_MKEY = @CURRENT_EMP_MKEY
			)
		AND T_HDR.STATUS IN ('CREATED')
		AND ISNULL(CATEGORY.TYPE_DESC, 'NA') = 'PUBLIC'
		AND isnull(T_HDR.delete_flag, 'N') = 'N'
		AND Isnull(T_HDR.STATUS_Flag, 'A') IN (
			'A'
			,'N'
			)

	SELECT 'Active' AS 'StatusVal'
		,T_HDR.MKEY
		,ISNULL(CATEGORY.TYPE_DESC, 'NA') CATEGORY
		,T_HDR.TASK_NO
		,DBO.[InitCap](ISNULL(CREATOR.EMP_FULL_NAME, 'NA')) CREATOR
		,DBO.[InitCap](ISNULL(RESPONSIBLE.EMP_FULL_NAME, 'NA')) RESPONSIBLE
		,DBO.[InitCap](ISNULL(ACTIONABLE.EMP_FULL_NAME, 'NA')) ACTIONABLE
		,T_HDR.CREATION_DATE
		,convert(VARCHAR, T_HDR.COMPLETION_DATE, 103) COMPLETION_DATE
		,DBO.[InitCap](T_HDR.TASK_NAME) TASK_NAME
		,T_HDR.TASK_DESCRIPTION
		,T_HDR.TAGS
		,DBO.[InitCap](T_HDR.STATUS) STATUS
		,CASE 
			WHEN ISNULL(CREATOR.FIRST_NAME, 'NA') != ISNULL(RESPONSIBLE.FIRST_NAME, 'NA')
				THEN DBO.[InitCap](ISNULL(CREATOR.FIRST_NAME, 'NA')) + ' > ' + DBO.[InitCap](ISNULL(RESPONSIBLE.FIRST_NAME, 'NA'))
			ELSE DBO.[InitCap](ISNULL(CREATOR.FIRST_NAME, 'NA'))
			END RESPONSIBLE_TAG
		,CREATOR.EMAIL_ID_OFFICIAL
		,CREATOR.mkey
		,RESPONSIBLE.EMAIL_ID_OFFICIAL
		,RESPONSIBLE.mkey
		,ACTIONABLE.EMAIL_ID_OFFICIAL
		,ACTIONABLE.mkey
		,CASE 
			WHEN T_HDR.Status_Flag = 'F'
				THEN 'Future'
			ELSE 'Active'
			END AS 'STATUS_FLAG'
	FROM TASK_HDR T_HDR
	LEFT JOIN EMPLOYEE_MST CREATOR ON CREATOR.MKEY = T_HDR.Created_by AND CREATOR.DELETE_FLAG = 'N'
	LEFT JOIN EMPLOYEE_MST RESPONSIBLE ON RESPONSIBLE.MKEY = T_HDR.ASSIGNED_TO AND RESPONSIBLE.DELETE_FLAG = 'N'
	LEFT JOIN EMPLOYEE_MST ACTIONABLE ON ACTIONABLE.MKEY = T_HDR.RESPOSIBLE_EMP_MKEY AND ACTIONABLE.DELETE_FLAG = 'N'
	LEFT JOIN V_CATEGORY CATEGORY ON CATEGORY.MKEY = T_HDR.CAREGORY AND CATEGORY.DELETE_FLAG = 'N'
	WHERE (
			--T_HDR.Created_by=@CURRENT_EMP_MKEY  
			--OR  
			T_HDR.RESPOSIBLE_EMP_MKEY = @CURRENT_EMP_MKEY
			--T_HDR.ASSIGNED_TO=@CURRENT_EMP_MKEY  
			--OR  
			--T_HDR.RESPOSIBLE_EMP_MKEY=@CURRENT_EMP_MKEY  
			)
		AND T_HDR.STATUS NOT IN (
			'COMPLETED'
			,'CANCELLED'
			,'Close Initiated'
			,'Cancel Initiated'
			)
		--AND T_HDR.STATUS  in ('Close Initiated','Cancel Initiated')  
		--and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103)  
		AND isnull(T_HDR.delete_flag, 'N') = 'N'
		AND Isnull(T_HDR.STATUS_Flag, 'A') IN (
			'A'
			,'N'
			)

	EXEC Sp_dashboard_count @CURRENT_EMP_MKEY
END
	--exec SP_Get_Overall_DB 9,''  
	--select * from employee_mst  


GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_UPDATE_TASK_CHECKLIST_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- EXEC SP_INSERT_UPDATE_TASK_CHECKLIST 440,443,12,12,'N',11081,'Insert/UpdateTaskCheckList','insert/Update',926 
-- EXEC SP_INSERT_UPDATE_TASK_CHECKLIST 440,443,1,403,'Y',11104,'Insert/UpdateTaskCheckList','insert/Update',926 
-- =============================================
CREATE PROCEDURE [dbo].[SP_INSERT_UPDATE_TASK_CHECKLIST_NT]
	@PROPERTY_MKEY INT,
	@BUILDING_MKEY INT,
	@SR_NO INT,
	@DOC_MKEY int,
	@APP_CHECK CHAR(1),
	@TASK_MKEY INT,
	@COMMENT  NVARCHAR(max) = NULL,
	@API_NAME NVARCHAR(200),
	@API_METHOD NVARCHAR(100),
	@CREATED_BY INT,
	@Session_User_Id      INT = NULL,  
	@Business_Group_Id	  INT = NULL
AS
BEGIN
	SET NOCOUNT ON;
	BEGIN TRY
		--SELECT * FROM TASK_CHECKLIST_TRL WHERE MKEY = @TASK_MKEY AND SR_NO = @SR_NO AND DOCUMENT_CATEGORY = CONVERT(NVARCHAR(100),@DOC_MKEY) AND DELETE_FLAG = 'N';
--------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		UPDATE TASK_CHECKLIST_TRL
		SET APP_CHECK = @APP_CHECK, LAST_UPDATED_BY = @CREATED_BY,  LAST_UPDATE_DATE = GETDATE(), COMMENT = @COMMENT
		WHERE MKEY = @TASK_MKEY AND SR_NO = @SR_NO --AND DOCUMENT_MKEY = @DOC_MKEY 
		AND DELETE_FLAG = 'N';
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
				declare @UpActionTrlSR_NO int,@UPTASK_PARENT_ID	int,@UPTASK_MAIN_NODE_ID int; 
				
				SELECT @UpActionTrlSR_NO = isnull(max(t.SR_NO),0)+1 FROM TASK_ACTION_TRL t WHERE MKEY = @TASK_MKEY;   --SR_NO
				select @UPTASK_PARENT_ID = TASK_PARENT_ID from task_hdr where mkey = @TASK_MKEY and delete_flag = 'N';
				select @UPTASK_MAIN_NODE_ID = TASK_MAIN_NODE_ID from task_hdr where mkey = @TASK_MKEY and delete_flag = 'N';

					  INSERT INTO [dbo].[TASK_ACTION_TRL] 
								(                                      
								[MKEY],
								[SR_NO],
								[TASK_MKEY],
								[TASK_PARENT_ID],
								[TASK_MAIN_NODE_ID],
								[ACTION_TYPE],
								PROGRESS_PERC,
								[DESCRIPTION_COMMENT],
								[STATUS],
								[CREATED_BY],
								[CREATION_DATE],
								[DELETE_FLAG]
								)  
						VALUES (  
								@TASK_MKEY,		--@Mkey
								@UpActionTrlSR_NO,
								@TASK_MKEY,		--@TASK_MKEY
								ISNULL(@UPTASK_PARENT_ID,@TASK_MKEY),		--@TASK_PARENT_ID
								ISNULL(@UPTASK_MAIN_NODE_ID,@TASK_MKEY),		--@TASK_MAIN_NODE_ID
								'Checklist is updated',		--@ACTION_TYPE
								'0',                       --PROGRESS_PERC
								@COMMENT,		--@DESCRIPTION_COMMENT
								'CREATED',		--@STATUS
								@CREATED_BY,		--@CREATED_BY
								GETDATE(),			--@CREATION_DATE
								'N'
								)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		 SELECT CTRL.mkey,
                 CTRL.sr_no,
                 THDR.project_id                                           AS
                 PROPERTY_MKEY,
                 THDR.sub_project_id                                       AS
                 BUILDING_MKEY,
                 CTRL.document_mkey,
                 CTRL.document_name,
                 CTRL.document_category,
                MST.TYPE_DESC                                             AS
                 [TYPE_DESC],
                 CTRL.app_check,
                 Isnull(CONVERT(VARCHAR(50), CTRL.created_by), '')         AS
                 CREATED_BY_ID,
                 Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS
                 CREATED_BY_NAME,
                 CASE
                   WHEN CTRL.creation_date IS NULL THEN ''
                   ELSE Format(CTRL.creation_date, 'yyyy-MM-dd HH:mm:ss')
                 END                                                       AS
                 CREATION_DATE,
                 Isnull(CONVERT(VARCHAR(50), CTRL.last_updated_by), '')    AS
                 LAST_UPDATED_BY,
                 Isnull(updatedby.emp_full_name, '')
                 UPDATED_BY_NAME
                 ,
                 CASE
                   WHEN CTRL.last_update_date IS NULL THEN ''
                   ELSE Format(CTRL.last_update_date, 'yyyy-MM-dd HH:mm:ss')
                 END                                                       AS
                 LAST_UPDATE_DATE
          FROM   task_checklist_trl CTRL
                 INNER JOIN task_hdr THDR
                         ON CTRL.mkey = THDR.mkey
                 left JOIN doc_template_hdr DHDR
                         ON DHDR.TYPE_MST_DOC_TYPE_MKEY= CTRL.document_category
				 LEFT JOIN TYPE_MST MST 
						ON (MST.MASTER_MKEY = CTRL.document_category OR MST.MKEY = CTRL.document_category)
                 INNER JOIN employee_mst createdby
                         ON CTRL.created_by = createdby.mkey
                 LEFT JOIN employee_mst updatedby
                        ON CTRL.last_updated_by = updatedby.mkey
          WHERE  CTRL.delete_flag = 'N'
                 --AND DHDR.delete_flag = 'N'
                 AND createdby.delete_flag = 'N'
                 AND THDR.delete_flag = 'N'
                 AND CTRL.mkey = @TASK_MKEY
                 --AND THDR.project_id = @PROPERTY_MKEY
                 --AND THDR.sub_project_id = @BUILDING_MKEY
		 ORDER BY SR_NO,CONVERT(INT, CTRL.document_category);
	END TRY
    BEGIN CATCH
        -------------------------------------------------------------------------------------------------------------------------------            
        SELECT ERROR_NUMBER() AS ERRORNUMBER,
               ERROR_SEVERITY() AS ERRORSEVERITY,
               ERROR_STATE() AS ERRORSTATE,
               ERROR_PROCEDURE() AS ERRORPROCEDURE,
               ERROR_LINE() AS ERRORLINE,
               ERROR_MESSAGE() AS ERRORMESSAGE;

        -------------------------------------------------------------------------------------------------------------------------------  
        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
        SET @ERROR_MESSAGE = ERROR_MESSAGE();
        -------------------------------------------------------------------------------------------------------------------------------  
        EXEC SP_P_TMS_INSERT_ERROR_DES @CREATED_BY,
                                       'TMS',
                                       @API_NAME,
                                       @ERROR_MESSAGE,
                                       @API_METHOD;
    -------------------------------------------------------------------------------------------------------------------------------  
    END CATCH

END

GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_UPDATE_TASK_ENDLIST_TABLE_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
--  exec SP_INSERT_UPDATE_TASK_ENDLIST_TABLE_NT 147,0,387,'Land Related Documents',926,'N','AOD','DFSD',NULL,NULL
-- =============================================
CREATE PROCEDURE [dbo].[SP_INSERT_UPDATE_TASK_ENDLIST_TABLE_NT]
  -- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE
  @MKEY                   INT,
  @SR_NO                  INT,
  @DOCUMENT_CATEGORY_MKEY INT,
  @DOCUMENT_NAME          NVARCHAR(255),
  @COMMENT				  NVARCHAR(max) = null,
  @CREATED_BY             INT,
  @DELETE_FLAG            NCHAR(2),
  @API_NAME               NVARCHAR(255),
  @API_METHOD             NVARCHAR(255),
  @OUT_STATUS             NVARCHAR(255) = NULL,
  @OUT_MESSAGE            NVARCHAR(255) = NULL
AS
  BEGIN
      SET nocount ON;

      BEGIN try
          DECLARE @DOCUMENT_MKEY          INT,
                  @DOCUMENT_CATEGORY_NAME NVARCHAR(255),
                  @DCOUNT                 INT;

          PRINT 'START SP';

          SELECT @DOCUMENT_MKEY = master_mkey
          FROM   type_mst
          WHERE  type_code = 'DOC_CATEGORY'
                 AND delete_flag = 'N'
                 AND Lower([type_desc]) = Lower(@DOCUMENT_NAME);

          SELECT @DOCUMENT_CATEGORY_NAME = DOC_NAME
          FROM   DOC_TEMPLATE_HDR
          WHERE  delete_flag = 'N'
                 AND MKEY = @DOCUMENT_CATEGORY_MKEY;

          PRINT '@DOCUMENT_CATEGORY: '
                + CONVERT(VARCHAR(100), @DOCUMENT_MKEY);

          PRINT '@DOCUMENT_NAME: '
                + CONVERT(VARCHAR(100), @DOCUMENT_CATEGORY_NAME);

          IF ( @SR_NO > 0 )
            BEGIN
                PRINT 'OUTSIDE if ( @SR_NO > 0 ) ';

                ------------------------------------------------------------------------------------------------------------------------
                INSERT INTO task_endlist_trl_h
                            (hist_date,
                             mkey,
                             sr_no,
                             document_mkey,
                             document_name,
                             document_category_mkey,
                             document_category,
                             doc_num_app_flag,
                             doc_num_valid_flag,
                             doc_num_date_app_flag,
                             doc_attach_app_flag,
                             doc_number,
                             doc_date,
                             validity_date,
							 COMMENT,
                             created_by,
                             creation_date,
                             delete_flag)
                SELECT Getdate(),
                       mkey,
                       sr_no,
                       document_mkey,
                       document_name,
                       document_category_mkey,
                       document_category,
                       doc_num_app_flag,
                       doc_num_valid_flag,
                       doc_num_date_app_flag,
                       doc_attach_app_flag,
                       doc_number,
                       doc_date,
                       validity_date,
					   COMMENT,
                       created_by,
                       creation_date,
                       delete_flag
                FROM   task_endlist_trl
                WHERE  mkey = @MKEY
                       AND sr_no = @SR_NO
                       AND delete_flag = 'N';

                -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                UPDATE task_endlist_trl
                SET    document_mkey = @DOCUMENT_MKEY,
                       document_name = @DOCUMENT_NAME,
                       document_category_mkey = @DOCUMENT_CATEGORY_MKEY,
                       document_category = @DOCUMENT_CATEGORY_NAME,
					   comment = @COMMENT
                       --,DOC_NUM_APP_FLAG = @DOC_NUM_APP_FLAG
                       --,DOC_NUM_VALID_FLAG = @DOC_NUM_VALID_FLAG
                       --,DOC_NUM_DATE_APP_FLAG = @DOC_NUM_DATE_APP_FLAG
                       --,DOC_ATTACH_APP_FLAG  = @DOC_ATTACH_APP_FLAG
                       --,DOC_NUMBER = @DOC_NUMBER
                       --,DOC_DATE = @DOC_DATE
                       --,VALIDITY_DATE = @VALIDITY_DATE
                       ,
                       last_updated_by = @CREATED_BY,
                       last_update_date = Getdate(),
                       delete_flag = @DELETE_FLAG
                WHERE  mkey = @MKEY
                       AND sr_no = @SR_NO
                       AND document_name = @DOCUMENT_NAME
                       --AND DOCUMENT_CATEGORY_MKEY = @DOCUMENT_CATEGORY_MKEY
                       AND delete_flag = 'N';

					   
				declare @UpActionTrlSR_NO int,@UPTASK_PARENT_ID	int,@UPTASK_MAIN_NODE_ID int; 
				
				SELECT @UpActionTrlSR_NO = isnull(max(t.SR_NO),0)+1 FROM TASK_ACTION_TRL t WHERE MKEY = @MKEY;   --SR_NO
				select @UPTASK_PARENT_ID = TASK_PARENT_ID from task_hdr where mkey = @MKEY and delete_flag = 'N';
				select @UPTASK_MAIN_NODE_ID = TASK_MAIN_NODE_ID from task_hdr where mkey = @MKEY and delete_flag = 'N';

					  INSERT INTO [dbo].[TASK_ACTION_TRL] 
								(                                      
								[MKEY],
								[SR_NO],
								[TASK_MKEY],
								[TASK_PARENT_ID],
								[TASK_MAIN_NODE_ID],
								[ACTION_TYPE],
								PROGRESS_PERC,
								[DESCRIPTION_COMMENT],
								[STATUS],
								[CREATED_BY],
								[CREATION_DATE],
								[DELETE_FLAG]
								)  
						VALUES (  
								@MKEY,		--@Mkey
								@UpActionTrlSR_NO,
								@MKEY,		--@TASK_MKEY
								ISNULL(@UPTASK_PARENT_ID,@MKEY),		--@TASK_PARENT_ID
								ISNULL(@UPTASK_MAIN_NODE_ID,@MKEY),		--@TASK_MAIN_NODE_ID
								'Outcomet is updated',		--@ACTION_TYPE
								'0',                       --PROGRESS_PERC
								@COMMENT,		--@DESCRIPTION_COMMENT
								'CREATED',		--@STATUS
								@CREATED_BY,		--@CREATED_BY
								GETDATE(),			--@CREATION_DATE
								'N'
								)

                PRINT '@CREATED_BY: '
                      + CONVERT(NVARCHAR, @CREATED_BY)

                PRINT '@DOCUMENT_MKEY: '
                      + CONVERT(NVARCHAR, @DOCUMENT_MKEY);

                PRINT '@@DOCUMENT_NAME: '
                      + CONVERT(NVARCHAR, @DOCUMENT_NAME);

                PRINT '@DOCUMENT_CATEGORY_MKEY: '
                      + CONVERT(NVARCHAR, @DOCUMENT_CATEGORY_MKEY);

                PRINT '@DOCUMENT_CATEGORY_NAME: '
                      + CONVERT(NVARCHAR, @DOCUMENT_CATEGORY_NAME);

                SET @OUT_STATUS = 'Ok';
                SET @OUT_MESSAGE = 'Update Successfully';

                SELECT @OUT_STATUS  AS OUT_STATUS,
                       @OUT_MESSAGE AS OUT_MESSAGE;
            -------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            END
          ELSE
            BEGIN
                PRINT 'INSIDE if ( @SR_NO > 0 ) ';

                PRINT '@MKEY: ' + CONVERT(NVARCHAR(10), @MKEY);

                PRINT '@DOCUMENT_MKEY: '
                      + CONVERT(NVARCHAR(10), @DOCUMENT_MKEY);

                PRINT '@@DOCUMENT_CATEGORY_MKEY: '
                      + CONVERT(NVARCHAR(10), @DOCUMENT_CATEGORY_MKEY);

                SELECT @DCOUNT = Count(*)
                FROM   task_endlist_trl
                WHERE  mkey = @MKEY
                       AND document_name = @DOCUMENT_NAME
                       AND document_category_mkey = @DOCUMENT_CATEGORY_MKEY
                       AND delete_flag = 'N';

                IF ( @DCOUNT > 0 )
                  BEGIN
                      SET @OUT_STATUS = 'Error';
                      SET @OUT_MESSAGE = 'This Document already exists';
                  END
                ELSE
                  BEGIN
                      DECLARE @DOC_NUM_APP_FLAG      NCHAR(2) = NULL,
                              @DOC_NUM_VALID_FLAG    NCHAR(2)= NULL,
                              @DOC_NUM_DATE_APP_FLAG NCHAR(2)= NULL,
                              @DOC_ATTACH_APP_FLAG   NCHAR(2)= NULL,
                              @DOC_NUMBER            NVARCHAR(255)= NULL,
                              @DOC_DATE              NVARCHAR(255)= NULL,
                              @VALIDITY_DATE         NVARCHAR(255)= NULL;

                      SELECT @SR_NO = Isnull(Max(sr_no), 0) + 1
                      FROM   task_endlist_trl
                      WHERE  mkey = @MKEY
                             AND document_name = @DOCUMENT_NAME;

                      PRINT '@DOCUMENT_CATEGORY_MKEY: '
                            + CONVERT(NVARCHAR(10), @DOCUMENT_CATEGORY_MKEY);

                      SELECT @DOC_NUM_APP_FLAG = doc_num_app_flag,
                             @DOC_NUM_VALID_FLAG = doc_num_valid_flag,
                             @DOC_NUM_DATE_APP_FLAG = doc_num_date_app_flag,
                             @DOC_ATTACH_APP_FLAG = doc_attach_app_flag
                      FROM   doc_template_hdr
                      WHERE  MKEY = @DOCUMENT_CATEGORY_MKEY
                             --AND DOC_CATEGORY = @DOCUMENT_MKEY
                             AND delete_flag = 'N';

                      --PRINT '@DOC_NUM_APP_FLAG: '+
                      INSERT INTO task_endlist_trl
                                  (mkey,
                                   sr_no,
                                   document_mkey,
                                   document_name,
                                   document_category_mkey,
                                   document_category,
                                   doc_num_app_flag,
                                   doc_num_valid_flag,
                                   doc_num_date_app_flag,
                                   doc_attach_app_flag,
								   COMMENT,
                                   created_by,
                                   creation_date,
                                   delete_flag)
                      VALUES      ( @MKEY,
                                    @SR_NO,
                                    @DOCUMENT_MKEY,
                                    @DOCUMENT_NAME,
                                    @DOCUMENT_CATEGORY_MKEY,
                                    @DOCUMENT_CATEGORY_NAME,
                                    @DOC_NUM_APP_FLAG,
                                    @DOC_NUM_VALID_FLAG,
                                    @DOC_NUM_DATE_APP_FLAG,
                                    @DOC_ATTACH_APP_FLAG,
									@COMMENT,
                                    @CREATED_BY,
                                    Getdate(),
                                    @DELETE_FLAG );


								declare @ActionTrlSR_NO int,@TASK_PARENT_ID	int,@TASK_MAIN_NODE_ID int; 
				
									SELECT @ActionTrlSR_NO = isnull(max(t.SR_NO),0)+1 FROM TASK_ACTION_TRL t WHERE MKEY = @MKEY;   --SR_NO
									select @TASK_PARENT_ID = TASK_PARENT_ID from task_hdr where mkey = @MKEY and delete_flag = 'N';
									select @TASK_MAIN_NODE_ID = TASK_MAIN_NODE_ID from task_hdr where mkey = @MKEY and delete_flag = 'N';

									INSERT INTO [dbo].[TASK_ACTION_TRL] 
									(                                      
									[MKEY],
									[SR_NO],
									[TASK_MKEY],
									[TASK_PARENT_ID],
									[TASK_MAIN_NODE_ID],
									[ACTION_TYPE],
									PROGRESS_PERC,
									[DESCRIPTION_COMMENT],
									[STATUS],
									[CREATED_BY],
									[CREATION_DATE],
									[DELETE_FLAG]
									)  
									VALUES (  
									@MKEY,		--@Mkey
									@ActionTrlSR_NO,
									@MKEY,		--@TASK_MKEY
									ISNULL(@TASK_PARENT_ID,@MKEY),		--@TASK_PARENT_ID
									ISNULL(@TASK_MAIN_NODE_ID,@MKEY),		--@TASK_MAIN_NODE_ID
									'Outcome is added',		--@ACTION_TYPE
									'0',                       --PROGRESS_PERC
									@COMMENT,		--@DESCRIPTION_COMMENT
									'CREATED',		--@STATUS
									@CREATED_BY,		--@CREATED_BY
									GETDATE(),			--@CREATION_DATE
									'N'
									)

                      SET @OUT_STATUS = 'Ok';
                      SET @OUT_MESSAGE = 'Insert Successfuly';
                  END

                SELECT @OUT_STATUS  AS OUT_STATUS,
                       @OUT_MESSAGE AS OUT_MESSAGE;
            END
      END try

      BEGIN catch
          -------------------------------------------------------------------------------------------------------------------------------            
          SELECT Error_number()    AS ERRORNUMBER,
                 Error_severity()  AS ERRORSEVERITY,
                 Error_state()     AS ERRORSTATE,
                 Error_procedure() AS ERRORPROCEDURE,
                 Error_line()      AS ERRORLINE,
                 Error_message()   AS ERRORMESSAGE;

          -------------------------------------------------------------------------------------------------------------------------------  
          DECLARE @ERROR_MESSAGE VARCHAR(max) = NULL;

          SET @ERROR_MESSAGE = Error_message();

          -------------------------------------------------------------------------------------------------------------------------------  
          EXEC Sp_p_tms_insert_error_des
            @CREATED_BY,
            'TMS',
            'INSERT UPDATE TASK ENDLIST',
            @ERROR_MESSAGE,
            'INSERT UPDATE';
      -------------------------------------------------------------------------------------------------------------------------------  
      END catch
  END 
GO
/****** Object:  StoredProcedure [dbo].[SP_INSET_UPDATE_TASK_ENDLIST_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- AUTHOR:    
-- CREATE DATE: 
-- DESCRIPTION:  
-- EXEC SP_INSET_UPDATE_TASK_ENDLIST 11083,2,15,440,443,'DEF-123','2025-03-12','2025-03-12',926,'N','INERT','ADD'
-- =============================================
CREATE PROCEDURE [dbo].[SP_INSET_UPDATE_TASK_ENDLIST_NT]
  -- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE
  @MKEY          INT,
  @SR_NO         INT,
  @DOC_MKEY      INT,
  @PROPERTY_MKEY INT,
  @BUILDING_MKEY INT,
  @DOC_NUMBER    NVARCHAR(200),
  @DOC_DATE      NVARCHAR(20),
  @VALIDITY_DATE NVARCHAR(20),
  @COMMENT       NVARCHAR(max) = NULL,
  @CREATED_BY    INT,
  @DELETE_FLAG   CHAR,
  @API_NAME      NVARCHAR(200),
  @API_METHOD    NVARCHAR(100),
  @Session_User_Id          INT = NULL,  
@Business_Group_Id	  INT = NULL
AS
  BEGIN
      SET NOCOUNT ON;
      BEGIN TRY
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
          INSERT INTO TASK_ENDLIST_TRL_H
                      (HIST_DATE,
                       MKEY,
                       SR_NO,
                       DOCUMENT_MKEY,
                       DOCUMENT_NAME,
                       DOCUMENT_CATEGORY_MKEY,
                       DOCUMENT_CATEGORY,
                       DOC_NUM_APP_FLAG,
                       DOC_NUM_VALID_FLAG,
                       DOC_NUM_DATE_APP_FLAG,
                       DOC_ATTACH_APP_FLAG,
                       DOC_NUMBER,
                       DOC_DATE,
                       VALIDITY_DATE,
					   COMMENT,
                       ATTRIBUTE1,
                       ATTRIBUTE2,
                       ATTRIBUTE3,
                       ATTRIBUTE4,
                       ATTRIBUTE5,
                       CREATED_BY,
                       CREATION_DATE,
                       LAST_UPDATED_BY,
                       LAST_UPDATE_DATE,
                       DELETE_FLAG)
          SELECT GETDATE(),
                 MKEY,
                 SR_NO,
                 DOCUMENT_MKEY,
                 DOCUMENT_NAME,
                 DOCUMENT_CATEGORY_MKEY,
                 DOCUMENT_CATEGORY,
                 DOC_NUM_APP_FLAG,
                 DOC_NUM_VALID_FLAG,
                 DOC_NUM_DATE_APP_FLAG,
                 DOC_ATTACH_APP_FLAG,
                 DOC_NUMBER,
                 DOC_DATE,
                 VALIDITY_DATE,
				 COMMENT,
                 ATTRIBUTE1,
                 ATTRIBUTE2,
                 ATTRIBUTE3,
                 ATTRIBUTE4,
                 ATTRIBUTE5,
                 CREATED_BY,
                 CREATION_DATE,
                 LAST_UPDATED_BY,
                 LAST_UPDATE_DATE,
                 DELETE_FLAG
          FROM   TASK_ENDLIST_TRL
          WHERE  MKEY = @MKEY
                 AND SR_NO = @SR_NO
                 AND DOCUMENT_CATEGORY_MKEY = @DOC_MKEY
                 AND DELETE_FLAG = 'N';
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
          UPDATE TASK_ENDLIST_TRL
          SET    DOC_NUMBER = @DOC_NUMBER,
                 DOC_DATE = @DOC_DATE,
                 VALIDITY_DATE = @VALIDITY_DATE,
				 COMMENT = @COMMENT,
				 DELETE_FLAG = @DELETE_FLAG  
          WHERE  MKEY = @MKEY
                 AND SR_NO = @SR_NO
                 AND DOCUMENT_CATEGORY_MKEY = @DOC_MKEY
                 AND DELETE_FLAG = 'N';

				 
				declare @UpActionTrlSR_NO int,@UPTASK_PARENT_ID	int,@UPTASK_MAIN_NODE_ID int; 
				
				SELECT @UpActionTrlSR_NO = isnull(max(t.SR_NO),0)+1 FROM TASK_ACTION_TRL t WHERE MKEY = @MKEY;   --SR_NO
				select @UPTASK_PARENT_ID = TASK_PARENT_ID from task_hdr where mkey = @MKEY and delete_flag = 'N';
				select @UPTASK_MAIN_NODE_ID = TASK_MAIN_NODE_ID from task_hdr where mkey = @MKEY and delete_flag = 'N';

					  INSERT INTO [dbo].[TASK_ACTION_TRL] 
								(                                      
								[MKEY],
								[SR_NO],
								[TASK_MKEY],
								[TASK_PARENT_ID],
								[TASK_MAIN_NODE_ID],
								[ACTION_TYPE],
								PROGRESS_PERC,
								[DESCRIPTION_COMMENT],
								[STATUS],
								[CREATED_BY],
								[CREATION_DATE],
								[DELETE_FLAG]
								)  
						VALUES (  
								@MKEY,		--@Mkey
								@UpActionTrlSR_NO,
								@MKEY,		--@TASK_MKEY
								ISNULL(@UPTASK_PARENT_ID,@MKEY),		--@TASK_PARENT_ID
								ISNULL(@UPTASK_MAIN_NODE_ID,@MKEY),		--@TASK_MAIN_NODE_ID
								'Outcome is updated',		--@ACTION_TYPE
								'0',                       --PROGRESS_PERC
								@COMMENT,		--@DESCRIPTION_COMMENT
								'CREATED',		--@STATUS
								@CREATED_BY,		--@CREATED_BY
								GETDATE(),			--@CREATION_DATE
								'N'
								)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			SELECT ETRL.MKEY,SR_NO,THDR.PROJECT_ID AS PROPERTY_MKEY, THDR.SUB_PROJECT_ID AS BUILDING_MKEY
					, DOCUMENT_MKEY,DOCUMENT_NAME as TYPE_CODE,DOCUMENT_CATEGORY_MKEY as DOC_MKEY,DOCUMENT_CATEGORY as [TYPE_DESC]
					,DOC_NUM_APP_FLAG,DOC_NUM_VALID_FLAG,DOC_NUM_DATE_APP_FLAG,DOC_ATTACH_APP_FLAG,DOC_NUMBER,DOC_DATE,VALIDITY_DATE
					,Isnull(CONVERT(VARCHAR(50), ETRL.created_by), '') AS CREATED_BY_ID
					,Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME
					,CASE
						WHEN ETRL.creation_date IS NULL THEN ''
						ELSE Format(ETRL.creation_date, 'yyyy-MM-dd HH:mm:ss')
					END AS CREATION_DATE
					,Isnull(CONVERT(VARCHAR(50), ETRL.last_updated_by), '') AS LAST_UPDATED_BY
					,Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME
					,CASE
						WHEN ETRL.last_update_date IS NULL THEN ''
						ELSE Format(ETRL.last_update_date, 'yyyy-MM-dd HH:mm:ss')
					END AS LAST_UPDATE_DATE

					FROM TASK_ENDLIST_TRL ETRL INNER JOIN TASK_HDR THDR ON ETRL.MKEY = THDR.MKEY
					INNER JOIN EMPLOYEE_MST createdby ON ETRL.created_by = createdby.mkey
					LEFT JOIN EMPLOYEE_MST updatedby ON ETRL.last_updated_by = updatedby.mkey
					WHERE ETRL.DELETE_FLAG = 'N'
					AND THDR.DELETE_FLAG = 'N'
					AND THDR.PROJECT_ID = @PROPERTY_MKEY
					AND THDR.SUB_PROJECT_ID = @BUILDING_MKEY
					AND THDR.MKEY = @MKEY
					and SR_NO = @SR_NO;
      END TRY

      BEGIN CATCH
          -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
          SELECT ERROR_NUMBER()    AS ERRORNUMBER,
                 ERROR_SEVERITY()  AS ERRORSEVERITY,
                 ERROR_STATE()     AS ERRORSTATE,
                 ERROR_PROCEDURE() AS ERRORPROCEDURE,
                 ERROR_LINE()      AS ERRORLINE,
                 ERROR_MESSAGE()   AS ERRORMESSAGE;

          -------------------------------------------------------------------------------------------------------------------------------  
          DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;

          SET @ERROR_MESSAGE = ERROR_MESSAGE();

          -------------------------------------------------------------------------------------------------------------------------------  
          EXEC SP_P_TMS_INSERT_ERROR_DES
            @CREATED_BY,
            'TMS',
            @API_NAME,
            @ERROR_MESSAGE,
            @API_METHOD;
      -------------------------------------------------------------------------------------------------------------------------------  
      END CATCH
  END

GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_DASHBOARD_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--  EXEC SP_TASK_DASHBOARD_NT 926,'CANCELCLOSE','Today'
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Overdue'
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next 3 Days'
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next 7 Days'
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next 2 Weeks'
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next Month'
--  EXEC SP_TASK_DASHBOARD_NT 926,'ALLOCATEDBYME','Review'
CREATE PROCEDURE [dbo].[SP_TASK_DASHBOARD_NT] (@CURRENT_EMP_MKEY INT,
                                              @FILTER           NVARCHAR(100),
                                              @STATUS_FILTER     NVARCHAR(255) = NULL)
AS
  BEGIN
      DECLARE @DAY INT

      SET @DAY=0

      IF( @FILTER = NULL OR @FILTER = '' OR @FILTER = 'DEFAULT' )
        BEGIN 
		print '@FILTER = DEFAULT '
            SELECT T_HDR.mkey,
                   Isnull(TMST.type_desc, 'NA')
                   CATEGORY
                   ,
                   T_HDR.task_no,
                   dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))
                   CREATOR,
                   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))
                   RESPONSIBLE,
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
                   ACTIONABLE,
                   T_HDR.creation_date,
                   CASE
                     WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'
                     WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status IN ( 'WORK IN PROGRESS',
                                            'CLOSE INITIATED',
                                            'CANCEL INITIATED',
                                            'RE-WORK' ) THEN 'In Progress'
                     WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN
                     'Completed'
                     ELSE 'Others'
                   END                                                    AS
                   Dashboard_Status,
                   CONVERT(VARCHAR, T_HDR.completion_date, 103)
                   COMPLETION_DATE,
                   dbo.[Initcap](T_HDR.task_name)
                   TASK_NAME,
                   T_HDR.task_description,
                   T_HDR.tags,
                   dbo.[Initcap](T_HDR.status)                            STATUS
                   ,
                   CASE
                     WHEN Isnull(CREATOR.first_name, 'NA') !=
                          Isnull(RESPONSIBLE.first_name, 'NA')
                   THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   + ' > '
                   + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA') )
                     ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   END
                   RESPONSIBLE_TAG,
                   dbo.[Initcap](Isnull(PMST.type_desc, ''))
                   PROJECT_NAME
                   ,
                   dbo.Tasknamestring(T_HDR.mkey)
                   AS
                   'TASK_HISTORY',
                   Isnull(Rtrim(T_HDR.[priority]), '')                    AS
                   [Priority],
                   Isnull(T_HDR.percent_complete, '0')                    AS
                   Progress_Percentage,
                   Isnull(parent_counts.parenttaskcount, 0)               AS
                   SubTask_Count,
				   T_HDR.CREATED_BY 
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by
                             AND CREATOR.delete_flag = 'N'
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to
                             AND RESPONSIBLE.delete_flag = 'N'
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
                             AND ACTIONABLE.delete_flag = 'N'
                   --LEFT JOIN v_category CATEGORY
                   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
                   LEFT JOIN type_mst TMST
                          ON TMST.master_mkey = T_HDR.caregory
                             AND TMST.type_code = 'CATEGORY'
                             AND TMST.delete_flag = 'N'
                   --LEFT JOIN v_project PROJ
                   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
                   LEFT JOIN type_mst PMST
                          ON PMST.master_mkey = T_HDR.project_id
                             AND PMST.type_code = 'PROJECT'
                             AND PMST.delete_flag = 'N'
                   LEFT JOIN (SELECT task_parent_id,
                                     Count(*) AS ParentTaskCount
                              FROM   task_hdr
                              WHERE  task_parent_id IS NOT NULL
                                     AND mkey NOT IN ( task_parent_id )
                                     AND delete_flag = 'N'
                              GROUP  BY task_parent_id) parent_counts
                          ON T_HDR.mkey = parent_counts.task_parent_id
            WHERE  (
                   --T_HDR.Created_by=@CURRENT_EMP_MKEY  
                   --OR  
                   --T_HDR.ASSIGNED_TO=@CURRENT_EMP_MKEY  
                   --OR  
                   --T_HDR.RESPOSIBLE_EMP_MKEY=@CURRENT_EMP_MKEY  
                   --T_HDR.ASSIGNED_TO=@CURRENT_EMP_MKEY  
                   --OR  
                   T_HDR.resposible_emp_mkey = @CURRENT_EMP_MKEY )
                   AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED', 'Cancel')
                   AND Isnull(T_HDR.status_flag, 'A') IN ( 'A' )
                   AND T_HDR.delete_flag = 'N'
				 --   And CASE
					--	WHEN @STATUS_FILTER    = 'Today' and @STATUS_FILTER    IS NULL THEN 
					--		CASE WHEN CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) THEN 1 ELSE 0 END
        
					--	WHEN @STATUS_FILTER    = 'Overdue' THEN 
					--		CASE WHEN T_HDR.completion_date < GETDATE() THEN 1 ELSE 0 END
        
					--	WHEN @STATUS_FILTER    = 'Next 3 Days' THEN 
					--		CASE WHEN T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 3, GETDATE()) THEN 1 ELSE 0 END
        
					--	WHEN @STATUS_FILTER    = 'Next 7 Days' THEN 
					--		CASE WHEN T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE()) THEN 1 ELSE 0 END
        
					--	WHEN @STATUS_FILTER    = 'Next 2 Weeks' THEN 
					--		CASE WHEN T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(WEEK, 2, GETDATE()) THEN 1 ELSE 0 END
        
					--	WHEN @STATUS_FILTER    = 'Next Month' THEN 
					--		CASE WHEN T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(MONTH, 1, GETDATE()) THEN 1 ELSE 0 END
        
					--	WHEN @STATUS_FILTER    = 'Review' THEN 
					--		CASE WHEN T_HDR.status IN ( 'CANCEL INITIATED', 'CLOSE INITIATED' ) THEN 1 ELSE 0 END
        
					--	WHEN @STATUS_FILTER    IS NULL THEN 
					--		CASE WHEN CONVERT(VARCHAR, T_HDR.completion_date, 103) = 'S' THEN 1 ELSE 0 END
        
					--	ELSE 0  -- If none of the conditions match, return false
					--END = 1
            ORDER  BY creation_date DESC
        END

      IF( @FILTER = 'ALLOCATEDBYME' )
        BEGIN
				SELECT T_HDR.mkey,
                   Isnull(TMST.type_desc, 'NA')
                   CATEGORY
                   ,
                   T_HDR.task_no,
                   dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))
                   CREATOR,
                   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))
                   RESPONSIBLE,
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
                   ACTIONABLE,
                   T_HDR.creation_date,
                   CASE
                     WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'
                     WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status IN ( 'WORK IN PROGRESS',
                                            'CLOSE INITIATED',
                                            'CANCEL INITIATED',
                                            'RE-WORK' ) THEN 'In Progress'
                     WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN
                     'Completed'
                     ELSE 'Others'
                   END                                                    AS
                   Dashboard_Status,
                   CONVERT(VARCHAR, T_HDR.completion_date, 103)           AS
                   COMPLETION_DATE
                   ,
                   dbo.[Initcap](T_HDR.task_name)                         AS
                   TASK_NAME,
                   T_HDR.task_description,
                   T_HDR.tags,
                   dbo.[Initcap](T_HDR.status)                            AS
                   STATUS,
                   CASE
                     WHEN Isnull(CREATOR.first_name, 'NA') !=
                          Isnull(RESPONSIBLE.first_name, 'NA')
                   THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   + ' > '
                   + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA'))
                     ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   END                                                    AS
                   RESPONSIBLE_TAG
                   ,
                   dbo.[Initcap](Isnull(PMST.type_desc, ''))              AS
                   PROJECT_NAME,
                   dbo.Tasknamestring(T_HDR.mkey)                         AS
                   TASK_HISTORY,
                   Isnull(Rtrim(T_HDR.[priority]), '')                    AS
                   [Priority],
                   Isnull(T_HDR.percent_complete, '0')                    AS
                   Progress_Percentage,
                   Isnull(parent_counts.parenttaskcount, 0)               AS
                   SubTask_Count,
				   T_HDR.CREATED_BY
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by
                             AND CREATOR.delete_flag = 'N'
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to
                             AND RESPONSIBLE.delete_flag = 'N'
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
                             AND ACTIONABLE.delete_flag = 'N'
                   --LEFT JOIN v_category CATEGORY
                   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
                   LEFT JOIN type_mst TMST
                          ON TMST.master_mkey = T_HDR.caregory
                             AND TMST.type_code = 'CATEGORY'
                             AND TMST.delete_flag = 'N'
                   --LEFT JOIN v_project PROJ
                   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
                   LEFT JOIN type_mst PMST
                          ON PMST.master_mkey = T_HDR.project_id
                             AND PMST.type_code = 'PROJECT'
                             AND PMST.delete_flag = 'N'
                   LEFT JOIN (SELECT task_parent_id,
                                     Count(*) AS ParentTaskCount
                              FROM   task_hdr
                              WHERE  task_parent_id IS NOT NULL
                                     AND mkey NOT IN ( task_parent_id )
                                     AND delete_flag = 'N'
                              GROUP  BY task_parent_id) parent_counts
                          ON T_HDR.mkey = parent_counts.task_parent_id
            WHERE  ( T_HDR.created_by = @CURRENT_EMP_MKEY )
                   AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED', 'Cancel'
                                           )
                   AND Isnull(T_HDR.status_flag, 'A') IN ( 'A' )
                   AND T_HDR.delete_flag = 'N'
				   AND (
					@STATUS_FILTER    IS NULL
					OR (
							(@STATUS_FILTER    = 'Today' AND CONVERT(DATE, T_HDR.completion_date) = CONVERT(DATE, GETDATE()))
							OR (@STATUS_FILTER    = 'Overdue' AND T_HDR.completion_date < GETDATE())
							OR (@STATUS_FILTER    = 'Next 3 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 3, GETDATE()))
							OR (@STATUS_FILTER    = 'Next 7 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE()))
							OR (@STATUS_FILTER    = 'Next 2 Weeks' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 14, GETDATE()))
							OR (@STATUS_FILTER    = 'Next Month' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(MONTH, 1, GETDATE()))
							OR (@STATUS_FILTER    = 'Review' AND T_HDR.status IN ('CANCEL INITIATED', 'CLOSE INITIATED'))
						)
					)
            ORDER  BY creation_date DESC;
        END

      IF( @FILTER = 'ALLOCATEDTOME' )
        BEGIN
            SELECT T_HDR.mkey,
                   Isnull(TMST.type_desc, 'NA')
                   CATEGORY
                   ,
                   T_HDR.task_no,
                   dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))
                   CREATOR,
                   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))
                   RESPONSIBLE,
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
                   ACTIONABLE,
                   T_HDR.creation_date,
                   CASE
                     WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'
                     WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status IN ( 'WORK IN PROGRESS',
                                            'CLOSE INITIATED',
                                            'CANCEL INITIATED',
                                            'RE-WORK' ) THEN 'In Progress'
                     WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN
                     'Completed'
                     ELSE 'Others'
                   END                                                    AS
                   Dashboard_Status,
                   CONVERT(VARCHAR, T_HDR.completion_date, 103)           AS
                   COMPLETION_DATE
                   ,
                   dbo.[Initcap](T_HDR.task_name)                         AS
                   TASK_NAME,
                   T_HDR.task_description,
                   T_HDR.tags,
                   dbo.[Initcap](T_HDR.status)                            AS
                   STATUS,
                   CASE
                     WHEN Isnull(CREATOR.first_name, 'NA') !=
                          Isnull(RESPONSIBLE.first_name, 'NA')
                   THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   + ' > '
                   + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA'))
                     ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   END                                                    AS
                   RESPONSIBLE_TAG
                   ,
                   dbo.[Initcap](Isnull(PMST.type_desc, ''))              AS
                   PROJECT_NAME,
                   dbo.Tasknamestring(T_HDR.mkey)                         AS
                   TASK_HISTORY,
                   Isnull(Rtrim(T_HDR.[priority]), '')                    AS
                   [Priority],
                   Isnull(T_HDR.percent_complete, '0')                    AS
                   Progress_Percentage,
                   Isnull(parent_counts.parenttaskcount, 0)               AS
                   SubTask_Count,
				   T_HDR.CREATED_BY
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by
                             AND CREATOR.delete_flag = 'N'
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to
                             AND RESPONSIBLE.delete_flag = 'N'
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
                             AND ACTIONABLE.delete_flag = 'N'
                   --LEFT JOIN v_category CATEGORY
                   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
                   LEFT JOIN type_mst TMST
                          ON TMST.master_mkey = T_HDR.caregory
                             AND TMST.type_code = 'CATEGORY'
                             AND TMST.delete_flag = 'N'
                   --LEFT JOIN v_project PROJ
                   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
                   LEFT JOIN type_mst PMST
                          ON PMST.master_mkey = T_HDR.project_id
                             AND PMST.type_code = 'PROJECT'
                             AND PMST.delete_flag = 'N'
                   LEFT JOIN (SELECT task_parent_id,
                                     Count(*) AS ParentTaskCount
                              FROM   task_hdr
                              WHERE  task_parent_id IS NOT NULL
                                     AND mkey NOT IN ( task_parent_id )
                                     AND delete_flag = 'N'
                              GROUP  BY task_parent_id) parent_counts
                          ON T_HDR.mkey = parent_counts.task_parent_id
            WHERE  ( T_HDR.assigned_to = @CURRENT_EMP_MKEY
                      OR T_HDR.resposible_emp_mkey = @CURRENT_EMP_MKEY )
                   AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED', 'Cancel')
                   AND Isnull(T_HDR.status_flag, 'A') IN ( 'A' )
                   AND T_HDR.delete_flag = 'N'
				   AND (
						@STATUS_FILTER    IS NULL
						OR (
								(@STATUS_FILTER    = 'Today' AND CONVERT(DATE, T_HDR.completion_date) = CONVERT(DATE, GETDATE()))
								OR (@STATUS_FILTER    = 'Overdue' AND T_HDR.completion_date < GETDATE())
								OR (@STATUS_FILTER    = 'Next 3 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 3, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 7 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 2 Weeks' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 14, GETDATE()))
								OR (@STATUS_FILTER    = 'Next Month' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(MONTH, 1, GETDATE()))
								OR (@STATUS_FILTER    = 'Review' AND T_HDR.status IN ('CANCEL INITIATED', 'CLOSE INITIATED'))
							)
						)
            ORDER  BY creation_date DESC;
        END

      IF( @FILTER = 'COMPLETEDBYME' )
        BEGIN
            SELECT T_HDR.mkey,
                   Isnull(TMST.type_desc, 'NA')
                   CATEGORY
                   ,
                   T_HDR.task_no,
                   dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))
                   CREATOR,
                   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))
                   RESPONSIBLE,
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
                   ACTIONABLE,
                   T_HDR.creation_date,
                   CASE
                     WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'
                     WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status IN ( 'WORK IN PROGRESS',
                                            'CLOSE INITIATED',
                                            'CANCEL INITIATED',
                                            'RE-WORK' ) THEN 'In Progress'
                     WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN
                     'Completed'
                     ELSE 'Others'
                   END                                                    AS
                   Dashboard_Status,
                   CONVERT(VARCHAR, T_HDR.completion_date, 103)           AS
                   COMPLETION_DATE
                   ,
                   dbo.[Initcap](T_HDR.task_name)                         AS
                   TASK_NAME,
                   T_HDR.task_description,
                   T_HDR.tags,
                   dbo.[Initcap](T_HDR.status)                            AS
                   STATUS,
                   CASE
                     WHEN Isnull(CREATOR.first_name, 'NA') !=
                          Isnull(RESPONSIBLE.first_name, 'NA')
                   THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   + ' > '
                   + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA'))
                     ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   END                                                    AS
                   RESPONSIBLE_TAG
                   ,
                   dbo.[Initcap](Isnull(PMST.type_desc, ''))              AS
                   PROJECT_NAME,
                   dbo.Tasknamestring(T_HDR.mkey)                         AS
                   TASK_HISTORY,
                   Isnull(Rtrim(T_HDR.[priority]), '')                    AS
                   [Priority],
                   Isnull(T_HDR.percent_complete, '0')                    AS
                   Progress_Percentage,
                   Isnull(parent_counts.parenttaskcount, 0)               AS
                   SubTask_Count,
				   T_HDR.CREATED_BY
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by
                             AND CREATOR.delete_flag = 'N'
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to
                             AND RESPONSIBLE.delete_flag = 'N'
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
                             AND ACTIONABLE.delete_flag = 'N'
                   --LEFT JOIN v_category CATEGORY
                   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
                   LEFT JOIN type_mst TMST
                          ON TMST.master_mkey = T_HDR.caregory
                             AND TMST.type_code = 'CATEGORY'
                             AND TMST.delete_flag = 'N'
                   --LEFT JOIN v_project PROJ
                   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
                   LEFT JOIN type_mst PMST
                          ON PMST.master_mkey = T_HDR.project_id
                             AND PMST.type_code = 'PROJECT'
                             AND PMST.delete_flag = 'N'
                   LEFT JOIN (SELECT task_parent_id,
                                     Count(*) AS ParentTaskCount
                              FROM   task_hdr
                              WHERE  task_parent_id IS NOT NULL
                                     AND mkey NOT IN ( task_parent_id )
                                     AND delete_flag = 'N'
                              GROUP  BY task_parent_id) parent_counts
                          ON T_HDR.mkey = parent_counts.task_parent_id
            WHERE  ( T_HDR.assigned_to = @CURRENT_EMP_MKEY )
                   AND T_HDR.status IN ( 'COMPLETED' )
                   AND Isnull(T_HDR.status_flag, 'A') IN ( 'A' )
                   AND T_HDR.delete_flag = 'N'
				   AND (
						@STATUS_FILTER    IS NULL
						OR (
								(@STATUS_FILTER    = 'Today' AND CONVERT(DATE, T_HDR.completion_date) = CONVERT(DATE, GETDATE()))
								OR (@STATUS_FILTER    = 'Overdue' AND T_HDR.completion_date < GETDATE())
								OR (@STATUS_FILTER    = 'Next 3 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 3, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 7 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 2 Weeks' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 14, GETDATE()))
								OR (@STATUS_FILTER    = 'Next Month' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(MONTH, 1, GETDATE()))
								OR (@STATUS_FILTER    = 'Review' AND T_HDR.status IN ('CANCEL INITIATED', 'CLOSE INITIATED'))
							)
						)
            ORDER  BY creation_date DESC;
        END

      IF( @FILTER = 'COMPLETEDFORME' )
        BEGIN
            SELECT T_HDR.mkey,
                   Isnull(TMST.type_desc, 'NA')
                   CATEGORY
                   ,
                   T_HDR.task_no,
                   dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))
                   CREATOR,
                   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))
                   RESPONSIBLE,
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
                   ACTIONABLE,
                   T_HDR.creation_date,
                   CASE
                     WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'
                     WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status IN ( 'WORK IN PROGRESS',
                                            'CLOSE INITIATED',
                                            'CANCEL INITIATED',
                                            'RE-WORK' ) THEN 'In Progress'
                     WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN
                     'Completed'
                     ELSE 'Others'
                   END                                                    AS
                   Dashboard_Status,
                   CONVERT(VARCHAR, T_HDR.completion_date, 103)           AS
                   COMPLETION_DATE
                   ,
                   dbo.[Initcap](T_HDR.task_name)                         AS
                   TASK_NAME,
                   T_HDR.task_description,
                   T_HDR.tags,
                   dbo.[Initcap](T_HDR.status)                            AS
                   STATUS,
                   CASE
                     WHEN Isnull(CREATOR.first_name, 'NA') !=
                          Isnull(RESPONSIBLE.first_name, 'NA')
                   THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   + ' > '
                   + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA'))
                     ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   END                                                    AS
                   RESPONSIBLE_TAG
                   ,
                   dbo.[Initcap](Isnull(PMST.type_desc, ''))              AS
                   PROJECT_NAME,
                   dbo.Tasknamestring(T_HDR.mkey)                         AS
                   TASK_HISTORY,
                   Isnull(Rtrim(T_HDR.[priority]), '')                    AS
                   [Priority],
                   Isnull(T_HDR.percent_complete, '0')                    AS
                   Progress_Percentage,
                   Isnull(parent_counts.parenttaskcount, 0)               AS
                   SubTask_Count,
				   T_HDR.CREATED_BY
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by
                             AND CREATOR.delete_flag = 'N'
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to
                             AND RESPONSIBLE.delete_flag = 'N'
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
                             AND ACTIONABLE.delete_flag = 'N'
                   --LEFT JOIN v_category CATEGORY
                   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
                   LEFT JOIN type_mst TMST
                          ON TMST.master_mkey = T_HDR.caregory
                             AND TMST.type_code = 'CATEGORY'
                             AND TMST.delete_flag = 'N'
                   --LEFT JOIN v_project PROJ
                   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
                   LEFT JOIN type_mst PMST
                          ON PMST.master_mkey = T_HDR.project_id
                             AND PMST.type_code = 'PROJECT'
                             AND PMST.delete_flag = 'N'
                   LEFT JOIN (SELECT task_parent_id,
                                     Count(*) AS ParentTaskCount
                              FROM   task_hdr
                              WHERE  task_parent_id IS NOT NULL
                                     AND mkey NOT IN ( task_parent_id )
                                     AND delete_flag = 'N'
                              GROUP  BY task_parent_id) parent_counts
                          ON T_HDR.mkey = parent_counts.task_parent_id
            WHERE  ( T_HDR.created_by = @CURRENT_EMP_MKEY
                     AND T_HDR.assigned_to != @CURRENT_EMP_MKEY
                    --OR  
                    --T_HDR.ASSIGNED_TO=@CURRENT_EMP_MKEY  
                    --OR  
                    --T_HDR.RESPOSIBLE_EMP_MKEY=@CURRENT_EMP_MKEY  
                    )
                   AND T_HDR.status IN ( 'COMPLETED' )
                   --and Isnull(T_HDR.STATUS_Flag,'A') in ('A')  
                   AND T_HDR.delete_flag = 'N'
					AND (
						@STATUS_FILTER    IS NULL
						OR (
								(@STATUS_FILTER    = 'Today' AND CONVERT(DATE, T_HDR.completion_date) = CONVERT(DATE, GETDATE()))
								OR (@STATUS_FILTER    = 'Overdue' AND T_HDR.completion_date < GETDATE())
								OR (@STATUS_FILTER    = 'Next 3 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 3, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 7 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 2 Weeks' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 14, GETDATE()))
								OR (@STATUS_FILTER    = 'Next Month' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(MONTH, 1, GETDATE()))
								OR (@STATUS_FILTER    = 'Review' AND T_HDR.status IN ('CANCEL INITIATED', 'CLOSE INITIATED'))
							)
						)
            ORDER  BY creation_date DESC;
        END

      IF( @FILTER = 'CANCELCLOSE' )
        BEGIN
            SELECT T_HDR.mkey,
                   Isnull(TMST.type_desc, 'NA')
                   CATEGORY
                   ,
                   T_HDR.task_no,
                   dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))
                   CREATOR,
                   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))
                   RESPONSIBLE,
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
                   ACTIONABLE,
                   T_HDR.creation_date,
                   CASE
                     WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'
                     WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status IN ( 'WORK IN PROGRESS',
                                            'CLOSE INITIATED',
                                            'CANCEL INITIATED',
                                            'RE-WORK' ) THEN 'In Progress'
                     WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN
                     'Completed'
                     ELSE 'Others'
                   END                                                    AS
                   Dashboard_Status,
                   CONVERT(VARCHAR, T_HDR.completion_date, 103)           AS
                   COMPLETION_DATE
                   ,
                   dbo.[Initcap](T_HDR.task_name)                         AS
                   TASK_NAME,
                   T_HDR.task_description,
                   T_HDR.tags,
                   dbo.[Initcap](T_HDR.status)                            AS
                   STATUS,
                   CASE
                     WHEN Isnull(CREATOR.first_name, 'NA') !=
                          Isnull(RESPONSIBLE.first_name, 'NA')
                   THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   + ' > '
                   + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA'))
                     ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   END                                                    AS
                   RESPONSIBLE_TAG
                   ,
                   dbo.[Initcap](Isnull(PMST.type_desc, ''))              AS
                   PROJECT_NAME,
                   dbo.Tasknamestring(T_HDR.mkey)                         AS
                   TASK_HISTORY,
                   Isnull(Rtrim(T_HDR.[priority]), '')                    AS
                   [Priority],
                   Isnull(T_HDR.percent_complete, '0')                    AS
                   Progress_Percentage,
                   Isnull(parent_counts.parenttaskcount, 0)               AS
                   SubTask_Count,
				   T_HDR.CREATED_BY
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by
                             AND CREATOR.delete_flag = 'N'
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to
                             AND RESPONSIBLE.delete_flag = 'N'
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
                             AND ACTIONABLE.delete_flag = 'N'
                   --LEFT JOIN v_category CATEGORY
                   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
                   LEFT JOIN type_mst TMST
                          ON TMST.master_mkey = T_HDR.caregory
                             AND TMST.type_code = 'CATEGORY'
                             AND TMST.delete_flag = 'N'
                   --LEFT JOIN v_project PROJ
                   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
                   LEFT JOIN type_mst PMST
                          ON PMST.master_mkey = T_HDR.project_id
                             AND PMST.type_code = 'PROJECT'
                             AND PMST.delete_flag = 'N'
                   LEFT JOIN (SELECT task_parent_id,
                                     Count(*) AS ParentTaskCount
                              FROM   task_hdr
                              WHERE  task_parent_id IS NOT NULL
                                     AND mkey NOT IN ( task_parent_id )
                                     AND delete_flag = 'N'
                              GROUP  BY task_parent_id) parent_counts
                          ON T_HDR.mkey = parent_counts.task_parent_id
            WHERE  ( T_HDR.created_by = @CURRENT_EMP_MKEY
                      OR T_HDR.resposible_emp_mkey = @CURRENT_EMP_MKEY )
                   AND T_HDR.status IN ( 'CANCEL', 'CANCELLED' )
                   AND T_HDR.delete_flag = 'N'
				   AND (
						@STATUS_FILTER    IS NULL
						OR (
								(@STATUS_FILTER    = 'Today' AND CONVERT(DATE, T_HDR.completion_date) = CONVERT(DATE, GETDATE()))
								OR (@STATUS_FILTER    = 'Overdue' AND T_HDR.completion_date < GETDATE())
								OR (@STATUS_FILTER    = 'Next 3 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 3, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 7 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 2 Weeks' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 14, GETDATE()))
								OR (@STATUS_FILTER    = 'Next Month' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(MONTH, 1, GETDATE()))
								OR (@STATUS_FILTER    = 'Review' AND T_HDR.status IN ('CANCEL INITIATED', 'CLOSE INITIATED'))
							)
						)
            ORDER  BY creation_date DESC;
        END
		--SELECT  T_HDR.MKEY,T_HDR.TASK_NO,T_HDR.CREATION_DATE,T_HDR.TASK_NAME,T_HDR.TASK_DESCRIPTION,E_MST.EMP_FULL_NAME,T_HDR.TAGS,T_HDR.STATUS FROM TASK_HDR  T_HDR  
      --INNER JOIN EMPLOYEE_MST E_MST ON E_MST.MKEY= T_HDR.ASSIGNED_TO  
      --  IF( @FILTER = NULL
      --       OR @FILTER = '' )
      --    BEGIN
      --SELECT T_HDR.mkey,
      --   Isnull(TMST.type_desc, 'NA')                           AS
      --               CATEGORY,
      --               T_HDR.task_no,
      --               dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))     AS
      --               CREATOR,
      --               dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA')) AS
      --               RESPONSIBLE
      --               ,
      --               dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))  AS
      --               ACTIONABLE,
      --               T_HDR.creation_date,
      --               CASE
      --                 WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'
      --                 WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN
      --                 'Not Started'
      --                 WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN
      --                 'Not Started'
      --                 WHEN T_HDR.status IN ( 'WORK IN PROGRESS',
      --                                        'CLOSE INITIATED',
      --                                        'CANCEL INITIATED',
      --                                        'RE-WORK' ) THEN 'In Progress'
      --                 WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN
      --                 'Completed'
      --                 ELSE 'Others'
      --               END                                                    AS
      --               Dashboard_Status,
      --               CONVERT(VARCHAR, T_HDR.completion_date, 103)           AS
      --               COMPLETION_DATE
      --               ,
      --               dbo.[Initcap](T_HDR.task_name)                         AS
      --               TASK_NAME,
      --               T_HDR.task_description,
      --               T_HDR.tags,
      --               dbo.[Initcap](T_HDR.status)                            AS
      --               STATUS,
      --               CASE
      --                 WHEN Isnull(CREATOR.first_name, 'NA') !=
      --                      Isnull(RESPONSIBLE.first_name, 'NA')
      --               THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
      --               + ' > '
      --               + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA'))
      --                 ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
      --               END                                                    AS
      --               RESPONSIBLE_TAG
      --               ,
      --               dbo.[Initcap](Isnull(PMST.type_desc, ''))              AS
      --               PROJECT_NAME,
      --               dbo.Tasknamestring(T_HDR.mkey)                         AS
      --               TASK_HISTORY,
      --               Isnull(Rtrim(T_HDR.[priority]), '')                    AS
      --               [Priority],
      --               Isnull(T_HDR.percent_complete, '0')                    AS
      --               Progress_Percentage,
      --               Isnull(parent_counts.parenttaskcount, 0)               AS
      --               SubTask_Count
      --        FROM   task_hdr T_HDR
      --               LEFT JOIN employee_mst CREATOR
      --                      ON CREATOR.mkey = T_HDR.created_by
      --                         AND CREATOR.delete_flag = 'N'
      --               LEFT JOIN employee_mst RESPONSIBLE
      --                      ON RESPONSIBLE.mkey = T_HDR.assigned_to
      --                         AND RESPONSIBLE.delete_flag = 'N'
      --               LEFT JOIN employee_mst ACTIONABLE
      --                      ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
      --                         AND ACTIONABLE.delete_flag = 'N'
      --               --LEFT JOIN v_category CATEGORY
      --               --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
      --               LEFT JOIN type_mst TMST
      --                      ON TMST.master_mkey = T_HDR.caregory
      --                         AND TMST.type_code = 'CATEGORY'
      --                         AND TMST.delete_flag = 'N'
      --               --LEFT JOIN v_project PROJ
      --               --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
      --               LEFT JOIN type_mst PMST
      --                      ON PMST.master_mkey = T_HDR.project_id
      --                         AND PMST.type_code = 'PROJECT'
      --                         AND PMST.delete_flag = 'N'
      --               LEFT JOIN (SELECT task_parent_id,
      --                                 Count(*) AS ParentTaskCount
      --                          FROM   task_hdr
      --                          WHERE  task_parent_id IS NOT NULL
      --                                 AND mkey NOT IN ( task_parent_id )
      --                                 AND delete_flag = 'N'
      --                          GROUP  BY task_parent_id) parent_counts
      --                      ON T_HDR.mkey = parent_counts.task_parent_id
      --        WHERE  T_HDR.resposible_emp_mkey = @CURRENT_EMP_MKEY
      --                OR T_HDR.created_by = @CURRENT_EMP_MKEY
      --                OR T_HDR.assigned_to = @CURRENT_EMP_MKEY
      --                   AND T_HDR.delete_flag = 'N'
      --        ORDER  BY T_HDR.creation_date DESC;
      --    END
      --  ELSE
      --    BEGIN
      
      -- END
      EXEC Sp_dashboard_count   @CURRENT_EMP_MKEY
  --EXEC Sp_dashboard_count
  --       @CURRENT_EMP_MKEY
  --SELECT
  --      T_HDR.mkey,
  --      Isnull(CATEGORY.type_desc, 'NA')                       CATEGORY,
  --      T_HDR.task_no,
  --      dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))     CREATOR,
  --      dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA')) RESPONSIBLE,
  --      dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))  ACTIONABLE,
  --      T_HDR.creation_date,
  --'' as Dashboard_Status,
  --      CONVERT(VARCHAR, T_HDR.completion_date, 103)           COMPLETION_DATE,
  --      dbo.[Initcap](T_HDR.task_name)                         TASK_NAME,
  --      T_HDR.task_description,
  --      T_HDR.tags,
  --      dbo.[Initcap](T_HDR.status)                            STATUS,
  --      CASE
  --        WHEN Isnull(CREATOR.first_name, 'NA') !=
  --             Isnull(RESPONSIBLE.first_name, 'NA')
  --      THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
  --      + ' > '
  --      + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA') )
  --        ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
  --      END
  --      RESPONSIBLE_TAG,
  --      dbo.[Initcap](Isnull(PROJ.type_desc, ''))              PROJECT_NAME,
  --      dbo.Tasknamestring(T_HDR.mkey)                         AS
  --      'TASK_HISTORY'
  --,isnull(RTRIM(T_HDR.[Priority]),'') as [Priority]
  ----,ISNULL(T_HDR.Percent_Complete,'1212') AS Percent_Complete
  --,isnull(T_HDR.Percent_Complete,'0') as Progress_Percentage
  --,'2' as SubTask_Count
  --          FROM   task_hdr T_HDR
  --                 LEFT JOIN employee_mst CREATOR
  --                        ON CREATOR.mkey = T_HDR.created_by
  --                 LEFT JOIN employee_mst RESPONSIBLE
  --                        ON RESPONSIBLE.mkey = T_HDR.assigned_to
  --                 LEFT JOIN employee_mst ACTIONABLE
  --                        ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
  --                 LEFT JOIN v_category CATEGORY
  --                        ON CATEGORY.mkey = T_HDR.caregory
  --                 LEFT JOIN v_project PROJ
  --                        ON T_HDR.project_id = PROJ.master_mkey
  --          WHERE  (
  --                 T_HDR.resposible_emp_mkey = @CURRENT_EMP_MKEY )
  --          ORDER  BY creation_date DESC
  END 
GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_DETAILS_BY_MKEY_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	exec SP_TASK_DETAILS_BY_MKEY_NT 845,937,0
CREATE PROCEDURE [dbo].[SP_TASK_DETAILS_BY_MKEY_NT](@HDR_MKEY VARCHAR(250),@Session_User_Id          INT = null,  
@Business_Group_Id	  INT = null)
AS
  BEGIN
      DECLARE @DAY INT

      SET @DAY=0

      SELECT T_HDR.mkey,
             T_HDR.task_no,
             T_HDR.isnode,
             T_HDR.task_parent_id,
             T_HDR.task_main_node_id,
			 T_HDR.Task_Type,
             T_HDR.status,
             T_HDR.status_perc,
             T_HDR.task_created_by,
             T_HDR.approver_id,
             T_HDR.approve_action_date,
			 T_HDR.ASSIGNED_TO,
			 E_MST.EMP_FULL_NAME			AS 'Assigned_To_Name',
             T_MST.type_desc                           CAREGORY,
             T_HDR.project_id                          PROJECT_MKEY,
			 T_HDR.sub_project_id                    AS BUILDING_MKEY,
             P_MST.type_desc                           'PROJECT',
			 P_MST.type_desc                           'Project_Name',
             S_P_MST.type_desc                         'Sub_PROJECT',
			 S_P_MST.type_desc						AS 'Building_Name',
             T_HDR.caregory                            CATEGORY_MKEY,
             T_HDR.creation_date,
             T_HDR.task_name,
             T_HDR.task_description,
             E_MST.emp_full_name,
			 
			 case when T_HDR.TASK_CREATED_BY = @Session_User_Id --When Task owner created the task /* Inside Task Owner login*/
			 and T_HDR.STATUS in ('CREATED','SUB TASK CREATED','WORK IN PROGRESS') and T_HDR.STATUS_PERC = 0.0 then 'Y'  /*Task owner created the task and 
			 it is currently on created status and progress is 0%  then all tabs are enabled for task owner and task owner can add tabs list like Checklist, Authority,
			 Outcome and Compliance via remark but with 0%  progress and WIP status update.  Otherwise any progress between 0% to 100%  
			 with WIP status will lead to disable all tabs for task owner.*/ 
			 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id) --When Task owner created the task /* Inside assignee login */
			 and T_HDR.STATUS_PERC = 0.0  /* Inside assignee login also all tabs are enabled because progress % is 0, however when assignee change 
			 the progress percent % between 0% to 100% then tabs are disabled for the task owner,but enabled at the assignee side. Assignee can able to update all tabs  */
			 and T_HDR.STATUS in ('CREATED','SUB TASK CREATED','WORK IN PROGRESS') Then 'Y'  
			 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 /*When Assignee change to close initiate(100%) */
							-- Inside assignee login 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id) 
			 and T_HDR.STATUS_PERC = 100.0 
			 and  T_HDR.STATUS in ('CLOSE INITIATED')  then 'N'/* If an assignee changes the status to cancel initiate or close initiate 
			 it means progress % is whether 0% or 100% so, in this scenario all tabs are disabled to the assignee side. Assignee will never change any of tab/s 
			 and inside the task owner log in all tabs are enabled for the task owner. Task owner can update all tabs. */
			 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id)/* When Assignee change to  cancel initiate (0%) Inside assignee login */
			 and T_HDR.STATUS in ('CANCEL INITIATED')  then 'N' /* If an assignee changes the status to cancel initiate or close initiate 
			 it means progress % is whether 0% or 100% so, in this scenario all tabs are disabled to the assignee side. Assignee will never change any of tab/s 
			 and inside the task owner log in all tabs are enabled for the task owner. Task owner can update all tabs. */

			 /*When Assignee change to close initiate(100%) or cancel initiate (0%) */
			  --Inside Task Owner login 
			 when  T_HDR.TASK_CREATED_BY = @Session_User_Id	 
			 and T_HDR.STATUS_PERC between 0.0 and 100.0 and T_HDR.STATUS in ('CLOSE INITIATED','CANCEL INITIATED')  then 'Y' 
			 /* Now inside task owner log in all tabs are enabled and task owner can do all changes in tabs and the status which are visible 
			 to the task owner is Cancel or Close and Re-work as per the assignee action if assignee triggered Close initiate then task owner can see 
			 the Close or if Cancel Initiate is triggered by the assignee then task owner can see Cancel and re-work is by default */
			 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 /*When Task owner change status to re-work  */
			 ---Inside Task Owner login
			 WHEN  T_HDR.TASK_CREATED_BY= @Session_User_Id	
			 and T_HDR.STATUS in ('RE-WORK')  then 'N' /*-- When task owner change status to re-work instead of Close or Cancel then all tabs are disabled 
														at task owner side now task owner is not able to do any changes inside any tab.*/
			 /* When Task owner change status to re-work */
			 --- Inside assignee login
			 WHEN  (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id) 
			 and T_HDR.STATUS in ('RE-WORK')  then 'Y' /* When the task owner gives a task to re-work to the assignee then status will change to re-work for the assignee 
														 and now all tabs are enabled for assignee and can do any changes inside any tab.*/
	 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 WHEN  (T_HDR.TASK_CREATED_BY = @Session_User_Id) or (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id)
			 and T_HDR.STATUS in ('CANCEL','CANCELLED','CLOSE')  then 'N' /* When task owner can do Cancel or Close instead of re-work 
																			 then all tabs are disabled for task owner as well as assignee */
 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 ELSE 'N'
			 end as 'Process_Flag',
             T_HDR.tags,
             CONVERT(VARCHAR(10), completion_date, 120)COMPLETION_DATE,
             --Isnull(file_name, '')                     [FILE_NAME],
             --Isnull(file_path, '')                     FILE_PATH,
             T_HDR.resposible_emp_mkey
			,ISNULL(RTrim(T_HDR.Priority),'') AS [Priority] 
			,ISNULL(CONVERT(NVARCHAR(20), T_HDR.Tentative_Start_Date),null) AS Tentative_Start_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Tentative_End_Date),null) AS Tentative_End_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Actual_Start_Date),null) AS Actual_Start_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Actual_End_Date),null) AS Actual_End_Date
      FROM   task_hdr T_HDR
             JOIN employee_mst E_MST
               ON E_MST.mkey = T_HDR.assigned_to
             LEFT JOIN type_mst T_MST
                    ON T_MST.master_mkey = T_HDR.caregory
             --AND T_MST.TYPE_CODE='CATEGORY'
             LEFT JOIN type_mst P_MST
                    ON P_MST.master_mkey = T_HDR.project_id
             LEFT JOIN type_mst S_P_MST
                    ON S_P_MST.master_mkey = T_HDR.sub_project_id
             --LEFT JOIN task_media_trl T_MEDIA
             --       ON T_MEDIA.mkey = T_HDR.mkey
             --          AND T_MEDIA.delete_flag = 'N'
      WHERE  T_HDR.mkey = @HDR_MKEY


--	  WITH actiontype
--     AS (SELECT T_HDR.mkey,T_HDR.task_no,T_HDR.isnode,T_HDR.task_parent_id,T_HDR.task_main_node_id,T_HDR.task_type,T_HDR.status,T_HDR.status_perc,T_HDR.task_created_by,
--                T_HDR.approver_id,T_HDR.approve_action_date,T_HDR.assigned_to,E_MST.emp_full_name AS 'Assigned_To_Name',T_MST.type_desc CAREGORY,T_HDR.project_id
--                    PROJECT_MKEY,T_HDR.sub_project_id AS BUILDING_MKEY,
--                P_MST.type_desc 'PROJECT' , P_MST.type_desc 'Project_Name', S_P_MST.type_desc
--                    'Sub_PROJECT',S_P_MST.type_desc AS 'Building_Name', T_HDR.caregory
--                    CATEGORY_MKEY,T_HDR.creation_date,T_HDR.task_name,T_HDR.task_description,E_MST.emp_full_name,T_HDR.tags,
--                CONVERT(VARCHAR(10), completion_date, 120) COMPLETION_DATE,Isnull(file_name, '')[FILE_NAME],
--                Isnull(file_path, '')FILE_PATH,T_HDR.resposible_emp_mkey,Isnull(Rtrim(T_HDR.priority), '') AS [Priority],
--                Isnull(CONVERT(NVARCHAR(20), T_HDR.tentative_start_date), NULL)AS
--                Tentative_Start_Date,                Isnull(CONVERT(NVARCHAR(20), T_HDR.tentative_end_date), NULL)AS Tentative_End_Date,
--                Isnull(CONVERT(NVARCHAR(20), T_HDR.actual_start_date), NULL)AS Actual_Start_Date,
--                Isnull(CONVERT(NVARCHAR(20), T_HDR.actual_end_date), NULL)AS Actual_End_Date,
--                NULL AS
--                    progress_perc,
--                NULL
--                AS
--                    ACTION_TYPE,
--                NULL
--                AS
--                    COMMENT
--         FROM   task_hdr T_HDR
--                JOIN employee_mst E_MST
--                  ON E_MST.mkey = T_HDR.assigned_to
--                LEFT JOIN type_mst T_MST
--                       ON T_MST.master_mkey = T_HDR.caregory
--                --AND T_MST.TYPE_CODE='CATEGORY'
--                LEFT JOIN type_mst P_MST
--                       ON P_MST.master_mkey = T_HDR.project_id
--                LEFT JOIN type_mst S_P_MST
--                       ON S_P_MST.master_mkey = T_HDR.sub_project_id
--                LEFT JOIN task_media_trl T_MEDIA
--                       ON T_MEDIA.mkey = T_HDR.mkey
--                          AND T_MEDIA.delete_flag = 'N'
--         WHERE  T_HDR.mkey = 107
--         UNION ALL
--         SELECT NULL AS mkey,
--                NULL AS task_no,
--                NULL AS isnode,
--                NULL AS task_parent_id,
--                NULL AS task_main_node_id,
--                NULL AS Task_Type,
--                NULL AS status_perc,
--                NULL AS task_created_by,
--                NULL AS approver_id,
--                NULL AS approve_action_date,
--                NULL AS ASSIGNED_TO,
--                NULL AS 'Assigned_To_Name',
--                NULL AS CAREGORY,
--                NULL AS PROJECT_MKEY,
--                NULL AS BUILDING_MKEY,
--                NULL AS 'PROJECT',
--                NULL AS 'Project_Name',
--                NULL AS 'Sub_PROJECT',
--                NULL AS 'Building_Name',
--                NULL AS CATEGORY_MKEY,
--                NULL AS task_name,
--                NULL AS task_description,
--                NULL AS emp_full_name,
--                NULL AS tags,
--                NULL AS COMPLETION_DATE,
--                NULL AS resposible_emp_mkey,
--                NULL AS [Priority],
--                NULL AS Tentative_Start_Date,
--                NULL AS Tentative_End_Date,
--                NULL AS Actual_Start_Date,
--                NULL AS Actual_End_Date,
--                CONVERT(VARCHAR(50), creation_date, 103)CREATION_DATE,
--                progress_perc,
--                dbo.[Initcap](status)                   STATUS,
--                dbo.[Initcap](action_type)              ACTION_TYPE,
--                dbo.[Initcap](description_comment)      COMMENT,
--                Isnull(file_name, '')                   FILE_NAME,
--                Isnull(file_path, '')                   FILE_PATH
--         FROM   task_action_trl
--         WHERE  delete_flag = 'N'
--                AND mkey = 237 -- 24-03-2025
--        )
--SELECT *
--FROM   actiontype
--ORDER  BY creation_date 
  --WHERE CONVERT(VARCHAR(25),DATEADD(DAY,@DAY,T_HDR.CREATION_DATE),103)=CONVERT(VARCHAR(25),DATEADD(DAY,@DAY,GETDATE()),103)
  END 
--EXEC SP_TASK_DETAILS_BY_MKEY 1
GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_MEDIA_TRL_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	exec SP_TASK_MEDIA_TRL_NT 665
CREATE PROCEDURE [dbo].[SP_TASK_MEDIA_TRL_NT](@HDR_MKEY VARCHAR(250),@Session_User_Id          INT = null,  
@Business_Group_Id	  INT = null)
AS
  BEGIN
      SELECT T_HDR.MKEY,SR_NO,TASK_MKEY,T_HDR.TASK_PARENT_ID,T_HDR.TASK_MAIN_NODE_ID,FILE_NAME,FILE_PATH
			,T_HDR.CREATED_BY,T_HDR.CREATION_DATE,T_HDR.LAST_UPDATED_BY,T_MEDIA.DELETE_FLAG
				,Isnull(CONVERT(VARCHAR(50), T_MEDIA.created_by), '') AS CREATED_BY_ID
				,Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME
				,CASE
					WHEN T_MEDIA.creation_date IS NULL THEN
				''
				ELSE
					Format(T_MEDIA.creation_date, 'yyyy-MM-dd HH:mm:ss')
				END AS CREATION_DATE
				,Isnull(CONVERT(VARCHAR(50), T_MEDIA.last_updated_by), '') AS LAST_UPDATED_BY
				,Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME
				,CASE
					WHEN T_MEDIA.last_update_date IS NULL THEN
					''
				ELSE
					Format(T_MEDIA.last_update_date, 'yyyy-MM-dd HH:mm:ss')
				END AS LAST_UPDATE_DATE
      FROM   task_hdr T_HDR
             INNER JOIN task_media_trl T_MEDIA
                    ON T_MEDIA.mkey = T_HDR.mkey
			INNER JOIN 
				EMPLOYEE_MST createdby
			ON 
				T_MEDIA.created_by = createdby.mkey
			LEFT JOIN 
				EMPLOYEE_MST updatedby
			ON 
				T_MEDIA.last_updated_by = updatedby.mkey
      WHERE  T_HDR.mkey = @HDR_MKEY
	  AND T_MEDIA.delete_flag = 'N'
	  AND T_HDR.DELETE_FLAG = 'N';
  END 

GO
/****** Object:  StoredProcedure [dbo].[SP_UPDATE_DELETE_TASK_ENDLIST_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
--  exec SP_UPDATE_DELETE_TASK_ENDLIST_NT 147,0,387,'Land Related Documents',926,'N','AOD','DFSD',NULL,NULL
-- =============================================
CREATE PROCEDURE [dbo].[SP_UPDATE_DELETE_TASK_ENDLIST_NT]
  -- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE
  @MKEY                   INT,
  @SR_NO                  INT,
  @DOCUMENT_CATEGORY_MKEY INT,
  @DOCUMENT_NAME          NVARCHAR(255),
  @CREATED_BY             INT,
  @DELETE_FLAG            NCHAR(2),
  @API_NAME               NVARCHAR(255),
  @API_METHOD             NVARCHAR(255),
  @OUT_STATUS             NVARCHAR(255) = NULL,
  @OUT_MESSAGE            NVARCHAR(255) = NULL
AS
  BEGIN
      SET nocount ON;

      BEGIN try
          DECLARE @DCOUNT        INT,
                  @DOCUMENT_MKEY INT;

          SELECT @DOCUMENT_MKEY = master_mkey
          FROM   type_mst
          WHERE  type_code = 'DOC_CATEGORY'
                 AND delete_flag = 'N'
                 AND Lower([type_desc]) = Lower(@DOCUMENT_NAME);

          PRINT '@DOCUMENT_MKEY: '
                + CONVERT(NVARCHAR, @DOCUMENT_MKEY);

          UPDATE task_endlist_trl
          SET    delete_flag = 'Y'
          WHERE  mkey = @MKEY
                 AND document_name = @DOCUMENT_NAME
                 AND attribute1 IS NULL
                  OR attribute1 = '';

          SELECT *
          FROM   task_endlist_trl
          WHERE  mkey = @MKEY
                 AND document_name = @DOCUMENT_NAME
                 --AND DOCUMENT_CATEGORY_MKEY = 387
                 --AND DOCUMENT_MKEY = 375
                 --AND DELETE_FLAG = 'N'
                 AND attribute1 IS NULL
                  OR attribute1 = '';

          UPDATE task_endlist_trl
          SET    attribute1 = NULL
          WHERE  mkey = 147
                 AND attribute1 = 'Y';

          SELECT *
          FROM   task_endlist_trl
          WHERE  mkey = 147
                 --AND DOCUMENT_NAME = @DOCUMENT_NAME 
                 --AND DOCUMENT_CATEGORY_MKEY = @DOCUMENT_CATEGORY_MKEY
                 --AND DOCUMENT_MKEY = @DOCUMENT_MKEY
                 AND attribute1 = 'Y';
      END try

      BEGIN catch
          -------------------------------------------------------------------------------------------------------------------------------            
          SELECT Error_number()    AS ERRORNUMBER,
                 Error_severity()  AS ERRORSEVERITY,
                 Error_state()     AS ERRORSTATE,
                 Error_procedure() AS ERRORPROCEDURE,
                 Error_line()      AS ERRORLINE,
                 Error_message()   AS ERRORMESSAGE;

          -------------------------------------------------------------------------------------------------------------------------------  
          DECLARE @ERROR_MESSAGE VARCHAR(max) = NULL;

          SET @ERROR_MESSAGE = Error_message();

          -------------------------------------------------------------------------------------------------------------------------------  
          EXEC Sp_p_tms_insert_error_des
            @CREATED_BY,
            'TMS',
            'INSERT UPDATE TASK ENDLIST',
            @ERROR_MESSAGE,
            'INSERT UPDATE';
      -------------------------------------------------------------------------------------------------------------------------------  
      END catch
  END 
GO
/****** Object:  StoredProcedure [dbo].[UPDATE_TASK_DETAILS_NT]    Script Date: 16-05-2025 11:44:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[UPDATE_TASK_DETAILS_NT] (@TASK_MKEY            VARCHAR(250),
                                                @TASK_NAME            VARCHAR(250),
                                                @TASK_DESCRIPTION     VARCHAR(250),
                                                @PROJECT_ID           VARCHAR(250),
                                                @SUBPROJECT_ID        VARCHAR(250),
                                                @COMPLETION_DATE      DATETIME,
                                                @ASSIGNED_TO          VARCHAR(250),
                                                @TAGS                 VARCHAR(250)=NULL,
                                                @Priority             VARCHAR(250)=NULL,
                                                @Tentative_Start_Date VARCHAR(250)=NULL,
                                                @Tentative_End_Date   VARCHAR(250)=NULL,
                                                @Actual_Start_Date    VARCHAR(250)=NULL,
                                                @Actual_End_Date      VARCHAR(250)=NULL,
                                                @LAST_UPDATED_BY      INT,
												@DELETE_FLAG          NCHAR(2)=NULL)
AS
  BEGIN
      BEGIN try
          DECLARE @DCOUNT INT;

          SELECT @DCOUNT = Count(*)
          FROM   task_hdr
          WHERE  mkey = @TASK_MKEY and DELETE_FLAG = 'N';
		  print '@DCOUNT: '+ convert(nvarchar,@DCOUNT)
          IF ( @DCOUNT > 0 )
            BEGIN
                SELECT @ASSIGNED_TO = Cast(mkey AS VARCHAR)
                FROM   employee_mst
                WHERE  emp_full_name = @ASSIGNED_TO
                       AND delete_flag = 'N';

                PRINT '@ASSIGNED_TO: '
                      + CONVERT(NVARCHAR(20), @ASSIGNED_TO);

                INSERT INTO task_hdr_h
                SELECT Getdate(),
                       *
                FROM   task_hdr
                WHERE  mkey = @TASK_MKEY
                       AND delete_flag = 'N';

                PRINT '@@TASK_MKEY: '
                      + CONVERT(NVARCHAR(20), @TASK_MKEY);

                --print '@COMPLETION_DATE: '+ convert(varchar(50), @COMPLETION_DATE);
                UPDATE task_hdr
                SET    task_name =isnull(@TASK_NAME,task_name),
                       task_description = isnull(@TASK_DESCRIPTION,task_description),
                       project_id = @PROJECT_ID,
                       sub_project_id = @SUBPROJECT_ID,
                       completion_date = isnull(@COMPLETION_DATE,completion_date),
                       assigned_to = @ASSIGNED_TO,
                       resposible_emp_mkey = @ASSIGNED_TO,
                       tags = @TAGS,
                       [priority] = @Priority,
                       tentative_start_date = @Tentative_Start_Date,
                       tentative_end_date = @Tentative_End_Date,
                       actual_start_date = @Actual_Start_Date,
                       actual_end_date = @Actual_End_Date,
                       last_updated_by = @LAST_UPDATED_BY,
                       last_update_date = Getdate(),
					   delete_flag = @DELETE_FLAG
                WHERE  mkey = @TASK_MKEY
                       AND delete_flag = 'N';

                EXEC [Sp_emp_tags_insert_update]
                  @LAST_UPDATED_BY,
                  @TAGS,
                  @LAST_UPDATED_BY;

				IF(@DELETE_FLAG = 'Y')
				BEGIN
					SELECT task_no,
                       mkey,
                       task_parent_id,
                       task_main_node_id,
                       'Ok'     AS [Status],
                       'Deleted' AS [Message]
                FROM   task_hdr
                WHERE  mkey = @TASK_MKEY
                       AND delete_flag = 'Y'; 
				END
				ELSE
				BEGIN
					SELECT task_no,
						   mkey,
						   task_parent_id,
						   task_main_node_id,
						   'Ok'     AS [Status],
						   'Update' AS [Message]
					FROM   task_hdr
					WHERE  mkey = @TASK_MKEY
						   AND delete_flag = 'N';
				END
            END
          ELSE
            BEGIN
                SELECT 'Error'     AS [Status],
                       'Task mkey '+ @TASK_MKEY +' Not Found' AS [Message];
            END
      END try

      BEGIN catch
          -------------------------------------------------------------------------------------------------------------------------------              
          SELECT Error_number()    AS ERRORNUMBER,
                 Error_severity()  AS ERRORSEVERITY,
                 Error_state()     AS ERRORSTATE,
                 Error_procedure() AS ERRORPROCEDURE,
                 Error_line()      AS ERRORLINE,
                 Error_message()   AS ERRORMESSAGE;

          -------------------------------------------------------------------------------------------------------------------------------    
          DECLARE @ERROR_MESSAGE VARCHAR(max) = NULL;

          SET @ERROR_MESSAGE = Error_message();

          -------------------------------------------------------------------------------------------------------------------------------    
          EXEC Sp_p_tms_insert_error_des
            @LAST_UPDATED_BY,
            'TMS',
            ' update task details',
            @ERROR_MESSAGE,
            'Update';
      -------------------------------------------------------------------------------------------------------------------------------    
      END catch
  END 
GO





----------------------------------------------------------------------------------------------------------------------------------------------------

Date 19-05-2025



GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_DASHBOARD_NT]    Script Date: 19-05-2025 17:28:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--  EXEC SP_TASK_DASHBOARD_NT 926,'ALLOCATEDBYME','Pending'
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT',null
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next 3 Days'
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next 7 Days'
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next 2 Weeks'
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next Month'
--  EXEC SP_TASK_DASHBOARD_NT 926,'ALLOCATEDBYME','Review'
ALTER PROCEDURE [dbo].[SP_TASK_DASHBOARD_NT] (@CURRENT_EMP_MKEY INT,
                                              @FILTER           NVARCHAR(100),
                                              @STATUS_FILTER     NVARCHAR(255) = NULL)
AS
  BEGIN
      DECLARE @DAY INT

      SET @DAY=0

      IF( @FILTER = NULL OR @FILTER = '' OR @FILTER = 'DEFAULT' )
        BEGIN 
		print '@FILTER = DEFAULT '
            SELECT T_HDR.mkey,
                   Isnull(TMST.type_desc, 'NA')
                   CATEGORY
                   ,
                   T_HDR.task_no,
                   dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))
                   CREATOR,
                   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))
                   RESPONSIBLE,
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
                   ACTIONABLE,
                   T_HDR.creation_date,
                   CASE
                     WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'
                     WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status IN ( 'WORK IN PROGRESS',
                                            'CLOSE INITIATED',
                                            'CANCEL INITIATED',
                                            'RE-WORK' ) THEN 'In Progress'
                     WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN
                     'Completed'
                     ELSE 'Others'
                   END                                                    AS
                   Dashboard_Status,
                   CONVERT(VARCHAR, T_HDR.completion_date, 103)
                   COMPLETION_DATE,
                   dbo.[Initcap](T_HDR.task_name)
                   TASK_NAME,
                   T_HDR.task_description,
                   T_HDR.tags,
                   dbo.[Initcap](T_HDR.status)                            STATUS
                   ,
                   CASE
                     WHEN Isnull(CREATOR.first_name, 'NA') !=
                          Isnull(RESPONSIBLE.first_name, 'NA')
                   THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   + ' > '
                   + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA') )
                     ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   END
                   RESPONSIBLE_TAG,
                   dbo.[Initcap](Isnull(PMST.type_desc, ''))
                   PROJECT_NAME
                   ,
                   dbo.Tasknamestring(T_HDR.mkey)
                   AS
                   'TASK_HISTORY',
                   Isnull(Rtrim(T_HDR.[priority]), '')                    AS
                   [Priority],
                   Isnull(T_HDR.percent_complete, '0')                    AS
                   Progress_Percentage,
                   Isnull(parent_counts.parenttaskcount, 0)               AS
                   SubTask_Count,
				   T_HDR.CREATED_BY 
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by
                             AND CREATOR.delete_flag = 'N'
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to
                             AND RESPONSIBLE.delete_flag = 'N'
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
                             AND ACTIONABLE.delete_flag = 'N'
                   --LEFT JOIN v_category CATEGORY
                   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
                   LEFT JOIN type_mst TMST
                          ON TMST.master_mkey = T_HDR.caregory
                             AND TMST.type_code = 'CATEGORY'
                             AND TMST.delete_flag = 'N'
                   --LEFT JOIN v_project PROJ
                   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
                   LEFT JOIN type_mst PMST
                          ON PMST.master_mkey = T_HDR.project_id
                             AND PMST.type_code = 'PROJECT'
                             AND PMST.delete_flag = 'N'
                   LEFT JOIN (SELECT task_parent_id,
                                     Count(*) AS ParentTaskCount
                              FROM   task_hdr
                              WHERE  task_parent_id IS NOT NULL
                                     AND mkey NOT IN ( task_parent_id )
                                     AND delete_flag = 'N'
                              GROUP  BY task_parent_id) parent_counts
                          ON T_HDR.mkey = parent_counts.task_parent_id
            WHERE  (
                   --T_HDR.Created_by=@CURRENT_EMP_MKEY  
                   --OR  
                   --T_HDR.ASSIGNED_TO=@CURRENT_EMP_MKEY  
                   --OR  
                   --T_HDR.RESPOSIBLE_EMP_MKEY=@CURRENT_EMP_MKEY  
                   --T_HDR.ASSIGNED_TO=@CURRENT_EMP_MKEY  
                   --OR  
                   T_HDR.resposible_emp_mkey = @CURRENT_EMP_MKEY OR T_HDR.TASK_CREATED_BY = @CURRENT_EMP_MKEY )
                   AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED', 'Cancel')
                   AND Isnull(T_HDR.status_flag, 'A') IN ( 'A' )
                   AND T_HDR.delete_flag = 'N'
				 --   And CASE
					--	WHEN @STATUS_FILTER    = 'Today' and @STATUS_FILTER    IS NULL THEN 
					--		CASE WHEN CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) THEN 1 ELSE 0 END
        
					--	WHEN @STATUS_FILTER    = 'Overdue' THEN 
					--		CASE WHEN T_HDR.completion_date < GETDATE() THEN 1 ELSE 0 END
        
					--	WHEN @STATUS_FILTER    = 'Next 3 Days' THEN 
					--		CASE WHEN T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 3, GETDATE()) THEN 1 ELSE 0 END
        
					--	WHEN @STATUS_FILTER    = 'Next 7 Days' THEN 
					--		CASE WHEN T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE()) THEN 1 ELSE 0 END
        
					--	WHEN @STATUS_FILTER    = 'Next 2 Weeks' THEN 
					--		CASE WHEN T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(WEEK, 2, GETDATE()) THEN 1 ELSE 0 END
        
					--	WHEN @STATUS_FILTER    = 'Next Month' THEN 
					--		CASE WHEN T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(MONTH, 1, GETDATE()) THEN 1 ELSE 0 END
        
					--	WHEN @STATUS_FILTER    = 'Review' THEN 
					--		CASE WHEN T_HDR.status IN ( 'CANCEL INITIATED', 'CLOSE INITIATED' ) THEN 1 ELSE 0 END
        
					--	WHEN @STATUS_FILTER    IS NULL THEN 
					--		CASE WHEN CONVERT(VARCHAR, T_HDR.completion_date, 103) = 'S' THEN 1 ELSE 0 END
        
					--	ELSE 0  -- If none of the conditions match, return false
					--END = 1
            ORDER  BY creation_date DESC
        END

      IF( @FILTER = 'ALLOCATEDBYME' )
        BEGIN
				SELECT T_HDR.mkey,
                   Isnull(TMST.type_desc, 'NA')
                   CATEGORY
                   ,
                   T_HDR.task_no,
                   dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))
                   CREATOR,
                   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))
                   RESPONSIBLE,
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
                   ACTIONABLE,
                   T_HDR.creation_date,
                   CASE
                     WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'
                     WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status IN ( 'WORK IN PROGRESS',
                                            'CLOSE INITIATED',
                                            'CANCEL INITIATED',
                                            'RE-WORK' ) THEN 'In Progress'
                     WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN
                     'Completed'
                     ELSE 'Others'
                   END                                                    AS
                   Dashboard_Status,
                   CONVERT(VARCHAR, T_HDR.completion_date, 103)           AS
                   COMPLETION_DATE
                   ,
                   dbo.[Initcap](T_HDR.task_name)                         AS
                   TASK_NAME,
                   T_HDR.task_description,
                   T_HDR.tags,
                   dbo.[Initcap](T_HDR.status)                            AS
                   STATUS,
                   CASE
                     WHEN Isnull(CREATOR.first_name, 'NA') !=
                          Isnull(RESPONSIBLE.first_name, 'NA')
                   THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   + ' > '
                   + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA'))
                     ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   END                                                    AS
                   RESPONSIBLE_TAG
                   ,
                   dbo.[Initcap](Isnull(PMST.type_desc, ''))              AS
                   PROJECT_NAME,
                   dbo.Tasknamestring(T_HDR.mkey)                         AS
                   TASK_HISTORY,
                   Isnull(Rtrim(T_HDR.[priority]), '')                    AS
                   [Priority],
                   Isnull(T_HDR.percent_complete, '0')                    AS
                   Progress_Percentage,
                   Isnull(parent_counts.parenttaskcount, 0)               AS
                   SubTask_Count,
				   T_HDR.CREATED_BY
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by
                             AND CREATOR.delete_flag = 'N'
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to
                             AND RESPONSIBLE.delete_flag = 'N'
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
                             AND ACTIONABLE.delete_flag = 'N'
                   --LEFT JOIN v_category CATEGORY
                   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
                   LEFT JOIN type_mst TMST
                          ON TMST.master_mkey = T_HDR.caregory
                             AND TMST.type_code = 'CATEGORY'
                             AND TMST.delete_flag = 'N'
                   --LEFT JOIN v_project PROJ
                   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
                   LEFT JOIN type_mst PMST
                          ON PMST.master_mkey = T_HDR.project_id
                             AND PMST.type_code = 'PROJECT'
                             AND PMST.delete_flag = 'N'
                   LEFT JOIN (SELECT task_parent_id,
                                     Count(*) AS ParentTaskCount
                              FROM   task_hdr
                              WHERE  task_parent_id IS NOT NULL
                                     AND mkey NOT IN ( task_parent_id )
                                     AND delete_flag = 'N'
                              GROUP  BY task_parent_id) parent_counts
                          ON T_HDR.mkey = parent_counts.task_parent_id
            WHERE  ( T_HDR.created_by = @CURRENT_EMP_MKEY )
                   --AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED', 'Cancel')
                   AND Isnull(T_HDR.status_flag, 'A') IN ( 'A' )
                   AND T_HDR.delete_flag = 'N'
				   AND (
					@STATUS_FILTER    IS NULL
					OR (
							(@STATUS_FILTER    = 'Today' AND CONVERT(DATE, T_HDR.completion_date) = CONVERT(DATE, GETDATE())
							AND T_HDR.status not IN ('CANCEL', 'COMPLETED','CANCELLED'))
							OR (@STATUS_FILTER    = 'Overdue' AND T_HDR.completion_date < GETDATE() AND T_HDR.status not IN ('CANCEL', 'COMPLETED','CANCELLED'))
							OR (@STATUS_FILTER    = 'Pending' AND STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() and T_HDR.status IN ('CREATED', 'SUB TASK CREATED','WORK IN PROGRESS','RE-WORK'))
							OR (@STATUS_FILTER    = 'Completed' AND T_HDR.status IN ('COMPLETED') AND STATUS_PERC = 100)
							OR (@STATUS_FILTER    = 'Cancelled' AND T_HDR.status IN ('CANCEL', 'CANCELLED'))
						)
					)
            ORDER  BY creation_date DESC;
        END

      IF( @FILTER = 'ALLOCATEDTOME' )
        BEGIN
            SELECT T_HDR.mkey,
                   Isnull(TMST.type_desc, 'NA')
                   CATEGORY
                   ,
                   T_HDR.task_no,
                   dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))
                   CREATOR,
                   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))
                   RESPONSIBLE,
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
                   ACTIONABLE,
                   T_HDR.creation_date,
                   CASE
                     WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'
                     WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status IN ( 'WORK IN PROGRESS',
                                            'CLOSE INITIATED',
                                            'CANCEL INITIATED',
                                            'RE-WORK' ) THEN 'In Progress'
                     WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN
                     'Completed'
                     ELSE 'Others'
                   END                                                    AS
                   Dashboard_Status,
                   CONVERT(VARCHAR, T_HDR.completion_date, 103)           AS
                   COMPLETION_DATE
                   ,
                   dbo.[Initcap](T_HDR.task_name)                         AS
                   TASK_NAME,
                   T_HDR.task_description,
                   T_HDR.tags,
                   dbo.[Initcap](T_HDR.status)                            AS
                   STATUS,
                   CASE
                     WHEN Isnull(CREATOR.first_name, 'NA') !=
                          Isnull(RESPONSIBLE.first_name, 'NA')
                   THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   + ' > '
                   + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA'))
                     ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   END                                                    AS
                   RESPONSIBLE_TAG
                   ,
                   dbo.[Initcap](Isnull(PMST.type_desc, ''))              AS
                   PROJECT_NAME,
                   dbo.Tasknamestring(T_HDR.mkey)                         AS
                   TASK_HISTORY,
                   Isnull(Rtrim(T_HDR.[priority]), '')                    AS
                   [Priority],
                   Isnull(T_HDR.percent_complete, '0')                    AS
                   Progress_Percentage,
                   Isnull(parent_counts.parenttaskcount, 0)               AS
                   SubTask_Count,
				   T_HDR.CREATED_BY
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by
                             AND CREATOR.delete_flag = 'N'
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to
                             AND RESPONSIBLE.delete_flag = 'N'
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
                             AND ACTIONABLE.delete_flag = 'N'
                   --LEFT JOIN v_category CATEGORY
                   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
                   LEFT JOIN type_mst TMST
                          ON TMST.master_mkey = T_HDR.caregory
                             AND TMST.type_code = 'CATEGORY'
                             AND TMST.delete_flag = 'N'
                   --LEFT JOIN v_project PROJ
                   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
                   LEFT JOIN type_mst PMST
                          ON PMST.master_mkey = T_HDR.project_id
                             AND PMST.type_code = 'PROJECT'
                             AND PMST.delete_flag = 'N'
                   LEFT JOIN (SELECT task_parent_id,
                                     Count(*) AS ParentTaskCount
                              FROM   task_hdr
                              WHERE  task_parent_id IS NOT NULL
                                     AND mkey NOT IN ( task_parent_id )
                                     AND delete_flag = 'N'
                              GROUP  BY task_parent_id) parent_counts
                          ON T_HDR.mkey = parent_counts.task_parent_id
            WHERE  ( T_HDR.assigned_to = @CURRENT_EMP_MKEY
                      OR T_HDR.resposible_emp_mkey = @CURRENT_EMP_MKEY )
                   AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED', 'Cancel')
                   AND Isnull(T_HDR.status_flag, 'A') IN ( 'A' )
                   AND T_HDR.delete_flag = 'N'
				   AND (
						@STATUS_FILTER    IS NULL
						OR (
								(@STATUS_FILTER    = 'Today' AND CONVERT(DATE, T_HDR.completion_date) = CONVERT(DATE, GETDATE()))
								OR (@STATUS_FILTER    = 'Overdue' AND T_HDR.completion_date < GETDATE())
								OR (@STATUS_FILTER    = 'Next 3 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 3, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 7 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 2 Weeks' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 14, GETDATE()))
								OR (@STATUS_FILTER    = 'Next Month' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(MONTH, 1, GETDATE()))
								OR (@STATUS_FILTER    = 'Review' AND T_HDR.status IN ('CANCEL INITIATED', 'CLOSE INITIATED'))
							)
						)
            ORDER  BY creation_date DESC;
        END

      IF( @FILTER = 'COMPLETEDBYME' )
        BEGIN
            SELECT T_HDR.mkey,
                   Isnull(TMST.type_desc, 'NA')
                   CATEGORY
                   ,
                   T_HDR.task_no,
                   dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))
                   CREATOR,
                   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))
                   RESPONSIBLE,
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
                   ACTIONABLE,
                   T_HDR.creation_date,
                   CASE
                     WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'
                     WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status IN ( 'WORK IN PROGRESS',
                                            'CLOSE INITIATED',
                                            'CANCEL INITIATED',
                                            'RE-WORK' ) THEN 'In Progress'
                     WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN
                     'Completed'
                     ELSE 'Others'
                   END                                                    AS
                   Dashboard_Status,
                   CONVERT(VARCHAR, T_HDR.completion_date, 103)           AS
                   COMPLETION_DATE
                   ,
                   dbo.[Initcap](T_HDR.task_name)                         AS
                   TASK_NAME,
                   T_HDR.task_description,
                   T_HDR.tags,
                   dbo.[Initcap](T_HDR.status)                            AS
                   STATUS,
                   CASE
                     WHEN Isnull(CREATOR.first_name, 'NA') !=
                          Isnull(RESPONSIBLE.first_name, 'NA')
                   THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   + ' > '
                   + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA'))
                     ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   END                                                    AS
                   RESPONSIBLE_TAG
                   ,
                   dbo.[Initcap](Isnull(PMST.type_desc, ''))              AS
                   PROJECT_NAME,
                   dbo.Tasknamestring(T_HDR.mkey)                         AS
                   TASK_HISTORY,
                   Isnull(Rtrim(T_HDR.[priority]), '')                    AS
                   [Priority],
                   Isnull(T_HDR.percent_complete, '0')                    AS
                   Progress_Percentage,
                   Isnull(parent_counts.parenttaskcount, 0)               AS
                   SubTask_Count,
				   T_HDR.CREATED_BY
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by
                             AND CREATOR.delete_flag = 'N'
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to
                             AND RESPONSIBLE.delete_flag = 'N'
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
                             AND ACTIONABLE.delete_flag = 'N'
                   --LEFT JOIN v_category CATEGORY
                   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
                   LEFT JOIN type_mst TMST
                          ON TMST.master_mkey = T_HDR.caregory
                             AND TMST.type_code = 'CATEGORY'
                             AND TMST.delete_flag = 'N'
                   --LEFT JOIN v_project PROJ
                   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
                   LEFT JOIN type_mst PMST
                          ON PMST.master_mkey = T_HDR.project_id
                             AND PMST.type_code = 'PROJECT'
                             AND PMST.delete_flag = 'N'
                   LEFT JOIN (SELECT task_parent_id,
                                     Count(*) AS ParentTaskCount
                              FROM   task_hdr
                              WHERE  task_parent_id IS NOT NULL
                                     AND mkey NOT IN ( task_parent_id )
                                     AND delete_flag = 'N'
                              GROUP  BY task_parent_id) parent_counts
                          ON T_HDR.mkey = parent_counts.task_parent_id
            WHERE  ( T_HDR.assigned_to = @CURRENT_EMP_MKEY )
                   AND T_HDR.status IN ( 'COMPLETED' )
                   AND Isnull(T_HDR.status_flag, 'A') IN ( 'A' )
                   AND T_HDR.delete_flag = 'N'
				   AND (
						@STATUS_FILTER    IS NULL
						OR (
								(@STATUS_FILTER    = 'Today' AND CONVERT(DATE, T_HDR.completion_date) = CONVERT(DATE, GETDATE()))
								OR (@STATUS_FILTER    = 'Overdue' AND T_HDR.completion_date < GETDATE())
								OR (@STATUS_FILTER    = 'Next 3 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 3, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 7 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 2 Weeks' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 14, GETDATE()))
								OR (@STATUS_FILTER    = 'Next Month' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(MONTH, 1, GETDATE()))
								OR (@STATUS_FILTER    = 'Review' AND T_HDR.status IN ('CANCEL INITIATED', 'CLOSE INITIATED'))
							)
						)
            ORDER  BY creation_date DESC;
        END

      IF( @FILTER = 'COMPLETEDFORME' )
        BEGIN
            SELECT T_HDR.mkey,
                   Isnull(TMST.type_desc, 'NA')
                   CATEGORY
                   ,
                   T_HDR.task_no,
                   dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))
                   CREATOR,
                   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))
                   RESPONSIBLE,
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
                   ACTIONABLE,
                   T_HDR.creation_date,
                   CASE
                     WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'
                     WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status IN ( 'WORK IN PROGRESS',
                                            'CLOSE INITIATED',
                                            'CANCEL INITIATED',
                                            'RE-WORK' ) THEN 'In Progress'
                     WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN
                     'Completed'
                     ELSE 'Others'
                   END                                                    AS
                   Dashboard_Status,
                   CONVERT(VARCHAR, T_HDR.completion_date, 103)           AS
                   COMPLETION_DATE
                   ,
                   dbo.[Initcap](T_HDR.task_name)                         AS
                   TASK_NAME,
                   T_HDR.task_description,
                   T_HDR.tags,
                   dbo.[Initcap](T_HDR.status)                            AS
                   STATUS,
                   CASE
                     WHEN Isnull(CREATOR.first_name, 'NA') !=
                          Isnull(RESPONSIBLE.first_name, 'NA')
                   THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   + ' > '
                   + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA'))
                     ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   END                                                    AS
                   RESPONSIBLE_TAG
                   ,
                   dbo.[Initcap](Isnull(PMST.type_desc, ''))              AS
                   PROJECT_NAME,
                   dbo.Tasknamestring(T_HDR.mkey)                         AS
                   TASK_HISTORY,
                   Isnull(Rtrim(T_HDR.[priority]), '')                    AS
                   [Priority],
                   Isnull(T_HDR.percent_complete, '0')                    AS
                   Progress_Percentage,
                   Isnull(parent_counts.parenttaskcount, 0)               AS
                   SubTask_Count,
				   T_HDR.CREATED_BY
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by
                             AND CREATOR.delete_flag = 'N'
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to
                             AND RESPONSIBLE.delete_flag = 'N'
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
                             AND ACTIONABLE.delete_flag = 'N'
                   --LEFT JOIN v_category CATEGORY
                   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
                   LEFT JOIN type_mst TMST
                          ON TMST.master_mkey = T_HDR.caregory
                             AND TMST.type_code = 'CATEGORY'
                             AND TMST.delete_flag = 'N'
                   --LEFT JOIN v_project PROJ
                   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
                   LEFT JOIN type_mst PMST
                          ON PMST.master_mkey = T_HDR.project_id
                             AND PMST.type_code = 'PROJECT'
                             AND PMST.delete_flag = 'N'
                   LEFT JOIN (SELECT task_parent_id,
                                     Count(*) AS ParentTaskCount
                              FROM   task_hdr
                              WHERE  task_parent_id IS NOT NULL
                                     AND mkey NOT IN ( task_parent_id )
                                     AND delete_flag = 'N'
                              GROUP  BY task_parent_id) parent_counts
                          ON T_HDR.mkey = parent_counts.task_parent_id
            WHERE  ( T_HDR.created_by = @CURRENT_EMP_MKEY
                     AND T_HDR.assigned_to != @CURRENT_EMP_MKEY
                    --OR  
                    --T_HDR.ASSIGNED_TO=@CURRENT_EMP_MKEY  
                    --OR  
                    --T_HDR.RESPOSIBLE_EMP_MKEY=@CURRENT_EMP_MKEY  
                    )
                   AND T_HDR.status IN ( 'COMPLETED' )
                   and Isnull(T_HDR.STATUS_Flag,'A') in ('A')  
                   AND T_HDR.delete_flag = 'N'
					AND (
						@STATUS_FILTER    IS NULL
						OR (
								(@STATUS_FILTER    = 'Today' AND CONVERT(DATE, T_HDR.completion_date) = CONVERT(DATE, GETDATE()))
								OR (@STATUS_FILTER    = 'Overdue' AND T_HDR.completion_date < GETDATE())
								OR (@STATUS_FILTER    = 'Next 3 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 3, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 7 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 2 Weeks' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 14, GETDATE()))
								OR (@STATUS_FILTER    = 'Next Month' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(MONTH, 1, GETDATE()))
								OR (@STATUS_FILTER    = 'Review' AND T_HDR.status IN ('CANCEL INITIATED', 'CLOSE INITIATED'))
							)
						)
            ORDER  BY creation_date DESC;
        END

      IF( @FILTER = 'CANCELCLOSE' )
        BEGIN
            SELECT T_HDR.mkey,
                   Isnull(TMST.type_desc, 'NA')
                   CATEGORY
                   ,
                   T_HDR.task_no,
                   dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))
                   CREATOR,
                   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))
                   RESPONSIBLE,
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))
                   ACTIONABLE,
                   T_HDR.creation_date,
                   CASE
                     WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'
                     WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN
                     'Not Started'
                     WHEN T_HDR.status IN ( 'WORK IN PROGRESS',
                                            'CLOSE INITIATED',
                                            'CANCEL INITIATED',
                                            'RE-WORK' ) THEN 'In Progress'
                     WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN
                     'Completed'
                     ELSE 'Others'
                   END                                                    AS
                   Dashboard_Status,
                   CONVERT(VARCHAR, T_HDR.completion_date, 103)           AS
                   COMPLETION_DATE
                   ,
                   dbo.[Initcap](T_HDR.task_name)                         AS
                   TASK_NAME,
                   T_HDR.task_description,
                   T_HDR.tags,
                   dbo.[Initcap](T_HDR.status)                            AS
                   STATUS,
                   CASE
                     WHEN Isnull(CREATOR.first_name, 'NA') !=
                          Isnull(RESPONSIBLE.first_name, 'NA')
                   THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   + ' > '
                   + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA'))
                     ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
                   END                                                    AS
                   RESPONSIBLE_TAG
                   ,
                   dbo.[Initcap](Isnull(PMST.type_desc, ''))              AS
                   PROJECT_NAME,
                   dbo.Tasknamestring(T_HDR.mkey)                         AS
                   TASK_HISTORY,
                   Isnull(Rtrim(T_HDR.[priority]), '')                    AS
                   [Priority],
                   Isnull(T_HDR.percent_complete, '0')                    AS
                   Progress_Percentage,
                   Isnull(parent_counts.parenttaskcount, 0)               AS
                   SubTask_Count,
				   T_HDR.CREATED_BY
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by
                             AND CREATOR.delete_flag = 'N'
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to
                             AND RESPONSIBLE.delete_flag = 'N'
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
                             AND ACTIONABLE.delete_flag = 'N'
                   --LEFT JOIN v_category CATEGORY
                   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
                   LEFT JOIN type_mst TMST
                          ON TMST.master_mkey = T_HDR.caregory
                             AND TMST.type_code = 'CATEGORY'
                             AND TMST.delete_flag = 'N'
                   --LEFT JOIN v_project PROJ
                   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
                   LEFT JOIN type_mst PMST
                          ON PMST.master_mkey = T_HDR.project_id
                             AND PMST.type_code = 'PROJECT'
                             AND PMST.delete_flag = 'N'
                   LEFT JOIN (SELECT task_parent_id,
                                     Count(*) AS ParentTaskCount
                              FROM   task_hdr
                              WHERE  task_parent_id IS NOT NULL
                                     AND mkey NOT IN ( task_parent_id )
                                     AND delete_flag = 'N'
                              GROUP  BY task_parent_id) parent_counts
                          ON T_HDR.mkey = parent_counts.task_parent_id
            WHERE  ( T_HDR.created_by = @CURRENT_EMP_MKEY
                      OR T_HDR.resposible_emp_mkey = @CURRENT_EMP_MKEY )
                   AND T_HDR.status IN ( 'CANCEL', 'CANCELLED' )
                   AND T_HDR.delete_flag = 'N'
				   AND (
						@STATUS_FILTER    IS NULL
						OR (
								(@STATUS_FILTER    = 'Today' AND CONVERT(DATE, T_HDR.completion_date) = CONVERT(DATE, GETDATE()))
								OR (@STATUS_FILTER    = 'Overdue' AND T_HDR.completion_date < GETDATE())
								OR (@STATUS_FILTER    = 'Next 3 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 3, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 7 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE()))
								OR (@STATUS_FILTER    = 'Next 2 Weeks' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 14, GETDATE()))
								OR (@STATUS_FILTER    = 'Next Month' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(MONTH, 1, GETDATE()))
								OR (@STATUS_FILTER    = 'Review' AND T_HDR.status IN ('CANCEL INITIATED', 'CLOSE INITIATED'))
							)
						)
            ORDER  BY creation_date DESC;
        END
      EXEC Sp_dashboard_count   @CURRENT_EMP_MKEY
  END 




-----------------------------------------------------------------------------------------------------------------------------------


DECLARE @STATUS_FILTER VARCHAR(max) = 'Today,Completed,Overdue,Pending,Cancelled',
        @USER_FILTER   VARCHAR(max) = 'ALLOCATEDBYME,ALLOCATEDTOME,COMPLETEDBYME,COMPLETEDFORME,CANCELCLOSE',
        @PriorityFilter VARCHAR(max) = 'High,Low',
        @TypeFilter VARCHAR(max) = 'RECURRING,APPROVAL,COMPLIANCE,APPROVAL,GENERAL,SYSTEM,EMAIL,RERA COMPLAIN';

DECLARE @sql  NVARCHAR(max) = '',
        @CURRENT_EMP_MKEY VARCHAR(50);
DECLARE @start INT = 1,
        @end   INT;
DECLARE @filter VARCHAR(50);
DECLARE @hasWhereClause BIT = 0; 
DECLARE @WhereClause NVARCHAR(max) = '',
@PriorityClause NVARCHAR(max) = '',
@TypeClause  NVARCHAR(max) = '', @TaskTypeMkey nvarchar(50),
@STATUSClause  NVARCHAR(max) = ''
SET @CURRENT_EMP_MKEY = 926;

SET @sql = 'SELECT T_HDR.mkey,
                   Isnull(TMST.type_desc, ''NA'') CATEGORY,
                   T_HDR.task_no,
                   dbo.[Initcap](Isnull(CREATOR.emp_full_name, ''NA'')) CREATOR,
                   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, ''NA'')) RESPONSIBLE,
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, ''NA'')) ACTIONABLE,
                   T_HDR.creation_date,
                   CASE
                     WHEN T_HDR.status IN ( ''CREATED'' ) THEN ''Not Started''
                     WHEN T_HDR.status LIKE ''%SUB TASK CREATED%'' THEN ''Not Started''
                     WHEN T_HDR.status LIKE ''%SUBTASK CREATED%'' THEN ''Not Started''
                     WHEN T_HDR.status IN ( ''WORK IN PROGRESS'', ''CLOSE INITIATED'', ''CANCEL INITIATED'', ''RE-WORK'' ) THEN ''In Progress''
                     WHEN T_HDR.status IN ( ''CLOSE'', ''COMPLETED'' ) THEN ''Completed''
                     ELSE ''Others''
                   END AS Dashboard_Status,
                   CONVERT(VARCHAR, T_HDR.completion_date, 103) AS COMPLETION_DATE,
                   dbo.[Initcap](T_HDR.task_name) AS TASK_NAME,
                   T_HDR.task_description,
                   T_HDR.tags,
                   dbo.[Initcap](T_HDR.status) AS STATUS,
                   CASE
                     WHEN Isnull(CREATOR.first_name, ''NA'') != Isnull(RESPONSIBLE.first_name, ''NA'') THEN dbo.[Initcap](Isnull(CREATOR.first_name, ''NA'')) + '' > '' + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, ''NA''))
                     ELSE dbo.[Initcap](Isnull(CREATOR.first_name, ''NA''))
                   END AS RESPONSIBLE_TAG,
                   dbo.[Initcap](Isnull(PMST.type_desc, '''')) AS PROJECT_NAME,
                   dbo.Tasknamestring(T_HDR.mkey) AS TASK_HISTORY,
                   Isnull(Rtrim(T_HDR.[priority]), '''') AS [Priority],
                   Isnull(T_HDR.percent_complete, ''0'') AS Progress_Percentage,
                   Isnull(parent_counts.parenttaskcount, 0) AS SubTask_Count,
                   T_HDR.CREATED_BY
            FROM task_hdr T_HDR
            LEFT JOIN employee_mst CREATOR ON CREATOR.mkey = T_HDR.created_by AND CREATOR.delete_flag = ''N''
            LEFT JOIN employee_mst RESPONSIBLE ON RESPONSIBLE.mkey = T_HDR.assigned_to AND RESPONSIBLE.delete_flag = ''N''
            LEFT JOIN employee_mst ACTIONABLE ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey AND ACTIONABLE.delete_flag = ''N''
            LEFT JOIN type_mst TMST ON TMST.master_mkey = T_HDR.caregory AND TMST.type_code = ''CATEGORY'' AND TMST.delete_flag = ''N''
            LEFT JOIN type_mst PMST ON PMST.master_mkey = T_HDR.project_id AND PMST.type_code = ''PROJECT'' AND PMST.delete_flag = ''N''
            LEFT JOIN (SELECT task_parent_id, Count(*) AS ParentTaskCount
                       FROM task_hdr WHERE task_parent_id IS NOT NULL AND mkey NOT IN (task_parent_id) AND delete_flag = ''N''
                       GROUP BY task_parent_id) parent_counts ON T_HDR.mkey = parent_counts.task_parent_id
            WHERE Isnull(T_HDR.status_flag, ''A'') IN (''A'') AND T_HDR.delete_flag = ''N'' ';

			/* @USER_FILTER */
		WHILE @start <= Len(@USER_FILTER)
		BEGIN
			SET @end = CHARINDEX(',', @USER_FILTER, @start);
			IF @end = 0
				SET @end = Len(@USER_FILTER) + 1;
				SET @filter = LTRIM(RTRIM(SUBSTRING(@USER_FILTER, @start, @end - @start)));

			IF @filter = 'ALLOCATEDBYME' 
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					--SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
					SET @WhereClause += ' ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
					SET @hasWhereClause = 1;
				END
				ELSE
				Begin
					SET @sql += ' ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' ) ';
				end
			END

			IF @filter = 'ALLOCATEDTOME'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @WhereClause += ' ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
					--SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
					SET @hasWhereClause = 1;
				END
				ELSE
					--SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
					SET @WhereClause += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
			END

			IF @filter = 'COMPLETEDBYME'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @WhereClause += ' ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
					--SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
					SET @hasWhereClause = 1;
				END
				ELSE
					--SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
					SET @WhereClause += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
			END

			IF @filter = 'COMPLETEDFORME'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					--SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
					SET @WhereClause += ' ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
					SET @hasWhereClause = 1;
				END
				ELSE
					--SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
					SET @WhereClause += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
			END

			IF @filter = 'CANCELCLOSE'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @WhereClause += ' ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
					--SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
					SET @hasWhereClause = 1;
				END
				ELSE
					--SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
					SET @WhereClause += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
			END

			SET @start = @end 
			+ 1;
		END
		SET @sql += ' AND ( ' + @WhereClause + ' ) ';
-----------------------------------------------------------------------------------------------------
		/* @PriorityFilter */
		SET @start = 1;
		SET @hasWhereClause = 0;
		WHILE @start <= Len(@PriorityFilter)
		BEGIN
			SET @end = CHARINDEX(',', @PriorityFilter, @start);
			IF @end = 0
				SET @end = Len(@PriorityFilter) + 1;

			SET @filter = LTRIM(RTRIM(SUBSTRING(@PriorityFilter, @start, @end - @start)));

			-- Append the priority condition
			IF @filter = 'High'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					--SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
					SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
					SET @hasWhereClause = 1;
				END
				ELSE
					--SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
					SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
			END

			IF @filter = 'Low'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					--SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
					SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
					SET @hasWhereClause = 1;
				END
				ELSE
					--SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
					SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
			END

			IF @filter = 'Medium'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					--SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
					SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';
					SET @hasWhereClause = 1;
				END
				ELSE
					--SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
					SET @PriorityClause += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
			END

			SET @start = @end + 1;
		END
		SET @sql += ' AND ( ' + @PriorityClause + ' ) ';
-----------------------------------------------------------------------------------------------------		
		/* @TypeFilter */
		SET @start = 1;
		SET @hasWhereClause = 0;
		WHILE @start <= Len(@TypeFilter)
		BEGIN
			SET @end = CHARINDEX(',', @TypeFilter, @start);
			IF @end = 0
				SET @end = Len(@TypeFilter) + 1;
				SET @filter = LTRIM(RTRIM(SUBSTRING(@TypeFilter, @start, @end - @start)));
				
				IF @filter = 'RECURRING'
			BEGIN
				select @TaskTypeMkey = MASTER_MKEY from TYPE_MST where TYPE_CODE = 'TASK_TYPE' and TYPE_DESC = @filter
				IF @hasWhereClause = 0
				BEGIN
					SET @TypeClause += ' (TASK_TYPE = '+ @TaskTypeMkey +') ';
					SET @hasWhereClause = 1;
				END
			ELSE
				SET @TypeClause += ' OR (TASK_TYPE = '+ @TaskTypeMkey +') ';
			END

			IF @filter = 'Approval'
			BEGIN
				select @TaskTypeMkey = MASTER_MKEY from TYPE_MST where TYPE_CODE = 'TASK_TYPE' and TYPE_DESC = @filter
				IF @hasWhereClause = 0
				BEGIN
					SET @TypeClause += ' (TASK_TYPE = '+ @TaskTypeMkey +') ';
					SET @hasWhereClause = 1;
				END
			ELSE
				SET @TypeClause += ' OR (TASK_TYPE = '+ @TaskTypeMkey +') ';
			END

			IF @filter = 'COMPLIANCE'
			BEGIN
				select @TaskTypeMkey = MASTER_MKEY from TYPE_MST where TYPE_CODE = 'TASK_TYPE' and TYPE_DESC = @filter
				IF @hasWhereClause = 0
				BEGIN
					SET @TypeClause += ' (TASK_TYPE = '+ @TaskTypeMkey +') ';
					SET @hasWhereClause = 1;
				END
			ELSE
				SET @TypeClause += ' OR (TASK_TYPE = '+ @TaskTypeMkey +') ';
			END

			IF @filter = 'GENERAL'
			BEGIN
				select @TaskTypeMkey = MASTER_MKEY from TYPE_MST where TYPE_CODE = 'TASK_TYPE' and TYPE_DESC = @filter
				IF @hasWhereClause = 0
				BEGIN
					SET @TypeClause += ' (TASK_TYPE = '+ @TaskTypeMkey +') ';
					SET @hasWhereClause = 1;
				END
			ELSE
				SET @TypeClause += ' OR (TASK_TYPE = '+ @TaskTypeMkey +') ';
			END

			IF @filter = 'SYSTEM'
			BEGIN
				select @TaskTypeMkey = MASTER_MKEY from TYPE_MST where TYPE_CODE = 'TASK_TYPE' and TYPE_DESC = @filter
				IF @hasWhereClause = 0
				BEGIN
					SET @TypeClause += ' (TASK_TYPE = '+ @TaskTypeMkey +') ';
					SET @hasWhereClause = 1;
				END
			ELSE
				SET @TypeClause += ' OR (TASK_TYPE = '+ @TaskTypeMkey +') ';
			END

			IF @filter = 'Email'
			BEGIN
				select @TaskTypeMkey = MASTER_MKEY from TYPE_MST where TYPE_CODE = 'TASK_TYPE' and TYPE_DESC = @filter
				IF @hasWhereClause = 0
				BEGIN
					SET @TypeClause += ' (TASK_TYPE = '+ @TaskTypeMkey +') ';
					SET @hasWhereClause = 1;
				END
			ELSE
				SET @TypeClause += ' OR (TASK_TYPE = '+ @TaskTypeMkey +') ';
			END
			
			IF @filter = 'RERA COMPLAIN'
			BEGIN
				select @TaskTypeMkey = MASTER_MKEY from TYPE_MST where TYPE_CODE = 'TASK_TYPE' and TYPE_DESC = @filter
				IF @hasWhereClause = 0
				BEGIN
					SET @TypeClause += ' (TASK_TYPE = '+ @TaskTypeMkey +') ';
					SET @hasWhereClause = 1;
				END
			ELSE
				SET @TypeClause += ' OR (TASK_TYPE = '+ @TaskTypeMkey +') ';
			END
				
				SET @start = @end + 1;
		End
		SET @sql += ' AND ( ' + @TypeClause + ' ) ';
-----------------------------------------------------------------------------------------------------
		/* @STATUS_FILTER */
		SET @start = 1;
		SET @hasWhereClause = 0;
		WHILE @start <= Len(@STATUS_FILTER)
		BEGIN
			SET @end = CHARINDEX(',', @STATUS_FILTER, @start);
			IF @end = 0
				SET @end = Len(@STATUS_FILTER) + 1;
				SET @filter = LTRIM(RTRIM(SUBSTRING(@STATUS_FILTER, @start, @end - @start)));
				
			IF @filter = 'Today'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @STATUSClause += ' (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
					AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
					
					SET @hasWhereClause = 1;
				END
			ELSE
				SET @STATUSClause += ' OR (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
					AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
			END

			IF @filter = 'Pending'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @STATUSClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
										and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
					SET @hasWhereClause = 1;
				END
			ELSE
				SET @STATUSClause += ' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
										and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
			END

			IF @filter = 'Overdue'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @STATUSClause += ' (T_HDR.completion_date < GETDATE() AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
					SET @hasWhereClause = 1;
				END
			ELSE
				SET @STATUSClause += ' OR (T_HDR.completion_date < GETDATE() AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
			END

			IF @filter = 'Completed'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @STATUSClause += ' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
					SET @hasWhereClause = 1;
				END
			ELSE
				SET @TypeClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
			END

			IF @filter = 'Cancelled'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @STATUSClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
					SET @hasWhereClause = 1;
				END
			ELSE
				SET @STATUSClause += ' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
			END
			
			SET @start = @end + 1;
		End

		print  ' AND ( ' + @STATUSClause + ' ) ';
		SET @sql += ' AND ( ' + @STATUSClause + ' ) ';
		print @sql
		print len(@sql)
--EXEC Sp_executesql @sql;




GO

/****** Object:  View [dbo].[V_Doc_Type_CHECK_LIST_NT]    Script Date: 19-05-2025 19:17:11 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

ALTER view [dbo].[V_Doc_Type_CHECK_LIST_NT]      as    
SELECT HDR.MKEY as Doc_Type_Mkey,HDR.DOC_CATEGORY AS Doc_Category_Mkey, MST.TYPE_DESC AS Doc_Category_Name, HDR.DOC_NAME as Doc_Type_Name  
 ,Isnull(CONVERT(VARCHAR(50), HDR.created_by), '') AS CREATED_BY_ID  
    ,Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME  
    ,CASE  
     WHEN HDR.creation_date IS NULL THEN  
    ''  
    ELSE  
     Format(HDR.creation_date, 'yyyy-MM-dd HH:mm:ss')  
    END AS CREATION_DATE  
    ,Isnull(CONVERT(VARCHAR(50), HDR.last_updated_by), '') AS LAST_UPDATED_BY  
    ,Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME  
    ,CASE  
     WHEN HDR.last_update_date IS NULL THEN  
     ''  
    ELSE  
     Format(HDR.last_update_date, 'yyyy-MM-dd HH:mm:ss')  
    END AS LAST_UPDATE_DATE  
    ,HDR.DELETE_FLAG  
FROM TYPE_MST MST INNER JOIN DOC_TEMPLATE_HDR HDR ON MST.MKEY = HDR.DOC_CATEGORY          
INNER JOIN   
    EMPLOYEE_MST createdby  
   ON   
    HDR.created_by = createdby.mkey  
   LEFT JOIN   
    EMPLOYEE_MST updatedby  
   ON   
    HDR.last_updated_by = updatedby.mkey  
WHERE  (TYPE_CODE = N'DOC_CATEGORY') AND HDR.DELETE_FLAG = 'N' AND MST.DELETE_FLAG = 'N'     
UNION ALL    
SELECT MST.MKEY as Doc_Type_Mkey,MST.PARENT_ID AS Doc_Category_Mkey, MST.TYPE_CODE AS Doc_Category_Name, MST.TYPE_DESC Doc_Type_Name     
,Isnull(CONVERT(VARCHAR(50), MST.created_by), '') AS CREATED_BY_ID  
    ,Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME  
    ,CASE  
     WHEN MST.creation_date IS NULL THEN  
    ''  
    ELSE  
     Format(MST.creation_date, 'yyyy-MM-dd HH:mm:ss')  
    END AS CREATION_DATE  
    ,Isnull(CONVERT(VARCHAR(50), MST.last_updated_by), '') AS LAST_UPDATED_BY  
    ,Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME  
    ,CASE  
     WHEN MST.last_update_date IS NULL THEN  
     ''  
    ELSE  
     Format(MST.last_update_date, 'yyyy-MM-dd HH:mm:ss')  
    END AS LAST_UPDATE_DATE  
    ,MST.DELETE_FLAG  
FROM TYPE_MST MST INNER JOIN   
    EMPLOYEE_MST createdby  
   ON   
    MST.created_by = createdby.mkey  
   LEFT JOIN   
    EMPLOYEE_MST updatedby  
   ON   
    MST.last_updated_by = updatedby.mkey  
WHERE TYPE_CODE = 'INSTR' AND MST.DELETE_FLAG = 'N' AND TYPE_DESC NOT IN ('INSTR');
GO


---------------------------------------------------------------------------------------------------
date :20-05-2025



GO
/****** Object:  StoredProcedure [dbo].[SP_GetLoginUser]    Script Date: 20-05-2025 10:29:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--   exec SP_GetLoginUser 'jagdish.galvankar@powersoft.in','jagdi@9002'
ALTER PROCEDURE [dbo].[SP_GetLoginUser] (@LoginName        NVARCHAR(255),
                                         @P_LOGIN_PASSWORD VARCHAR(max) = NULL)
AS
  BEGIN
      DECLARE @dcount INT

      SELECT @dcount = Count(*)
      FROM   employee_mst
      WHERE  ( email_id_official = @LoginName
                OR Cast(contact_no AS NVARCHAR(20)) = @LoginName )
             AND [login_password] = @P_LOGIN_PASSWORD
             AND delete_flag = 'N'

      IF( @dcount > 0 )
        BEGIN
            PRINT 'inside iff';

            SELECT EMP_MST.[mkey],
                   EMP_MST.[company_id],
                   EMP_MST.[emp_code],
                   dbo.[Initcap](EMP_MST.[emp_full_name])       EMP_FULL_NAME,
                   dbo.[Initcap](EMP_MST.[first_name])          FIRST_NAME,
                   dbo.[Initcap](EMP_MST.[last_name])           LAST_NAME,
                   EMP_MST.[role_id],
                   EMP_MST.[project_id],
                   EMP_MST.[designation_id],
                   EMP_MST.[department_id],
                   EMP_MST.[contact_no],
                   EMP_MST.[email_id_official],
                   EMP_MST.[email_id_personal],
                   EMP_MST.[login_name],
                   EMP_MST.[login_password],
                   EMP_MST.[ra1_mkey],
                   EMP_MST.[ra2_mkey],
                   EMP_MST.[effective_start_date],
                   EMP_MST.[effective_end_date],
                   EMP_MST.[email_frequency],
                   EMP_MST.[browser_notification],
                   EMP_MST.[web_token],
                   EMP_MST.[mobile_token],
                   EMP_MST.[attribute1],
                   Isnull(EMP_MST.[attribute2], 'N')            AS ATTRIBUTE2,
                   EMP_MST.[attribute3],
                   EMP_MST.[attribute4],
                   EMP_MST.[attribute5],
                   EMP_MST.[created_by],
                   EMP_MST.[creation_date],
                   EMP_MST.[last_updated_by],
                   EMP_MST.[last_update_date],
                   EMP_MST.[delete_flag],
                   EMP_MST.[isforgotpassword],
                   CONVERT(VARCHAR(max), EMP_MST.[temppassword])TEMPPASSWORD,
                   BUSINESS_GROUPS.business_group_id,
                   BUSINESS_GROUPS.NAME
                   BUSINESS_GROUPS_NAME,
                   COMP.NAME                                    COMPANY_NAME,
                   resset_flag
            FROM   [dbo].[employee_mst] EMP_MST
                   JOIN company_mst COMP
                     ON EMP_MST.[company_id] = COMP.company_id
                        AND COMP.delete_flag = 'N'
                   JOIN business_groups_mst BUSINESS_GROUPS
                     ON
            BUSINESS_GROUPS.business_group_id = COMP.business_group_id
            AND BUSINESS_GROUPS.delete_flag = 'N'
            WHERE  ( EMP_MST.email_id_official = @LoginName
                      OR Cast(EMP_MST.contact_no AS NVARCHAR(20)) = @LoginName )
                   --AND (EMP_MST.[login_password] = @P_LOGIN_PASSWORD)
				    and (@P_LOGIN_PASSWORD IS NULL OR (EMP_MST.[login_password] = @P_LOGIN_PASSWORD))
                   AND EMP_MST.delete_flag = 'N';
        END
      ELSE
        BEGIN
            PRINT 'out iff'

            SELECT EMP_MST.[mkey],
                   EMP_MST.[company_id],
                   EMP_MST.[emp_code],
                   dbo.[Initcap](EMP_MST.[emp_full_name])       EMP_FULL_NAME,
                   dbo.[Initcap](EMP_MST.[first_name])          FIRST_NAME,
                   dbo.[Initcap](EMP_MST.[last_name])           LAST_NAME,
                   EMP_MST.[role_id],
                   EMP_MST.[project_id],
                   EMP_MST.[designation_id],
                   EMP_MST.[department_id],
                   EMP_MST.[contact_no],
                   EMP_MST.[email_id_official],
                   EMP_MST.[email_id_personal],
                   EMP_MST.[login_name],
                   EMP_MST.[login_password],
                   EMP_MST.[ra1_mkey],
                   EMP_MST.[ra2_mkey],
                   EMP_MST.[effective_start_date],
                   EMP_MST.[effective_end_date],
                   EMP_MST.[email_frequency],
                   EMP_MST.[browser_notification],
                   EMP_MST.[web_token],
                   EMP_MST.[mobile_token],
                   EMP_MST.[attribute1],
                   Isnull(EMP_MST.[attribute2], 'N')            AS ATTRIBUTE2,
                   EMP_MST.[attribute3],
                   EMP_MST.[attribute4],
                   EMP_MST.[attribute5],
                   EMP_MST.[created_by],
                   EMP_MST.[creation_date],
                   EMP_MST.[last_updated_by],
                   EMP_MST.[last_update_date],
                   EMP_MST.[delete_flag],
                   EMP_MST.[isforgotpassword],
                   CONVERT(VARCHAR(max), EMP_MST.[temppassword])TEMPPASSWORD,
                   BUSINESS_GROUPS.business_group_id,
                   BUSINESS_GROUPS.NAME
                   BUSINESS_GROUPS_NAME,
                   COMP.NAME                                    COMPANY_NAME,
                   resset_flag
            FROM   [dbo].[employee_mst] EMP_MST
                   JOIN company_mst COMP
                     ON EMP_MST.[company_id] = COMP.company_id
                        AND COMP.delete_flag = 'N'
                   JOIN business_groups_mst BUSINESS_GROUPS
                     ON
            BUSINESS_GROUPS.business_group_id = COMP.business_group_id
            AND BUSINESS_GROUPS.delete_flag = 'N'
            WHERE  ( EMP_MST.email_id_official = @LoginName
                      OR Cast(EMP_MST.contact_no AS NVARCHAR(20)) = @LoginName )
                   --AND EMP_MST.[login_password] = @P_LOGIN_PASSWORD
				   AND (@P_LOGIN_PASSWORD IS NULL OR (EMP_MST.[login_password] = @P_LOGIN_PASSWORD))
                   AND EMP_MST.delete_flag = 'N';
        END
  END
--select LOGIN_PASSWORD,Cast([LOGIN_PASSWORD] As varchar),* FROM EMPLOYEE_MST where EMAIL_ID_OFFICIAL ='narendrakumar.soni@powersoft.in' and [LOGIN_PASSWORD]= CONVERT(VARBINARY(25), 'admin123' , 1)
--exec [SP_GetLoginUser] 'narendra.soni@powersoft.in', 'admin@123'
--exec [SP_GetLoginUser] '8879481981', 'admin@123'
--select * from  EMPLOYEE_MST where (EMAIL_ID_OFFICIAL ='narendra.soni@powersoft.in'  or Cast(CONTACT_NO As nVarchar(20))= 'narendra.soni@powersoft.in') and [LOGIN_PASSWORD]= 'admin@123' and DELETE_FLAG='N' 
--SELECT  EMP_MST.[MKEY],EMP_MST.[COMPANY_ID],EMP_MST.[EMP_CODE],DBO.[InitCap](EMP_MST.[EMP_FULL_NAME])EMP_FULL_NAME,DBO.[InitCap](EMP_MST.[FIRST_NAME])FIRST_NAME,DBO.[InitCap](EMP_MST.[LAST_NAME])LAST_NAME,EMP_MST.[ROLE_ID],EMP_MST.[PROJECT_ID],EMP_MST.[DESIGNATION_ID],EMP_MST.[DEPARTMENT_ID]
--      ,EMP_MST.[CONTACT_NO],EMP_MST.[EMAIL_ID_OFFICIAL],EMP_MST.[EMAIL_ID_PERSONAL],EMP_MST.[LOGIN_NAME],EMP_MST.[LOGIN_PASSWORD],EMP_MST.[RA1_MKEY],EMP_MST.[RA2_MKEY],EMP_MST.[EFFECTIVE_START_DATE],EMP_MST.[EFFECTIVE_END_DATE],EMP_MST.[EMAIL_FREQUENCY],EMP_MST.[BROWSER_NOTIFICATION]
--      ,EMP_MST.[WEB_TOKEN],EMP_MST.[MOBILE_TOKEN],EMP_MST.[ATTRIBUTE1],EMP_MST.[ATTRIBUTE2],EMP_MST.[ATTRIBUTE3],EMP_MST.[ATTRIBUTE4],EMP_MST.[ATTRIBUTE5],EMP_MST.[CREATED_BY]
--      ,EMP_MST.[CREATION_DATE],EMP_MST.[LAST_UPDATED_BY],EMP_MST.[LAST_UPDATE_DATE],EMP_MST.[DELETE_FLAG],EMP_MST.[ISFORGOTPASSWORD],convert(varchar(max),EMP_MST.[TEMPPASSWORD])TEMPPASSWORD
--      ,BUSINESS_GROUPS.BUSINESS_GROUP_ID
--      ,BUSINESS_GROUPS.NAME BUSINESS_GROUPS_NAME
--      ,COMP.NAME COMPANY_NAME
--    FROM [dbo].[EMPLOYEE_MST] EMP_MST  
--    JOIN COMPANY_MST COMP ON EMP_MST.[COMPANY_ID]=COMP.COMPANY_ID AND COMP.DELETE_FLAG='N'
--    JOIN BUSINESS_GROUPS_MST BUSINESS_GROUPS ON BUSINESS_GROUPS.BUSINESS_GROUP_ID=COMP.BUSINESS_GROUP_ID AND BUSINESS_GROUPS.DELETE_FLAG='N'
--    WHERE EMP_MST.MKEY=1




GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_DETAILS_BY_MKEY_NT]    Script Date: 20-05-2025 16:51:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	exec SP_TASK_DETAILS_BY_MKEY_NT 845,937,0
ALTER procedure [dbo].[SP_TASK_DETAILS_BY_MKEY_NT](@HDR_MKEY VARCHAR(250),@Session_User_Id          INT = null,  
@Business_Group_Id	  INT = null)
AS
  BEGIN
      DECLARE @DAY INT

      SET @DAY=0

      SELECT T_HDR.mkey,
             T_HDR.task_no,
             T_HDR.isnode,
             T_HDR.task_parent_id,
             T_HDR.task_main_node_id,
			 T_HDR.Task_Type,
             T_HDR.status,
             T_HDR.status_perc,
             T_HDR.task_created_by,
             T_HDR.approver_id,
             T_HDR.approve_action_date,
			 T_HDR.ASSIGNED_TO,
			 E_MST.EMP_FULL_NAME			AS 'Assigned_To_Name',
             T_MST.type_desc                           CAREGORY,
             T_HDR.project_id                          PROJECT_MKEY,
			 T_HDR.sub_project_id                    AS BUILDING_MKEY,
             P_MST.type_desc                           'PROJECT',
			 P_MST.type_desc                           'Project_Name',
             S_P_MST.type_desc                         'Sub_PROJECT',
			 S_P_MST.type_desc						AS 'Building_Name',
             T_HDR.caregory                            CATEGORY_MKEY,
             T_HDR.creation_date,
             T_HDR.task_name,
             T_HDR.task_description,
             E_MST.emp_full_name,
			 
			 case when T_HDR.TASK_CREATED_BY = @Session_User_Id --When Task owner created the task /* Inside Task Owner login*/
			 and T_HDR.STATUS in ('CREATED','SUB TASK CREATED','WORK IN PROGRESS') and T_HDR.STATUS_PERC = 0.0 then 'Y'  /*Task owner created the task and 
			 it is currently on created status and progress is 0%  then all tabs are enabled for task owner and task owner can add tabs list like Checklist, Authority,
			 Outcome and Compliance via remark but with 0%  progress and WIP status update.  Otherwise any progress between 0% to 100%  
			 with WIP status will lead to disable all tabs for task owner.*/ 
			 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id) --When Task owner created the task /* Inside assignee login */
			 and T_HDR.STATUS_PERC = 0.0  /* Inside assignee login also all tabs are enabled because progress % is 0, however when assignee change 
			 the progress percent % between 0% to 100% then tabs are disabled for the task owner,but enabled at the assignee side. Assignee can able to update all tabs  */
			 and T_HDR.STATUS in ('CREATED','SUB TASK CREATED','WORK IN PROGRESS') Then 'Y'  
			 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 /*When Assignee change to close initiate(100%) */
							-- Inside assignee login 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id) 
			 and T_HDR.STATUS_PERC = 100.0 
			 and  T_HDR.STATUS in ('CLOSE INITIATED')  then 'N'/* If an assignee changes the status to cancel initiate or close initiate 
			 it means progress % is whether 0% or 100% so, in this scenario all tabs are disabled to the assignee side. Assignee will never change any of tab/s 
			 and inside the task owner log in all tabs are enabled for the task owner. Task owner can update all tabs. */
			 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id)/* When Assignee change to  cancel initiate (0%) Inside assignee login */
			 and T_HDR.STATUS in ('CANCEL INITIATED')  then 'N' /* If an assignee changes the status to cancel initiate or close initiate 
			 it means progress % is whether 0% or 100% so, in this scenario all tabs are disabled to the assignee side. Assignee will never change any of tab/s 
			 and inside the task owner log in all tabs are enabled for the task owner. Task owner can update all tabs. */

			 /*When Assignee change to close initiate(100%) or cancel initiate (0%) */
			  --Inside Task Owner login 
			 when  T_HDR.TASK_CREATED_BY = @Session_User_Id	 
			 and T_HDR.STATUS_PERC between 0.0 and 100.0 and T_HDR.STATUS in ('CLOSE INITIATED','CANCEL INITIATED')  then 'Y' 
			 /* Now inside task owner log in all tabs are enabled and task owner can do all changes in tabs and the status which are visible 
			 to the task owner is Cancel or Close and Re-work as per the assignee action if assignee triggered Close initiate then task owner can see 
			 the Close or if Cancel Initiate is triggered by the assignee then task owner can see Cancel and re-work is by default */
			 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 /*When Task owner change status to re-work  */
			 ---Inside Task Owner login
			 WHEN  T_HDR.TASK_CREATED_BY= @Session_User_Id	
			 and T_HDR.STATUS in ('RE-WORK')  then 'N' /*-- When task owner change status to re-work instead of Close or Cancel then all tabs are disabled 
														at task owner side now task owner is not able to do any changes inside any tab.*/
			 /* When Task owner change status to re-work */
			 --- Inside assignee login
			 WHEN  (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id) 
			 and T_HDR.STATUS in ('RE-WORK')  then 'Y' /* When the task owner gives a task to re-work to the assignee then status will change to re-work for the assignee 
														 and now all tabs are enabled for assignee and can do any changes inside any tab.*/
	 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 WHEN  (T_HDR.TASK_CREATED_BY = @Session_User_Id) or (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id)
			 and T_HDR.STATUS in ('CANCEL','CANCELLED','CLOSE')  then 'N' /* When task owner can do Cancel or Close instead of re-work 
																			 then all tabs are disabled for task owner as well as assignee */
 ---------------------------------------------------------------------------------------------------------------------------------------------------
			WHEN  (T_HDR.TASK_CREATED_BY = @Session_User_Id) and (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id)
			 and T_HDR.STATUS not in ('CANCEL','CANCELLED','CLOSE')  then 'Y' /* When Task Owner and Assignee are same then enabled  */
---------------------------------------------------------------------------------------------------------------------------------------------------
			 ELSE 'N'
			 end as 'Process_Flag',
             T_HDR.tags,
             CONVERT(VARCHAR(10), completion_date, 120)COMPLETION_DATE,
             --Isnull(file_name, '')                     [FILE_NAME],
             --Isnull(file_path, '')                     FILE_PATH,
             T_HDR.resposible_emp_mkey
			,ISNULL(RTrim(T_HDR.Priority),'') AS [Priority] 
			,ISNULL(CONVERT(NVARCHAR(20), T_HDR.Tentative_Start_Date),null) AS Tentative_Start_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Tentative_End_Date),null) AS Tentative_End_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Actual_Start_Date),null) AS Actual_Start_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Actual_End_Date),null) AS Actual_End_Date
      FROM   task_hdr T_HDR
             JOIN employee_mst E_MST
               ON E_MST.mkey = T_HDR.assigned_to
             LEFT JOIN type_mst T_MST
                    ON T_MST.master_mkey = T_HDR.caregory
             --AND T_MST.TYPE_CODE='CATEGORY'
             LEFT JOIN type_mst P_MST
                    ON P_MST.master_mkey = T_HDR.project_id
             LEFT JOIN type_mst S_P_MST
                    ON S_P_MST.master_mkey = T_HDR.sub_project_id
             --LEFT JOIN task_media_trl T_MEDIA
             --       ON T_MEDIA.mkey = T_HDR.mkey
             --          AND T_MEDIA.delete_flag = 'N'
      WHERE  T_HDR.mkey = @HDR_MKEY


--	  WITH actiontype
--     AS (SELECT T_HDR.mkey,T_HDR.task_no,T_HDR.isnode,T_HDR.task_parent_id,T_HDR.task_main_node_id,T_HDR.task_type,T_HDR.status,T_HDR.status_perc,T_HDR.task_created_by,
--                T_HDR.approver_id,T_HDR.approve_action_date,T_HDR.assigned_to,E_MST.emp_full_name AS 'Assigned_To_Name',T_MST.type_desc CAREGORY,T_HDR.project_id
--                    PROJECT_MKEY,T_HDR.sub_project_id AS BUILDING_MKEY,
--                P_MST.type_desc 'PROJECT' , P_MST.type_desc 'Project_Name', S_P_MST.type_desc
--                    'Sub_PROJECT',S_P_MST.type_desc AS 'Building_Name', T_HDR.caregory
--                    CATEGORY_MKEY,T_HDR.creation_date,T_HDR.task_name,T_HDR.task_description,E_MST.emp_full_name,T_HDR.tags,
--                CONVERT(VARCHAR(10), completion_date, 120) COMPLETION_DATE,Isnull(file_name, '')[FILE_NAME],
--                Isnull(file_path, '')FILE_PATH,T_HDR.resposible_emp_mkey,Isnull(Rtrim(T_HDR.priority), '') AS [Priority],
--                Isnull(CONVERT(NVARCHAR(20), T_HDR.tentative_start_date), NULL)AS
--                Tentative_Start_Date,                Isnull(CONVERT(NVARCHAR(20), T_HDR.tentative_end_date), NULL)AS Tentative_End_Date,
--                Isnull(CONVERT(NVARCHAR(20), T_HDR.actual_start_date), NULL)AS Actual_Start_Date,
--                Isnull(CONVERT(NVARCHAR(20), T_HDR.actual_end_date), NULL)AS Actual_End_Date,
--                NULL AS
--                    progress_perc,
--                NULL
--                AS
--                    ACTION_TYPE,
--                NULL
--                AS
--                    COMMENT
--         FROM   task_hdr T_HDR
--                JOIN employee_mst E_MST
--                  ON E_MST.mkey = T_HDR.assigned_to
--                LEFT JOIN type_mst T_MST
--                       ON T_MST.master_mkey = T_HDR.caregory
--                --AND T_MST.TYPE_CODE='CATEGORY'
--                LEFT JOIN type_mst P_MST
--                       ON P_MST.master_mkey = T_HDR.project_id
--                LEFT JOIN type_mst S_P_MST
--                       ON S_P_MST.master_mkey = T_HDR.sub_project_id
--                LEFT JOIN task_media_trl T_MEDIA
--                       ON T_MEDIA.mkey = T_HDR.mkey
--                          AND T_MEDIA.delete_flag = 'N'
--         WHERE  T_HDR.mkey = 107
--         UNION ALL
--         SELECT NULL AS mkey,
--                NULL AS task_no,
--                NULL AS isnode,
--                NULL AS task_parent_id,
--                NULL AS task_main_node_id,
--                NULL AS Task_Type,
--                NULL AS status_perc,
--                NULL AS task_created_by,
--                NULL AS approver_id,
--                NULL AS approve_action_date,
--                NULL AS ASSIGNED_TO,
--                NULL AS 'Assigned_To_Name',
--                NULL AS CAREGORY,
--                NULL AS PROJECT_MKEY,
--                NULL AS BUILDING_MKEY,
--                NULL AS 'PROJECT',
--                NULL AS 'Project_Name',
--                NULL AS 'Sub_PROJECT',
--                NULL AS 'Building_Name',
--                NULL AS CATEGORY_MKEY,
--                NULL AS task_name,
--                NULL AS task_description,
--                NULL AS emp_full_name,
--                NULL AS tags,
--                NULL AS COMPLETION_DATE,
--                NULL AS resposible_emp_mkey,
--                NULL AS [Priority],
--                NULL AS Tentative_Start_Date,
--                NULL AS Tentative_End_Date,
--                NULL AS Actual_Start_Date,
--                NULL AS Actual_End_Date,
--                CONVERT(VARCHAR(50), creation_date, 103)CREATION_DATE,
--                progress_perc,
--                dbo.[Initcap](status)                   STATUS,
--                dbo.[Initcap](action_type)              ACTION_TYPE,
--                dbo.[Initcap](description_comment)      COMMENT,
--                Isnull(file_name, '')                   FILE_NAME,
--                Isnull(file_path, '')                   FILE_PATH
--         FROM   task_action_trl
--         WHERE  delete_flag = 'N'
--                AND mkey = 237 -- 24-03-2025
--        )
--SELECT *
--FROM   actiontype
--ORDER  BY creation_date 
  --WHERE CONVERT(VARCHAR(25),DATEADD(DAY,@DAY,T_HDR.CREATION_DATE),103)=CONVERT(VARCHAR(25),DATEADD(DAY,@DAY,GETDATE()),103)
  END 
--EXEC SP_TASK_DETAILS_BY_MKEY 1

----------------------------------------------------------------------------------------------------------------------------

Date: 22-05-2025

GO
Create View V_USER_FILTER AS
Select  TMST.MKEY, tmst.TYPE_CODE, tmst.TYPE_DESC as 'Key'
, Case when tmst.TYPE_DESC = 'DEFAULT' THEN 'Actionable' 
when tmst.TYPE_DESC = 'ALLOCATEDTOME' THEN 'Allocated To Me' 
when tmst.TYPE_DESC = 'ALLOCATEDBYME' THEN 'Allocated By Me' 
when tmst.TYPE_DESC = 'COMPLETEDBYME' THEN 'Completed By Me' 
when tmst.TYPE_DESC = 'COMPLETEDFORME' THEN 'Completed For Me' 
when tmst.TYPE_DESC = 'CANCELCLOSE' THEN 'Cancelled' 
ELSE tmst.TYPE_DESC
END AS 'DisplayName'
 ,Isnull(CONVERT(VARCHAR(50), TMST.created_by), '') AS CREATED_BY_ID,  
    Isnull(CONVERT(VARCHAR(50), EMST.emp_full_name), '') AS CREATED_BY_NAME,  
    CASE  WHEN TMST.creation_date IS NULL THEN  ''  ELSE  Format(TMST.creation_date, 'yyyy-MM-dd HH:mm:ss') END AS CREATION_DATE,  
    Isnull(CONVERT(VARCHAR(50), TMST.last_updated_by), '') AS LAST_UPDATED_BY,  
    Isnull(LMST.emp_full_name, '') UPDATED_BY_NAME,  
    CASE WHEN TMST.last_update_date IS NULL THEN  ''  ELSE  Format(TMST.last_update_date, 'yyyy-MM-dd HH:mm:ss') END AS LAST_UPDATE_DATE  
From TYPE_MST TMST INNER JOIN EMPLOYEE_MST EMST ON TMST.CREATED_BY = EMST.MKEY
LEFT JOIN EMPLOYEE_MST LMST ON TMST.LAST_UPDATED_BY = EMST.MKEY
where TYPE_CODE ='USER_FILTER' and TMST.DELETE_FLAG = 'N';
------------------------------------------------------------------------------------------
Go
Create View V_PRIORITY_FILTER AS
Select  TMST.MKEY, tmst.TYPE_CODE, tmst.TYPE_DESC as 'Key'
, Case when tmst.TYPE_DESC = 'High' THEN 'High' 
when tmst.TYPE_DESC = 'Medium' THEN 'Medium' 
when tmst.TYPE_DESC = 'LOW' THEN 'Low'
ELSE tmst.TYPE_DESC
END AS 'DisplayName'
 ,Isnull(CONVERT(VARCHAR(50), TMST.created_by), '') AS CREATED_BY_ID,  
    Isnull(CONVERT(VARCHAR(50), EMST.emp_full_name), '') AS CREATED_BY_NAME,  
    CASE  WHEN TMST.creation_date IS NULL THEN  ''  ELSE  Format(TMST.creation_date, 'yyyy-MM-dd HH:mm:ss') END AS CREATION_DATE,  
    Isnull(CONVERT(VARCHAR(50), TMST.last_updated_by), '') AS LAST_UPDATED_BY,  
    Isnull(LMST.emp_full_name, '') UPDATED_BY_NAME,  
    CASE WHEN TMST.last_update_date IS NULL THEN  ''  ELSE  Format(TMST.last_update_date, 'yyyy-MM-dd HH:mm:ss') END AS LAST_UPDATE_DATE  
From TYPE_MST TMST INNER JOIN EMPLOYEE_MST EMST ON TMST.CREATED_BY = EMST.MKEY
LEFT JOIN EMPLOYEE_MST LMST ON TMST.LAST_UPDATED_BY = EMST.MKEY
where TYPE_CODE ='PRIORITY_FILTER' and TMST.DELETE_FLAG = 'N';
------------------------------------------------------------------------------------------
Go
CREATE View V_DURATION_FILTER AS
Select  TMST.MKEY, tmst.TYPE_CODE, tmst.TYPE_DESC as 'Key'
, Case when tmst.TYPE_DESC = 'Today' THEN 'Today' 
when tmst.TYPE_DESC = 'Completed' THEN 'Completed' 
when tmst.TYPE_DESC = 'Overdue' THEN 'Overdue' 
when tmst.TYPE_DESC = 'Pending' THEN 'Pending' 
when tmst.TYPE_DESC = 'Cancelled' THEN 'Cancelled' 
when tmst.TYPE_DESC = 'Future' THEN 'Future' 
when tmst.TYPE_DESC = 'Review' THEN 'Review' 
ELSE tmst.TYPE_DESC
END AS 'DisplayName'
 ,Isnull(CONVERT(VARCHAR(50), TMST.created_by), '') AS CREATED_BY_ID,  
    Isnull(CONVERT(VARCHAR(50), EMST.emp_full_name), '') AS CREATED_BY_NAME,  
    CASE  WHEN TMST.creation_date IS NULL THEN  ''  ELSE  Format(TMST.creation_date, 'yyyy-MM-dd HH:mm:ss') END AS CREATION_DATE,  
    Isnull(CONVERT(VARCHAR(50), TMST.last_updated_by), '') AS LAST_UPDATED_BY,  
    Isnull(LMST.emp_full_name, '') UPDATED_BY_NAME,  
    CASE WHEN TMST.last_update_date IS NULL THEN  ''  ELSE  Format(TMST.last_update_date, 'yyyy-MM-dd HH:mm:ss') END AS LAST_UPDATE_DATE  
From TYPE_MST TMST INNER JOIN EMPLOYEE_MST EMST ON TMST.CREATED_BY = EMST.MKEY
LEFT JOIN EMPLOYEE_MST LMST ON TMST.LAST_UPDATED_BY = EMST.MKEY
where TYPE_CODE ='DURATION_FILTER' and TMST.DELETE_FLAG = 'N';
------------------------------------------------------------------------------------------
Go
CREATE View V_TASK_TYPE AS
Select  TMST.MKEY, tmst.TYPE_CODE, tmst.TYPE_DESC as 'Key'
, Case when tmst.TYPE_DESC = 'RECURRING' THEN 'Recurring' 
when tmst.TYPE_DESC = 'APPROVAL' THEN 'Approval' 
when tmst.TYPE_DESC = 'COMPLIANCE' THEN 'Compliance' 
when tmst.TYPE_DESC = 'APPROVAL' THEN 'APPROVAL' 
when tmst.TYPE_DESC = 'GENERAL' THEN 'General' 
when tmst.TYPE_DESC = 'SYSTEM' THEN 'System' 
when tmst.TYPE_DESC = 'EMAIL' THEN 'Email' 
when tmst.TYPE_DESC = 'RERA COMPLAIN' THEN 'Rera Complain' 
ELSE tmst.TYPE_DESC
END AS 'DisplayName'
 ,Isnull(CONVERT(VARCHAR(50), TMST.created_by), '') AS CREATED_BY_ID,  
    Isnull(CONVERT(VARCHAR(50), EMST.emp_full_name), '') AS CREATED_BY_NAME,  
    CASE  WHEN TMST.creation_date IS NULL THEN  ''  ELSE  Format(TMST.creation_date, 'yyyy-MM-dd HH:mm:ss') END AS CREATION_DATE,  
    Isnull(CONVERT(VARCHAR(50), TMST.last_updated_by), '') AS LAST_UPDATED_BY,  
    Isnull(LMST.emp_full_name, '') UPDATED_BY_NAME,  
    CASE WHEN TMST.last_update_date IS NULL THEN  ''  ELSE  Format(TMST.last_update_date, 'yyyy-MM-dd HH:mm:ss') END AS LAST_UPDATE_DATE  
From TYPE_MST TMST INNER JOIN EMPLOYEE_MST EMST ON TMST.CREATED_BY = EMST.MKEY
LEFT JOIN EMPLOYEE_MST LMST ON TMST.LAST_UPDATED_BY = EMST.MKEY
where TYPE_CODE ='TASK_TYPE' and TMST.DELETE_FLAG = 'N';



GO
--	exec SP_GET_TASK_DASHBOARD_FILTER 926,1
Create Procedure SP_GET_TASK_DASHBOARD_FILTER (@Session_User_Id          INT,  
@Business_Group_Id	  INT)
AS 
BEGIN
	Begin Try
	SELECT * FROM  V_USER_FILTER 
	SELECT * FROM  V_PRIORITY_FILTER 
	SELECT * FROM  V_DURATION_FILTER 
	SELECT * FROM  V_TASK_TYPE 
	End try
	 BEGIN CATCH
        -------------------------------------------------------------------------------------------------------------------------------            
        SELECT ERROR_NUMBER() AS ERRORNUMBER,
               ERROR_SEVERITY() AS ERRORSEVERITY,
               ERROR_STATE() AS ERRORSTATE,
               ERROR_PROCEDURE() AS ERRORPROCEDURE,
               ERROR_LINE() AS ERRORLINE,
               ERROR_MESSAGE() AS ERRORMESSAGE;
        -------------------------------------------------------------------------------------------------------------------------------  
        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
        SET @ERROR_MESSAGE = ERROR_MESSAGE();
        -------------------------------------------------------------------------------------------------------------------------------  
        EXEC SP_P_TMS_INSERT_ERROR_DES @Session_User_Id,
                                       'TMS',
                                       'Task Dashboard Filter',
                                       @ERROR_MESSAGE,
                                       'Get Task Dashboard Filter';
    -------------------------------------------------------------------------------------------------------------------------------  
    END CATCH

END
GO

-----------------------------------------------------------------------------------------------------------------------


--  EXEC SP_TASK_DASHBOARD_NT 926,null,'CANCELCLOSE,COMPLETEDFORME,ALLOCATEDBYME',null,null,926,1  
--  EXEC SP_TASK_DASHBOARD_NT 926,null,null  
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT',''  
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next 7 Days'  
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next 2 Weeks'  
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next Month'  
--  EXEC SP_TASK_DASHBOARD_NT 926,'ALLOCATEDBYME','Review'  
ALTER PROCEDURE [dbo].[SP_TASK_DASHBOARD_NT] (@CURRENT_EMP_MKEY INT,  
                                              --@FILTER           NVARCHAR(100),  
                                              @STATUS_FILTER     NVARCHAR(max) = NULL,--'Today,Completed,Overdue,Pending,Cancelled,Future,Review',  
             @USER_FILTER   VARCHAR(max) = null, --'ALLOCATEDBYME,ALLOCATEDTOME,COMPLETEDBYME,COMPLETEDFORME,CANCELCLOSE',  
             @PriorityFilter VARCHAR(max) = null,--'High,Medium,Low',  
             @TypeFilter VARCHAR(max) = null,--'RECURRING,APPROVAL,COMPLIANCE,APPROVAL,GENERAL,SYSTEM,EMAIL,RERA COMPLAIN';  
             @Session_User_Id          INT,    
             @Business_Group_Id   INT  
)  
AS  
  BEGIN  
   
      DECLARE @DAY INT  
     
      SET @DAY=0  
  
   --DECLARE @STATUS_FILTER VARCHAR(max) = null,-- 'Today,Completed,Overdue,Pending,Cancelled,Future,Review',  
   --     @USER_FILTER   VARCHAR(max) = null,--'ALLOCATEDBYME,ALLOCATEDTOME,COMPLETEDBYME,COMPLETEDFORME,CANCELCLOSE',  
   --     @PriorityFilter VARCHAR(max) = null,--'High,Medium,Low',  
   --     @TypeFilter VARCHAR(max) = null--'RECURRING,APPROVAL,COMPLIANCE,APPROVAL,GENERAL,SYSTEM,EMAIL,RERA COMPLAIN';  
  
   DECLARE @sql  NVARCHAR(max) = '';  
   DECLARE @start INT = 1,  
     @end   INT;  
   DECLARE @hasWhereClause BIT = 0;   
   DECLARE @WhereClause NVARCHAR(max) = '',  
   @filter VARCHAR(100),  
   @PriorityClause NVARCHAR(max) = '',  
   @TypeClause  NVARCHAR(max) = '',   
   @TaskTypeMkey nvarchar(50),  
   @STATUSClause  NVARCHAR(max) = ''  
  
  SET @sql = 'SELECT T_HDR.mkey,  
                   Isnull(TMST.type_desc, ''NA'') CATEGORY,  
                   T_HDR.task_no,  
                   dbo.[Initcap](Isnull(CREATOR.emp_full_name, ''NA'')) CREATOR,  
                   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, ''NA'')) RESPONSIBLE,  
                   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, ''NA'')) ACTIONABLE,  
                   T_HDR.creation_date,  
                   CASE  
                     WHEN T_HDR.status IN ( ''CREATED'' ) THEN ''Not Started''  
                     WHEN T_HDR.status LIKE ''%SUB TASK CREATED%'' THEN ''Not Started''  
                     WHEN T_HDR.status LIKE ''%SUBTASK CREATED%'' THEN ''Not Started''  
                     WHEN T_HDR.status IN ( ''WORK IN PROGRESS'', ''CLOSE INITIATED'', ''CANCEL INITIATED'', ''RE-WORK'' ) THEN ''In Progress''  
                     WHEN T_HDR.status IN ( ''CLOSE'', ''COMPLETED'' ) THEN ''Completed''  
                     ELSE ''Others''  
                   END AS Dashboard_Status,  
                   CONVERT(VARCHAR, T_HDR.completion_date, 103) AS COMPLETION_DATE,  
                   dbo.[Initcap](T_HDR.task_name) AS TASK_NAME,  
                   T_HDR.task_description,  
                   T_HDR.tags,  
                   dbo.[Initcap](T_HDR.status) AS STATUS,  
                   CASE  
                     WHEN Isnull(CREATOR.first_name, ''NA'') != Isnull(RESPONSIBLE.first_name, ''NA'') THEN dbo.[Initcap](Isnull(CREATOR.first_name, ''NA'')) + '' > '' + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, ''NA''))  
                     ELSE dbo.[Initcap](Isnull(CREATOR.first_name, ''NA''))  
                   END AS RESPONSIBLE_TAG,  
                   dbo.[Initcap](Isnull(PMST.type_desc, '''')) AS PROJECT_NAME,  
                   dbo.Tasknamestring(T_HDR.mkey) AS TASK_HISTORY,  
                   Isnull(Rtrim(T_HDR.[priority]), '''') AS [Priority],  
                   Isnull(T_HDR.percent_complete, ''0'') AS Progress_Percentage,  
                   Isnull(parent_counts.parenttaskcount, 0) AS SubTask_Count,  
                   T_HDR.CREATED_BY  
            FROM task_hdr T_HDR  
            LEFT JOIN employee_mst CREATOR ON CREATOR.mkey = T_HDR.created_by AND CREATOR.delete_flag = ''N''  
            LEFT JOIN employee_mst RESPONSIBLE ON RESPONSIBLE.mkey = T_HDR.assigned_to AND RESPONSIBLE.delete_flag = ''N''  
            LEFT JOIN employee_mst ACTIONABLE ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey AND ACTIONABLE.delete_flag = ''N''  
            LEFT JOIN type_mst TMST ON TMST.master_mkey = T_HDR.caregory AND TMST.type_code = ''CATEGORY'' AND TMST.delete_flag = ''N''  
            LEFT JOIN type_mst PMST ON PMST.master_mkey = T_HDR.project_id AND PMST.type_code = ''PROJECT'' AND PMST.delete_flag = ''N''  
            LEFT JOIN (SELECT task_parent_id, Count(*) AS ParentTaskCount  
                       FROM task_hdr WHERE task_parent_id IS NOT NULL AND mkey NOT IN (task_parent_id) AND delete_flag = ''N''  
                       GROUP BY task_parent_id) parent_counts ON T_HDR.mkey = parent_counts.task_parent_id  
            WHERE Isnull(T_HDR.status_flag, ''A'') IN (''A'') AND T_HDR.delete_flag = ''N'' ';  
      
   /* @USER_FILTER */  
  IF (  @USER_FILTER <> '' and @USER_FILTER is not null ) -- @USER_FILTER is not null OR  
  Begin  
   WHILE @start <= Len(@USER_FILTER)  
   BEGIN  
     
    SET @end = CHARINDEX(',', @USER_FILTER, @start);  
    IF @end = 0  
     SET @end = Len(@USER_FILTER) + 1;  
     SET @filter = LTRIM(RTRIM(SUBSTRING(@USER_FILTER, @start, @end - @start)));  
  
    IF @filter = 'ALLOCATEDBYME'   
    BEGIN  
     IF @hasWhereClause = 0  
     BEGIN  
      
      --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';  
      SET @WhereClause += ' ( T_HDR.created_by = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' )';  
      SET @hasWhereClause = 1;  
     END  
     ELSE  
     Begin  
      SET @sql += ' OR ( T_HDR.created_by = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' ) ';  
     end  
    END  
  
    IF @filter = 'ALLOCATEDTOME'  
    BEGIN  
      
     IF @hasWhereClause = 0  
     BEGIN  
     print 'ALLOCATEDTOME1'  
      SET @WhereClause += ' ( CONVERT(int,T_HDR.assigned_to) = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ')';  
      --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';  
      SET @hasWhereClause = 1;  
        
     END  
     ELSE  
      --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';  
      SET @WhereClause += ' OR ( CONVERT(int,T_HDR.assigned_to) = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ')';  
    END  
  
    IF @filter = 'COMPLETEDBYME'  
    BEGIN  
     IF @hasWhereClause = 0  
     BEGIN  
      SET @WhereClause += ' ( CONVERT(int,T_HDR.assigned_to) = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''COMPLETED''))';  
      --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';  
      SET @hasWhereClause = 1;  
     END  
     ELSE  
      --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';  
      SET @WhereClause += ' OR ( CONVERT(int,T_HDR.assigned_to) = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''COMPLETED''))';  
    END  
  
    IF @filter = 'COMPLETEDFORME'  
    BEGIN  
     IF @hasWhereClause = 0  
     BEGIN  
      --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';  
      SET @WhereClause += ' ( T_HDR.created_by = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND CONVERT(int,T_HDR.assigned_to) != ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''COMPLETED''))';  
      SET @hasWhereClause = 1;  
     END       ELSE  
      --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';  
      SET @WhereClause += ' OR ( T_HDR.created_by = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND CONVERT(int,T_HDR.assigned_to) != ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''COMPLETED''))';  
    END  
  
    IF @filter = 'CANCELCLOSE'  
    BEGIN  
     IF @hasWhereClause = 0  
     BEGIN  
      SET @WhereClause += ' ( T_HDR.created_by = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))'; --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', '
'CANCELLED'')  
      --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';  
      SET @hasWhereClause = 1;  
     END  
     ELSE  
      --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';  
      SET @WhereClause += ' OR ( T_HDR.created_by = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'') ) '; --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL
'', ''CANCELLED'')  
    END  
      
    
    SET @start = @end   
    + 1;  
   END  
     
     
   SET @sql += ' AND ( ' + @WhereClause + ' ) ';  
   print '@WhereClause'+ @sql   
  End  
-----------------------------------------------------------------------------------------------------  
  /* @PriorityFilter */  
  IF ( @PriorityFilter is not null and @PriorityFilter <> '')  
  Begin  
   SET @start = 1;  
   SET @hasWhereClause = 0;  
   WHILE @start <= Len(@PriorityFilter)  
   BEGIN  
    SET @end = CHARINDEX(',', @PriorityFilter, @start);  
    IF @end = 0  
     SET @end = Len(@PriorityFilter) + 1;  
  
    SET @filter = LTRIM(RTRIM(SUBSTRING(@PriorityFilter, @start, @end - @start)));  
  
    -- Append the priority condition  
    IF @filter = 'High'  
    BEGIN  
     IF @hasWhereClause = 0  
     BEGIN  
      --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';  
      SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';  
      SET @hasWhereClause = 1;  
     END  
     ELSE  
      --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';  
      SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';  
    END  
  
    IF @filter = 'Low'  
    BEGIN  
     IF @hasWhereClause = 0  
     BEGIN  
      --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';  
      SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';  
      SET @hasWhereClause = 1;  
     END  
     ELSE  
      --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';  
      SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';  
    END  
  
    IF @filter = 'Medium'  
    BEGIN  
     IF @hasWhereClause = 0  
     BEGIN  
      --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';  
      SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';  
      SET @hasWhereClause = 1;  
     END  
     ELSE  
      --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';  
      SET @PriorityClause += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';  
    END  
  
    SET @start = @end + 1;  
   END  
   SET @sql += ' AND ( ' + @PriorityClause + ' ) ';  
  END  
-----------------------------------------------------------------------------------------------------    
  /* @TypeFilter */  
  IF ( @TypeFilter is not null and @TypeFilter <> '')  
  Begin  
   SET @start = 1;  
   SET @hasWhereClause = 0;  
   WHILE @start <= Len(@TypeFilter)  
   BEGIN  
    SET @end = CHARINDEX(',', @TypeFilter, @start);  
    IF @end = 0  
     SET @end = Len(@TypeFilter) + 1;  
     SET @filter = LTRIM(RTRIM(SUBSTRING(@TypeFilter, @start, @end - @start)));  
      
     IF @filter = 'RECURRING'  
    BEGIN  
     select @TaskTypeMkey = MASTER_MKEY from TYPE_MST where TYPE_CODE = 'TASK_TYPE' and TYPE_DESC = @filter  
     IF @hasWhereClause = 0  
     BEGIN  
      SET @TypeClause += ' (TASK_TYPE = '+ @TaskTypeMkey +') ';  
      SET @hasWhereClause = 1;  
     END  
    ELSE  
     SET @TypeClause += ' OR (TASK_TYPE = '+ @TaskTypeMkey +') ';  
    END  
  
    IF @filter = 'Approval'  
    BEGIN  
     select @TaskTypeMkey = MASTER_MKEY from TYPE_MST where TYPE_CODE = 'TASK_TYPE' and TYPE_DESC = @filter  
     IF @hasWhereClause = 0  
     BEGIN  
      SET @TypeClause += ' (TASK_TYPE = '+ @TaskTypeMkey +') ';  
      SET @hasWhereClause = 1;  
     END  
    ELSE  
     SET @TypeClause += ' OR (TASK_TYPE = '+ @TaskTypeMkey +') ';  
    END  
  
    IF @filter = 'COMPLIANCE'  
    BEGIN  
     select @TaskTypeMkey = MASTER_MKEY from TYPE_MST where TYPE_CODE = 'TASK_TYPE' and TYPE_DESC = @filter  
     IF @hasWhereClause = 0  
     BEGIN  
      SET @TypeClause += ' (TASK_TYPE = '+ @TaskTypeMkey +') ';  
      SET @hasWhereClause = 1;  
     END  
    ELSE  
     SET @TypeClause += ' OR (TASK_TYPE = '+ @TaskTypeMkey +') ';  
    END  
  
    IF @filter = 'GENERAL'  
    BEGIN  
     select @TaskTypeMkey = MASTER_MKEY from TYPE_MST where TYPE_CODE = 'TASK_TYPE' and TYPE_DESC = @filter  
     IF @hasWhereClause = 0  
     BEGIN  
      SET @TypeClause += ' (TASK_TYPE = '+ @TaskTypeMkey +') ';  
      SET @hasWhereClause = 1;  
     END  
    ELSE  
     SET @TypeClause += ' OR (TASK_TYPE = '+ @TaskTypeMkey +') ';  
    END  
  
    IF @filter = 'SYSTEM'  
    BEGIN  
     select @TaskTypeMkey = MASTER_MKEY from TYPE_MST where TYPE_CODE = 'TASK_TYPE' and TYPE_DESC = @filter  
     IF @hasWhereClause = 0  
     BEGIN  
      SET @TypeClause += ' (TASK_TYPE = '+ @TaskTypeMkey +') ';  
      SET @hasWhereClause = 1;  
     END  
    ELSE  
     SET @TypeClause += ' OR (TASK_TYPE = '+ @TaskTypeMkey +') ';  
    END  
  
    IF @filter = 'Email'  
    BEGIN  
     select @TaskTypeMkey = MASTER_MKEY from TYPE_MST where TYPE_CODE = 'TASK_TYPE' and TYPE_DESC = @filter  
     IF @hasWhereClause = 0  
     BEGIN  
      SET @TypeClause += ' (TASK_TYPE = '+ @TaskTypeMkey +') ';  
      SET @hasWhereClause = 1;  
     END  
    ELSE  
     SET @TypeClause += ' OR (TASK_TYPE = '+ @TaskTypeMkey +') ';  
    END  
     
    IF @filter = 'RERA COMPLAIN'  
    BEGIN  
     select @TaskTypeMkey = MASTER_MKEY from TYPE_MST where TYPE_CODE = 'TASK_TYPE' and TYPE_DESC = @filter  
     IF @hasWhereClause = 0  
     BEGIN  
      SET @TypeClause += ' (TASK_TYPE = '+ @TaskTypeMkey +') ';  
      SET @hasWhereClause = 1;  
     END  
    ELSE  
     SET @TypeClause += ' OR (TASK_TYPE = '+ @TaskTypeMkey +') ';  
    END  
      
     SET @start = @end + 1;  
   End  
   SET @sql += ' AND ( ' + @TypeClause + ' ) ';  
  END  
-----------------------------------------------------------------------------------------------------  
  /* @STATUS_FILTER */  
  IF ( @STATUS_FILTER is not null and @STATUS_FILTER <> '')  
  Begin  
   SET @start = 1;  
   SET @hasWhereClause = 0;  
   WHILE @start <= Len(@STATUS_FILTER)  
   BEGIN  
    SET @end = CHARINDEX(',', @STATUS_FILTER, @start);  
    IF @end = 0  
     SET @end = Len(@STATUS_FILTER) + 1;  
     SET @filter = LTRIM(RTRIM(SUBSTRING(@STATUS_FILTER, @start, @end - @start)));  
      
    IF @filter = 'Today'  
    BEGIN  
     IF @hasWhereClause = 0  
     BEGIN  
      SET @STATUSClause += ' (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)  
      AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';  
       
      SET @hasWhereClause = 1;  
     END  
    ELSE  
     SET @STATUSClause += ' OR (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)  
      AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';  
    END  
  
    IF @filter = 'Pending'  
    BEGIN  
     IF @hasWhereClause = 0  
     BEGIN  
      SET @STATUSClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE()   
           and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';  
      SET @hasWhereClause = 1;  
     END  
    ELSE  
     SET @STATUSClause += ' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE()   
           and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';  
    END  
  
    IF @filter = 'Overdue'  
    BEGIN  
     IF @hasWhereClause = 0  
     BEGIN  
      SET @STATUSClause += ' (T_HDR.completion_date < GETDATE() AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';  
      SET @hasWhereClause = 1;  
     END  
    ELSE  
     SET @STATUSClause += ' OR (T_HDR.completion_date < GETDATE() AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';  
    END  
  
  
    IF @filter = 'Future'  
    BEGIN  
     IF @hasWhereClause = 0  
     BEGIN  
      SET @STATUSClause += ' (T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated''))   
            and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';  
      SET @hasWhereClause = 1;  
     END  
    ELSE  
     SET @STATUSClause += ' OR ((T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated''))   
            and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103)) ';  
    END  
  
    IF @filter = 'Review'  
    BEGIN  
     IF @hasWhereClause = 0  
     BEGIN  
      SET @STATUSClause += ' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';  
      SET @hasWhereClause = 1;  
     END  
    ELSE  
     SET @STATUSClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';  
    END  
  
  
    IF @filter = 'Completed'  
    BEGIN  
     IF @hasWhereClause = 0  
     BEGIN  
      SET @STATUSClause += ' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';  
      SET @hasWhereClause = 1;  
     END  
    ELSE  
     SET @TypeClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';  
    END  
  
    IF @filter = 'Cancelled'  
    BEGIN  
     IF @hasWhereClause = 0  
     BEGIN  
      SET @STATUSClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';  
      SET @hasWhereClause = 1;  
     END  
    ELSE  
     SET @STATUSClause += ' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';  
    END  
     
    SET @start = @end + 1;  
   End  
   SET @sql += ' AND ( ' + @STATUSClause + ' ) ';  
  END  
--  print @sql  
  --print len(@sql)  
EXEC Sp_executesql @sql;  
  
  
  
  --    IF( @FILTER = NULL OR @FILTER = '' OR @FILTER = 'DEFAULT' )  
  --      BEGIN   
  --print '@FILTER = DEFAULT '  
  --          SELECT T_HDR.mkey,  
  --                 Isnull(TMST.type_desc, 'NA')  
  --                 CATEGORY  
  --                 ,  
  --                 T_HDR.task_no,  
  --                 dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))  
  --                 CREATOR,  
  --                 dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))  
  --                 RESPONSIBLE,  
  --                 dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))  
  --                 ACTIONABLE,  
  --                 T_HDR.creation_date,  
  --                 CASE  
  --                   WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'  
  --                   WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN  
  --                   'Not Started'  
  --                   WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN  
  --                   'Not Started'  
  --                   WHEN T_HDR.status IN ( 'WORK IN PROGRESS',  
  --                                          'CLOSE INITIATED',  
  --                                          'CANCEL INITIATED',  
  --                                          'RE-WORK' ) THEN 'In Progress'  
  --                   WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN  
  --                   'Completed'  
  --                   ELSE 'Others'  
  --                 END                                       AS  
  --                 Dashboard_Status,  
  --                 CONVERT(VARCHAR, T_HDR.completion_date, 103)  
  --                 COMPLETION_DATE,  
  --                 dbo.[Initcap](T_HDR.task_name)  
  --                 TASK_NAME,  
  --                 T_HDR.task_description,  
  --                 T_HDR.tags,  
  --                 dbo.[Initcap](T_HDR.status)                            STATUS  
  --                 ,  
  --                 CASE  
  --                   WHEN Isnull(CREATOR.first_name, 'NA') !=  
  --                        Isnull(RESPONSIBLE.first_name, 'NA')  
  --                 THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))  
  --                 + ' > '  
  --                 + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA') )  
  --                   ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))  
  --                 END  
  --                 RESPONSIBLE_TAG,  
  --                 dbo.[Initcap](Isnull(PMST.type_desc, ''))  
  --                 PROJECT_NAME  
  --                 ,  
  --                 dbo.Tasknamestring(T_HDR.mkey)  
  --                 AS  
  --                 'TASK_HISTORY',  
  --                 Isnull(Rtrim(T_HDR.[priority]), '')                    AS  
  --                 [Priority],  
  --                 Isnull(T_HDR.percent_complete, '0')                    AS  
  --                 Progress_Percentage,  
  --                 Isnull(parent_counts.parenttaskcount, 0)               AS  
  --                 SubTask_Count,  
  --     T_HDR.CREATED_BY   
  --          FROM   task_hdr T_HDR  
  --                 LEFT JOIN employee_mst CREATOR  
  --                        ON CREATOR.mkey = T_HDR.created_by  
  --                           AND CREATOR.delete_flag = 'N'  
  --                 LEFT JOIN employee_mst RESPONSIBLE  
  --                        ON RESPONSIBLE.mkey = T_HDR.assigned_to  
  --                           AND RESPONSIBLE.delete_flag = 'N'  
  --                 LEFT JOIN employee_mst ACTIONABLE  
  --                        ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey  
  --                           AND ACTIONABLE.delete_flag = 'N'  
  --                 --LEFT JOIN v_category CATEGORY  
  --                 --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'  
  --                 LEFT JOIN type_mst TMST  
  --                        ON TMST.master_mkey = T_HDR.caregory  
  --                           AND TMST.type_code = 'CATEGORY'  
  --                           AND TMST.delete_flag = 'N'  
  --                 --LEFT JOIN v_project PROJ  
  --                 --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N'   
  --                 LEFT JOIN type_mst PMST  
  --                        ON PMST.master_mkey = T_HDR.project_id  
  --                           AND PMST.type_code = 'PROJECT'  
  --                           AND PMST.delete_flag = 'N'  
  --                 LEFT JOIN (SELECT task_parent_id,  
  --                                   Count(*) AS ParentTaskCount  
  --                            FROM   task_hdr  
  --                            WHERE  task_parent_id IS NOT NULL  
  --                                   AND mkey NOT IN ( task_parent_id )  
  --                                   AND delete_flag = 'N'  
  --                            GROUP  BY task_parent_id) parent_counts  
  --                        ON T_HDR.mkey = parent_counts.task_parent_id  
  --          WHERE  (  
  --                 --T_HDR.Created_by=@CURRENT_EMP_MKEY    
  --                 --OR    
  --                 --T_HDR.ASSIGNED_TO=@CURRENT_EMP_MKEY    
  --                 --OR    
  --                 --T_HDR.RESPOSIBLE_EMP_MKEY=@CURRENT_EMP_MKEY    
  --                 --T_HDR.ASSIGNED_TO=@CURRENT_EMP_MKEY    
  --                 --OR    
  --                 T_HDR.resposible_emp_mkey = @CURRENT_EMP_MKEY OR T_HDR.TASK_CREATED_BY = @CURRENT_EMP_MKEY )  
  --                 AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED', 'Cancel')  
  --                 AND Isnull(T_HDR.status_flag, 'A') IN ( 'A' )  
  --                 AND T_HDR.delete_flag = 'N'  
  --   --   And CASE  
  --   -- WHEN @STATUS_FILTER    = 'Today' and @STATUS_FILTER    IS NULL THEN   
  --   --  CASE WHEN CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) THEN 1 ELSE 0 END  
          
  --   -- WHEN @STATUS_FILTER    = 'Overdue' THEN   
  --   --  CASE WHEN T_HDR.completion_date < GETDATE() THEN 1 ELSE 0 END  
          
  --   -- WHEN @STATUS_FILTER    = 'Next 3 Days' THEN   
  --   --  CASE WHEN T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 3, GETDATE()) THEN 1 ELSE 0 END  
          
  --   -- WHEN @STATUS_FILTER    = 'Next 7 Days' THEN   
  --   --  CASE WHEN T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE()) THEN 1 ELSE 0 END  
          
  --   -- WHEN @STATUS_FILTER    = 'Next 2 Weeks' THEN   
  --   --  CASE WHEN T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(WEEK, 2, GETDATE()) THEN 1 ELSE 0 END  
          
  --   -- WHEN @STATUS_FILTER    = 'Next Month' THEN   
  --   --  CASE WHEN T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(MONTH, 1, GETDATE()) THEN 1 ELSE 0 END  
          
  --   -- WHEN @STATUS_FILTER    = 'Review' THEN   
  --   --  CASE WHEN T_HDR.status IN ( 'CANCEL INITIATED', 'CLOSE INITIATED' ) THEN 1 ELSE 0 END  
          
  --   -- WHEN @STATUS_FILTER    IS NULL THEN   
  --   --  CASE WHEN CONVERT(VARCHAR, T_HDR.completion_date, 103) = 'S' THEN 1 ELSE 0 END  
          
  --   -- ELSE 0  -- If none of the conditions match, return false  
  --   --END = 1  
  --          ORDER  BY creation_date DESC  
  --      END  
  
  --    IF( @FILTER = 'ALLOCATEDBYME' )  
  --      BEGIN  
  --  SELECT T_HDR.mkey,  
  --                 Isnull(TMST.type_desc, 'NA')  
  --                 CATEGORY  
  --                 ,  
  --                 T_HDR.task_no,  
  --                 dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))  
  --                 CREATOR,  
  --                 dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))  
  --                 RESPONSIBLE,  
  --                 dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))  
  --                 ACTIONABLE,  
  --                 T_HDR.creation_date,  
  --                 CASE  
  --                   WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'  
  --                   WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN  
  --                   'Not Started'  
  --                   WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN  
  --                   'Not Started'  
  --                   WHEN T_HDR.status IN ( 'WORK IN PROGRESS',  
  --                                          'CLOSE INITIATED',  
  --                                          'CANCEL INITIATED',  
  --                                          'RE-WORK' ) THEN 'In Progress'  
  --                   WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN  
  --                   'Completed'  
  --                   ELSE 'Others'  
  --                 END                                                    AS  
  --                 Dashboard_Status,  
  --                 CONVERT(VARCHAR, T_HDR.completion_date, 103)           AS  
  --                 COMPLETION_DATE  
  --                 ,  
  --                 dbo.[Initcap](T_HDR.task_name)                         AS  
  --                 TASK_NAME,  
  --                 T_HDR.task_description,  
  --                 T_HDR.tags,  
  --                 dbo.[Initcap](T_HDR.status)                            AS  
  --                 STATUS,  
  --                 CASE  
  --                   WHEN Isnull(CREATOR.first_name, 'NA') !=  
  --                        Isnull(RESPONSIBLE.first_name, 'NA')  
  --                 THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))  
  --                 + ' > '  
  --                 + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA'))  
  --                   ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))  
  --                 END                                                    AS  
  --                 RESPONSIBLE_TAG  
  --                 ,  
  --                 dbo.[Initcap](Isnull(PMST.type_desc, ''))              AS  
  --                 PROJECT_NAME,  
  --                 dbo.Tasknamestring(T_HDR.mkey)                         AS  
  --                 TASK_HISTORY,  
  --                 Isnull(Rtrim(T_HDR.[priority]), '')                    AS  
  --                 [Priority],  
  --                 Isnull(T_HDR.percent_complete, '0')                    AS  
  --                 Progress_Percentage,  
  --                 Isnull(parent_counts.parenttaskcount, 0)               AS  
  --                 SubTask_Count,  
  --     T_HDR.CREATED_BY  
  --          FROM   task_hdr T_HDR  
  --                 LEFT JOIN employee_mst CREATOR  
  --                        ON CREATOR.mkey = T_HDR.created_by  
  --                           AND CREATOR.delete_flag = 'N'  
  --                 LEFT JOIN employee_mst RESPONSIBLE  
  --                        ON RESPONSIBLE.mkey = T_HDR.assigned_to  
  --                           AND RESPONSIBLE.delete_flag = 'N'  
  --                 LEFT JOIN employee_mst ACTIONABLE  
  --                        ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey  
  --                           AND ACTIONABLE.delete_flag = 'N'  
  --                 --LEFT JOIN v_category CATEGORY  
  --                 --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'  
  --                 LEFT JOIN type_mst TMST  
  --                        ON TMST.master_mkey = T_HDR.caregory  
  --                           AND TMST.type_code = 'CATEGORY'  
  --                           AND TMST.delete_flag = 'N'  
  --                 --LEFT JOIN v_project PROJ  
  --                 --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N'   
  --                 LEFT JOIN type_mst PMST  
  --                        ON PMST.master_mkey = T_HDR.project_id  
  --                           AND PMST.type_code = 'PROJECT'  
  --                           AND PMST.delete_flag = 'N'  
  --                 LEFT JOIN (SELECT task_parent_id,  
  --                                   Count(*) AS ParentTaskCount  
  --                            FROM   task_hdr  
  --                            WHERE  task_parent_id IS NOT NULL  
  --                                   AND mkey NOT IN ( task_parent_id )  
  --                                   AND delete_flag = 'N'  
  --                            GROUP  BY task_parent_id) parent_counts  
  --                        ON T_HDR.mkey = parent_counts.task_parent_id  
  --          WHERE  ( T_HDR.created_by = @CURRENT_EMP_MKEY )  
  --                 --AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED', 'Cancel')  
  --                 AND Isnull(T_HDR.status_flag, 'A') IN ( 'A' )  
  --                 AND T_HDR.delete_flag = 'N'  
  --     AND (  
  --   @STATUS_FILTER    IS NULL  
  --   OR (  
  --     (@STATUS_FILTER    = 'Today' AND CONVERT(DATE, T_HDR.completion_date) = CONVERT(DATE, GETDATE())  
  --     AND T_HDR.status not IN ('CANCEL', 'COMPLETED','CANCELLED'))  
  --     OR (@STATUS_FILTER    = 'Overdue' AND T_HDR.completion_date < GETDATE() AND T_HDR.status not IN ('CANCEL', 'COMPLETED','CANCELLED'))  
  --     OR (@STATUS_FILTER    = 'Pending' AND STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() and T_HDR.status IN ('CREATED', 'SUB TASK CREATED','WORK IN PROGRESS','RE-WORK'))  
  --     OR (@STATUS_FILTER    = 'Completed' AND T_HDR.status IN ('COMPLETED') AND STATUS_PERC = 100)  
  --     OR (@STATUS_FILTER    = 'Cancelled' AND T_HDR.status IN ('CANCEL', 'CANCELLED'))  
  --    )  
  --   )  
  --          ORDER  BY creation_date DESC;  
  --      END  
  
  --    IF( @FILTER = 'ALLOCATEDTOME' )  
  --      BEGIN  
  --          SELECT T_HDR.mkey,  
  --                 Isnull(TMST.type_desc, 'NA')  
  --                 CATEGORY  
  --                 ,  
  --                 T_HDR.task_no,  
  --                 dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))  
  --                 CREATOR,  
  --                 dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))  
  --                 RESPONSIBLE,  
  --                 dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))  
  --                 ACTIONABLE,  
  --                 T_HDR.creation_date,  
  --                 CASE  
  --                   WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'  
  --                   WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN  
  --                   'Not Started'  
  --                   WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN  
  --                   'Not Started'  
  --                   WHEN T_HDR.status IN ( 'WORK IN PROGRESS',  
  --                                          'CLOSE INITIATED',  
  --                                          'CANCEL INITIATED',  
  --                                          'RE-WORK' ) THEN 'In Progress'  
  --                   WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN  
  --                   'Completed'  
  --                   ELSE 'Others'  
  --                 END                                                    AS  
  --                 Dashboard_Status,  
  --                 CONVERT(VARCHAR, T_HDR.completion_date, 103)           AS  
  --                 COMPLETION_DATE  
  --                 ,  
  --                 dbo.[Initcap](T_HDR.task_name)                         AS  
  --                 TASK_NAME,  
  --                 T_HDR.task_description,  
  --                 T_HDR.tags,  
  --                 dbo.[Initcap](T_HDR.status)                            AS  
  --                 STATUS,  
  --                 CASE  
  --                   WHEN Isnull(CREATOR.first_name, 'NA') !=  
  --                        Isnull(RESPONSIBLE.first_name, 'NA')  
  --                 THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))  
  --                 + ' > '  
  --                 + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA'))  
  --                   ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))  
  --                 END                                                    AS  
  --                 RESPONSIBLE_TAG  
  --                 ,  
  --                 dbo.[Initcap](Isnull(PMST.type_desc, ''))              AS  
  --                 PROJECT_NAME,  
  --                 dbo.Tasknamestring(T_HDR.mkey)                         AS  
  --                 TASK_HISTORY,  
  --                 Isnull(Rtrim(T_HDR.[priority]), '')                    AS  
  --                 [Priority],  
  --                 Isnull(T_HDR.percent_complete, '0')                    AS  
  --                 Progress_Percentage,  
  --                 Isnull(parent_counts.parenttaskcount, 0)               AS  
  --                 SubTask_Count,  
  --     T_HDR.CREATED_BY  
  --          FROM   task_hdr T_HDR  
  --                 LEFT JOIN employee_mst CREATOR  
  --                        ON CREATOR.mkey = T_HDR.created_by  
  --                           AND CREATOR.delete_flag = 'N'  
  --                 LEFT JOIN employee_mst RESPONSIBLE  
  --                        ON RESPONSIBLE.mkey = T_HDR.assigned_to  
  --                           AND RESPONSIBLE.delete_flag = 'N'  
  --                 LEFT JOIN employee_mst ACTIONABLE  
  --                        ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey  
  --                           AND ACTIONABLE.delete_flag = 'N'  
  --                 --LEFT JOIN v_category CATEGORY  
  --                 --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'  
  --                 LEFT JOIN type_mst TMST  
  --                        ON TMST.master_mkey = T_HDR.caregory  
  --                           AND TMST.type_code = 'CATEGORY'  
  --                           AND TMST.delete_flag = 'N'  
  --                 --LEFT JOIN v_project PROJ  
  --                 --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N'   
  --                 LEFT JOIN type_mst PMST  
  --                        ON PMST.master_mkey = T_HDR.project_id  
  --                           AND PMST.type_code = 'PROJECT'  
  --                           AND PMST.delete_flag = 'N'  
  --                 LEFT JOIN (SELECT task_parent_id,  
  --                                   Count(*) AS ParentTaskCount  
  --                            FROM   task_hdr  
  --                            WHERE  task_parent_id IS NOT NULL  
  --                                   AND mkey NOT IN ( task_parent_id )  
  --                                   AND delete_flag = 'N'  
  --                            GROUP  BY task_parent_id) parent_counts  
  --                        ON T_HDR.mkey = parent_counts.task_parent_id  
  --          WHERE  ( T_HDR.assigned_to = @CURRENT_EMP_MKEY  
  --                    OR T_HDR.resposible_emp_mkey = @CURRENT_EMP_MKEY )  
  --                 AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED', 'Cancel')  
  --                 AND Isnull(T_HDR.status_flag, 'A') IN ( 'A' )  
  --                 AND T_HDR.delete_flag = 'N'  
  --     AND (  
  --    @STATUS_FILTER    IS NULL  
  --    OR (  
  --      (@STATUS_FILTER    = 'Today' AND CONVERT(DATE, T_HDR.completion_date) = CONVERT(DATE, GETDATE()))  
  --      OR (@STATUS_FILTER    = 'Overdue' AND T_HDR.completion_date < GETDATE())  
  --      OR (@STATUS_FILTER    = 'Next 3 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 3, GETDATE()))  
  --      OR (@STATUS_FILTER    = 'Next 7 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE()))  
  --      OR (@STATUS_FILTER    = 'Next 2 Weeks' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 14, GETDATE()))  
  --      OR (@STATUS_FILTER    = 'Next Month' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(MONTH, 1, GETDATE()))  
  --      OR (@STATUS_FILTER    = 'Review' AND T_HDR.status IN ('CANCEL INITIATED', 'CLOSE INITIATED'))  
  --     )  
  --    )  
  --          ORDER  BY creation_date DESC;  
  --      END  
  
  --    IF( @FILTER = 'COMPLETEDBYME' )  
  --      BEGIN  
  --          SELECT T_HDR.mkey,  
  --                 Isnull(TMST.type_desc, 'NA')  
  --                 CATEGORY  
  --                 ,  
  --                 T_HDR.task_no,  
  --                 dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))  
  --                 CREATOR,  
  --                 dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))  
  --                 RESPONSIBLE,  
  --                 dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))  
  --                 ACTIONABLE,  
  --                 T_HDR.creation_date,  
  --                 CASE  
  --                   WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'  
  --                   WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN  
  --                   'Not Started'  
  --                   WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN  
  --                   'Not Started'  
  --                   WHEN T_HDR.status IN ( 'WORK IN PROGRESS',  
  --                                          'CLOSE INITIATED',  
  --                                          'CANCEL INITIATED',  
  --                                          'RE-WORK' ) THEN 'In Progress'  
  --                   WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN  
  --                   'Completed'  
  --                   ELSE 'Others'  
  --                 END                                                    AS  
  --                 Dashboard_Status,  
  --                 CONVERT(VARCHAR, T_HDR.completion_date, 103)           AS  
  --                 COMPLETION_DATE  
  --                 ,  
  --                 dbo.[Initcap](T_HDR.task_name)                         AS  
  --                 TASK_NAME,  
  --                 T_HDR.task_description,  
  --                 T_HDR.tags,  
  --                 dbo.[Initcap](T_HDR.status)                            AS  
  --                 STATUS,  
  --                 CASE  
  --                   WHEN Isnull(CREATOR.first_name, 'NA') !=  
  --                        Isnull(RESPONSIBLE.first_name, 'NA')  
  --                 THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))  
  --                 + ' > '  
  --                 + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA'))  
  --                   ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))  
  --                 END                                                    AS  
  --                 RESPONSIBLE_TAG  
  --                 ,  
  --                 dbo.[Initcap](Isnull(PMST.type_desc, ''))              AS  
  --                 PROJECT_NAME,  
  --                 dbo.Tasknamestring(T_HDR.mkey)                         AS  
  --                 TASK_HISTORY,  
  --                 Isnull(Rtrim(T_HDR.[priority]), '')                    AS  
  --                 [Priority],  
  --                 Isnull(T_HDR.percent_complete, '0')                    AS  
  --                 Progress_Percentage,  
  --                 Isnull(parent_counts.parenttaskcount, 0)               AS  
  --                 SubTask_Count,  
  --     T_HDR.CREATED_BY  
  --          FROM   task_hdr T_HDR  
  --                 LEFT JOIN employee_mst CREATOR  
  --                        ON CREATOR.mkey = T_HDR.created_by  
  --                           AND CREATOR.delete_flag = 'N'  
  --                 LEFT JOIN employee_mst RESPONSIBLE  
  --                        ON RESPONSIBLE.mkey = T_HDR.assigned_to  
  --                           AND RESPONSIBLE.delete_flag = 'N'  
  --                 LEFT JOIN employee_mst ACTIONABLE  
  --                        ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey  
  --                           AND ACTIONABLE.delete_flag = 'N'  
  --                 --LEFT JOIN v_category CATEGORY  
  --                 --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'  
  --                 LEFT JOIN type_mst TMST  
  --                        ON TMST.master_mkey = T_HDR.caregory  
  --                           AND TMST.type_code = 'CATEGORY'  
  --                           AND TMST.delete_flag = 'N'  
  --                 --LEFT JOIN v_project PROJ  
  --                 --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N'   
  --                 LEFT JOIN type_mst PMST  
  --                        ON PMST.master_mkey = T_HDR.project_id  
  --                           AND PMST.type_code = 'PROJECT'  
  --                           AND PMST.delete_flag = 'N'  
  --                 LEFT JOIN (SELECT task_parent_id,  
  --                                   Count(*) AS ParentTaskCount  
  --                            FROM   task_hdr  
  --                            WHERE  task_parent_id IS NOT NULL  
  --                                   AND mkey NOT IN ( task_parent_id )  
  --                                   AND delete_flag = 'N'  
  --                            GROUP  BY task_parent_id) parent_counts  
  --                        ON T_HDR.mkey = parent_counts.task_parent_id  
  --          WHERE  ( T_HDR.assigned_to = @CURRENT_EMP_MKEY )  
  --                 AND T_HDR.status IN ( 'COMPLETED' )  
  --                 AND Isnull(T_HDR.status_flag, 'A') IN ( 'A' )  
  --                 AND T_HDR.delete_flag = 'N'  
  --     AND (  
  --    @STATUS_FILTER    IS NULL  
  --    OR (  
  --      (@STATUS_FILTER    = 'Today' AND CONVERT(DATE, T_HDR.completion_date) = CONVERT(DATE, GETDATE()))  
  --      OR (@STATUS_FILTER    = 'Overdue' AND T_HDR.completion_date < GETDATE())  
  --      OR (@STATUS_FILTER    = 'Next 3 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 3, GETDATE()))  
  --      OR (@STATUS_FILTER    = 'Next 7 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE()))  
  --      OR (@STATUS_FILTER    = 'Next 2 Weeks' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 14, GETDATE()))  
  --      OR (@STATUS_FILTER    = 'Next Month' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(MONTH, 1, GETDATE()))  
  --      OR (@STATUS_FILTER    = 'Review' AND T_HDR.status IN ('CANCEL INITIATED', 'CLOSE INITIATED'))  
  --     )  
  --    )  
  --          ORDER  BY creation_date DESC;  
  --      END  
  
  --    IF( @FILTER = 'COMPLETEDFORME' )  
  --      BEGIN  
  --          SELECT T_HDR.mkey,  
  --                 Isnull(TMST.type_desc, 'NA')  
  --                 CATEGORY  
  --                 ,  
  --                 T_HDR.task_no,  
  --                 dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))  
  --                 CREATOR,  
  --                 dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))  
  --                 RESPONSIBLE,  
  --                 dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))  
  --                 ACTIONABLE,  
  --                 T_HDR.creation_date,  
  --                 CASE  
  --                   WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'  
  --                   WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN  
  --                   'Not Started'  
  --                   WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN  
  --                   'Not Started'  
  --                   WHEN T_HDR.status IN ( 'WORK IN PROGRESS',  
  --                                          'CLOSE INITIATED',  
  --                                          'CANCEL INITIATED',  
  --                                          'RE-WORK' ) THEN 'In Progress'  
  --                   WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN  
  --                   'Completed'  
  --                   ELSE 'Others'  
  --                 END                                                    AS  
  --                 Dashboard_Status,  
  --                 CONVERT(VARCHAR, T_HDR.completion_date, 103)           AS  
  --                 COMPLETION_DATE  
  --                 ,  
  --                 dbo.[Initcap](T_HDR.task_name)                         AS  
  --                 TASK_NAME,  
  --                 T_HDR.task_description,  
  --                 T_HDR.tags,  
  --                 dbo.[Initcap](T_HDR.status)                            AS  
  --                 STATUS,  
  --                 CASE  
  --                   WHEN Isnull(CREATOR.first_name, 'NA') !=  
  --                        Isnull(RESPONSIBLE.first_name, 'NA')  
  --                 THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))  
  --                 + ' > '  
  --                 + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA'))  
  --                   ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))  
  --                 END                                                    AS  
  --                 RESPONSIBLE_TAG  
  --                 ,  
  --                 dbo.[Initcap](Isnull(PMST.type_desc, ''))              AS  
  --                 PROJECT_NAME,  
  --                 dbo.Tasknamestring(T_HDR.mkey)                         AS  
  --                 TASK_HISTORY,  
  --                 Isnull(Rtrim(T_HDR.[priority]), '')                    AS  
  --                 [Priority],  
  --                 Isnull(T_HDR.percent_complete, '0')                    AS  
  --                 Progress_Percentage,  
  --                 Isnull(parent_counts.parenttaskcount, 0)               AS  
  --                 SubTask_Count,  
  --     T_HDR.CREATED_BY  
  --          FROM   task_hdr T_HDR  
  --                 LEFT JOIN employee_mst CREATOR  
  --                        ON CREATOR.mkey = T_HDR.created_by  
  --                           AND CREATOR.delete_flag = 'N'  
  --                 LEFT JOIN employee_mst RESPONSIBLE  
  --                        ON RESPONSIBLE.mkey = T_HDR.assigned_to  
  --                           AND RESPONSIBLE.delete_flag = 'N'  
  --                 LEFT JOIN employee_mst ACTIONABLE  
  --                        ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey  
  --                           AND ACTIONABLE.delete_flag = 'N'  
  --                 --LEFT JOIN v_category CATEGORY  
  --            --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'  
  --                 LEFT JOIN type_mst TMST  
  --                        ON TMST.master_mkey = T_HDR.caregory  
  --                           AND TMST.type_code = 'CATEGORY'  
  --                           AND TMST.delete_flag = 'N'  
  --                 --LEFT JOIN v_project PROJ  
  --                 --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N'   
  --                 LEFT JOIN type_mst PMST  
  --                        ON PMST.master_mkey = T_HDR.project_id  
  --                           AND PMST.type_code = 'PROJECT'  
  --                           AND PMST.delete_flag = 'N'  
  --                 LEFT JOIN (SELECT task_parent_id,  
  --                                   Count(*) AS ParentTaskCount  
  --                            FROM   task_hdr  
  --                            WHERE  task_parent_id IS NOT NULL  
  --                                   AND mkey NOT IN ( task_parent_id )  
  --                                   AND delete_flag = 'N'  
  --                            GROUP  BY task_parent_id) parent_counts  
  --                        ON T_HDR.mkey = parent_counts.task_parent_id  
  --          WHERE  ( T_HDR.created_by = @CURRENT_EMP_MKEY  
  --                   AND T_HDR.assigned_to != @CURRENT_EMP_MKEY  
  --                  --OR    
  --                  --T_HDR.ASSIGNED_TO=@CURRENT_EMP_MKEY    
  --                  --OR    
  --                  --T_HDR.RESPOSIBLE_EMP_MKEY=@CURRENT_EMP_MKEY    
  --                  )  
  --                 AND T_HDR.status IN ( 'COMPLETED' )  
  --                 and Isnull(T_HDR.STATUS_Flag,'A') in ('A')    
  --                 AND T_HDR.delete_flag = 'N'  
  --   AND (  
  --    @STATUS_FILTER    IS NULL  
  --    OR (  
  --      (@STATUS_FILTER    = 'Today' AND CONVERT(DATE, T_HDR.completion_date) = CONVERT(DATE, GETDATE()))  
  --      OR (@STATUS_FILTER    = 'Overdue' AND T_HDR.completion_date < GETDATE())  
  --      OR (@STATUS_FILTER    = 'Next 3 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 3, GETDATE()))  
  --      OR (@STATUS_FILTER    = 'Next 7 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE()))  
  --      OR (@STATUS_FILTER    = 'Next 2 Weeks' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 14, GETDATE()))  
  --      OR (@STATUS_FILTER    = 'Next Month' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(MONTH, 1, GETDATE()))  
  --      OR (@STATUS_FILTER    = 'Review' AND T_HDR.status IN ('CANCEL INITIATED', 'CLOSE INITIATED'))  
  --     )  
  --    )  
  --          ORDER  BY creation_date DESC;  
  --      END  
  
  --    IF( @FILTER = 'CANCELCLOSE' )  
  --      BEGIN  
  --          SELECT T_HDR.mkey,  
  --                 Isnull(TMST.type_desc, 'NA')  
  --                 CATEGORY  
  --                 ,  
  --                 T_HDR.task_no,  
  --                 dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))  
  --                 CREATOR,  
  --                 dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA'))  
  --                 RESPONSIBLE,  
  --                 dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))  
  --                 ACTIONABLE,  
  --                 T_HDR.creation_date,  
  --                 CASE  
  --                   WHEN T_HDR.status IN ( 'CREATED' ) THEN 'Not Started'  
  --                   WHEN T_HDR.status LIKE '%SUB TASK CREATED%' THEN  
  --                   'Not Started'  
  --                   WHEN T_HDR.status LIKE '%SUBTASK CREATED%' THEN  
  --                   'Not Started'  
  --                   WHEN T_HDR.status IN ( 'WORK IN PROGRESS',  
  --                                          'CLOSE INITIATED',  
  --                                          'CANCEL INITIATED',  
  --                                          'RE-WORK' ) THEN 'In Progress'  
  --                   WHEN T_HDR.status IN ( 'CLOSE', 'COMPLETED' ) THEN  
  --    'Completed'  
  --                   ELSE 'Others'  
  --                 END                                                    AS  
  --                 Dashboard_Status,  
  --                 CONVERT(VARCHAR, T_HDR.completion_date, 103)           AS  
  --                 COMPLETION_DATE  
  --                 ,  
  --                 dbo.[Initcap](T_HDR.task_name)                         AS  
  --                 TASK_NAME,  
  --                 T_HDR.task_description,  
  --                 T_HDR.tags,  
  --                 dbo.[Initcap](T_HDR.status)                            AS  
  --                 STATUS,  
  --                 CASE  
  --                   WHEN Isnull(CREATOR.first_name, 'NA') !=  
  --                        Isnull(RESPONSIBLE.first_name, 'NA')  
  --                 THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))  
  --                 + ' > '  
  --                 + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA'))  
  --                   ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))  
  --                 END                                                    AS  
  --                 RESPONSIBLE_TAG  
  --                 ,  
  --                 dbo.[Initcap](Isnull(PMST.type_desc, ''))              AS  
  --                 PROJECT_NAME,  
  --                 dbo.Tasknamestring(T_HDR.mkey)                         AS  
  --                 TASK_HISTORY,  
  --                 Isnull(Rtrim(T_HDR.[priority]), '')                    AS  
  --                 [Priority],  
  --                 Isnull(T_HDR.percent_complete, '0')                    AS  
  --                 Progress_Percentage,  
  --                 Isnull(parent_counts.parenttaskcount, 0)               AS  
  --                 SubTask_Count,  
  --     T_HDR.CREATED_BY  
  --          FROM   task_hdr T_HDR  
  --                 LEFT JOIN employee_mst CREATOR  
  --                        ON CREATOR.mkey = T_HDR.created_by  
  --                           AND CREATOR.delete_flag = 'N'  
  --                 LEFT JOIN employee_mst RESPONSIBLE  
  --                        ON RESPONSIBLE.mkey = T_HDR.assigned_to  
  --                           AND RESPONSIBLE.delete_flag = 'N'  
  --                 LEFT JOIN employee_mst ACTIONABLE  
  --                        ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey  
  --                           AND ACTIONABLE.delete_flag = 'N'  
  --                 --LEFT JOIN v_category CATEGORY  
  --                 --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'  
  --                 LEFT JOIN type_mst TMST  
  --                        ON TMST.master_mkey = T_HDR.caregory  
  --                           AND TMST.type_code = 'CATEGORY'  
  --                           AND TMST.delete_flag = 'N'  
  --                 --LEFT JOIN v_project PROJ  
  --                 --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N'   
  --                 LEFT JOIN type_mst PMST  
  --                        ON PMST.master_mkey = T_HDR.project_id  
  --                           AND PMST.type_code = 'PROJECT'  
  --                           AND PMST.delete_flag = 'N'  
  --                 LEFT JOIN (SELECT task_parent_id,  
  --                                   Count(*) AS ParentTaskCount  
  --                            FROM   task_hdr  
  --                            WHERE  task_parent_id IS NOT NULL  
  --                                   AND mkey NOT IN ( task_parent_id )  
  --                                   AND delete_flag = 'N'  
  --                            GROUP  BY task_parent_id) parent_counts  
  --                        ON T_HDR.mkey = parent_counts.task_parent_id  
  --          WHERE  ( T_HDR.created_by = @CURRENT_EMP_MKEY  
  --                    OR T_HDR.resposible_emp_mkey = @CURRENT_EMP_MKEY )  
  --                 AND T_HDR.status IN ( 'CANCEL', 'CANCELLED' )  
  --                 AND T_HDR.delete_flag = 'N'  
  --     AND (  
  --    @STATUS_FILTER    IS NULL  
  --    OR (  
  --      (@STATUS_FILTER    = 'Today' AND CONVERT(DATE, T_HDR.completion_date) = CONVERT(DATE, GETDATE()))  
  --      OR (@STATUS_FILTER    = 'Overdue' AND T_HDR.completion_date < GETDATE())  
  --      OR (@STATUS_FILTER    = 'Next 3 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 3, GETDATE()))  
  --      OR (@STATUS_FILTER    = 'Next 7 Days' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE()))  
  --      OR (@STATUS_FILTER    = 'Next 2 Weeks' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(DAY, 14, GETDATE()))  
  --      OR (@STATUS_FILTER    = 'Next Month' AND T_HDR.completion_date BETWEEN GETDATE() AND DATEADD(MONTH, 1, GETDATE()))  
  --      OR (@STATUS_FILTER    = 'Review' AND T_HDR.status IN ('CANCEL INITIATED', 'CLOSE INITIATED'))  
  --     )  
  --    )  
  --          ORDER  BY creation_date DESC;  
  --      END  
        
   EXEC Sp_dashboard_count   @CURRENT_EMP_MKEY  
  
  END   
  

--------------------------------------------------------------------------------------------------------------------------------------------

-- exec SP_TASK_DETAILS_BY_MKEY_NT 845,937,0  
ALTER procedure [dbo].[SP_TASK_DETAILS_BY_MKEY_NT](@HDR_MKEY VARCHAR(250),@Session_User_Id          INT = null,    
@Business_Group_Id   INT = null)  
AS  
  BEGIN  
      DECLARE @DAY INT  
  
      SET @DAY=0  
  
      SELECT T_HDR.mkey,  
             T_HDR.task_no,  
             T_HDR.isnode,  
             T_HDR.task_parent_id,  
             T_HDR.task_main_node_id,  
    T_HDR.Task_Type,  
             T_HDR.status,  
             T_HDR.status_perc,  
             T_HDR.task_created_by,  
             T_HDR.approver_id,  
             T_HDR.approve_action_date,  
    T_HDR.ASSIGNED_TO,  
    E_MST.EMP_FULL_NAME   AS 'Assigned_To_Name',  
             T_MST.type_desc                           CAREGORY,  
             T_HDR.project_id                          PROJECT_MKEY,  
    T_HDR.sub_project_id                    AS BUILDING_MKEY,  
             P_MST.type_desc                           'PROJECT',  
    P_MST.type_desc                           'Project_Name',  
             S_P_MST.type_desc                         'Sub_PROJECT',  
    S_P_MST.type_desc      AS 'Building_Name',  
             T_HDR.caregory                            CATEGORY_MKEY,  
             T_HDR.creation_date,  
             T_HDR.task_name,  
             T_HDR.task_description,  
             E_MST.emp_full_name,  
      
    case when T_HDR.TASK_CREATED_BY = @Session_User_Id --When Task owner created the task /* Inside Task Owner login*/  
    and T_HDR.STATUS in ('CREATED','SUB TASK CREATED','WORK IN PROGRESS') and T_HDR.STATUS_PERC = 0.0 then 'Y'  /*Task owner created the task and   
    it is currently on created status and progress is 0%  then all tabs are enabled for task owner and task owner can add tabs list like Checklist, Authority,  
    Outcome and Compliance via remark but with 0%  progress and WIP status update.  Otherwise any progress between 0% to 100%    
    with WIP status will lead to disable all tabs for task owner.*/   
      
    when (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id) --When Task owner created the task /* Inside assignee login */  
    and T_HDR.STATUS_PERC = 0.0  /* Inside assignee login also all tabs are enabled because progress % is 0, however when assignee change   
    the progress percent % between 0% to 100% then tabs are disabled for the task owner,but enabled at the assignee side. Assignee can able to update all tabs  */  
    and T_HDR.STATUS in ('CREATED','SUB TASK CREATED','WORK IN PROGRESS') Then 'Y'    
    ---------------------------------------------------------------------------------------------------------------------------------------------------  
    /*When Assignee change to close initiate(100%) */  
       -- Inside assignee login   
    when (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id)   
    and T_HDR.STATUS_PERC = 100.0   
    and  T_HDR.STATUS in ('CLOSE INITIATED')  then 'N'/* If an assignee changes the status to cancel initiate or close initiate   
    it means progress % is whether 0% or 100% so, in this scenario all tabs are disabled to the assignee side. Assignee will never change any of tab/s   
    and inside the task owner log in all tabs are enabled for the task owner. Task owner can update all tabs. */  
      
    when (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id)/* When Assignee change to  cancel initiate (0%) Inside assignee login */  
    and T_HDR.STATUS in ('CANCEL INITIATED')  then 'N' /* If an assignee changes the status to cancel initiate or close initiate   
    it means progress % is whether 0% or 100% so, in this scenario all tabs are disabled to the assignee side. Assignee will never change any of tab/s   
    and inside the task owner log in all tabs are enabled for the task owner. Task owner can update all tabs. */  
  
    /*When Assignee change to close initiate(100%) or cancel initiate (0%) */  
     --Inside Task Owner login   
    when  T_HDR.TASK_CREATED_BY = @Session_User_Id    
    and T_HDR.STATUS_PERC between 0.0 and 100.0 and T_HDR.STATUS in ('CLOSE INITIATED','CANCEL INITIATED')  then 'Y'   
    /* Now inside task owner log in all tabs are enabled and task owner can do all changes in tabs and the status which are visible   
    to the task owner is Cancel or Close and Re-work as per the assignee action if assignee triggered Close initiate then task owner can see   
    the Close or if Cancel Initiate is triggered by the assignee then task owner can see Cancel and re-work is by default */  
    ---------------------------------------------------------------------------------------------------------------------------------------------------  
    /*When Task owner change status to re-work  */  
    ---Inside Task Owner login  
    WHEN  T_HDR.TASK_CREATED_BY= @Session_User_Id   
    and T_HDR.STATUS in ('RE-WORK')  then 'N' /*-- When task owner change status to re-work instead of Close or Cancel then all tabs are disabled   
              at task owner side now task owner is not able to do any changes inside any tab.*/  
    /* When Task owner change status to re-work */  
    --- Inside assignee login  
    WHEN  (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id)   
    and T_HDR.STATUS in ('RE-WORK')  then 'Y' /* When the task owner gives a task to re-work to the assignee then status will change to re-work for the assignee   
               and now all tabs are enabled for assignee and can do any changes inside any tab.*/  
  ---------------------------------------------------------------------------------------------------------------------------------------------------  
    WHEN  (T_HDR.TASK_CREATED_BY = @Session_User_Id) or (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id)  
    and T_HDR.STATUS in ('CANCEL','CANCELLED','CLOSE')  then 'N' /* When task owner can do Cancel or Close instead of re-work   
                    then all tabs are disabled for task owner as well as assignee */  
 ---------------------------------------------------------------------------------------------------------------------------------------------------  
   WHEN  (T_HDR.TASK_CREATED_BY = @Session_User_Id) and (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id)  
    and T_HDR.STATUS not in ('CANCEL','CANCELLED','CLOSE')  then 'Y' /* When Task Owner and Assignee are same then enabled  */  
---------------------------------------------------------------------------------------------------------------------------------------------------  
    ELSE 'N'  
    end as 'Process_Flag',  
             T_HDR.tags,  
             CONVERT(VARCHAR(10), completion_date, 120)COMPLETION_DATE,  
             --Isnull(file_name, '')                     [FILE_NAME],  
             --Isnull(file_path, '')                     FILE_PATH,  
             T_HDR.resposible_emp_mkey  
   ,ISNULL(RTrim(T_HDR.Priority),'') AS [Priority]   
   ,ISNULL(CONVERT(NVARCHAR(20), T_HDR.Tentative_Start_Date),null) AS Tentative_Start_Date  
   ,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Tentative_End_Date),null) AS Tentative_End_Date  
   ,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Actual_Start_Date),null) AS Actual_Start_Date  
   ,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Actual_End_Date),null) AS Actual_End_Date  
      FROM   task_hdr T_HDR  
             JOIN employee_mst E_MST  
               ON E_MST.mkey = T_HDR.assigned_to  
             LEFT JOIN type_mst T_MST  
                    ON T_MST.master_mkey = T_HDR.caregory  
             --AND T_MST.TYPE_CODE='CATEGORY'  
             LEFT JOIN type_mst P_MST  
                    ON P_MST.master_mkey = T_HDR.project_id  
             LEFT JOIN type_mst S_P_MST  
                    ON S_P_MST.master_mkey = T_HDR.sub_project_id  
             --LEFT JOIN task_media_trl T_MEDIA  
             --       ON T_MEDIA.mkey = T_HDR.mkey  
             --          AND T_MEDIA.delete_flag = 'N'  
      WHERE  T_HDR.mkey = @HDR_MKEY  
  
  
--   WITH actiontype  
--     AS (SELECT T_HDR.mkey,T_HDR.task_no,T_HDR.isnode,T_HDR.task_parent_id,T_HDR.task_main_node_id,T_HDR.task_type,T_HDR.status,T_HDR.status_perc,T_HDR.task_created_by,  
--                T_HDR.approver_id,T_HDR.approve_action_date,T_HDR.assigned_to,E_MST.emp_full_name AS 'Assigned_To_Name',T_MST.type_desc CAREGORY,T_HDR.project_id  
--                    PROJECT_MKEY,T_HDR.sub_project_id AS BUILDING_MKEY,  
--                P_MST.type_desc 'PROJECT' , P_MST.type_desc 'Project_Name', S_P_MST.type_desc  
--                    'Sub_PROJECT',S_P_MST.type_desc AS 'Building_Name', T_HDR.caregory  
--                    CATEGORY_MKEY,T_HDR.creation_date,T_HDR.task_name,T_HDR.task_description,E_MST.emp_full_name,T_HDR.tags,  
--                CONVERT(VARCHAR(10), completion_date, 120) COMPLETION_DATE,Isnull(file_name, '')[FILE_NAME],  
--                Isnull(file_path, '')FILE_PATH,T_HDR.resposible_emp_mkey,Isnull(Rtrim(T_HDR.priority), '') AS [Priority],  
--                Isnull(CONVERT(NVARCHAR(20), T_HDR.tentative_start_date), NULL)AS  
--                Tentative_Start_Date,                Isnull(CONVERT(NVARCHAR(20), T_HDR.tentative_end_date), NULL)AS Tentative_End_Date,  
--                Isnull(CONVERT(NVARCHAR(20), T_HDR.actual_start_date), NULL)AS Actual_Start_Date,  
--                Isnull(CONVERT(NVARCHAR(20), T_HDR.actual_end_date), NULL)AS Actual_End_Date,  
--                NULL AS  
--                    progress_perc,  
--                NULL  
--                AS  
--                    ACTION_TYPE,  
--                NULL  
--                AS  
--                    COMMENT  
--         FROM   task_hdr T_HDR  
--                JOIN employee_mst E_MST  
--                  ON E_MST.mkey = T_HDR.assigned_to  
--                LEFT JOIN type_mst T_MST  
--                       ON T_MST.master_mkey = T_HDR.caregory  
--                --AND T_MST.TYPE_CODE='CATEGORY'  
--                LEFT JOIN type_mst P_MST  
--                       ON P_MST.master_mkey = T_HDR.project_id  
--                LEFT JOIN type_mst S_P_MST  
--                       ON S_P_MST.master_mkey = T_HDR.sub_project_id  
--                LEFT JOIN task_media_trl T_MEDIA  
--                       ON T_MEDIA.mkey = T_HDR.mkey  
--                          AND T_MEDIA.delete_flag = 'N'  
--         WHERE  T_HDR.mkey = 107  
--         UNION ALL  
--         SELECT NULL AS mkey,  
--                NULL AS task_no,  
--                NULL AS isnode,  
--                NULL AS task_parent_id,  
--                NULL AS task_main_node_id,  
--                NULL AS Task_Type,  
--                NULL AS status_perc,  
--                NULL AS task_created_by,  
--                NULL AS approver_id,  
--                NULL AS approve_action_date,  
--                NULL AS ASSIGNED_TO,  
--                NULL AS 'Assigned_To_Name',  
--                NULL AS CAREGORY,  
--                NULL AS PROJECT_MKEY,  
--                NULL AS BUILDING_MKEY,  
--                NULL AS 'PROJECT',  
--                NULL AS 'Project_Name',  
--                NULL AS 'Sub_PROJECT',  
--                NULL AS 'Building_Name',  
--                NULL AS CATEGORY_MKEY,  
--                NULL AS task_name,  
--                NULL AS task_description,  
--                NULL AS emp_full_name,  
--                NULL AS tags,  
--                NULL AS COMPLETION_DATE,  
--                NULL AS resposible_emp_mkey,  
--                NULL AS [Priority],  
--                NULL AS Tentative_Start_Date,  
--                NULL AS Tentative_End_Date,  
--                NULL AS Actual_Start_Date,  
--                NULL AS Actual_End_Date,  
--                CONVERT(VARCHAR(50), creation_date, 103)CREATION_DATE,  
--                progress_perc,  
--                dbo.[Initcap](status)                   STATUS,  
--                dbo.[Initcap](action_type)              ACTION_TYPE,  
--                dbo.[Initcap](description_comment)      COMMENT,  
--               Isnull(file_name, '')                   FILE_NAME,  
--                Isnull(file_path, '')                   FILE_PATH  
--         FROM   task_action_trl  
--         WHERE  delete_flag = 'N'  
--                AND mkey = 237 -- 24-03-2025  
--        )  
--SELECT *  
--FROM   actiontype  
--ORDER  BY creation_date   
  --WHERE CONVERT(VARCHAR(25),DATEADD(DAY,@DAY,T_HDR.CREATION_DATE),103)=CONVERT(VARCHAR(25),DATEADD(DAY,@DAY,GETDATE()),103)  
  END   
--EXEC SP_TASK_DETAILS_BY_MKEY 1  



---------------------------------------------------------------------------------------------------------------------------------

Date 23-05-2025

drop view	V_PRIORITY_FILTER
drop view	V_DURATION_FILTER
drop view       V_TASK_TYPE
----------------------------------------------------------------------------------------------------------------------------------
ALTER view V_USER_FILTER as 
		Select  TMST.MKEY, tmst.TYPE_CODE, tmst.TYPE_DESC as 'Key'
		, Case when tmst.TYPE_DESC = 'DEFAULT' THEN 'Actionable' 
		when tmst.TYPE_DESC = 'ALLOCATEDTOME' THEN 'Allocated To Me' 
		when tmst.TYPE_DESC = 'ALLOCATEDBYME' THEN 'Allocated By Me' 
		when tmst.TYPE_DESC = 'COMPLETEDBYME' THEN 'Completed By Me' 
		when tmst.TYPE_DESC = 'COMPLETEDFORME' THEN 'Completed For Me' 
		when tmst.TYPE_DESC = 'CANCELCLOSE' THEN 'Cancelled' 
		ELSE tmst.TYPE_DESC
		END AS 'DisplayName',TMST.ATTRIBUTE4,TMST.ATTRIBUTE5
		 ,Isnull(CONVERT(VARCHAR(50), TMST.created_by), '') AS CREATED_BY_ID,  
			Isnull(CONVERT(VARCHAR(50), EMST.emp_full_name), '') AS CREATED_BY_NAME,  
			CASE  WHEN TMST.creation_date IS NULL THEN  ''  ELSE  Format(TMST.creation_date, 'yyyy-MM-dd HH:mm:ss') END AS CREATION_DATE,  
			Isnull(CONVERT(VARCHAR(50), TMST.last_updated_by), '') AS LAST_UPDATED_BY,  
			Isnull(LMST.emp_full_name, '') UPDATED_BY_NAME,  
			CASE WHEN TMST.last_update_date IS NULL THEN  ''  ELSE  Format(TMST.last_update_date, 'yyyy-MM-dd HH:mm:ss') END AS LAST_UPDATE_DATE  
		From TYPE_MST TMST INNER JOIN EMPLOYEE_MST EMST ON TMST.CREATED_BY = EMST.MKEY
		LEFT JOIN EMPLOYEE_MST LMST ON TMST.LAST_UPDATED_BY = EMST.MKEY
		where TMST.ATTRIBUTE2 ='Filter' and TMST.DELETE_FLAG = 'N';
---------------------------------------------------------------------------------------------------------------------------------

-- exec SP_GET_TASK_DASHBOARD_FILTER 926,1
ALTER Procedure [dbo].[SP_GET_TASK_DASHBOARD_FILTER] (@Session_User_Id          INT,  
@Business_Group_Id	  INT)
AS 
BEGIN
	Begin Try
	SELECT * FROM  V_USER_FILTER ORDER BY CONVERT(int,CONVERT(int,ATTRIBUTE5)) asc, CONVERT(int,CONVERT(int,ATTRIBUTE4));
	--SELECT * FROM  V_PRIORITY_FILTER  -- need to delete after deploy in uat
	--SELECT * FROM  V_DURATION_FILTER -- need to delete after deploy in uat
	--SELECT * FROM  V_TASK_TYPE -- need to delete after deploy in uat
	End try
	 BEGIN CATCH
        -------------------------------------------------------------------------------------------------------------------------------            
        SELECT ERROR_NUMBER() AS ERRORNUMBER,
               ERROR_SEVERITY() AS ERRORSEVERITY,
               ERROR_STATE() AS ERRORSTATE,
               ERROR_PROCEDURE() AS ERRORPROCEDURE,
               ERROR_LINE() AS ERRORLINE,
               ERROR_MESSAGE() AS ERRORMESSAGE;
        -------------------------------------------------------------------------------------------------------------------------------  
        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
        SET @ERROR_MESSAGE = ERROR_MESSAGE();
        -------------------------------------------------------------------------------------------------------------------------------  
        EXEC SP_P_TMS_INSERT_ERROR_DES @Session_User_Id,
                                       'TMS',
                                       'Task Dashboard Filter',
                                       @ERROR_MESSAGE,
                                       'Get Task Dashboard Filter';
    -------------------------------------------------------------------------------------------------------------------------------  
    END CATCH

END


----------------------------------------------------------------



GO
/****** Object:  StoredProcedure [dbo].[SP_GET_PROJECT_DOC_DEPOSITORY]    Script Date: 23-05-2025 14:03:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- EXEC SP_GET_PROJECT_DOC_DEPOSITORY null,926,'asd','sdf'
-- =============================================
ALTER PROCEDURE [dbo].[SP_GET_PROJECT_DOC_DEPOSITORY]
	-- Add the parameters for the stored procedure here
	@MKEY int = NULL,
	@USER_ID int = NULL, -- USER ID
	@API_NAME VARCHAR(100) = NULL, -- FORM NAME
	@API_METHOD VARCHAR(100) = NULL -- FUCNTION/METHOD NAME
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
BEGIN TRY ;
          -- TO CHECK THE @MKEY IS NULL OR EMPTY IF EMPTY THE SHOW ALL ROWS    
		  print '@MKEY: '+convert(varchar(10),@MKEY)
         
		  IF ( @MKEY IS NOT NULL
               AND LEN(@MKEY) > 0 and @MKEY != 0)
            BEGIN
				SELECT	
					HDR.MKEY
					,BUILDING_TYPE as BUILDING_MKEY
					,Smst.TYPE_DESC as buildinG_NAME
					,PROPERTY_TYPE AS PROPERTY_MKEY
					,tmst.TYPE_DESC as PROPERTY_name
					,DOC_MKEY 
					,DOC_NUMBER
					,DOC_DATE
					,VALIDITY_DATE
					,HDR.ATTRIBUTE1
					,HDR.ATTRIBUTE2
					,HDR.ATTRIBUTE3
					,HDR.ATTRIBUTE4
					,HDR.ATTRIBUTE5
					,Isnull(CONVERT(VARCHAR(50), HDR.created_by), '') AS CREATED_BY_ID
				,Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME
				,CASE
					WHEN HDR.creation_date IS NULL THEN
				''
				ELSE
					Format(HDR.creation_date, 'yyyy-MM-dd HH:mm:ss')
				END AS CREATION_DATE
				,Isnull(CONVERT(VARCHAR(50), HDR.last_updated_by), '') AS LAST_UPDATED_BY
				,Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME
				,CASE
					WHEN HDR.last_update_date IS NULL THEN
					''
				ELSE
					Format(HDR.last_update_date, 'yyyy-MM-dd HH:mm:ss')
				END AS LAST_UPDATE_DATE
				FROM PROJECT_DOC_DEPOSITORY_HDR HDR
				INNER JOIN EMPLOYEE_MST createdby ON HDR.created_by = createdby.mkey
				LEFT JOIN EMPLOYEE_MST updatedby ON HDR.last_updated_by = updatedby.mkey
				inner join TYPE_MST tmst on HDR.PROPERTY_TYPE = tmst.MASTER_MKEY and  tmst.TYPE_CODE = 'Project'
				inner join TYPE_MST Smst on HDR.BUILDING_TYPE = Smst.MASTER_MKEY and  Smst.TYPE_CODE = 'Project'
				WHERE HDR.MKEY = @MKEY
				AND HDR.DELETE_FLAG = 'N'
				AND createdby.DELETE_FLAG = 'N'
				ORDER BY  HDR.MKEY;
            END
          ELSE
            BEGIN
              SELECT	
					HDR.MKEY
					,BUILDING_TYPE as BUILDING_MKEY
					,Smst.TYPE_DESC as buildinG_NAME
					,PROPERTY_TYPE AS PROPERTY_MKEY
					,tmst.TYPE_DESC as PROPERTY_name
					,DOC_MKEY 
					,DOC_NUMBER
					,DOC_DATE
					,VALIDITY_DATE
					,HDR.ATTRIBUTE1
					,HDR.ATTRIBUTE2
					,HDR.ATTRIBUTE3
					,HDR.ATTRIBUTE4
					,HDR.ATTRIBUTE5
					,Isnull(CONVERT(VARCHAR(50), HDR.created_by), '') AS CREATED_BY_ID
				,Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME
				,CASE
					WHEN HDR.creation_date IS NULL THEN
				''
				ELSE
					Format(HDR.creation_date, 'yyyy-MM-dd HH:mm:ss')
				END AS CREATION_DATE
				,Isnull(CONVERT(VARCHAR(50), HDR.last_updated_by), '') AS LAST_UPDATED_BY
				,Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME
				,CASE
					WHEN HDR.last_update_date IS NULL THEN
					''
				ELSE
					Format(HDR.last_update_date, 'yyyy-MM-dd HH:mm:ss')
				END AS LAST_UPDATE_DATE
				FROM PROJECT_DOC_DEPOSITORY_HDR HDR
				INNER JOIN 
						EMPLOYEE_MST createdby
					ON 
						HDR.created_by = createdby.mkey
					LEFT JOIN 
						EMPLOYEE_MST updatedby
					ON 
						HDR.last_updated_by = updatedby.mkey
				inner join TYPE_MST tmst on HDR.PROPERTY_TYPE = tmst.MASTER_MKEY and  tmst.TYPE_CODE = 'Project'
				inner join TYPE_MST Smst on HDR.BUILDING_TYPE = Smst.MASTER_MKEY and  Smst.TYPE_CODE = 'Project'
				WHERE HDR.DELETE_FLAG = 'N'
				AND createdby.DELETE_FLAG = 'N'
				ORDER BY  HDR.MKEY;
            END
      END TRY
      BEGIN CATCH
------------------------------------------------------------------------------------------------------------------------------------
          SELECT ERROR_NUMBER()    AS ERRORNUMBER,
                 ERROR_SEVERITY()  AS ERRORSEVERITY,
                 ERROR_STATE()     AS ERRORSTATE,
                 ERROR_PROCEDURE() AS ERRORPROCEDURE,
                 ERROR_LINE()      AS ERRORLINE,
                 ERROR_MESSAGE()   AS ERRORMESSAGE;
-------------------------------------------------------------------------------------------------------------------------------
			DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
			SET @ERROR_MESSAGE = ERROR_MESSAGE();
------------------------------------------------------------------------------------------------------------------------------------
		EXEC sp_P_TMS_INSERT_ERROR_DES @USER_ID,'TMS',@API_NAME,@ERROR_MESSAGE,@API_METHOD;
------------------------------------------------------------------------------------------------------------------------------------
      END CATCH
END

-------------------------------------------------------------------------------------------------------------------
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_PROJECT_DOC_DEPOSITORY]    Script Date: 23-05-2025 14:03:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- EXEC SP_GET_PROJECT_DOC_DEPOSITORY 0,926,'asd','sdf'
-- =============================================
ALTER PROCEDURE [dbo].[SP_GET_PROJECT_DOC_DEPOSITORY]
	-- Add the parameters for the stored procedure here
	@MKEY int = NULL,
	@USER_ID int = NULL, -- USER ID
	@API_NAME VARCHAR(100) = NULL, -- FORM NAME
	@API_METHOD VARCHAR(100) = NULL -- FUCNTION/METHOD NAME
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
BEGIN TRY ;
          -- TO CHECK THE @MKEY IS NULL OR EMPTY IF EMPTY THE SHOW ALL ROWS    
		  print '@MKEY: '+convert(varchar(10),@MKEY)
         
		  IF ( @MKEY IS NOT NULL
               AND LEN(@MKEY) > 0 and @MKEY != 0)
            BEGIN
				SELECT	
					HDR.MKEY
					,BUILDING_TYPE as BUILDING_MKEY
					,Smst.TYPE_DESC as buildinG_NAME
					,PROPERTY_TYPE AS PROPERTY_MKEY
					,tmst.TYPE_DESC as PROPERTY_name
					,DOC_MKEY 
					,DOC_NUMBER
					,DOC_DATE
					,dhdr.DOC_NAME
					,VALIDITY_DATE
					,HDR.ATTRIBUTE1
					,HDR.ATTRIBUTE2
					,HDR.ATTRIBUTE3
					,HDR.ATTRIBUTE4
					,HDR.ATTRIBUTE5
					,Isnull(CONVERT(VARCHAR(50), HDR.created_by), '') AS CREATED_BY_ID
				,Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME
				,CASE WHEN HDR.creation_date IS NULL THEN '' ELSE Format(HDR.creation_date, 'yyyy-MM-dd HH:mm:ss')	END AS CREATION_DATE
				,Isnull(CONVERT(VARCHAR(50), HDR.last_updated_by), '') AS LAST_UPDATED_BY
				,Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME
				,CASE WHEN HDR.last_update_date IS NULL THEN ''	ELSE Format(HDR.last_update_date, 'yyyy-MM-dd HH:mm:ss')
				END AS LAST_UPDATE_DATE
				FROM PROJECT_DOC_DEPOSITORY_HDR HDR
				INNER JOIN DOC_TEMPLATE_HDR dhdr on dhdr.MKEY = HDR.DOC_MKEY
				INNER JOIN EMPLOYEE_MST createdby ON HDR.created_by = createdby.mkey
				LEFT JOIN EMPLOYEE_MST updatedby ON HDR.last_updated_by = updatedby.mkey
				inner join TYPE_MST tmst on HDR.PROPERTY_TYPE = tmst.MASTER_MKEY and  tmst.TYPE_CODE = 'Project'
				inner join TYPE_MST Smst on HDR.BUILDING_TYPE = Smst.MASTER_MKEY and  Smst.TYPE_CODE = 'Project'
				WHERE HDR.MKEY = @MKEY
				AND HDR.DELETE_FLAG = 'N'
				AND createdby.DELETE_FLAG = 'N'
				ORDER BY  HDR.MKEY;
            END
          ELSE
            BEGIN
              SELECT	
					HDR.MKEY
					,BUILDING_TYPE as BUILDING_MKEY
					,Smst.TYPE_DESC as buildinG_NAME
					,PROPERTY_TYPE AS PROPERTY_MKEY
					,tmst.TYPE_DESC as PROPERTY_name
					,DOC_MKEY 
					,DOC_NUMBER
					,DOC_DATE
					,dhdr.DOC_NAME
					,VALIDITY_DATE
					,HDR.ATTRIBUTE1
					,HDR.ATTRIBUTE2
					,HDR.ATTRIBUTE3
					,HDR.ATTRIBUTE4
					,HDR.ATTRIBUTE5
					,Isnull(CONVERT(VARCHAR(50), HDR.created_by), '') AS CREATED_BY_ID
				,Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME
				,CASE WHEN HDR.creation_date IS NULL THEN '' ELSE Format(HDR.creation_date, 'yyyy-MM-dd HH:mm:ss')	END AS CREATION_DATE
				,Isnull(CONVERT(VARCHAR(50), HDR.last_updated_by), '') AS LAST_UPDATED_BY
				,Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME
				,CASE WHEN HDR.last_update_date IS NULL THEN '' ELSE Format(HDR.last_update_date, 'yyyy-MM-dd HH:mm:ss') END AS LAST_UPDATE_DATE
				FROM PROJECT_DOC_DEPOSITORY_HDR HDR
				INNER JOIN DOC_TEMPLATE_HDR dhdr on dhdr.MKEY = HDR.DOC_MKEY
				INNER JOIN 	EMPLOYEE_MST createdby	ON 	HDR.created_by = createdby.mkey
				LEFT JOIN EMPLOYEE_MST updatedby ON HDR.last_updated_by = updatedby.mkey
				inner join TYPE_MST tmst on HDR.PROPERTY_TYPE = tmst.MASTER_MKEY and  tmst.TYPE_CODE = 'Project'
				inner join TYPE_MST Smst on HDR.BUILDING_TYPE = Smst.MASTER_MKEY and  Smst.TYPE_CODE = 'Project'
				WHERE HDR.DELETE_FLAG = 'N'
				AND createdby.DELETE_FLAG = 'N'
				ORDER BY  HDR.MKEY;
            END
      END TRY
      BEGIN CATCH
------------------------------------------------------------------------------------------------------------------------------------
          SELECT ERROR_NUMBER()    AS ERRORNUMBER,
                 ERROR_SEVERITY()  AS ERRORSEVERITY,
                 ERROR_STATE()     AS ERRORSTATE,
                 ERROR_PROCEDURE() AS ERRORPROCEDURE,
                 ERROR_LINE()      AS ERRORLINE,
                 ERROR_MESSAGE()   AS ERRORMESSAGE;
-------------------------------------------------------------------------------------------------------------------------------
			DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
			SET @ERROR_MESSAGE = ERROR_MESSAGE();
------------------------------------------------------------------------------------------------------------------------------------
		EXEC sp_P_TMS_INSERT_ERROR_DES @USER_ID,'TMS',@API_NAME,@ERROR_MESSAGE,@API_METHOD;
------------------------------------------------------------------------------------------------------------------------------------
      END CATCH
END

----------------------------------------------------------------------------------------------------------------------------------
  
--  EXEC SP_TASK_DASHBOARD_NT 926,null,'Default',null,null,926,1  
--  EXEC SP_TASK_DASHBOARD_NT 926,null,null  
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT',''  
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next 7 Days'  
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next 2 Weeks'  
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next Month'  
--  EXEC SP_TASK_DASHBOARD_NT 926,'ALLOCATEDBYME','Review'  
ALTER PROCEDURE [dbo].[Sp_task_dashboard_nt] (@CURRENT_EMP_MKEY  INT,  
                                              @STATUS_FILTER     NVARCHAR(max) = NULL,--'Today,Completed,Overdue,Pending,Cancelled,Future,Review',  
                                              @USER_FILTER       VARCHAR(max) =NULL,--'ALLOCATEDBYME,ALLOCATEDTOME,COMPLETEDBYME,COMPLETEDFORME,CANCELCLOSE',  
                                              @PriorityFilter    VARCHAR(max) =NULL,--'High,Medium,Low',  
                                              @TypeFilter        VARCHAR(max) =NULL,--'RECURRING,APPROVAL,COMPLIANCE,APPROVAL,GENERAL,SYSTEM,EMAIL,RERA COMPLAIN';  
                                              @Session_User_Id   INT,  
                                              @Business_Group_Id INT)  
AS  
  BEGIN  
      DECLARE @DAY INT  
  
      SET @DAY=0  
  
      --DECLARE @STATUS_FILTER VARCHAR(max) = null,-- 'Today,Completed,Overdue,Pending,Cancelled,Future,Review',  
      --     @USER_FILTER   VARCHAR(max) = null,--'ALLOCATEDBYME,ALLOCATEDTOME,COMPLETEDBYME,COMPLETEDFORME,CANCELCLOSE',  
      --     @PriorityFilter VARCHAR(max) = null,--'High,Medium,Low',  
      --     @TypeFilter VARCHAR(max) = null--'RECURRING,APPROVAL,COMPLIANCE,APPROVAL,GENERAL,SYSTEM,EMAIL,RERA COMPLAIN';  
      DECLARE @sql NVARCHAR(max) = '';  
      DECLARE @start INT = 1,  
              @end   INT;  
      DECLARE @hasWhereClause BIT = 0;  
      DECLARE @WhereClause    NVARCHAR(max) = '',  
              @filter         VARCHAR(100),  
              @PriorityClause NVARCHAR(max) = '',  
              @TypeClause     NVARCHAR(max) = '',  
              @TaskTypeMkey   NVARCHAR(50),  
              @STATUSClause   NVARCHAR(max) = ''  
  
      SET @sql ='SELECT T_HDR.mkey,Isnull(TMST.type_desc, ''NA'') CATEGORY,T_HDR.task_no,dbo.[Initcap](Isnull(CREATOR.emp_full_name, ''NA'')) CREATOR,  
   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, ''NA'')) RESPONSIBLE,  
   dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, ''NA'')) ACTIONABLE,  
   T_HDR.creation_date,                      
   CASE                        
   WHEN T_HDR.status IN ( ''CREATED'' ) THEN ''Not Started''                        
   WHEN T_HDR.status LIKE ''%SUB TASK CREATED%'' THEN ''Not Started''                        
   WHEN T_HDR.status LIKE ''%SUBTASK CREATED%'' THEN ''Not Started''                        
   WHEN T_HDR.status IN ( ''WORK IN PROGRESS'', ''CLOSE INITIATED'', ''CANCEL INITIATED'', ''RE-WORK'' ) THEN ''In Progress''                        
   WHEN T_HDR.status IN ( ''CLOSE'', ''COMPLETED'' ) THEN ''Completed''                      ELSE ''Others''                    END AS Dashboard_Status,   
   CONVERT(VARCHAR, T_HDR.completion_date, 103) AS COMPLETION_DATE,                      
   dbo.[Initcap](T_HDR.task_name) AS TASK_NAME,                      
   T_HDR.task_description,                      
   T_HDR.tags,                      
   dbo.[Initcap](T_HDR.status) AS STATUS,                     
   CASE                        
   WHEN Isnull(CREATOR.first_name, ''NA'') != Isnull(RESPONSIBLE.first_name, ''NA'')   
   THEN dbo.[Initcap](Isnull(CREATOR.first_name, ''NA'')) + '' > '' + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, ''NA''))                        
   ELSE dbo.[Initcap](Isnull(CREATOR.first_name, ''NA''))                      
   END AS RESPONSIBLE_TAG,                     
   dbo.[Initcap](Isnull(PMST.type_desc, '''')) AS PROJECT_NAME,                      
   dbo.Tasknamestring(T_HDR.mkey) AS TASK_HISTORY,                      
   Isnull(Rtrim(T_HDR.[priority]), '''') AS [Priority],                      
   Isnull(T_HDR.percent_complete, ''0'') AS Progress_Percentage,                      
   Isnull(parent_counts.parenttaskcount, 0) AS SubTask_Count,                      
   T_HDR.CREATED_BY               
   FROM task_hdr T_HDR               
   LEFT JOIN employee_mst CREATOR ON CREATOR.mkey = T_HDR.created_by AND CREATOR.delete_flag = ''N''               
   LEFT JOIN employee_mst RESPONSIBLE ON RESPONSIBLE.mkey = T_HDR.assigned_to AND RESPONSIBLE.delete_flag = ''N''               
   LEFT JOIN employee_mst ACTIONABLE ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey AND ACTIONABLE.delete_flag = ''N''              
   LEFT JOIN type_mst TMST ON TMST.master_mkey = T_HDR.caregory AND TMST.type_code = ''CATEGORY'' AND TMST.delete_flag = ''N''               
   LEFT JOIN type_mst PMST ON PMST.master_mkey = T_HDR.project_id AND PMST.type_code = ''PROJECT'' AND PMST.delete_flag = ''N''               
   LEFT JOIN (SELECT task_parent_id, Count(*) AS ParentTaskCount                          
   FROM task_hdr WHERE task_parent_id IS NOT NULL AND mkey NOT IN (task_parent_id) AND delete_flag = ''N''                          
   GROUP BY task_parent_id) parent_counts ON T_HDR.mkey = parent_counts.task_parent_id               
   WHERE Isnull(T_HDR.status_flag, ''A'') IN (''A'') AND T_HDR.delete_flag = ''N'' ';  
  
    PRINT '@USER_FILTER: ' + @USER_FILTER + ' Val ';  
  
    /* @USER_FILTER */  
    IF ( @USER_FILTER <> '' AND @USER_FILTER IS NOT NULL ) -- @USER_FILTER is not null OR  
      BEGIN  
          WHILE @start <= Len(@USER_FILTER)  
            BEGIN  
                SET @end = Charindex(',', @USER_FILTER, @start);  
  
                IF @end = 0  
                  SET @end = Len(@USER_FILTER) + 1;  
  
                SET @filter = Ltrim(Rtrim(Substring(@USER_FILTER, @start, @end - @start)));  
  
      
                IF @filter = 'Default'  
                  BEGIN  
      print 'def 1'  
                      IF @hasWhereClause = 0  
                        BEGIN  
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';  
                            SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';  
                            SET @hasWhereClause = 1;  
                        END  
                      ELSE  
                        BEGIN  
                            SET @sql += ' OR ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' ) ';  
                        END  
      PRINT '@WhereClause:Default: ' + @WhereClause;  
                  END  
  
                IF @filter = 'ALLOCATEDBYME'   
                  BEGIN  
      print 'allo 2'  
                      IF @hasWhereClause = 0  
                        BEGIN  
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';  
                            SET @WhereClause += ' ( T_HDR.created_by = '  
                                                + CONVERT(NVARCHAR,  
                                                @CURRENT_EMP_MKEY)  
                                                +  
                                                ' )';  
                            SET @hasWhereClause = 1;  
                        END  
                      ELSE  
                        BEGIN  
                            SET @WhereClause += ' OR ( T_HDR.created_by = '  
                                        + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +  
                                        ' ) '  
                            ;  
                        END  
      PRINT '@WhereClause:ALLOCATEDBYME: ' + @WhereClause;  
                  END  
  
                IF @filter = 'ALLOCATEDTOME'  
                  BEGIN  
                      IF @hasWhereClause = 0  
                        BEGIN  
                            PRINT 'ALLOCATEDTOME1'  
  
                            SET @WhereClause +=  
                            ' ( CONVERT(int,T_HDR.assigned_to) = '  
                            + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)  
                            + ' OR T_HDR.resposible_emp_mkey = '  
                            + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)  
                            +  
                            ')'  
                            ;  
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';  
                            SET @hasWhereClause = 1;  
                        END  
                      ELSE  
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';  
                        SET @WhereClause +=  
                        ' OR ( CONVERT(int,T_HDR.assigned_to) = '  
                        + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)  
                        + ' OR T_HDR.resposible_emp_mkey = '  
                        + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +  
                        ')';  
                  END  
  
                IF @filter = 'COMPLETEDBYME'  
                  BEGIN  
                      IF @hasWhereClause = 0  
                        BEGIN  
                            SET @WhereClause +=  
                            ' ( CONVERT(int,T_HDR.assigned_to) = '  
                            + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)  
                            +  
                            ' AND T_HDR.status IN (''COMPLETED''))';  
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';  
                            SET @hasWhereClause = 1;  
                        END  
                      ELSE  
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';  
                        SET @WhereClause +=  
                        ' OR ( CONVERT(int,T_HDR.assigned_to) = '  
                        + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)  
                        + ' AND T_HDR.status IN (''COMPLETED''))';  
                  END  
  
                IF @filter = 'COMPLETEDFORME'  
                  BEGIN  
                      IF @hasWhereClause = 0  
                        BEGIN  
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';  
                            SET @WhereClause += ' ( T_HDR.created_by = '  
                                                + CONVERT(NVARCHAR,  
                                                @CURRENT_EMP_MKEY)  
                                                +  
                            ' AND CONVERT(int,T_HDR.assigned_to) != '  
                                                + CONVERT(NVARCHAR,  
                                                @CURRENT_EMP_MKEY)  
                                                +  
                            ' AND T_HDR.status IN (''COMPLETED''))';  
                            SET @hasWhereClause = 1;  
                        END  
                      ELSE  
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';  
                        SET @WhereClause += ' OR ( T_HDR.created_by = '  
                                            + CONVERT(NVARCHAR,  
                                            @CURRENT_EMP_MKEY)  
                                            +  
                        ' AND CONVERT(int,T_HDR.assigned_to) != '  
                                            + CONVERT(NVARCHAR,  
                                            @CURRENT_EMP_MKEY)  
                                            +  
                        ' AND T_HDR.status IN (''COMPLETED''))';  
                  END  
  
                IF @filter = 'CANCELCLOSE'  
                  BEGIN  
                    IF @hasWhereClause = 0  
                        BEGIN  
                            SET @WhereClause += ' ( T_HDR.created_by = '  
                                                + CONVERT(NVARCHAR,  
                                                @CURRENT_EMP_MKEY)  
                                                +  
                            ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';  
                            --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')  
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';  
                            SET @hasWhereClause = 1;  
                        END  
                      ELSE  
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';  
                        SET @WhereClause += ' OR ( T_HDR.created_by = '  
                                            + CONVERT(NVARCHAR,  
                                            @CURRENT_EMP_MKEY)  
                                            +  
                        ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'') ) ';  
                  --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')  
                  END  
      
                SET @start = @end + 1;  
            END  
     
   SET @sql += ' AND ( ' + @WhereClause + ' ) ';  
     
      END  
    ELSE IF( @USER_FILTER IS NULL OR @USER_FILTER = 'Default'  OR @USER_FILTER = '' )  
      BEGIN  
         SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = '  
                              + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';  
          SET @STATUSClause = 1;  
          SET @sql += ' AND ( ' + @WhereClause + ' ) ';  
      END  
  
    -----------------------------------------------------------------------------------------------------  
    /* @PriorityFilter */  
    IF ( @PriorityFilter IS NOT NULL  
         AND @PriorityFilter <> '' )  
      BEGIN  
          SET @start = 1;  
          SET @hasWhereClause = 0;  
  
          WHILE @start <= Len(@PriorityFilter)  
            BEGIN  
                SET @end = Charindex(',', @PriorityFilter, @start);  
  
                IF @end = 0  
                  SET @end = Len(@PriorityFilter) + 1;  
  
                SET @filter = Ltrim(Rtrim(Substring(@PriorityFilter, @start,  
                                          @end  
                                          - @start  
                                          ))  
                              );  
  
                -- Append the priority condition  
                IF @filter = 'High'  
                  BEGIN  
                      IF @hasWhereClause = 0  
                        BEGIN  
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';  
                            SET @PriorityClause +=  
                            ' (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';  
                            SET @hasWhereClause = 1;  
                        END  
                      ELSE  
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';  
                        SET @PriorityClause +=  
                        ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')'  
                      ;  
                  END  
  
                IF @filter = 'Low'  
                  BEGIN  
                      IF @hasWhereClause = 0  
                        BEGIN  
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';  
                            SET @PriorityClause +=  
                            ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')'  
     ;  
                            SET @hasWhereClause = 1;  
                        END  
                      ELSE  
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';  
                        SET @PriorityClause +=  
                        ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';  
                  END  
  
                IF @filter = 'Medium'  
                  BEGIN  
                      IF @hasWhereClause = 0  
                        BEGIN  
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';  
                            SET @PriorityClause +=  
                            ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';  
                            SET @hasWhereClause = 1;  
                        END  
                      ELSE  
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';  
                        SET @PriorityClause +=  
                        ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'''  
                      ;  
                  END  
  
                SET @start = @end + 1;  
            END  
  
          SET @sql += ' AND ( ' + @PriorityClause + ' ) ';  
      END  
  
    -----------------------------------------------------------------------------------------------------  
    /* @TypeFilter */  
    IF ( @TypeFilter IS NOT NULL  
         AND @TypeFilter <> '' )  
      BEGIN  
          SET @start = 1;  
          SET @hasWhereClause = 0;  
  
          WHILE @start <= Len(@TypeFilter)  
            BEGIN  
                SET @end = Charindex(',', @TypeFilter, @start);  
  
                IF @end = 0  
                  SET @end = Len(@TypeFilter) + 1;  
  
                SET @filter = Ltrim(Rtrim(Substring(@TypeFilter, @start, @end  
                                          - @start  
                                          )));  
  
                IF @filter = 'RECURRING'  
                  BEGIN  
                      SELECT @TaskTypeMkey = master_mkey  
                      FROM   type_mst  
                      WHERE  type_code = 'TASK_TYPE'  
                             AND type_desc = @filter  
  
                      IF @hasWhereClause = 0  
                        BEGIN  
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey  
                                               +  
                                               ') '  
                            ;  
                            SET @hasWhereClause = 1;  
                        END  
                      ELSE  
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +  
                                           ') ';  
                  END  
  
                IF @filter = 'Approval'  
                  BEGIN  
                      SELECT @TaskTypeMkey = master_mkey  
                      FROM   type_mst  
                      WHERE  type_code = 'TASK_TYPE'  
                             AND type_desc = @filter  
  
                      IF @hasWhereClause = 0  
                        BEGIN  
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey  
                                               +  
                                               ') '  
                            ;  
                            SET @hasWhereClause = 1;  
                        END  
                      ELSE  
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +  
                                           ') ';  
                  END  
  
                IF @filter = 'COMPLIANCE'  
                  BEGIN  
                      SELECT @TaskTypeMkey = master_mkey  
                      FROM   type_mst  
                      WHERE  type_code = 'TASK_TYPE'  
                             AND type_desc = @filter  
  
                      IF @hasWhereClause = 0  
                        BEGIN  
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey  
                                            +  
                                               ') '  
                            ;  
                            SET @hasWhereClause = 1;  
                        END  
                      ELSE  
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +  
                                           ') ';  
                  END  
  
                IF @filter = 'GENERAL'  
                  BEGIN  
                      SELECT @TaskTypeMkey = master_mkey  
                      FROM   type_mst  
                      WHERE  type_code = 'TASK_TYPE'  
                             AND type_desc = @filter  
  
                      IF @hasWhereClause = 0  
                        BEGIN  
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey  
                                               +  
                                               ') '  
                            ;  
                            SET @hasWhereClause = 1;  
                        END  
                      ELSE  
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +  
                                           ') ';  
                  END  
  
                IF @filter = 'SYSTEM'  
                  BEGIN  
                      SELECT @TaskTypeMkey = master_mkey  
                      FROM   type_mst  
                      WHERE  type_code = 'TASK_TYPE'  
                             AND type_desc = @filter  
  
                      IF @hasWhereClause = 0  
                        BEGIN  
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey  
                                               +  
                                               ') '  
                            ;  
                            SET @hasWhereClause = 1;  
                        END  
                      ELSE  
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +  
                                           ') ';  
                  END  
  
                IF @filter = 'Email'  
                  BEGIN  
                      SELECT @TaskTypeMkey = master_mkey  
                      FROM   type_mst  
                      WHERE  type_code = 'TASK_TYPE'  
                             AND type_desc = @filter  
  
                      IF @hasWhereClause = 0  
                        BEGIN  
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey  
                                               +  
                                               ') '  
                            ;  
                            SET @hasWhereClause = 1;  
                        END  
                      ELSE  
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +  
                                           ') ';  
                  END  
  
                IF @filter = 'RERA COMPLAIN'  
                  BEGIN  
                      SELECT @TaskTypeMkey = master_mkey  
                      FROM   type_mst  
                      WHERE  type_code = 'TASK_TYPE'  
                             AND type_desc = @filter  
  
                      IF @hasWhereClause = 0  
                        BEGIN  
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey  
                                               +  
                                               ') '  
                            ;  
                            SET @hasWhereClause = 1;  
                        END  
                      ELSE  
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +  
                                           ') ';  
                  END  
  
                SET @start = @end + 1;  
            END  
  
          SET @sql += ' AND ( ' + @TypeClause + ' ) ';  
      END  
  
    -----------------------------------------------------------------------------------------------------  
    /* @STATUS_FILTER */  
    IF ( @STATUS_FILTER IS NOT NULL  
         AND @STATUS_FILTER <> '' )  
      BEGIN  
          SET @start = 1;  
          SET @hasWhereClause = 0;  
  
          WHILE @start <= Len(@STATUS_FILTER)  
            BEGIN  
                SET @end = Charindex(',', @STATUS_FILTER, @start);  
  
                IF @end = 0  
                  SET @end = Len(@STATUS_FILTER) + 1;  
  
                SET @filter = Ltrim(Rtrim(Substring(@STATUS_FILTER, @start, @end  
                                          - @start)  
                                    ))  
                ;  
  
                IF @filter = 'Today'  
                  BEGIN  
                      IF @hasWhereClause = 0  
                        BEGIN  
                            SET @STATUSClause += ' (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)  
             AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';  
       SET @hasWhereClause = 1;  
            END  
          ELSE  
       SET @STATUSClause += ' OR (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)   
             AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';  
    END  
  
                IF @filter = 'Pending'  
                  BEGIN  
                      IF @hasWhereClause = 0  
                        BEGIN  
                            SET @STATUSClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE()   
            and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';  
       SET @hasWhereClause = 1;  
      END  
      ELSE  
       SET @STATUSClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE()   
             and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';  
      END  
  
      IF @filter = 'Overdue'  
       BEGIN  
        IF @hasWhereClause = 0  
        BEGIN  
         SET @STATUSClause +=' (T_HDR.completion_date < GETDATE()   
               AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';  
         SET @hasWhereClause = 1;  
        END  
        ELSE  
         SET @STATUSClause += ' OR (T_HDR.completion_date < GETDATE()   
             AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';  
       END  
  
       IF @filter = 'Future'  
       BEGIN  
        IF @hasWhereClause = 0  
        BEGIN  
         SET @STATUSClause += ' (T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated''))   
               and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';  
        SET @hasWhereClause = 1;  
        END  
        ELSE  
         SET @STATUSClause += ' OR ((T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated''))   
               and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103)) ';  
       END  
  
       IF @filter = 'Review'  
       BEGIN  
        IF @hasWhereClause = 0  
        BEGIN  
         SET @STATUSClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';  
         SET @hasWhereClause = 1;  
        END  
        ELSE  
         SET @STATUSClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';  
       END  
  
       IF @filter = 'Completed'  
       BEGIN  
        IF @hasWhereClause = 0  
        BEGIN  
         SET @STATUSClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';  
         SET @hasWhereClause = 1;  
        END  
        ELSE  
         SET @TypeClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';  
       END  
  
       IF @filter = 'Cancelled'  
       BEGIN  
        IF @hasWhereClause = 0  
        BEGIN  
         SET @STATUSClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';  
         SET @hasWhereClause = 1;  
        END  
        ELSE  
         SET @STATUSClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';  
       END  
  
       SET @start = @end + 1;  
      END  
  
       SET @sql += ' AND ( ' + @STATUSClause + ' ) ';  
      END  
     PRINT @sql;  
  
    --print len(@sql)  
    EXEC Sp_executesql @sql;  
  
    EXEC Sp_dashboard_count @CURRENT_EMP_MKEY;  
END  
  



-------------------------------------------------------------------------------------------------------------------------------------------
Date: 26-05-2025

GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_DASHBOARD_NT]    Script Date: 26-05-2025 12:32:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--  EXEC SP_TASK_DASHBOARD_NT 926,null,'Default',null,null,926,1
--  EXEC SP_TASK_DASHBOARD_NT 926,null,null
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT',''
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next 7 Days'
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next 2 Weeks'
--  EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT','Next Month'
--  EXEC SP_TASK_DASHBOARD_NT 926,'ALLOCATEDBYME','Review'
ALTER PROCEDURE [dbo].[SP_TASK_DASHBOARD_NT] (@CURRENT_EMP_MKEY  INT,
                                              @STATUS_FILTER     NVARCHAR(max) = NULL,--'Today,Completed,Overdue,Pending,Cancelled,Future,Review',
                                              @USER_FILTER       VARCHAR(max) =NULL,--'ALLOCATEDBYME,ALLOCATEDTOME,COMPLETEDBYME,COMPLETEDFORME,CANCELCLOSE',
                                              @PriorityFilter    VARCHAR(max) =NULL,--'High,Medium,Low',
                                              @TypeFilter        VARCHAR(max) =NULL,--'RECURRING,APPROVAL,COMPLIANCE,APPROVAL,GENERAL,SYSTEM,EMAIL,RERA COMPLAIN';
                                              @Session_User_Id   INT,
                                              @Business_Group_Id INT)
AS
  BEGIN
      DECLARE @DAY INT

      SET @DAY=0

      --DECLARE @STATUS_FILTER VARCHAR(max) = null,-- 'Today,Completed,Overdue,Pending,Cancelled,Future,Review',
      --     @USER_FILTER   VARCHAR(max) = null,--'ALLOCATEDBYME,ALLOCATEDTOME,COMPLETEDBYME,COMPLETEDFORME,CANCELCLOSE',
      --     @PriorityFilter VARCHAR(max) = null,--'High,Medium,Low',
      --     @TypeFilter VARCHAR(max) = null--'RECURRING,APPROVAL,COMPLIANCE,APPROVAL,GENERAL,SYSTEM,EMAIL,RERA COMPLAIN';
      DECLARE @sql NVARCHAR(max) = '';
      DECLARE @start INT = 1,
              @end   INT;
      DECLARE @hasWhereClause BIT = 0;
      DECLARE @WhereClause    NVARCHAR(max) = '',
              @filter         VARCHAR(100),
              @PriorityClause NVARCHAR(max) = '',
              @TypeClause     NVARCHAR(max) = '',
              @TaskTypeMkey   NVARCHAR(50),
              @STATUSClause   NVARCHAR(max) = ''

      SET @sql ='SELECT  '''' as Sr_No, T_HDR.mkey,Isnull(TMST.type_desc, ''NA'') CATEGORY,T_HDR.task_no,dbo.[Initcap](Isnull(CREATOR.emp_full_name, ''NA'')) CREATOR,
	  dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, ''NA'')) RESPONSIBLE,
	  dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, ''NA'')) ACTIONABLE,
	  T_HDR.creation_date,                    
	  CASE                      
	  WHEN T_HDR.status IN ( ''CREATED'' ) THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUB TASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUBTASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status IN ( ''WORK IN PROGRESS'', ''CLOSE INITIATED'', ''CANCEL INITIATED'', ''RE-WORK'' ) THEN ''In Progress''                      
	  WHEN T_HDR.status IN ( ''CLOSE'', ''COMPLETED'' ) THEN ''Completed''                      ELSE ''Others''                    END AS Dashboard_Status, 
	  CONVERT(VARCHAR, T_HDR.completion_date, 103) AS COMPLETION_DATE,                    
	  dbo.[Initcap](T_HDR.task_name) AS TASK_NAME,                    
	  T_HDR.task_description,                    
	  T_HDR.tags,                    
	  dbo.[Initcap](T_HDR.status) AS STATUS,                   
	  CASE                      
	  WHEN Isnull(CREATOR.first_name, ''NA'') != Isnull(RESPONSIBLE.first_name, ''NA'') 
	  THEN dbo.[Initcap](Isnull(CREATOR.first_name, ''NA'')) + '' > '' + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, ''NA''))                      
	  ELSE dbo.[Initcap](Isnull(CREATOR.first_name, ''NA''))                    
	  END AS RESPONSIBLE_TAG,                   
	  dbo.[Initcap](Isnull(PMST.type_desc, '''')) AS PROJECT_NAME,                    
	  dbo.Tasknamestring(T_HDR.mkey) AS TASK_HISTORY,                    
	  Isnull(Rtrim(T_HDR.[priority]), '''') AS [Priority],                    
	  Isnull(T_HDR.percent_complete, ''0'') AS Progress_Percentage,                    
	  Isnull(parent_counts.parenttaskcount, 0) AS SubTask_Count,                    
	  T_HDR.CREATED_BY             
	  FROM task_hdr T_HDR             
	  LEFT JOIN employee_mst CREATOR ON CREATOR.mkey = T_HDR.created_by AND CREATOR.delete_flag = ''N''             
	  LEFT JOIN employee_mst RESPONSIBLE ON RESPONSIBLE.mkey = T_HDR.assigned_to AND RESPONSIBLE.delete_flag = ''N''             
	  LEFT JOIN employee_mst ACTIONABLE ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey AND ACTIONABLE.delete_flag = ''N''            
	  LEFT JOIN type_mst TMST ON TMST.master_mkey = T_HDR.caregory AND TMST.type_code = ''CATEGORY'' AND TMST.delete_flag = ''N''             
	  LEFT JOIN type_mst PMST ON PMST.master_mkey = T_HDR.project_id AND PMST.type_code = ''PROJECT'' AND PMST.delete_flag = ''N''             
	  LEFT JOIN (SELECT task_parent_id, Count(*) AS ParentTaskCount                        
	  FROM task_hdr WHERE task_parent_id IS NOT NULL AND mkey NOT IN (task_parent_id) AND delete_flag = ''N''                        
	  GROUP BY task_parent_id) parent_counts ON T_HDR.mkey = parent_counts.task_parent_id             
	  WHERE Isnull(T_HDR.status_flag, ''A'') IN (''A'') AND T_HDR.delete_flag = ''N'' ';

    PRINT '@USER_FILTER: ' + @USER_FILTER + ' Val ';

    /* @USER_FILTER */
    IF ( @USER_FILTER <> '' AND @USER_FILTER IS NOT NULL ) -- @USER_FILTER is not null OR
      BEGIN
          WHILE @start <= Len(@USER_FILTER)
            BEGIN
                SET @end = Charindex(',', @USER_FILTER, @start);

                IF @end = 0
                  SET @end = Len(@USER_FILTER) + 1;

                SET @filter = Ltrim(Rtrim(Substring(@USER_FILTER, @start, @end - @start)));

				
                IF @filter = 'Default'
                  BEGIN
				  print 'def 1'
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @sql += ' OR ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' ) ';
                        END
						PRINT '@WhereClause:Default: ' + @WhereClause;
                  END

                IF @filter = 'ALLOCATEDBYME' 
                  BEGIN
				  print 'allo 2'
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.created_by = '
                                                + CONVERT(NVARCHAR,
                                                @CURRENT_EMP_MKEY)
                                                +
                                                ' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @WhereClause += ' OR ( T_HDR.created_by = '
                                        + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +
                                        ' ) '
                            ;
                        END
						PRINT '@WhereClause:ALLOCATEDBYME: ' + @WhereClause;
                  END

                IF @filter = 'ALLOCATEDTOME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            PRINT 'ALLOCATEDTOME1'

                            SET @WhereClause +=
                            ' ( CONVERT(int,T_HDR.assigned_to) = '
                            + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                            + ' OR T_HDR.resposible_emp_mkey = '
                            + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                            +
                            ')'
                            ;
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                        SET @WhereClause +=
                        ' OR ( CONVERT(int,T_HDR.assigned_to) = '
                        + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' OR T_HDR.resposible_emp_mkey = '
                        + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +
                        ')';
                  END

                IF @filter = 'COMPLETEDBYME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause +=
                            ' ( CONVERT(int,T_HDR.assigned_to) = '
                            + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                            +
                            ' AND T_HDR.status IN (''COMPLETED''))';
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause +=
                        ' OR ( CONVERT(int,T_HDR.assigned_to) = '
                        + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'COMPLETEDFORME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @WhereClause += ' ( T_HDR.created_by = '
                                                + CONVERT(NVARCHAR,
                                                @CURRENT_EMP_MKEY)
                                                +
                            ' AND CONVERT(int,T_HDR.assigned_to) != '
                                                + CONVERT(NVARCHAR,
                                                @CURRENT_EMP_MKEY)
                                                +
                            ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause += ' OR ( T_HDR.created_by = '
                                            + CONVERT(NVARCHAR,
                                            @CURRENT_EMP_MKEY)
                                            +
                        ' AND CONVERT(int,T_HDR.assigned_to) != '
                                            + CONVERT(NVARCHAR,
                                            @CURRENT_EMP_MKEY)
                                            +
                        ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'CANCELCLOSE'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' ( T_HDR.created_by = '
                                                + CONVERT(NVARCHAR,
                                                @CURRENT_EMP_MKEY)
                                                +
                            ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
                        SET @WhereClause += ' OR ( T_HDR.created_by = '
                                            + CONVERT(NVARCHAR,
                                            @CURRENT_EMP_MKEY)
                                            +
                        ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'') ) ';
                  --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                  END
				
                SET @start = @end + 1;
            END
			
			SET @sql += ' AND ( ' + @WhereClause + ' ) ';
			
      END
    ELSE IF( @USER_FILTER IS NULL OR @USER_FILTER = 'Default'  OR @USER_FILTER = '' )
      BEGIN
         SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = '
                              + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
          SET @STATUSClause = 1;
          SET @sql += ' AND ( ' + @WhereClause + ' ) ';
      END

    -----------------------------------------------------------------------------------------------------
    /* @PriorityFilter */
    IF ( @PriorityFilter IS NOT NULL
         AND @PriorityFilter <> '' )
      BEGIN
          SET @start = 1;
          SET @hasWhereClause = 0;

          WHILE @start <= Len(@PriorityFilter)
            BEGIN
                SET @end = Charindex(',', @PriorityFilter, @start);

                IF @end = 0
                  SET @end = Len(@PriorityFilter) + 1;

                SET @filter = Ltrim(Rtrim(Substring(@PriorityFilter, @start,
                                          @end
                                          - @start
                                          ))
                              );

                -- Append the priority condition
                IF @filter = 'High'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                            SET @PriorityClause +=
                            ' (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                        SET @PriorityClause +=
                        ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')'
                      ;
                  END

                IF @filter = 'Low'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                            SET @PriorityClause +=
                            ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')'
                            ;
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                        SET @PriorityClause +=
                        ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
                  END

                IF @filter = 'Medium'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                            SET @PriorityClause +=
                            ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                        SET @PriorityClause +=
                        ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'''
                      ;
                  END

                SET @start = @end + 1;
            END

          SET @sql += ' AND ( ' + @PriorityClause + ' ) ';
      END

    -----------------------------------------------------------------------------------------------------
    /* @TypeFilter */
    IF ( @TypeFilter IS NOT NULL
         AND @TypeFilter <> '' )
      BEGIN
          SET @start = 1;
          SET @hasWhereClause = 0;

          WHILE @start <= Len(@TypeFilter)
            BEGIN
                SET @end = Charindex(',', @TypeFilter, @start);

                IF @end = 0
                  SET @end = Len(@TypeFilter) + 1;

                SET @filter = Ltrim(Rtrim(Substring(@TypeFilter, @start, @end
                                          - @start
                                          )));

                IF @filter = 'RECURRING'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey
                                               +
                                               ') '
                            ;
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +
                                           ') ';
                  END

                IF @filter = 'Approval'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey
                                               +
                                               ') '
                            ;
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +
                                           ') ';
                  END

                IF @filter = 'COMPLIANCE'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey
                                               +
                                               ') '
                            ;
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +
                                           ') ';
                  END

                IF @filter = 'GENERAL'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey
                                               +
                                               ') '
                            ;
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +
                                           ') ';
                  END

                IF @filter = 'SYSTEM'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey
                                               +
                                               ') '
                            ;
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +
                                           ') ';
                  END

                IF @filter = 'Email'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey
                                               +
                                               ') '
                            ;
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +
                                           ') ';
                  END

                IF @filter = 'RERA COMPLAIN'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey
                                               +
                                               ') '
                            ;
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +
                                           ') ';
                  END

                SET @start = @end + 1;
            END

          SET @sql += ' AND ( ' + @TypeClause + ' ) ';
      END

    -----------------------------------------------------------------------------------------------------
    /* @STATUS_FILTER */
    IF ( @STATUS_FILTER IS NOT NULL
         AND @STATUS_FILTER <> '' )
      BEGIN
          SET @start = 1;
          SET @hasWhereClause = 0;

          WHILE @start <= Len(@STATUS_FILTER)
            BEGIN
                SET @end = Charindex(',', @STATUS_FILTER, @start);

                IF @end = 0
                  SET @end = Len(@STATUS_FILTER) + 1;

                SET @filter = Ltrim(Rtrim(Substring(@STATUS_FILTER, @start, @end
                                          - @start)
                                    ))
                ;

                IF @filter = 'Today'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @STATUSClause += ' (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
							SET @hasWhereClause = 1;
            END
          ELSE
							SET @STATUSClause += ' OR (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) 
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
				END

                IF @filter = 'Pending'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @STATUSClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
												and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
							SET @hasWhereClause = 1;
						END
						ELSE
							SET @STATUSClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
													and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
						END

						IF @filter = 'Overdue'
							BEGIN
								IF @hasWhereClause = 0
								BEGIN
									SET @STATUSClause +=' (T_HDR.completion_date < GETDATE() 
															AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
									SET @hasWhereClause = 1;
								END
								ELSE
									SET @STATUSClause += ' OR (T_HDR.completion_date < GETDATE() 
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
							END

							IF @filter = 'Future'
							BEGIN
								IF @hasWhereClause = 0
								BEGIN
									SET @STATUSClause += ' (T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
															and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
								SET @hasWhereClause = 1;
								END
								ELSE
									SET @STATUSClause += ' OR ((T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
															and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103)) ';
							END

							IF @filter = 'Review'
							BEGIN
								IF @hasWhereClause = 0
								BEGIN
									SET @STATUSClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
									SET @hasWhereClause = 1;
								END
								ELSE
									SET @STATUSClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
							END

							IF @filter = 'Completed'
							BEGIN
								IF @hasWhereClause = 0
								BEGIN
									SET @STATUSClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
									SET @hasWhereClause = 1;
								END
								ELSE
									SET @TypeClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
							END

							IF @filter = 'Cancelled'
							BEGIN
								IF @hasWhereClause = 0
								BEGIN
									SET @STATUSClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
									SET @hasWhereClause = 1;
								END
								ELSE
									SET @STATUSClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
							END

							SET @start = @end + 1;
						END

							SET @sql += ' AND ( ' + @STATUSClause + ' ) ';
						END
					PRINT @sql;

    --print len(@sql)
    EXEC Sp_executesql @sql;

    EXEC Sp_dashboard_count @CURRENT_EMP_MKEY;
END

---------------------------------------------------------------------------------------------------------------------------------------------------




GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_DETAILS_BY_MKEY_NT]    Script Date: 26-05-2025 13:17:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	exec SP_TASK_DETAILS_BY_MKEY_NT 845,937,0
ALTER procedure [dbo].[SP_TASK_DETAILS_BY_MKEY_NT](@HDR_MKEY VARCHAR(250),@Session_User_Id          INT = null,  
@Business_Group_Id	  INT = null)
AS
  BEGIN
      DECLARE @DAY INT

      SET @DAY=0

      SELECT T_HDR.mkey,
             T_HDR.task_no,
             T_HDR.isnode,
             T_HDR.task_parent_id,
             T_HDR.task_main_node_id,
			 T_HDR.Task_Type,
             T_HDR.status,
             T_HDR.status_perc,
             T_HDR.task_created_by,
             T_HDR.approver_id,
             T_HDR.approve_action_date,
			 T_HDR.ASSIGNED_TO,
			 E_MST.EMP_FULL_NAME			AS 'Assigned_To_Name',
             T_MST.type_desc                           CAREGORY,
             T_HDR.project_id                          PROJECT_MKEY,
			 T_HDR.sub_project_id                    AS BUILDING_MKEY,
             P_MST.type_desc                           'PROJECT',
			 P_MST.type_desc                           'Project_Name',
             S_P_MST.type_desc                         'Sub_PROJECT',
			 S_P_MST.type_desc						AS 'Building_Name',
             T_HDR.caregory                            CATEGORY_MKEY,
             T_HDR.creation_date,
             T_HDR.task_name,
             T_HDR.task_description,
             E_MST.emp_full_name,
			 
			 case when T_HDR.TASK_CREATED_BY = @Session_User_Id --When Task owner created the task /* Inside Task Owner login*/
			 and T_HDR.STATUS in ('CREATED','SUB TASK CREATED','WORK IN PROGRESS') and T_HDR.STATUS_PERC = 0.0 then 'Y'  /*Task owner created the task and 
			 it is currently on created status and progress is 0%  then all tabs are enabled for task owner and task owner can add tabs list like Checklist, Authority,
			 Outcome and Compliance via remark but with 0%  progress and WIP status update.  Otherwise any progress between 0% to 100%  
			 with WIP status will lead to disable all tabs for task owner.*/ 
			 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id) --When Task owner created the task /* Inside assignee login */
			 and T_HDR.STATUS_PERC = 0.0  /* Inside assignee login also all tabs are enabled because progress % is 0, however when assignee change 
			 the progress percent % between 0% to 100% then tabs are disabled for the task owner,but enabled at the assignee side. Assignee can able to update all tabs  */
			 and T_HDR.STATUS in ('CREATED','SUB TASK CREATED','WORK IN PROGRESS') Then 'Y'  
			 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 /*When Assignee change to close initiate(100%) */
							-- Inside assignee login 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id) 
			 and T_HDR.STATUS_PERC = 100.0 
			 and  T_HDR.STATUS in ('CLOSE INITIATED')  then 'N'/* If an assignee changes the status to cancel initiate or close initiate 
			 it means progress % is whether 0% or 100% so, in this scenario all tabs are disabled to the assignee side. Assignee will never change any of tab/s 
			 and inside the task owner log in all tabs are enabled for the task owner. Task owner can update all tabs. */
			 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id)/* When Assignee change to  cancel initiate (0%) Inside assignee login */
			 and T_HDR.STATUS in ('CANCEL INITIATED')  then 'N' /* If an assignee changes the status to cancel initiate or close initiate 
			 it means progress % is whether 0% or 100% so, in this scenario all tabs are disabled to the assignee side. Assignee will never change any of tab/s 
			 and inside the task owner log in all tabs are enabled for the task owner. Task owner can update all tabs. */

			 /*When Assignee change to close initiate(100%) or cancel initiate (0%) */
			  --Inside Task Owner login 
			 when  T_HDR.TASK_CREATED_BY = @Session_User_Id	 
			 and T_HDR.STATUS_PERC between 0.0 and 100.0 and T_HDR.STATUS in ('CLOSE INITIATED','CANCEL INITIATED')  then 'Y' 
			 /* Now inside task owner log in all tabs are enabled and task owner can do all changes in tabs and the status which are visible 
			 to the task owner is Cancel or Close and Re-work as per the assignee action if assignee triggered Close initiate then task owner can see 
			 the Close or if Cancel Initiate is triggered by the assignee then task owner can see Cancel and re-work is by default */
			 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 /*When Task owner change status to re-work  */
			 ---Inside Task Owner login
			 WHEN  T_HDR.TASK_CREATED_BY= @Session_User_Id	
			 and T_HDR.STATUS in ('RE-WORK')  then 'N' /*-- When task owner change status to re-work instead of Close or Cancel then all tabs are disabled 
														at task owner side now task owner is not able to do any changes inside any tab.*/
			 /* When Task owner change status to re-work */
			 --- Inside assignee login
			 WHEN  (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id) 
			 and T_HDR.STATUS in ('RE-WORK')  then 'Y' /* When the task owner gives a task to re-work to the assignee then status will change to re-work for the assignee 
														 and now all tabs are enabled for assignee and can do any changes inside any tab.*/
	 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 WHEN  (T_HDR.TASK_CREATED_BY = @Session_User_Id) or (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id)
			 and T_HDR.STATUS in ('CANCEL','CANCELLED','CLOSE')  then 'N' /* When task owner can do Cancel or Close instead of re-work 
																			 then all tabs are disabled for task owner as well as assignee */
 ---------------------------------------------------------------------------------------------------------------------------------------------------
			WHEN  (T_HDR.TASK_CREATED_BY = @Session_User_Id) and (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id)
			 and T_HDR.STATUS not in ('CANCEL','CANCELLED','CLOSE')  then 'Y' /* When Task Owner and Assignee are same then enabled  */
---------------------------------------------------------------------------------------------------------------------------------------------------
			 ELSE 'N'
			 end as 'Process_Flag',
             T_HDR.tags,
             CONVERT(VARCHAR(10), completion_date, 120)COMPLETION_DATE,
             --Isnull(file_name, '')                     [FILE_NAME],
             --Isnull(file_path, '')                     FILE_PATH,
             T_HDR.resposible_emp_mkey
			,ISNULL(RTrim(T_HDR.Priority),'') AS [Priority] 
			,ISNULL(CONVERT(NVARCHAR(20), T_HDR.Tentative_Start_Date),null) AS Tentative_Start_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Tentative_End_Date),null) AS Tentative_End_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Actual_Start_Date),null) AS Actual_Start_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Actual_End_Date),null) AS Actual_End_Date
      FROM   task_hdr T_HDR
             JOIN employee_mst E_MST
               ON E_MST.mkey = T_HDR.assigned_to
             LEFT JOIN type_mst T_MST
                    ON T_MST.master_mkey = T_HDR.caregory
             --AND T_MST.TYPE_CODE='CATEGORY'
             LEFT JOIN type_mst P_MST
                    ON P_MST.master_mkey = T_HDR.project_id
             LEFT JOIN type_mst S_P_MST
                    ON S_P_MST.master_mkey = T_HDR.sub_project_id
             --LEFT JOIN task_media_trl T_MEDIA
             --       ON T_MEDIA.mkey = T_HDR.mkey
             --          AND T_MEDIA.delete_flag = 'N'
      WHERE  T_HDR.mkey = @HDR_MKEY
  END 
----------------------------------------------------------------------------------------------------------------------------------------



--  EXEC SP_TASK_DASHBOARD_NT 926,null,'Default',null,null,926,1
ALTER PROCEDURE [dbo].[SP_TASK_DASHBOARD_NT] (@CURRENT_EMP_MKEY  INT,
                                              @STATUS_FILTER     NVARCHAR(max) = NULL,--'Today,Completed,Overdue,Pending,Cancelled,Future,Review',
                                              @USER_FILTER       VARCHAR(max) =NULL,--'ALLOCATEDBYME,ALLOCATEDTOME,COMPLETEDBYME,COMPLETEDFORME,CANCELCLOSE',
                                              @PriorityFilter    VARCHAR(max) =NULL,--'High,Medium,Low',
                                              @TypeFilter        VARCHAR(max) =NULL,--'RECURRING,APPROVAL,COMPLIANCE,APPROVAL,GENERAL,SYSTEM,EMAIL,RERA COMPLAIN';
                                              @Session_User_Id   INT,
                                              @Business_Group_Id INT)
AS
  BEGIN
      DECLARE @DAY INT
      SET @DAY=0
      DECLARE @sql NVARCHAR(max) = '';
      DECLARE @start INT = 1,
              @end   INT;
      DECLARE @hasWhereClause BIT = 0;
      DECLARE @WhereClause    NVARCHAR(max) = '',
              @filter         VARCHAR(100),
              @PriorityClause NVARCHAR(max) = '',
              @TypeClause     NVARCHAR(max) = '',
              @TaskTypeMkey   NVARCHAR(50),
              @STATUSClause   NVARCHAR(max) = ''

	SET @sql ='SELECT  T_HDR.mkey as Sr_No, T_HDR.mkey,Isnull(TMST.type_desc, ''NA'') CATEGORY,T_HDR.task_no,dbo.[Initcap](Isnull(CREATOR.emp_full_name, ''NA'')) CREATOR,
	  dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, ''NA'')) RESPONSIBLE,
	  dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, ''NA'')) ACTIONABLE,
	  T_HDR.creation_date,                    
	  CASE                      
	  WHEN T_HDR.status IN ( ''CREATED'' ) THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUB TASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUBTASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status IN ( ''WORK IN PROGRESS'', ''CLOSE INITIATED'', ''CANCEL INITIATED'', ''RE-WORK'' ) THEN ''In Progress''                      
	  WHEN T_HDR.status IN ( ''CLOSE'', ''COMPLETED'' ) THEN ''Completed''                      ELSE ''Others''                    END AS Dashboard_Status, 
	  CONVERT(VARCHAR, T_HDR.completion_date, 103) AS COMPLETION_DATE,                    
	  dbo.[Initcap](T_HDR.task_name) AS TASK_NAME,                    
	  T_HDR.task_description,                    
	  T_HDR.tags,                    
	  dbo.[Initcap](T_HDR.status) AS STATUS,                   
	  CASE                      
	  WHEN Isnull(CREATOR.first_name, ''NA'') != Isnull(RESPONSIBLE.first_name, ''NA'') 
	  THEN dbo.[Initcap](Isnull(CREATOR.first_name, ''NA'')) + '' > '' + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, ''NA''))                      
	  ELSE dbo.[Initcap](Isnull(CREATOR.first_name, ''NA''))                    
	  END AS RESPONSIBLE_TAG,                   
	  dbo.[Initcap](Isnull(PMST.type_desc, '''')) AS PROJECT_NAME,                    
	  dbo.Tasknamestring(T_HDR.mkey) AS TASK_HISTORY,                    
	  Isnull(Rtrim(T_HDR.[priority]), '''') AS [Priority],                    
	  Isnull(T_HDR.percent_complete, ''0'') AS Progress_Percentage,                    
	  Isnull(parent_counts.parenttaskcount, 0) AS SubTask_Count,                    
	  T_HDR.CREATED_BY             
	  FROM task_hdr T_HDR             
	  LEFT JOIN employee_mst CREATOR ON CREATOR.mkey = T_HDR.created_by AND CREATOR.delete_flag = ''N''             
	  LEFT JOIN employee_mst RESPONSIBLE ON RESPONSIBLE.mkey = T_HDR.assigned_to AND RESPONSIBLE.delete_flag = ''N''             
	  LEFT JOIN employee_mst ACTIONABLE ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey AND ACTIONABLE.delete_flag = ''N''            
	  LEFT JOIN type_mst TMST ON TMST.master_mkey = T_HDR.caregory AND TMST.type_code = ''CATEGORY'' AND TMST.delete_flag = ''N''             
	  LEFT JOIN type_mst PMST ON PMST.master_mkey = T_HDR.project_id AND PMST.type_code = ''PROJECT'' AND PMST.delete_flag = ''N''             
	  LEFT JOIN (SELECT task_parent_id, Count(*) AS ParentTaskCount                        
	  FROM task_hdr WHERE task_parent_id IS NOT NULL AND mkey NOT IN (task_parent_id) AND delete_flag = ''N''                        
	  GROUP BY task_parent_id) parent_counts ON T_HDR.mkey = parent_counts.task_parent_id             
	  WHERE Isnull(T_HDR.status_flag, ''A'') IN (''A'') AND T_HDR.delete_flag = ''N'' ';

	--PRINT '@USER_FILTER: ' + @USER_FILTER + ' Val ';

    /* @USER_FILTER */
    IF ( @USER_FILTER <> '' AND @USER_FILTER IS NOT NULL ) -- @USER_FILTER is not null OR
      BEGIN
          WHILE @start <= Len(@USER_FILTER)
            BEGIN
                SET @end = Charindex(',', @USER_FILTER, @start);
                IF @end = 0
                  SET @end = Len(@USER_FILTER) + 1;
                SET @filter = Ltrim(Rtrim(Substring(@USER_FILTER, @start, @end - @start)));
				
                IF @filter = 'Default'
                  BEGIN
				 -- print 'def 1'
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @sql += ' OR ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' ) ';
                        END
						--PRINT '@WhereClause:Default: ' + @WhereClause;
                  END

                IF @filter = 'ALLOCATEDBYME' 
                  BEGIN
				--  print 'allo 2'
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +' ) ';
                        END
                  END

                IF @filter = 'ALLOCATEDTOME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN

                            SET @WhereClause +=' ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+ 
							' OR T_HDR.resposible_emp_mkey = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+')';
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                        SET @WhereClause +=' OR ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +')';
                  END

                IF @filter = 'COMPLETEDBYME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' ( CONVERT(int,T_HDR.assigned_to) = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+
                            ' AND T_HDR.status IN (''COMPLETED''))';
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause += ' OR ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'COMPLETEDFORME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @WhereClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) +
                            ' AND CONVERT(int,T_HDR.assigned_to) != '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+' AND CONVERT(int,T_HDR.assigned_to) != '
                                            + CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+ ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'CANCELCLOSE'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' ( T_HDR.created_by = ' + CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) +
                            ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
                        SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+
                        ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'') ) ';
                  --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                  END
				
                SET @start = @end + 1;
            END
			
		
			SET @sql += ' AND ( ' + @WhereClause + ' ) ';
			
      END
    ELSE IF( @USER_FILTER IS NULL OR @USER_FILTER = 'Default'  OR @USER_FILTER = '' )
      BEGIN
         SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
          SET @hasWhereClause = 1;
          SET @sql += ' AND ( ' + @WhereClause + ' ) ';
      END
    -----------------------------------------------------------------------------------------------------
    /* @PriorityFilter */
    IF ( @PriorityFilter IS NOT NULL
         AND @PriorityFilter <> '' )
      BEGIN
          SET @start = 1;
          SET @hasWhereClause = 0;

          WHILE @start <= Len(@PriorityFilter)
            BEGIN
                SET @end = Charindex(',', @PriorityFilter, @start);

                IF @end = 0
                  SET @end = Len(@PriorityFilter) + 1;

                SET @filter = Ltrim(Rtrim(Substring(@PriorityFilter, @start,@end - @start )) );

                -- Append the priority condition
                IF @filter = 'High'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                            SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                        SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
                  END

                IF @filter = 'Low'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                            SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                        SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
						END

                IF @filter = 'Medium'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                            SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                        SET @PriorityClause += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                  END

                SET @start = @end + 1;
            END
			
			SET @sql += ' AND ( ' + @PriorityClause + ' ) ';
      END

    -----------------------------------------------------------------------------------------------------
    /* @TypeFilter */
    IF ( @TypeFilter IS NOT NULL
         AND @TypeFilter <> '' )
      BEGIN
          SET @start = 1;
          SET @hasWhereClause = 0;

          WHILE @start <= Len(@TypeFilter)
            BEGIN
                SET @end = Charindex(',', @TypeFilter, @start);

                IF @end = 0
                  SET @end = Len(@TypeFilter) + 1;

                SET @filter = Ltrim(Rtrim(Substring(@TypeFilter, @start, @end - @start)));

                IF @filter = 'RECURRING'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'Approval'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'COMPLIANCE'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') '
                            ;
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'GENERAL'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'SYSTEM'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
                  END

                IF @filter = 'Email'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'RERA COMPLAIN'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
                  END

                SET @start = @end + 1;
            END

          SET @sql += ' AND ( ' + @TypeClause + ' ) ';
      END

    -----------------------------------------------------------------------------------------------------
    /* @STATUS_FILTER */
    IF ( @STATUS_FILTER IS NOT NULL
         AND @STATUS_FILTER <> '' )
      BEGIN
          SET @start = 1;
          SET @hasWhereClause = 0;

			WHILE @start <= Len(@STATUS_FILTER)
            BEGIN
                SET @end = Charindex(',', @STATUS_FILTER, @start);

                IF @end = 0
                  SET @end = Len(@STATUS_FILTER) + 1;

                SET @filter = Ltrim(Rtrim(Substring(@STATUS_FILTER, @start, @end - @start)));

				IF @filter = 'Today'
				BEGIN
				print '@filter = Today';
					IF @hasWhereClause = 0
                        BEGIN
                            SET @STATUSClause += ' (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
							SET @hasWhereClause = 1;
							print 'today 12';
						END
						ELSE
							begin
							SET @STATUSClause += ' OR (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) 
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
							print 'today 56';
							end
				END

				IF @filter = 'Pending'
				BEGIN
					IF @hasWhereClause = 0
					BEGIN
						SET @STATUSClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
												and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
						SET @hasWhereClause = 1;
					END
				ELSE
					SET @STATUSClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
											and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
				END

				IF @filter = 'Overdue'
				BEGIN
					IF @hasWhereClause = 0
					BEGIN
						SET @STATUSClause +=' (T_HDR.completion_date < GETDATE() 
											AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
						SET @hasWhereClause = 1;
					END
				ELSE
					SET @STATUSClause += ' OR (T_HDR.completion_date < GETDATE() 
											AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
				END

				IF @filter = 'Future'
				BEGIN
					IF @hasWhereClause = 0
					BEGIN
						SET @STATUSClause += ' (T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
											and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
						SET @hasWhereClause = 1;
					END
				ELSE
						SET @STATUSClause += ' OR ((T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
										and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103)) ';
				END

				IF @filter = 'Review'
				BEGIN
					IF @hasWhereClause = 0
					BEGIN
						SET @STATUSClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
						SET @hasWhereClause = 1;
					END
					ELSE
						SET @STATUSClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
				END

				IF @filter = 'Completed'
				BEGIN
					IF @hasWhereClause = 0
					BEGIN
						SET @STATUSClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
						SET @hasWhereClause = 1;
					END
				ELSE
						SET @TypeClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
				END

				IF @filter = 'Cancelled'
				BEGIN
					IF @hasWhereClause = 0
					BEGIN
						SET @STATUSClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
						SET @hasWhereClause = 1;
					END
					ELSE
						SET @STATUSClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
				END

				SET @start = @end + 1;
			END
					if(@STATUSClause is not null )
					begin
						print '@STATUSClause:dgdf '+ @STATUSClause;
						SET @sql += ' AND ( ' + @STATUSClause + ' ) ';
					end
				END
				print '@@sql: '+ @sql;
    EXEC Sp_executesql @sql;

    EXEC Sp_dashboard_count @CURRENT_EMP_MKEY;
END

------------------------------------------------------------------------------------------------------------------------------------
--	exec SP_TASK_DETAILS_BY_MKEY_NT 845,937,0
ALTER procedure [dbo].[SP_TASK_DETAILS_BY_MKEY_NT](@HDR_MKEY VARCHAR(250),@Session_User_Id          INT = null,  
@Business_Group_Id	  INT = null)
AS
  BEGIN
      DECLARE @DAY INT

      SET @DAY=0

      SELECT T_HDR.mkey,
             T_HDR.task_no,
             T_HDR.isnode,
             T_HDR.task_parent_id,
             T_HDR.task_main_node_id,
			 T_HDR.Task_Type,
             T_HDR.status,
             T_HDR.status_perc,
             T_HDR.task_created_by,
             T_HDR.approver_id,
             T_HDR.approve_action_date,
			 T_HDR.ASSIGNED_TO,
			 E_MST.EMP_FULL_NAME			AS 'Assigned_To_Name',
             T_MST.type_desc                           CAREGORY,
             T_HDR.project_id                          PROJECT_MKEY,
			 T_HDR.sub_project_id                    AS BUILDING_MKEY,
             P_MST.type_desc                           'PROJECT',
			 P_MST.type_desc                           'Project_Name',
             S_P_MST.type_desc                         'Sub_PROJECT',
			 S_P_MST.type_desc						AS 'Building_Name',
             T_HDR.caregory                            CATEGORY_MKEY,
             T_HDR.creation_date,
             T_HDR.task_name,
             T_HDR.task_description,
             E_MST.emp_full_name,
			 
			 case when T_HDR.TASK_CREATED_BY = @Session_User_Id --When Task owner created the task /* Inside Task Owner login*/
			 and T_HDR.STATUS in ('CREATED','SUB TASK CREATED','WORK IN PROGRESS') and T_HDR.STATUS_PERC = 0.0 then 'Y'  /*Task owner created the task and 
			 it is currently on created status and progress is 0%  then all tabs are enabled for task owner and task owner can add tabs list like Checklist, Authority,
			 Outcome and Compliance via remark but with 0%  progress and WIP status update.  Otherwise any progress between 0% to 100%  
			 with WIP status will lead to disable all tabs for task owner.*/ 
			 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id) --When Task owner created the task /* Inside assignee login */
			 and T_HDR.STATUS_PERC = 0.0  /* Inside assignee login also all tabs are enabled because progress % is 0, however when assignee change 
			 the progress percent % between 0% to 100% then tabs are disabled for the task owner,but enabled at the assignee side. Assignee can able to update all tabs  */
			 and T_HDR.STATUS in ('CREATED','SUB TASK CREATED','WORK IN PROGRESS') Then 'Y'  
			 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 /*When Assignee change to close initiate(100%) */
							-- Inside assignee login 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id) 
			 and T_HDR.STATUS_PERC = 100.0 
			 and  T_HDR.STATUS in ('CLOSE INITIATED')  then 'N'/* If an assignee changes the status to cancel initiate or close initiate 
			 it means progress % is whether 0% or 100% so, in this scenario all tabs are disabled to the assignee side. Assignee will never change any of tab/s 
			 and inside the task owner log in all tabs are enabled for the task owner. Task owner can update all tabs. */
			 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id)/* When Assignee change to  cancel initiate (0%) Inside assignee login */
			 and T_HDR.STATUS in ('CANCEL INITIATED')  then 'N' /* If an assignee changes the status to cancel initiate or close initiate 
			 it means progress % is whether 0% or 100% so, in this scenario all tabs are disabled to the assignee side. Assignee will never change any of tab/s 
			 and inside the task owner log in all tabs are enabled for the task owner. Task owner can update all tabs. */

			 /*When Assignee change to close initiate(100%) or cancel initiate (0%) */
			  --Inside Task Owner login 
			 when  T_HDR.TASK_CREATED_BY = @Session_User_Id	 
			 and T_HDR.STATUS_PERC between 0.0 and 100.0 and T_HDR.STATUS in ('CLOSE INITIATED','CANCEL INITIATED')  then 'Y' 
			 /* Now inside task owner log in all tabs are enabled and task owner can do all changes in tabs and the status which are visible 
			 to the task owner is Cancel or Close and Re-work as per the assignee action if assignee triggered Close initiate then task owner can see 
			 the Close or if Cancel Initiate is triggered by the assignee then task owner can see Cancel and re-work is by default */
			 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 /*When Task owner change status to re-work  */
			 ---Inside Task Owner login
			 WHEN  T_HDR.TASK_CREATED_BY= @Session_User_Id	
			 and T_HDR.STATUS in ('RE-WORK')  then 'N' /*-- When task owner change status to re-work instead of Close or Cancel then all tabs are disabled 
														at task owner side now task owner is not able to do any changes inside any tab.*/
			 /* When Task owner change status to re-work */
			 --- Inside assignee login
			 WHEN  (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id) 
			 and T_HDR.STATUS in ('RE-WORK')  then 'Y' /* When the task owner gives a task to re-work to the assignee then status will change to re-work for the assignee 
														 and now all tabs are enabled for assignee and can do any changes inside any tab.*/
	 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 WHEN  (T_HDR.TASK_CREATED_BY = @Session_User_Id) or (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id)
			 and T_HDR.STATUS in ('CANCEL','CANCELLED','CLOSE')  then 'N' /* When task owner can do Cancel or Close instead of re-work 
																			 then all tabs are disabled for task owner as well as assignee */
 ---------------------------------------------------------------------------------------------------------------------------------------------------
			WHEN  (T_HDR.TASK_CREATED_BY = @Session_User_Id) and (T_HDR.ASSIGNED_TO = @Session_User_Id or T_HDR.RESPOSIBLE_EMP_MKEY = @Session_User_Id)
			 and T_HDR.STATUS not in ('CANCEL','CANCELLED','CLOSE')  then 'Y' /* When Task Owner and Assignee are same then enabled  */
---------------------------------------------------------------------------------------------------------------------------------------------------
			 ELSE 'N'
			 end as 'Process_Flag',
             T_HDR.tags,
             CONVERT(VARCHAR(10), completion_date, 120)COMPLETION_DATE,
             --Isnull(file_name, '')                     [FILE_NAME],
             --Isnull(file_path, '')                     FILE_PATH,
             T_HDR.resposible_emp_mkey
			,ISNULL(RTrim(T_HDR.Priority),'') AS [Priority] 
			,ISNULL(CONVERT(NVARCHAR(20), T_HDR.Tentative_Start_Date),null) AS Tentative_Start_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Tentative_End_Date),null) AS Tentative_End_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Actual_Start_Date),null) AS Actual_Start_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Actual_End_Date),null) AS Actual_End_Date
      FROM   task_hdr T_HDR
             JOIN employee_mst E_MST
               ON E_MST.mkey = T_HDR.assigned_to
             LEFT JOIN type_mst T_MST
                    ON T_MST.master_mkey = T_HDR.caregory
             --AND T_MST.TYPE_CODE='CATEGORY'
             LEFT JOIN type_mst P_MST
                    ON P_MST.master_mkey = T_HDR.project_id
             LEFT JOIN type_mst S_P_MST
                    ON S_P_MST.master_mkey = T_HDR.sub_project_id
             --LEFT JOIN task_media_trl T_MEDIA
             --       ON T_MEDIA.mkey = T_HDR.mkey
             --          AND T_MEDIA.delete_flag = 'N'
      WHERE  T_HDR.mkey = @HDR_MKEY
  END 
-----------------------------------------------------------------------------------------------------------------------
GO
-- EXEC SP_GET_PROJECT_DOC_DEPOSITORY 0,926,'asd','sdf'
-- =============================================
ALTER PROCEDURE [dbo].[SP_GET_PROJECT_DOC_DEPOSITORY]
	-- Add the parameters for the stored procedure here
	@MKEY int = NULL,
	@USER_ID int = NULL, -- USER ID
	@API_NAME VARCHAR(100) = NULL, -- FORM NAME
	@API_METHOD VARCHAR(100) = NULL -- FUCNTION/METHOD NAME
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
BEGIN TRY ;
          -- TO CHECK THE @MKEY IS NULL OR EMPTY IF EMPTY THE SHOW ALL ROWS    
		  print '@MKEY: '+convert(varchar(10),@MKEY)
         
		  IF ( @MKEY IS NOT NULL
               AND LEN(@MKEY) > 0 and @MKEY != 0)
            BEGIN
				SELECT	
					HDR.MKEY
					,BUILDING_TYPE as BUILDING_MKEY
					,Smst.TYPE_DESC as buildinG_NAME
					,PROPERTY_TYPE AS PROPERTY_MKEY
					,tmst.TYPE_DESC as PROPERTY_name
					,DOC_MKEY 
					,DOC_NUMBER
					,DOC_DATE
					,dhdr.DOC_NAME
					,VALIDITY_DATE
					,HDR.ATTRIBUTE1
					,HDR.ATTRIBUTE2
					,HDR.ATTRIBUTE3
					,HDR.ATTRIBUTE4
					,HDR.ATTRIBUTE5
					,Isnull(CONVERT(VARCHAR(50), HDR.created_by), '') AS CREATED_BY_ID
				,Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME
				,CASE WHEN HDR.creation_date IS NULL THEN '' ELSE Format(HDR.creation_date, 'yyyy-MM-dd HH:mm:ss')	END AS CREATION_DATE
				,Isnull(CONVERT(VARCHAR(50), HDR.last_updated_by), '') AS LAST_UPDATED_BY
				,Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME
				,CASE WHEN HDR.last_update_date IS NULL THEN ''	ELSE Format(HDR.last_update_date, 'yyyy-MM-dd HH:mm:ss')
				END AS LAST_UPDATE_DATE
				FROM PROJECT_DOC_DEPOSITORY_HDR HDR
				INNER JOIN DOC_TEMPLATE_HDR dhdr on dhdr.MKEY = HDR.DOC_MKEY
				INNER JOIN EMPLOYEE_MST createdby ON HDR.created_by = createdby.mkey
				LEFT JOIN EMPLOYEE_MST updatedby ON HDR.last_updated_by = updatedby.mkey
				inner join TYPE_MST tmst on HDR.PROPERTY_TYPE = tmst.MASTER_MKEY and  tmst.TYPE_CODE = 'Project'
				inner join TYPE_MST Smst on HDR.BUILDING_TYPE = Smst.MASTER_MKEY and  Smst.TYPE_CODE = 'Project'
				WHERE HDR.MKEY = @MKEY
				AND HDR.DELETE_FLAG = 'N'
				AND createdby.DELETE_FLAG = 'N'
				ORDER BY  HDR.MKEY;
            END
          ELSE
            BEGIN
              SELECT	
					HDR.MKEY
					,BUILDING_TYPE as BUILDING_MKEY
					,Smst.TYPE_DESC as buildinG_NAME
					,PROPERTY_TYPE AS PROPERTY_MKEY
					,tmst.TYPE_DESC as PROPERTY_name
					,DOC_MKEY 
					,DOC_NUMBER
					,DOC_DATE
					,dhdr.DOC_NAME
					,VALIDITY_DATE
					,HDR.ATTRIBUTE1
					,HDR.ATTRIBUTE2
					,HDR.ATTRIBUTE3
					,HDR.ATTRIBUTE4
					,HDR.ATTRIBUTE5
					,Isnull(CONVERT(VARCHAR(50), HDR.created_by), '') AS CREATED_BY_ID
				,Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME
				,CASE WHEN HDR.creation_date IS NULL THEN '' ELSE Format(HDR.creation_date, 'yyyy-MM-dd HH:mm:ss')	END AS CREATION_DATE
				,Isnull(CONVERT(VARCHAR(50), HDR.last_updated_by), '') AS LAST_UPDATED_BY
				,Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME
				,CASE WHEN HDR.last_update_date IS NULL THEN '' ELSE Format(HDR.last_update_date, 'yyyy-MM-dd HH:mm:ss') END AS LAST_UPDATE_DATE
				FROM PROJECT_DOC_DEPOSITORY_HDR HDR
				INNER JOIN DOC_TEMPLATE_HDR dhdr on dhdr.MKEY = HDR.DOC_MKEY
				INNER JOIN 	EMPLOYEE_MST createdby	ON 	HDR.created_by = createdby.mkey
				LEFT JOIN EMPLOYEE_MST updatedby ON HDR.last_updated_by = updatedby.mkey
				inner join TYPE_MST tmst on HDR.PROPERTY_TYPE = tmst.MASTER_MKEY and  tmst.TYPE_CODE = 'Project'
				inner join TYPE_MST Smst on HDR.BUILDING_TYPE = Smst.MASTER_MKEY and  Smst.TYPE_CODE = 'Project'
				WHERE HDR.DELETE_FLAG = 'N'
				AND createdby.DELETE_FLAG = 'N'
				ORDER BY  HDR.MKEY;
            END
      END TRY
      BEGIN CATCH
------------------------------------------------------------------------------------------------------------------------------------
          SELECT ERROR_NUMBER()    AS ERRORNUMBER,
                 ERROR_SEVERITY()  AS ERRORSEVERITY,
                 ERROR_STATE()     AS ERRORSTATE,
                 ERROR_PROCEDURE() AS ERRORPROCEDURE,
                 ERROR_LINE()      AS ERRORLINE,
                 ERROR_MESSAGE()   AS ERRORMESSAGE;
-------------------------------------------------------------------------------------------------------------------------------
			DECLARE @ERROR_MESSAGE  VARCHAR(MAX) = NULL;
			SET @ERROR_MESSAGE = ERROR_MESSAGE();
------------------------------------------------------------------------------------------------------------------------------------
		EXEC sp_P_TMS_INSERT_ERROR_DES @USER_ID,'TMS',@API_NAME,@ERROR_MESSAGE,@API_METHOD;
------------------------------------------------------------------------------------------------------------------------------------
      END CATCH
END

-----------------------------------------------------------------------------------------------------------------------
GO
CREATE view V_USER_FILTER as   
  Select  TMST.MKEY, tmst.TYPE_CODE, tmst.TYPE_DESC as 'Key'  
  , Case when tmst.TYPE_DESC = 'DEFAULT' THEN 'Actionable'   
  when tmst.TYPE_DESC = 'ALLOCATEDTOME' THEN 'Allocated To Me'   
  when tmst.TYPE_DESC = 'ALLOCATEDBYME' THEN 'Allocated By Me'   
  when tmst.TYPE_DESC = 'COMPLETEDBYME' THEN 'Completed By Me'   
  when tmst.TYPE_DESC = 'COMPLETEDFORME' THEN 'Completed For Me'   
  when tmst.TYPE_DESC = 'CANCELCLOSE' THEN 'Cancelled'   
  ELSE tmst.TYPE_DESC  
  END AS 'DisplayName',TMST.ATTRIBUTE4,TMST.ATTRIBUTE5  
   ,Isnull(CONVERT(VARCHAR(50), TMST.created_by), '') AS CREATED_BY_ID,    
   Isnull(CONVERT(VARCHAR(50), EMST.emp_full_name), '') AS CREATED_BY_NAME,    
   CASE  WHEN TMST.creation_date IS NULL THEN  ''  ELSE  Format(TMST.creation_date, 'yyyy-MM-dd HH:mm:ss') END AS CREATION_DATE,    
   Isnull(CONVERT(VARCHAR(50), TMST.last_updated_by), '') AS LAST_UPDATED_BY,    
   Isnull(LMST.emp_full_name, '') UPDATED_BY_NAME,    
   CASE WHEN TMST.last_update_date IS NULL THEN  ''  ELSE  Format(TMST.last_update_date, 'yyyy-MM-dd HH:mm:ss') END AS LAST_UPDATE_DATE    
  From TYPE_MST TMST INNER JOIN EMPLOYEE_MST EMST ON TMST.CREATED_BY = EMST.MKEY  
  LEFT JOIN EMPLOYEE_MST LMST ON TMST.LAST_UPDATED_BY = EMST.MKEY  
  where TMST.ATTRIBUTE2 ='Filter' and TMST.DELETE_FLAG = 'N';


-----------------------------------------------------------------------------------------------------------------------
GO
-- exec SP_GET_TASK_DASHBOARD_FILTER 926,1
ALTER Procedure [dbo].[SP_GET_TASK_DASHBOARD_FILTER] (@Session_User_Id          INT,  
@Business_Group_Id	  INT)
AS 
BEGIN
	Begin Try
	SELECT * FROM  V_USER_FILTER ORDER BY CONVERT(int,CONVERT(int,ATTRIBUTE5)) asc, CONVERT(int,CONVERT(int,ATTRIBUTE4));
	--SELECT * FROM  V_PRIORITY_FILTER  -- need to delete after deploy in uat
	--SELECT * FROM  V_DURATION_FILTER -- need to delete after deploy in uat
	--SELECT * FROM  V_TASK_TYPE -- need to delete after deploy in uat
	End try
	 BEGIN CATCH
        -------------------------------------------------------------------------------------------------------------------------------            
        SELECT ERROR_NUMBER() AS ERRORNUMBER,
               ERROR_SEVERITY() AS ERRORSEVERITY,
               ERROR_STATE() AS ERRORSTATE,
               ERROR_PROCEDURE() AS ERRORPROCEDURE,
               ERROR_LINE() AS ERRORLINE,
               ERROR_MESSAGE() AS ERRORMESSAGE;
        -------------------------------------------------------------------------------------------------------------------------------  
        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
        SET @ERROR_MESSAGE = ERROR_MESSAGE();
        -------------------------------------------------------------------------------------------------------------------------------  
        EXEC SP_P_TMS_INSERT_ERROR_DES @Session_User_Id,
                                       'TMS',
                                       'Task Dashboard Filter',
                                       @ERROR_MESSAGE,
                                       'Get Task Dashboard Filter';
    -------------------------------------------------------------------------------------------------------------------------------  
    END CATCH

END

-----------------------------------------------------------------------------------------------------------------------
GO

--------------------------------------------------------------------------------------------------------------------
Date: 27-05-2025
--------------------------------------
GO
ALTER View V_TASK_TYPE AS  
Select  TMST.MKEY, tmst.TYPE_CODE,TMST.Company_Id,TMST.Type_Desc, tmst.TYPE_DESC as 'Key' 
,TMST.Type_Abbr,TMST.Parent_Id,Master_Mkey,TMST.Effective_Start_Date,TMST.Effective_End_Date,Enable_Flag
, Case when tmst.TYPE_DESC = 'RECURRING' THEN 'Recurring'   
when tmst.TYPE_DESC = 'APPROVAL' THEN 'Approval'   
when tmst.TYPE_DESC = 'COMPLIANCE' THEN 'Compliance'   
when tmst.TYPE_DESC = 'APPROVAL' THEN 'APPROVAL'   
when tmst.TYPE_DESC = 'GENERAL' THEN 'General'   
when tmst.TYPE_DESC = 'SYSTEM' THEN 'System'   
when tmst.TYPE_DESC = 'EMAIL' THEN 'Email'   
when tmst.TYPE_DESC = 'RERA COMPLAIN' THEN 'Rera Complain'   
ELSE tmst.TYPE_DESC  
END AS 'DisplayName'  
 ,Isnull(CONVERT(VARCHAR(50), TMST.created_by), '') AS CREATED_BY_ID,    
    Isnull(CONVERT(VARCHAR(50), EMST.emp_full_name), '') AS CREATED_BY_NAME,    
    CASE  WHEN TMST.creation_date IS NULL THEN  ''  ELSE  Format(TMST.creation_date, 'yyyy-MM-dd HH:mm:ss') END AS CREATION_DATE,    
    Isnull(CONVERT(VARCHAR(50), TMST.last_updated_by), '') AS LAST_UPDATED_BY,    
    Isnull(LMST.emp_full_name, '') UPDATED_BY_NAME,    
    CASE WHEN TMST.last_update_date IS NULL THEN  ''  ELSE  Format(TMST.last_update_date, 'yyyy-MM-dd HH:mm:ss') END AS LAST_UPDATE_DATE    
From TYPE_MST TMST INNER JOIN EMPLOYEE_MST EMST ON TMST.CREATED_BY = EMST.MKEY  
LEFT JOIN EMPLOYEE_MST LMST ON TMST.LAST_UPDATED_BY = EMST.MKEY  
where TYPE_CODE ='TASK_TYPE' and TMST.DELETE_FLAG = 'N';



----------------------------------
GO

--	exec SP_TASK_DETAILS_BY_MKEY_NT 1039,2693,0
ALTER procedure [dbo].[SP_TASK_DETAILS_BY_MKEY_NT](@HDR_MKEY VARCHAR(250),@Session_User_Id          INT = null,  
@Business_Group_Id	  INT = null)
AS
  BEGIN
      DECLARE @DAY INT

      SET @DAY=0

      SELECT T_HDR.mkey,
             T_HDR.task_no,
             T_HDR.isnode,
             T_HDR.task_parent_id,
             T_HDR.task_main_node_id,
			 T_HDR.Task_Type,
             T_HDR.status,
             T_HDR.status_perc,
             T_HDR.task_created_by,
             T_HDR.approver_id,
             T_HDR.approve_action_date,
			 T_HDR.ASSIGNED_TO,
			 E_MST.EMP_FULL_NAME			AS 'Assigned_To_Name',
             T_MST.type_desc                           CAREGORY,
             T_HDR.project_id                          PROJECT_MKEY,
			 T_HDR.sub_project_id                    AS BUILDING_MKEY,
             P_MST.type_desc                           'PROJECT',
			 P_MST.type_desc                           'Project_Name',
             S_P_MST.type_desc                         'Sub_PROJECT',
			 S_P_MST.type_desc						AS 'Building_Name',
             T_HDR.caregory                            CATEGORY_MKEY,
             T_HDR.creation_date,
             T_HDR.task_name,
             T_HDR.task_description,
             E_MST.emp_full_name,

			 --When Task owner created the task
			 case when T_HDR.TASK_CREATED_BY = @Session_User_Id  /* Inside Task Owner login*/
			 and T_HDR.STATUS in ('CREATED','SUB TASK CREATED','WORK IN PROGRESS') and T_HDR.STATUS_PERC = 0.0 then 'Y' 
			 /*Task owner created the task and it is currently on created status and progress is 0%  then all tabs are enabled for task owner 
			 and task owner can add tabs list like Checklist, Authority, Outcome and Compliance via remark but with 0%  progress and WIP status update.  
			 Otherwise any progress between 0% to 100% with WIP status will lead to disable all tabs for task owner.*/ 

			 --When Task owner created the task 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id) /* Inside assignee login */
			 and T_HDR.STATUS_PERC between 0.0 and 100.0 /* Inside assignee login also all tabs are enabled because progress % is 0, however when assignee change 
			 the progress percent % between 0% to 100% then tabs are disabled for the task owner,but enabled at the assignee side. 
			 Assignee can able to update all tabs  */
			 and T_HDR.STATUS in ('CREATED','SUB TASK CREATED','WORK IN PROGRESS') Then 'Y'  

			 --When Task owner created the task 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id and T_HDR.TASK_CREATED_BY = @Session_User_Id) /* Inside assignee login */
			 --and T_HDR.STATUS_PERC between 0.0 and 100.0 
			 /* Inside assignee login also all tabs are enabled because progress % is 0, however when assignee change 
			 the progress percent % between 0% to 100% then tabs are disabled for the task owner,but enabled at the assignee side. 
			 Assignee can able to update all tabs  */
			 and T_HDR.STATUS not in  ('CANCEL','CANCELLED','CLOSE') Then 'Y'  
			 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 /*When Assignee change to close initiate(100%) */
							-- Inside assignee login 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id) 
			 and T_HDR.STATUS_PERC = 100.0 
			 and  T_HDR.STATUS in ('CLOSE INITIATED')  then 'N'
			 /* If an assignee changes the status to cancel initiate or close initiate it means progress % is whether 0% or 100% so, 
			 in this scenario all tabs are disabled to the assignee side. Assignee will never change any of tab/s 
			 and inside the task owner log in all tabs are enabled for the task owner. Task owner can update all tabs. */
			 
			 /* When Assignee change to  cancel initiate (0%) Inside assignee login */
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id)
			 and T_HDR.STATUS in ('CANCEL INITIATED')  then 'N' 
			 /* If an assignee changes the status to cancel initiate or close initiate it means progress % is whether 0% or 100% so, 
			 in this scenario all tabs are disabled to the assignee side. Assignee will never change any of tab/s 
			 and inside the task owner log in all tabs are enabled for the task owner. Task owner can update all tabs. */

			 /*When Assignee change to close initiate(100%) or cancel initiate (0%) */
			  --Inside Task Owner login 
			 when  T_HDR.TASK_CREATED_BY = @Session_User_Id	 
			 and T_HDR.STATUS_PERC between 0.0 and 100.0 and T_HDR.STATUS in ('CLOSE INITIATED','CANCEL INITIATED')  then 'Y' 
			 /* Now inside task owner log in all tabs are enabled and task owner can do all changes in tabs and the status which are visible 
			 to the task owner is Cancel or Close and Re-work as per the assignee action if assignee triggered Close initiate then task owner can see 
			 the Close or if Cancel Initiate is triggered by the assignee then task owner can see Cancel and re-work is by default */
			 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 /*When Task owner change status to re-work  */
			 ---Inside Task Owner login
			 WHEN  T_HDR.TASK_CREATED_BY= @Session_User_Id	
			 and T_HDR.STATUS in ('RE-WORK')  then 'N' /*-- When task owner change status to re-work instead of Close or Cancel then all tabs are disabled 
														at task owner side now task owner is not able to do any changes inside any tab.*/
			 /* When Task owner change status to re-work */
			 --- Inside assignee login
			 WHEN  (T_HDR.ASSIGNED_TO = @Session_User_Id) 
			 and T_HDR.STATUS in ('RE-WORK')  then 'Y' /* When the task owner gives a task to re-work to the assignee then status will change to re-work for the assignee 
														 and now all tabs are enabled for assignee and can do any changes inside any tab.*/
	 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 WHEN  (T_HDR.TASK_CREATED_BY = @Session_User_Id) or (T_HDR.ASSIGNED_TO = @Session_User_Id)
			 and T_HDR.STATUS in ('CANCEL','CANCELLED','CLOSE')  then 'N' /* When task owner can do Cancel or Close instead of re-work 
																			 then all tabs are disabled for task owner as well as assignee */
 ---------------------------------------------------------------------------------------------------------------------------------------------------
			WHEN  (T_HDR.TASK_CREATED_BY = @Session_User_Id) and (T_HDR.ASSIGNED_TO = @Session_User_Id)
			 and T_HDR.STATUS not in ('CANCEL','CANCELLED','CLOSE')  then 'Y' /* When Task Owner and Assignee are same then enabled  */
---------------------------------------------------------------------------------------------------------------------------------------------------
			 ELSE 'N'
			 end as 'Process_Flag',
             T_HDR.tags,
             CONVERT(VARCHAR(10), completion_date, 120)COMPLETION_DATE,
             --Isnull(file_name, '')                     [FILE_NAME],
             --Isnull(file_path, '')                     FILE_PATH,
             T_HDR.resposible_emp_mkey
			,ISNULL(RTrim(T_HDR.Priority),'') AS [Priority] 
			,ISNULL(CONVERT(NVARCHAR(20), T_HDR.Tentative_Start_Date),null) AS Tentative_Start_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Tentative_End_Date),null) AS Tentative_End_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Actual_Start_Date),null) AS Actual_Start_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Actual_End_Date),null) AS Actual_End_Date
      FROM   task_hdr T_HDR
             JOIN employee_mst E_MST
               ON E_MST.mkey = T_HDR.assigned_to
             LEFT JOIN type_mst T_MST
                    ON T_MST.master_mkey = T_HDR.caregory
             --AND T_MST.TYPE_CODE='CATEGORY'
             LEFT JOIN type_mst P_MST
                    ON P_MST.master_mkey = T_HDR.project_id
             LEFT JOIN type_mst S_P_MST
                    ON S_P_MST.master_mkey = T_HDR.sub_project_id
             --LEFT JOIN task_media_trl T_MEDIA
             --       ON T_MEDIA.mkey = T_HDR.mkey
             --          AND T_MEDIA.delete_flag = 'N'
      WHERE  T_HDR.mkey = @HDR_MKEY;
  END 


----------------------------------------------------------------------

update type_mst 
set TYPE_CODE = 'STATUS_FILTER'
where ATTRIBUTE2 = 'Filter' and TYPE_DESC in ('Completed','Cancelled','Review','Pending')
--------------------------------------------------------------------------------------------------------------------------------
28-05-2025

GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_DASHBOARD_NT]    Script Date: 28-05-2025 11:12:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--  EXEC SP_TASK_DASHBOARD_NT 926,null,'Default',null,null,926,1
 -- EXEC SP_TASK_DASHBOARD_NT 926,'','Next 7 Days','',null,null,926,1
  -- EXEC SP_TASK_DASHBOARD_NT 926,'fgdfg','Today','default',null,null,926,1
ALTER PROCEDURE [dbo].[SP_TASK_DASHBOARD_NT] (@CURRENT_EMP_MKEY  INT,
                    @STATUS_FILTER     NVARCHAR(max) = NULL,--'Completed,Cancelled,Pending,Review',
					@DURATION_FILTER   NVARCHAR(max) = NULL, -- Today,Future,Overdue,Next 3 Days,Next 7 Days,Next 2 Weeks,Next Month,
                    @USER_FILTER       VARCHAR(max) =NULL,--'ALLOCATEDBYME,ALLOCATEDTOME,COMPLETEDBYME,COMPLETEDFORME,CANCELCLOSE',
                    @PriorityFilter    VARCHAR(max) =NULL,--'High,Medium,Low',
                    @TypeFilter        VARCHAR(max) =NULL,--'RECURRING,APPROVAL,COMPLIANCE,APPROVAL,GENERAL,SYSTEM,EMAIL,RERA COMPLAIN';
                    @Session_User_Id   INT,
                    @Business_Group_Id INT)
AS
  BEGIN
      DECLARE @DAY INT
      SET @DAY=0
      DECLARE @sql NVARCHAR(max) = '';
      DECLARE @start INT = 1,
              @end   INT;
      DECLARE @hasWhereClause BIT = 0;
      DECLARE @WhereClause    NVARCHAR(max) = '',
              @filter         VARCHAR(100),
              @PriorityClause NVARCHAR(max) = '',
              @TypeClause     NVARCHAR(max) = '',
              @TaskTypeMkey   NVARCHAR(50),
              @STATUSClause   NVARCHAR(max) = '',
			  @DurationClause   NVARCHAR(max) = '';

	SET @sql ='SELECT  T_HDR.mkey as Sr_No, T_HDR.mkey,Isnull(TMST.type_desc, ''NA'') CATEGORY,T_HDR.task_no,dbo.[Initcap](Isnull(CREATOR.emp_full_name, ''NA'')) CREATOR,
	  dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, ''NA'')) RESPONSIBLE,
	  dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, ''NA'')) ACTIONABLE,
	  T_HDR.creation_date,                    
	  CASE                      
	  WHEN T_HDR.status IN ( ''CREATED'' ) THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUB TASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUBTASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status IN ( ''WORK IN PROGRESS'', ''CLOSE INITIATED'', ''CANCEL INITIATED'', ''RE-WORK'' ) THEN ''In Progress''                      
	  WHEN T_HDR.status IN ( ''CLOSE'', ''COMPLETED'' ) THEN ''Completed''                      ELSE ''Others''                    END AS Dashboard_Status, 
	  CONVERT(VARCHAR, T_HDR.completion_date, 103) AS COMPLETION_DATE,                    
	  dbo.[Initcap](T_HDR.task_name) AS TASK_NAME,                    
	  T_HDR.task_description,                    
	  T_HDR.tags,                    
	  dbo.[Initcap](T_HDR.status) AS STATUS,                   
	  CASE                      
	  WHEN Isnull(CREATOR.first_name, ''NA'') != Isnull(RESPONSIBLE.first_name, ''NA'') 
	  THEN dbo.[Initcap](Isnull(CREATOR.first_name, ''NA'')) + '' > '' + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, ''NA''))                      
	  ELSE dbo.[Initcap](Isnull(CREATOR.first_name, ''NA''))                    
	  END AS RESPONSIBLE_TAG,                   
	  dbo.[Initcap](Isnull(PMST.type_desc, '''')) AS PROJECT_NAME,                    
	  dbo.Tasknamestring(T_HDR.mkey) AS TASK_HISTORY,                    
	  Isnull(Rtrim(T_HDR.[priority]), '''') AS [Priority],                    
	  Isnull(T_HDR.percent_complete, ''0'') AS Progress_Percentage,                    
	  Isnull(parent_counts.parenttaskcount, 0) AS SubTask_Count,                    
	  T_HDR.CREATED_BY             
	  FROM task_hdr T_HDR             
	  LEFT JOIN employee_mst CREATOR ON CREATOR.mkey = T_HDR.created_by AND CREATOR.delete_flag = ''N''             
	  LEFT JOIN employee_mst RESPONSIBLE ON RESPONSIBLE.mkey = T_HDR.assigned_to AND RESPONSIBLE.delete_flag = ''N''             
	  LEFT JOIN employee_mst ACTIONABLE ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey AND ACTIONABLE.delete_flag = ''N''            
	  LEFT JOIN type_mst TMST ON TMST.master_mkey = T_HDR.caregory AND TMST.type_code = ''CATEGORY'' AND TMST.delete_flag = ''N''             
	  LEFT JOIN type_mst PMST ON PMST.master_mkey = T_HDR.project_id AND PMST.type_code = ''PROJECT'' AND PMST.delete_flag = ''N''             
	  LEFT JOIN (SELECT task_parent_id, Count(*) AS ParentTaskCount                        
	  FROM task_hdr WHERE task_parent_id IS NOT NULL AND mkey NOT IN (task_parent_id) AND delete_flag = ''N''                        
	  GROUP BY task_parent_id) parent_counts ON T_HDR.mkey = parent_counts.task_parent_id             
	  WHERE Isnull(T_HDR.status_flag, ''A'') IN (''A'') AND T_HDR.delete_flag = ''N'' ';
    /* @USER_FILTER */
    IF ( @USER_FILTER <> '' AND @USER_FILTER IS NOT NULL ) -- @USER_FILTER is not null OR
      BEGIN
          WHILE @start <= Len(@USER_FILTER)
            BEGIN
                SET @end = Charindex(',', @USER_FILTER, @start);
                IF @end = 0
                  SET @end = Len(@USER_FILTER) + 1;
                SET @filter = Ltrim(Rtrim(Substring(@USER_FILTER, @start, @end - @start)));
				
                IF @filter = 'Default'
                  BEGIN
				 -- print 'def 1'
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @sql += ' OR ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' ) ';
                        END
						--PRINT '@WhereClause:Default: ' + @WhereClause;
                  END

                IF @filter = 'ALLOCATEDBYME' 
                  BEGIN
				--  print 'allo 2'
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +' ) ';
                        END
                  END

                IF @filter = 'ALLOCATEDTOME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN

                            SET @WhereClause +=' ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+ 
							' OR T_HDR.resposible_emp_mkey = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+')';
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                        SET @WhereClause +=' OR ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +')';
                  END

                IF @filter = 'COMPLETEDBYME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' ( CONVERT(int,T_HDR.assigned_to) = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+
                            ' AND T_HDR.status IN (''COMPLETED''))';
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause += ' OR ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'COMPLETEDFORME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @WhereClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) +
                            ' AND CONVERT(int,T_HDR.assigned_to) != '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+' AND CONVERT(int,T_HDR.assigned_to) != '
                                            + CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+ ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'CANCELCLOSE'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' ( T_HDR.created_by = ' + CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) +
                            ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
                        SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+
                        ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'') ) ';
                  --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                  END
				
                SET @start = @end + 1;
            END
			If (@hasWhereClause = 1)
			Begin
				SET @sql += ' AND ( ' + @WhereClause + ' ) ';
			End
			Else
			Begin
				SET @sql += ' AND ( 1 != 1 ) ';
			End
      END
    ELSE IF( @USER_FILTER IS NULL OR @USER_FILTER = 'Default'  OR @USER_FILTER = '' )
      BEGIN
         SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
          SET @hasWhereClause = 1;
          SET @sql += ' AND ( ' + @WhereClause + ' ) ';
      END
    -----------------------------------------------------------------------------------------------------
    /* @PriorityFilter */
    IF ( @PriorityFilter IS NOT NULL
         AND @PriorityFilter <> '' )
      BEGIN
          SET @start = 1;
          SET @hasWhereClause = 0;

          WHILE @start <= Len(@PriorityFilter)
            BEGIN
                SET @end = Charindex(',', @PriorityFilter, @start);

                IF @end = 0
                  SET @end = Len(@PriorityFilter) + 1;

                SET @filter = Ltrim(Rtrim(Substring(@PriorityFilter, @start,@end - @start )) );

                -- Append the priority condition
                IF @filter = 'High'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                            SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                        SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
                  END

                IF @filter = 'Low'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                            SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                        SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
						END

                IF @filter = 'Medium'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                            SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                        SET @PriorityClause += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                  END

                SET @start = @end + 1;
            END
			If (@hasWhereClause = 1)
			Begin
				SET @sql += ' AND ( ' + @PriorityClause + ' ) ';
			End
			Else
			Begin
				SET @sql += ' AND ( 1 != 1 ) ';
			End
			
      END
    -----------------------------------------------------------------------------------------------------
    /* @TypeFilter */
    IF ( @TypeFilter IS NOT NULL
         AND @TypeFilter <> '' )
      BEGIN
          SET @start = 1;
          SET @hasWhereClause = 0;

          WHILE @start <= Len(@TypeFilter)
            BEGIN
                SET @end = Charindex(',', @TypeFilter, @start);

                IF @end = 0
                  SET @end = Len(@TypeFilter) + 1;

                SET @filter = Ltrim(Rtrim(Substring(@TypeFilter, @start, @end - @start)));

                IF @filter = 'RECURRING'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'Approval'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'COMPLIANCE'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') '
                            ;
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'GENERAL'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'SYSTEM'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
                  END

                IF @filter = 'Email'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'RERA COMPLAIN'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
                  END

                SET @start = @end + 1;
            END
			If (@hasWhereClause = 1)
			Begin
				SET @sql += ' AND ( ' + @TypeClause + ' ) ';
			End
			Else
			Begin
				SET @sql += ' AND ( 1 != 1 ) ';
			End
      END
    -----------------------------------------------------------------------------------------------------
    /* @STATUS_FILTER */
    IF ( @STATUS_FILTER IS NOT NULL
         AND @STATUS_FILTER <> '' )
		BEGIN
		SET @start = 1;
		SET @hasWhereClause = 0;

		WHILE @start <= Len(@STATUS_FILTER)
		BEGIN
			SET @end = Charindex(',', @STATUS_FILTER, @start);

			IF @end = 0
				SET @end = Len(@STATUS_FILTER) + 1;

			SET @filter = Ltrim(Rtrim(Substring(@STATUS_FILTER, @start, @end - @start)));

			IF @filter = 'Pending'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @STATUSClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
											and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
					SET @hasWhereClause = 1;
				END
			ELSE
				SET @STATUSClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
										and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
			END
			
			IF @filter = 'Review'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @STATUSClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
					SET @hasWhereClause = 1;
				END
				ELSE
					SET @STATUSClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
			END

			IF @filter = 'Completed'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @STATUSClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
					SET @hasWhereClause = 1;
				END
			ELSE
					SET @STATUSClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
			END

			IF @filter = 'Cancelled'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @STATUSClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
					SET @hasWhereClause = 1;
				END
				ELSE
					SET @STATUSClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
			END

			SET @start = @end + 1;
		END
				If (@hasWhereClause = 1)
				Begin
					SET @sql += ' AND ( ' + @STATUSClause + ' ) ';
				End
				Else
			Begin
				SET @sql += ' AND ( 1 != 1 ) ';
			End
			END
 -----------------------------------------------------------------------------------------------------
	IF ( @DURATION_FILTER IS NOT NULL
         AND @DURATION_FILTER <> '' )
		BEGIN
		SET @start = 1;
		SET @hasWhereClause = 0;

		WHILE @start <= Len(@DURATION_FILTER)
		BEGIN
			SET @end = Charindex(',', @DURATION_FILTER, @start);

			IF @end = 0
				SET @end = Len(@DURATION_FILTER) + 1;

			SET @filter = Ltrim(Rtrim(Substring(@DURATION_FILTER, @start, @end - @start)));

			IF @filter = 'Today'
			BEGIN
			print '@filter = Today';
				IF @hasWhereClause = 0
					BEGIN
						SET @DurationClause += ' (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
												AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
						SET @hasWhereClause = 1;
						print 'today 12';
					END
					ELSE
						begin
						SET @DurationClause += ' OR (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) 
												AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
						print 'today 56';
						end
			END

			IF @filter = 'Overdue'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @DurationClause +=' (T_HDR.completion_date < GETDATE() 
										AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
					SET @hasWhereClause = 1;
				END
			ELSE
				SET @DurationClause += ' OR (T_HDR.completion_date < GETDATE() 
										AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
			END

			IF @filter = 'Future'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @DurationClause += ' (T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
										and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
					SET @hasWhereClause = 1;
				END
			ELSE
					SET @DurationClause += ' OR ((T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
									and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103)) ';
			END

			IF @filter = 'Next 3 Days'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					
					--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
					SET @DurationClause +=' (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
					SET @hasWhereClause = 1;
				END
				ELSE
					--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
					SET @DurationClause +=' OR (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
			END

			IF @filter = 'Next 7 Days'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					--SET @DurationClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
					--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
					SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
					SET @hasWhereClause = 1;
				END
			ELSE
				--SET @DurationClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
				--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
				SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
			END

			IF @filter = 'Next 2 Weeks'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					--SET @DurationClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
					SET @DurationClause +=' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
					SET @hasWhereClause = 1;
				END
			ELSE
					--SET @DurationClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
					SET @DurationClause +=' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
			END

			IF @filter = 'Next Month'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					--SET @DurationClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
					--SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
					SET @DurationClause += ' ( T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
					SET @hasWhereClause = 1;
				END
				ELSE
					--SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
					--SET @DurationClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
					SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
			END

			SET @start = @end + 1;
		END
				If (@hasWhereClause = 1)
				Begin
					SET @sql += ' AND ( ' + @DurationClause + ' ) ';
				End
				Else
				Begin
					SET @sql += ' AND ( 1 != 1 ) ';
				End
			END

		print '@@sql: '+ @sql;
    EXEC Sp_executesql @sql;

    EXEC Sp_dashboard_count @CURRENT_EMP_MKEY;
END





GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_DASHBOARD_NT]    Script Date: 28-05-2025 11:12:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--  EXEC SP_TASK_DASHBOARD_NT 926,null,'Default',null,null,926,1
 -- EXEC SP_TASK_DASHBOARD_NT 926,'','Next 7 Days','',null,null,926,1
  -- EXEC SP_TASK_DASHBOARD_NT 926,'fgdfg','Today','default',null,null,926,1
ALTER PROCEDURE [dbo].[SP_TASK_DASHBOARD_NT] (@CURRENT_EMP_MKEY  INT,
                    @STATUS_FILTER     NVARCHAR(max) = NULL,--'Completed,Cancelled,Pending,Review',
					@DURATION_FILTER   NVARCHAR(max) = NULL, -- Today,Future,Overdue,Next 3 Days,Next 7 Days,Next 2 Weeks,Next Month,
                    @USER_FILTER       VARCHAR(max) =NULL,--'ALLOCATEDBYME,ALLOCATEDTOME,COMPLETEDBYME,COMPLETEDFORME,CANCELCLOSE',
                    @PriorityFilter    VARCHAR(max) =NULL,--'High,Medium,Low',
                    @TypeFilter        VARCHAR(max) =NULL,--'RECURRING,APPROVAL,COMPLIANCE,APPROVAL,GENERAL,SYSTEM,EMAIL,RERA COMPLAIN';
                    @Session_User_Id   INT,
                    @Business_Group_Id INT)
AS
  BEGIN
      DECLARE @DAY INT
      SET @DAY=0
      DECLARE @sql NVARCHAR(max) = '';
      DECLARE @start INT = 1,
              @end   INT;
      DECLARE @hasWhereClause BIT = 0;
      DECLARE @WhereClause    NVARCHAR(max) = '',
              @filter         VARCHAR(100),
              @PriorityClause NVARCHAR(max) = '',
              @TypeClause     NVARCHAR(max) = '',
              @TaskTypeMkey   NVARCHAR(50),
              @STATUSClause   NVARCHAR(max) = '',
			  @DurationClause   NVARCHAR(max) = '';

	SET @sql ='SELECT  T_HDR.mkey as Sr_No, T_HDR.mkey,Isnull(TMST.type_desc, ''NA'') CATEGORY,T_HDR.task_no,dbo.[Initcap](Isnull(CREATOR.emp_full_name, ''NA'')) CREATOR,
	  dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, ''NA'')) RESPONSIBLE,
	  dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, ''NA'')) ACTIONABLE,
	  T_HDR.creation_date,                    
	  CASE                      
	  WHEN T_HDR.status IN ( ''CREATED'' ) THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUB TASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUBTASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status IN ( ''WORK IN PROGRESS'', ''CLOSE INITIATED'', ''CANCEL INITIATED'', ''RE-WORK'' ) THEN ''In Progress''                      
	  WHEN T_HDR.status IN ( ''CLOSE'', ''COMPLETED'' ) THEN ''Completed''                      ELSE ''Others''                    END AS Dashboard_Status, 
	  CONVERT(VARCHAR, T_HDR.completion_date, 103) AS COMPLETION_DATE,                    
	  dbo.[Initcap](T_HDR.task_name) AS TASK_NAME,                    
	  T_HDR.task_description,                    
	  T_HDR.tags,                    
	  dbo.[Initcap](T_HDR.status) AS STATUS,                   
	  CASE                      
	  WHEN Isnull(CREATOR.first_name, ''NA'') != Isnull(RESPONSIBLE.first_name, ''NA'') 
	  THEN dbo.[Initcap](Isnull(CREATOR.first_name, ''NA'')) + '' > '' + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, ''NA''))                      
	  ELSE dbo.[Initcap](Isnull(CREATOR.first_name, ''NA''))                    
	  END AS RESPONSIBLE_TAG,                   
	  dbo.[Initcap](Isnull(PMST.type_desc, '''')) AS PROJECT_NAME,                    
	  dbo.Tasknamestring(T_HDR.mkey) AS TASK_HISTORY,                    
	  Isnull(Rtrim(T_HDR.[priority]), '''') AS [Priority],                    
	  Isnull(T_HDR.percent_complete, ''0'') AS Progress_Percentage,                    
	  Isnull(parent_counts.parenttaskcount, 0) AS SubTask_Count,                    
	  T_HDR.CREATED_BY             
	  FROM task_hdr T_HDR             
	  LEFT JOIN employee_mst CREATOR ON CREATOR.mkey = T_HDR.created_by AND CREATOR.delete_flag = ''N''             
	  LEFT JOIN employee_mst RESPONSIBLE ON RESPONSIBLE.mkey = T_HDR.assigned_to AND RESPONSIBLE.delete_flag = ''N''             
	  LEFT JOIN employee_mst ACTIONABLE ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey AND ACTIONABLE.delete_flag = ''N''            
	  LEFT JOIN type_mst TMST ON TMST.master_mkey = T_HDR.caregory AND TMST.type_code = ''CATEGORY'' AND TMST.delete_flag = ''N''             
	  LEFT JOIN type_mst PMST ON PMST.master_mkey = T_HDR.project_id AND PMST.type_code = ''PROJECT'' AND PMST.delete_flag = ''N''             
	  LEFT JOIN (SELECT task_parent_id, Count(*) AS ParentTaskCount                        
	  FROM task_hdr WHERE task_parent_id IS NOT NULL AND mkey NOT IN (task_parent_id) AND delete_flag = ''N''                        
	  GROUP BY task_parent_id) parent_counts ON T_HDR.mkey = parent_counts.task_parent_id             
	  WHERE Isnull(T_HDR.status_flag, ''A'') IN (''A'') AND T_HDR.delete_flag = ''N'' ';
    /* @USER_FILTER */
    IF ( @USER_FILTER <> '' AND @USER_FILTER IS NOT NULL ) -- @USER_FILTER is not null OR
      BEGIN
          WHILE @start <= Len(@USER_FILTER)
            BEGIN
                SET @end = Charindex(',', @USER_FILTER, @start);
                IF @end = 0
                  SET @end = Len(@USER_FILTER) + 1;
                SET @filter = Ltrim(Rtrim(Substring(@USER_FILTER, @start, @end - @start)));
				
                IF @filter = 'Default'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @sql += ' OR ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' ) ';
                        END
                  END

                IF @filter = 'ALLOCATEDBYME' 
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +' ) ';
                        END
                  END

                IF @filter = 'ALLOCATEDTOME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN

                            SET @WhereClause +=' ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+ 
							' OR T_HDR.resposible_emp_mkey = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+')';
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                        SET @WhereClause +=' OR ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +')';
                  END

                IF @filter = 'COMPLETEDBYME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' ( CONVERT(int,T_HDR.assigned_to) = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+
                            ' AND T_HDR.status IN (''COMPLETED''))';
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause += ' OR ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'COMPLETEDFORME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @WhereClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) +
                            ' AND CONVERT(int,T_HDR.assigned_to) != '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+' AND CONVERT(int,T_HDR.assigned_to) != '
                                            + CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+ ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'CANCELCLOSE'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' ( T_HDR.created_by = ' + CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) +
                            ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
                        SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+
                        ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'') ) ';
                  --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                  END
				
                SET @start = @end + 1;
            END
			If (@hasWhereClause = 1)
			Begin
				SET @sql += ' AND ( ' + @WhereClause + ' ) ';
			End
			Else if (@hasWhereClause = 0 and @WhereClause is not null or @WhereClause != null)
			Begin
				print '@WhereClause is not null';
				SET @sql += ' AND ( 1 != 1 ) ';
			End
      END
    ELSE IF( @USER_FILTER IS NULL OR @USER_FILTER = 'Default'  OR @USER_FILTER = '' )
      BEGIN
         SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
          SET @hasWhereClause = 1;
          SET @sql += ' AND ( ' + @WhereClause + ' ) ';
      END
    -----------------------------------------------------------------------------------------------------
    /* @PriorityFilter */
    IF ( @PriorityFilter IS NOT NULL
         AND @PriorityFilter <> '' )
      BEGIN
          SET @start = 1;
          SET @hasWhereClause = 0;

          WHILE @start <= Len(@PriorityFilter)
            BEGIN
                SET @end = Charindex(',', @PriorityFilter, @start);

                IF @end = 0
                  SET @end = Len(@PriorityFilter) + 1;

                SET @filter = Ltrim(Rtrim(Substring(@PriorityFilter, @start,@end - @start )) );

                -- Append the priority condition
                IF @filter = 'High'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                            SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                        SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
                  END

                IF @filter = 'Low'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                            SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                        SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
						END

                IF @filter = 'Medium'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                            SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                        SET @PriorityClause += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                  END

                SET @start = @end + 1;
            END
			If (@hasWhereClause = 1)
			Begin
				SET @sql += ' AND ( ' + @PriorityClause + ' ) ';
			End
			Else if (@hasWhereClause = 0 and @PriorityClause is not null or @PriorityClause != null)
			Begin
			print '@PriorityFilter';
				SET @sql += ' AND ( 1 != 1 ) ';
			End
			
      END
    -----------------------------------------------------------------------------------------------------
    /* @TypeFilter */
    IF ( @TypeFilter IS NOT NULL
         AND @TypeFilter <> '' )
      BEGIN
          SET @start = 1;
          SET @hasWhereClause = 0;

          WHILE @start <= Len(@TypeFilter)
            BEGIN
                SET @end = Charindex(',', @TypeFilter, @start);

                IF @end = 0
                  SET @end = Len(@TypeFilter) + 1;

                SET @filter = Ltrim(Rtrim(Substring(@TypeFilter, @start, @end - @start)));

                IF @filter = 'RECURRING'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'Approval'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'COMPLIANCE'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') '
                            ;
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'GENERAL'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'SYSTEM'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
                  END

                IF @filter = 'Email'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'RERA COMPLAIN'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
                  END

                SET @start = @end + 1;
            END
			If (@hasWhereClause = 1)
			Begin
				SET @sql += ' AND ( ' + @TypeClause + ' ) ';
			End
			Else if (@hasWhereClause = 0 and @TypeClause is not null or @TypeClause != null)
			Begin
				print '@@TypeClause';
				SET @sql += ' AND ( 1 != 1 ) ';
			End
      END
    -----------------------------------------------------------------------------------------------------
    /* @STATUS_FILTER */
    IF ( @STATUS_FILTER IS NOT NULL
         AND @STATUS_FILTER <> '' )
		BEGIN
		SET @start = 1;
		SET @hasWhereClause = 0;

		WHILE @start <= Len(@STATUS_FILTER)
		BEGIN
			SET @end = Charindex(',', @STATUS_FILTER, @start);

			IF @end = 0
				SET @end = Len(@STATUS_FILTER) + 1;

			SET @filter = Ltrim(Rtrim(Substring(@STATUS_FILTER, @start, @end - @start)));

			IF @filter = 'Pending'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @STATUSClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
											and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
					SET @hasWhereClause = 1;
				END
			ELSE
				SET @STATUSClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
										and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
			END
			
			IF @filter = 'Review'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @STATUSClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
					SET @hasWhereClause = 1;
				END
				ELSE
					SET @STATUSClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
			END

			IF @filter = 'Completed'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @STATUSClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
					SET @hasWhereClause = 1;
				END
			ELSE
					SET @STATUSClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
			END

			IF @filter = 'Cancelled'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @STATUSClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
					SET @hasWhereClause = 1;
				END
				ELSE
					SET @STATUSClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
			END

			SET @start = @end + 1;
		END
				If (@hasWhereClause = 1)
				Begin
					SET @sql += ' AND ( ' + @STATUSClause + ' ) ';
				End
			Else if (@hasWhereClause = 0 and @STATUSClause is not null or @STATUSClause != null)
			Begin
			--print '@STATUSClause is not null11';
				SET @sql += ' AND ( 1 != 1 ) ';
			End
			END
 -----------------------------------------------------------------------------------------------------
	IF ( @DURATION_FILTER IS NOT NULL
         AND @DURATION_FILTER <> '' )
		BEGIN
		SET @start = 1;
		SET @hasWhereClause = 0;

		WHILE @start <= Len(@DURATION_FILTER)
		BEGIN
			SET @end = Charindex(',', @DURATION_FILTER, @start);

			IF @end = 0
				SET @end = Len(@DURATION_FILTER) + 1;

			SET @filter = Ltrim(Rtrim(Substring(@DURATION_FILTER, @start, @end - @start)));

			IF @filter = 'Today'
			BEGIN
				IF @hasWhereClause = 0
					BEGIN
						SET @DurationClause += ' (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
												AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
						SET @hasWhereClause = 1;
					END
					ELSE
						begin
						SET @DurationClause += ' OR (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) 
												AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
						end
			END

			IF @filter = 'Overdue'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @DurationClause +=' (T_HDR.completion_date < GETDATE() 
										AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
					SET @hasWhereClause = 1;
				END
			ELSE
				SET @DurationClause += ' OR (T_HDR.completion_date < GETDATE() 
										AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
			END

			IF @filter = 'Future'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @DurationClause += ' (T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
										and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
					SET @hasWhereClause = 1;
				END
			ELSE
					SET @DurationClause += ' OR ((T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
									and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103)) ';
			END

			IF @filter = 'Next 3 Days'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					
					--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
					SET @DurationClause +=' (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
					SET @hasWhereClause = 1;
				END
				ELSE
					--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
					SET @DurationClause +=' OR (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
			END

			IF @filter = 'Next 7 Days'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					--SET @DurationClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
					--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
					SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
					SET @hasWhereClause = 1;
				END
			ELSE
				--SET @DurationClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
				--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
				SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
			END

			IF @filter = 'Next 2 Weeks'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					--SET @DurationClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
					SET @DurationClause +=' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
					SET @hasWhereClause = 1;
				END
			ELSE
					--SET @DurationClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
					SET @DurationClause +=' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
			END

			IF @filter = 'Next Month'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					--SET @DurationClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
					--SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
					SET @DurationClause += ' ( T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
					SET @hasWhereClause = 1;
				END
				ELSE
					--SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
					--SET @DurationClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
					SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
			END

			SET @start = @end + 1;
		END
				If (@hasWhereClause = 1)
				Begin
					SET @sql += ' AND ( ' + @DurationClause + ' ) ';
				End
				Else if (@hasWhereClause = 0 and @DurationClause is not null or @DurationClause != null)
				Begin
				print '@DurationClause is not null';
					SET @sql += ' AND ( 1 != 1 ) ';
				End
			END

		print '@@sql: '+ @sql;
    EXEC Sp_executesql @sql;

    EXEC Sp_dashboard_count @CURRENT_EMP_MKEY;
END

----------------------------------------------------------------------------------------------------------------------------

GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_DASHBOARD_NT]    Script Date: 28-05-2025 11:12:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--  EXEC SP_TASK_DASHBOARD_NT 926,null,'Default',null,null,926,1
 -- EXEC SP_TASK_DASHBOARD_NT 926,'','Next 7 Days','',null,null,926,1
  -- EXEC SP_TASK_DASHBOARD_NT 926,'fgdfg','Today','default',null,null,926,1
  --EXEC SP_TASK_DASHBOARD_NT 926,'Today,ALLOCATEDTOME,Completed',926,1
ALTER PROCEDURE [dbo].[SP_TASK_DASHBOARD_NT] (@CURRENT_EMP_MKEY  INT,
                    --@STATUS_FILTER     NVARCHAR(max) = NULL,--'Completed,Cancelled,Pending,Review',
					--@DURATION_FILTER   NVARCHAR(max) = NULL, -- Today,Future,Overdue,Next 3 Days,Next 7 Days,Next 2 Weeks,Next Month,
                    @USER_FILTER       VARCHAR(max) =NULL,--'ALLOCATEDBYME,ALLOCATEDTOME,COMPLETEDBYME,COMPLETEDFORME,CANCELCLOSE',
                    --@PriorityFilter    VARCHAR(max) =NULL,--'High,Medium,Low',
                   -- @TypeFilter        VARCHAR(max) =NULL,--'RECURRING,APPROVAL,COMPLIANCE,APPROVAL,GENERAL,SYSTEM,EMAIL,RERA COMPLAIN';
                    @Session_User_Id   INT,
                    @Business_Group_Id INT)
AS
  BEGIN
      DECLARE @DAY INT
      SET @DAY=0;
      DECLARE @sql NVARCHAR(max) = '';
      DECLARE @start INT = 1,
              @end   INT;
      DECLARE @hasWhereClause BIT = 0;
      DECLARE @WhereClause    NVARCHAR(max) = '',
              @filter         VARCHAR(100),
              @PriorityClause NVARCHAR(max) = '',
              @TypeClause     NVARCHAR(max) = '',
              @TaskTypeMkey   NVARCHAR(50),
              @STATUSClause   NVARCHAR(max) = '',
			  @DurationClause   NVARCHAR(max) = '';

	SET @sql ='SELECT  T_HDR.mkey as Sr_No, T_HDR.mkey,Isnull(TMST.type_desc, ''NA'') CATEGORY,T_HDR.task_no,dbo.[Initcap](Isnull(CREATOR.emp_full_name, ''NA'')) CREATOR,
	  dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, ''NA'')) RESPONSIBLE,
	  dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, ''NA'')) ACTIONABLE,
	  T_HDR.creation_date,                    
	  CASE                      
	  WHEN T_HDR.status IN ( ''CREATED'' ) THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUB TASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUBTASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status IN ( ''WORK IN PROGRESS'', ''CLOSE INITIATED'', ''CANCEL INITIATED'', ''RE-WORK'' ) THEN ''In Progress''                      
	  WHEN T_HDR.status IN ( ''CLOSE'', ''COMPLETED'' ) THEN ''Completed''                      ELSE ''Others''                    END AS Dashboard_Status, 
	  CONVERT(VARCHAR, T_HDR.completion_date, 103) AS COMPLETION_DATE,                    
	  dbo.[Initcap](T_HDR.task_name) AS TASK_NAME,                    
	  T_HDR.task_description,                    
	  T_HDR.tags,                    
	  dbo.[Initcap](T_HDR.status) AS STATUS,                   
	  CASE                      
	  WHEN Isnull(CREATOR.first_name, ''NA'') != Isnull(RESPONSIBLE.first_name, ''NA'') 
	  THEN dbo.[Initcap](Isnull(CREATOR.first_name, ''NA'')) + '' > '' + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, ''NA''))                      
	  ELSE dbo.[Initcap](Isnull(CREATOR.first_name, ''NA''))                    
	  END AS RESPONSIBLE_TAG,                   
	  dbo.[Initcap](Isnull(PMST.type_desc, '''')) AS PROJECT_NAME,                    
	  dbo.Tasknamestring(T_HDR.mkey) AS TASK_HISTORY,                    
	  Isnull(Rtrim(T_HDR.[priority]), '''') AS [Priority],                    
	  Isnull(T_HDR.percent_complete, ''0'') AS Progress_Percentage,                    
	  Isnull(parent_counts.parenttaskcount, 0) AS SubTask_Count,                    
	  T_HDR.CREATED_BY             
	  FROM task_hdr T_HDR             
	  LEFT JOIN employee_mst CREATOR ON CREATOR.mkey = T_HDR.created_by AND CREATOR.delete_flag = ''N''             
	  LEFT JOIN employee_mst RESPONSIBLE ON RESPONSIBLE.mkey = T_HDR.assigned_to AND RESPONSIBLE.delete_flag = ''N''             
	  LEFT JOIN employee_mst ACTIONABLE ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey AND ACTIONABLE.delete_flag = ''N''            
	  LEFT JOIN type_mst TMST ON TMST.master_mkey = T_HDR.caregory AND TMST.type_code = ''CATEGORY'' AND TMST.delete_flag = ''N''             
	  LEFT JOIN type_mst PMST ON PMST.master_mkey = T_HDR.project_id AND PMST.type_code = ''PROJECT'' AND PMST.delete_flag = ''N''             
	  LEFT JOIN (SELECT task_parent_id, Count(*) AS ParentTaskCount                        
	  FROM task_hdr WHERE task_parent_id IS NOT NULL AND mkey NOT IN (task_parent_id) AND delete_flag = ''N''                        
	  GROUP BY task_parent_id) parent_counts ON T_HDR.mkey = parent_counts.task_parent_id             
	  WHERE Isnull(T_HDR.status_flag, ''A'') IN (''A'') AND T_HDR.delete_flag = ''N'' ';
    /* @USER_FILTER */
    IF ( @USER_FILTER <> '' AND @USER_FILTER IS NOT NULL ) -- @USER_FILTER is not null OR
      BEGIN
          WHILE @start <= Len(@USER_FILTER)
            BEGIN
                SET @end = Charindex(',', @USER_FILTER, @start);
                IF @end = 0
                  SET @end = Len(@USER_FILTER) + 1;
                SET @filter = Ltrim(Rtrim(Substring(@USER_FILTER, @start, @end - @start)));
				
                IF @filter = 'Default'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @sql += ' OR ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' ) ';
                        END
                  END

                IF @filter = 'ALLOCATEDBYME' 
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +' ) ';
                        END
                  END

                IF @filter = 'ALLOCATEDTOME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN

                            SET @WhereClause +=' ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+ 
							' OR T_HDR.resposible_emp_mkey = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+')';
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                        SET @WhereClause +=' OR ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +')';
                  END

                IF @filter = 'COMPLETEDBYME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' ( CONVERT(int,T_HDR.assigned_to) = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+
                            ' AND T_HDR.status IN (''COMPLETED''))';
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause += ' OR ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'COMPLETEDFORME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @WhereClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) +
                            ' AND CONVERT(int,T_HDR.assigned_to) != '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+' AND CONVERT(int,T_HDR.assigned_to) != '
                                            + CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+ ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'CANCELCLOSE'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' ( T_HDR.created_by = ' + CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) +
                            ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
                        SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+
                        ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'') ) ';
                  --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                  END
				
				/*Priority Filter */
				 IF @filter = 'High'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                            SET @WhereClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                        SET @WhereClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
                  END

                IF @filter = 'Low'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                            SET @WhereClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                        SET @WhereClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
						END

                IF @filter = 'Medium'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                            SET @WhereClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                        SET @WhereClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'') ';
                  END
				  /* End Priority */

				  /*Type Filter*/
				   IF @filter = 'RECURRING'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'Approval'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'COMPLIANCE'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'GENERAL'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'SYSTEM'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
                  END

                IF @filter = 'Email'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'RERA COMPLAIN'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
                  END
				  /*End Type Filter*/

				  /*Status Filter*/
				  IF @filter = 'Pending'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @WhereClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
											and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
					SET @hasWhereClause = 1;
				END
			ELSE
				SET @WhereClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
										and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
			END
			
			IF @filter = 'Review'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @WhereClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
					SET @hasWhereClause = 1;
				END
				ELSE
					SET @WhereClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
			END

			IF @filter = 'Completed'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @WhereClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
					SET @hasWhereClause = 1;
				END
			ELSE
					SET @WhereClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
			END

			IF @filter = 'Cancelled'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @WhereClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
					SET @hasWhereClause = 1;
				END
				ELSE
					SET @WhereClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
			END
			/*End Status Filter*/

			IF @filter = 'Today'
			BEGIN
				IF @hasWhereClause = 0
					BEGIN
						SET @WhereClause += ' (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
												AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
						SET @hasWhereClause = 1;
					END
					ELSE
						begin
						SET @WhereClause += ' OR (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) 
												AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
						end
			END

			IF @filter = 'Overdue'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @WhereClause +=' (T_HDR.completion_date < GETDATE() 
										AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
					SET @hasWhereClause = 1;
				END
			ELSE
				SET @WhereClause += ' OR (T_HDR.completion_date < GETDATE() 
										AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
			END

			IF @filter = 'Future'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					SET @WhereClause += ' (T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
										and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
					SET @hasWhereClause = 1;
				END
			ELSE
					SET @WhereClause += ' OR ((T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
									and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103)) ';
			END

			IF @filter = 'Next 3 Days'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					
					--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
					SET @WhereClause +=' (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
					SET @hasWhereClause = 1;
				END
				ELSE
					--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
					SET @WhereClause +=' OR (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
			END

			IF @filter = 'Next 7 Days'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					--SET @DurationClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
					--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
					SET @WhereClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
					SET @hasWhereClause = 1;
				END
			ELSE
				--SET @DurationClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
				--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
				SET @WhereClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
			END

			IF @filter = 'Next 2 Weeks'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					--SET @DurationClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
					SET @WhereClause +=' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
					SET @hasWhereClause = 1;
				END
			ELSE
					--SET @DurationClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
					SET @WhereClause +=' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
			END

			IF @filter = 'Next Month'
			BEGIN
				IF @hasWhereClause = 0
				BEGIN
					--SET @DurationClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
					--SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
					SET @WhereClause += ' ( T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
					SET @hasWhereClause = 1;
				END
				ELSE
					--SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
					--SET @DurationClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
					SET @WhereClause += ' OR ( T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
			END

			/*End Duration Filter*/


			SET @start = @end + 1;
            END
			If (@hasWhereClause = 1)
			Begin
				SET @sql += ' AND ( ' + @WhereClause + ' ) ';
			End
			Else if (@hasWhereClause = 0 and @WhereClause is not null or @WhereClause != null)
			Begin
				print '@WhereClause is not null';
				SET @sql += ' AND ( 1 != 1 ) ';
			End
      END
    ELSE IF( @USER_FILTER IS NULL OR @USER_FILTER = 'Default'  OR @USER_FILTER = '' OR @filter is not null)
      BEGIN
         SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
          SET @hasWhereClause = 1;
          SET @sql += ' AND ( ' + @WhereClause + ' ) ';
      END
    print '@@sql: '+ @sql;
    EXEC Sp_executesql @sql;

    EXEC Sp_dashboard_count @CURRENT_EMP_MKEY;
	-----------------------------------------------------------------------------------------------------
 --   /* @PriorityFilter */
 --   IF ( @PriorityFilter IS NOT NULL
 --        AND @PriorityFilter <> '' )
 --     BEGIN
 --         SET @start = 1;
 --         SET @hasWhereClause = 0;

 --         WHILE @start <= Len(@PriorityFilter)
 --           BEGIN
 --               SET @end = Charindex(',', @PriorityFilter, @start);

 --               IF @end = 0
 --                 SET @end = Len(@PriorityFilter) + 1;

 --               SET @filter = Ltrim(Rtrim(Substring(@PriorityFilter, @start,@end - @start )) );

 --               -- Append the priority condition
 --               IF @filter = 'High'
 --                 BEGIN
 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
 --                           SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
 --                       SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
 --                 END

 --               IF @filter = 'Low'
 --                 BEGIN
 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
 --                           SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
 --                       SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
	--					END

 --               IF @filter = 'Medium'
 --                 BEGIN
 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
 --                           SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
 --                       SET @PriorityClause += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
 --                 END

 --               SET @start = @end + 1;
 --           END
	--		If (@hasWhereClause = 1)
	--		Begin
	--			SET @sql += ' AND ( ' + @PriorityClause + ' ) ';
	--		End
	--		Else if (@hasWhereClause = 0 and @PriorityClause is not null or @PriorityClause != null)
	--		Begin
	--		print '@PriorityFilter';
	--			SET @sql += ' AND ( 1 != 1 ) ';
	--		End
			
 --     END
 --   -----------------------------------------------------------------------------------------------------
 --   /* @TypeFilter */
 --   IF ( @TypeFilter IS NOT NULL
 --        AND @TypeFilter <> '' )
 --     BEGIN
 --         SET @start = 1;
 --         SET @hasWhereClause = 0;

 --         WHILE @start <= Len(@TypeFilter)
 --           BEGIN
 --               SET @end = Charindex(',', @TypeFilter, @start);

 --               IF @end = 0
 --                 SET @end = Len(@TypeFilter) + 1;

 --               SET @filter = Ltrim(Rtrim(Substring(@TypeFilter, @start, @end - @start)));

 --               IF @filter = 'RECURRING'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'Approval'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'COMPLIANCE'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') '
 --                           ;
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'GENERAL'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'SYSTEM'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                 END

 --               IF @filter = 'Email'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'RERA COMPLAIN'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                 END

 --               SET @start = @end + 1;
 --           END
	--		If (@hasWhereClause = 1)
	--		Begin
	--			SET @sql += ' AND ( ' + @TypeClause + ' ) ';
	--		End
	--		Else if (@hasWhereClause = 0 and @TypeClause is not null or @TypeClause != null)
	--		Begin
	--			print '@@TypeClause';
	--			SET @sql += ' AND ( 1 != 1 ) ';
	--		End
 --     END
 --   -----------------------------------------------------------------------------------------------------
 --   /* @STATUS_FILTER */
 --   IF ( @STATUS_FILTER IS NOT NULL
 --        AND @STATUS_FILTER <> '' )
	--	BEGIN
	--	SET @start = 1;
	--	SET @hasWhereClause = 0;

	--	WHILE @start <= Len(@STATUS_FILTER)
	--	BEGIN
	--		SET @end = Charindex(',', @STATUS_FILTER, @start);

	--		IF @end = 0
	--			SET @end = Len(@STATUS_FILTER) + 1;

	--		SET @filter = Ltrim(Rtrim(Substring(@STATUS_FILTER, @start, @end - @start)));

	--		IF @filter = 'Pending'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--										and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--			SET @STATUSClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--									and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--		END
			
	--		IF @filter = 'Review'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				SET @STATUSClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
	--		END

	--		IF @filter = 'Completed'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--				SET @STATUSClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--		END

	--		IF @filter = 'Cancelled'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				SET @STATUSClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--		END

	--		SET @start = @end + 1;
	--	END
	--			If (@hasWhereClause = 1)
	--			Begin
	--				SET @sql += ' AND ( ' + @STATUSClause + ' ) ';
	--			End
	--		Else if (@hasWhereClause = 0 and @STATUSClause is not null or @STATUSClause != null)
	--		Begin
	--		--print '@STATUSClause is not null11';
	--			SET @sql += ' AND ( 1 != 1 ) ';
	--		End
	--		END
 -------------------------------------------------------------------------------------------------------
	--IF ( @DURATION_FILTER IS NOT NULL
 --        AND @DURATION_FILTER <> '' )
	--	BEGIN
	--	SET @start = 1;
	--	SET @hasWhereClause = 0;

	--	WHILE @start <= Len(@DURATION_FILTER)
	--	BEGIN
	--		SET @end = Charindex(',', @DURATION_FILTER, @start);

	--		IF @end = 0
	--			SET @end = Len(@DURATION_FILTER) + 1;

	--		SET @filter = Ltrim(Rtrim(Substring(@DURATION_FILTER, @start, @end - @start)));

	--		IF @filter = 'Today'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--				BEGIN
	--					SET @DurationClause += ' (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
	--											AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--					SET @hasWhereClause = 1;
	--				END
	--				ELSE
	--					begin
	--					SET @DurationClause += ' OR (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) 
	--											AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--					end
	--		END

	--		IF @filter = 'Overdue'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @DurationClause +=' (T_HDR.completion_date < GETDATE() 
	--									AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--			SET @DurationClause += ' OR (T_HDR.completion_date < GETDATE() 
	--									AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--		END

	--		IF @filter = 'Future'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @DurationClause += ' (T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
	--									and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--				SET @DurationClause += ' OR ((T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
	--								and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103)) ';
	--		END

	--		IF @filter = 'Next 3 Days'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
					
	--				--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
	--				SET @DurationClause +=' (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
	--				SET @DurationClause +=' OR (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
	--		END

	--		IF @filter = 'Next 7 Days'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				--SET @DurationClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--				--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--				SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--			--SET @DurationClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--			--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--			SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
	--		END

	--		IF @filter = 'Next 2 Weeks'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				--SET @DurationClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--				SET @DurationClause +=' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--				--SET @DurationClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--				SET @DurationClause +=' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
	--		END

	--		IF @filter = 'Next Month'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				--SET @DurationClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--				--SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
	--				SET @DurationClause += ' ( T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				--SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
	--				--SET @DurationClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--				SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
	--		END

	--		SET @start = @end + 1;
	--	END
	--			If (@hasWhereClause = 1)
	--			Begin
	--				SET @sql += ' AND ( ' + @DurationClause + ' ) ';
	--			End
	--			Else if (@hasWhereClause = 0 and @DurationClause is not null or @DurationClause != null)
	--			Begin
	--			print '@DurationClause is not null';
	--				SET @sql += ' AND ( 1 != 1 ) ';
	--			End
	--		END
END

--------------------------------------------------------------------------------------------------------------------
29-05-2025


-- EXEC SP_GET_TASK_OVERDUE_BY_PRIORITY 926,1,NULL,NULL
-- =============================================
Create PROCEDURE [dbo].[SP_GET_TASK_OVERDUE_BY_PRIORITY]
  -- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE
  @Session_User_Id            INT = null,
  @Business_Group_Id          int = null,
  @OUT_STATUS                 NVARCHAR(200) output,
  @OUT_MESSAGE                NVARCHAR(200) output
AS
  BEGIN
      -- SET NOCOUNT ON ADDED TO PREVENT EXTRA RESULT SETS FROM
      -- INTERFERING WITH SELECT STATEMENTS.
      SET nocount ON;
	BEGIN try
		
		Select LTRIM(Rtrim(Priority)) as Priority,Count(Priority) as 'PriorityCount' from TASK_HDR 
		where DELETE_FLAG = 'N' and RESPOSIBLE_EMP_MKEY = @Session_User_Id
		and Priority in ('High','Low','Medium')
		Group By Priority;

	END try

      BEGIN catch
          -------------------------------------------------------------------------------------------------------------------------------          
          SELECT Error_number()    AS ERRORNUMBER,
                 Error_severity()  AS ERRORSEVERITY,
                 Error_state()     AS ERRORSTATE,
                 Error_procedure() AS ERRORPROCEDURE,
                 Error_line()      AS ERRORLINE,
                 Error_message()   AS ERRORMESSAGE;
          -------------------------------------------------------------------------------------------------------------------------------
          DECLARE @ERROR_MESSAGE VARCHAR(max) = NULL;
          SET @ERROR_MESSAGE = Error_message();
          -------------------------------------------------------------------------------------------------------------------------------
          EXEC Sp_p_tms_insert_error_des
            @Session_User_Id,
            'Get Task Overdue Priority',
            'Get Over Due Task by Priority form',
            @ERROR_MESSAGE,
            'Over Due Task by Priority';
      -------------------------------------------------------------------------------------------------------------------------------
      END catch
  END 
--------------------------------------------------------------------------------------

30-0-2025

	-- EXEC SP_GET_TASK_PROJECTS_BY_TASK_TYPE 359,'Today',926,1
	-- =============================================
	CREATE PROCEDURE SP_GET_TASK_PROJECTS_BY_TASK_TYPE
	-- Add the parameters for the stored procedure here
	@TASK_TYPE	INT,
	@FILTER  VARCHAR(max) = NULL,
	@Session_User_Id          INT = NULL,  
	@Business_Group_Id	  INT = NULL
	AS
	BEGIN
		SET nocount ON;
			
	BEGIN try
		Declare @sql NVARCHAR(max) = NULL,
		@WhereClause VARCHAR(max) = NULL;
	
		SET @sql ='Select thdr.PROJECT_ID, SUB_PROJECT_ID,thdr.MKEY, TASK_NO,TASK_NAME,TASK_DESCRIPTION
			,ASSIGNED_TO, emst.EMP_FULL_NAME,COMPLETION_DATE
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			Where TASK_TYPE = '+ CONVERT(NVARCHAR, @TASK_TYPE) + ' 
			And thdr.DELETE_FLAG = ''N''
			And (RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR,@Session_User_Id) +' OR thdr.CREATED_BY = '+CONVERT(NVARCHAR, @Session_User_Id) +' )';
	
			IF @FILTER = 'Today'
			BEGIN
				SET @WhereClause = ' And (CONVERT(VARCHAR, thdr.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
										AND thdr.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
			END
			IF @FILTER = 'Pending'
			BEGIN
				SET @WhereClause =' AND (STATUS_PERC = 0.0 AND thdr.completion_date < GETDATE() 
										and thdr.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
			END
			IF @FILTER = 'Review'
			BEGIN
				SET @WhereClause = ' AND (thdr.STATUS IN (''Close Initiated'',''Cancel Initiated''))';
			END
			IF @FILTER = 'Completed'
			BEGIN
				SET @WhereClause = ' And (thdr.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
			END
			IF @FILTER = 'Cancelled'
			BEGIN
				SET @WhereClause =' AND (thdr.status IN (''CANCEL'', ''CANCELLED'')) ';
			END
			IF @FILTER = 'Overdue'
			BEGIN
				SET @WhereClause = ' And (thdr.completion_date < GETDATE() AND thdr.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
			END
			IF @FILTER = 'Future'
			BEGIN
				SET @WhereClause =' AND (thdr.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
										and thdr.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
			END
			if (@WhereClause  is not null OR @WhereClause  != null)
			begin
				set @sql += @WhereClause + ' order by thdr.PROJECT_ID, thdr.SUB_PROJECT_ID,thdr.MKEY; ';
			end

			EXEC Sp_executesql @sql;
			print @sql;
	END try
	BEGIN catch
	-------------------------------------------------------------------------------------------------------------------------------            
		SELECT Error_number()    AS ERRORNUMBER,
		Error_severity()  AS ERRORSEVERITY,
		Error_state()     AS ERRORSTATE,
		Error_procedure() AS ERRORPROCEDURE,
		Error_line()      AS ERRORLINE,
		Error_message()   AS ERRORMESSAGE;
		-------------------------------------------------------------------------------------------------------------------------------  
		DECLARE @ERROR_MESSAGE VARCHAR(max) = NULL;
		SET @ERROR_MESSAGE = Error_message();
	-------------------------------------------------------------------------------------------------------------------------------  
		EXEC Sp_p_tms_insert_error_des
								@Session_User_Id,
								'TMS',
								'Get Task Projects',
								@ERROR_MESSAGE,
								'Get';
	-------------------------------------------------------------------------------------------------------------------------------  
		END catch
	END 





GO
/****** Object:  StoredProcedure [dbo].[Sp_insert_update_table_sanctioning_department_NT]    Script Date: 30-05-2025 18:51:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- EXEC SP_INSERT_UPDATE_TABLE_SANCTIONING_DEPARTMENT 78,0,3,'',0,926,'N','INSERT TASK S', 'INSERT',NULL,NULL
-- =============================================
ALTER PROCEDURE [dbo].[Sp_insert_update_table_sanctioning_department_NT]
  -- ADD THE PARAMETERS FOR THE STORED PROCEDURE HERE
  @TASK_MKEY                  INT,
  @SR_NO                      INT,
  @LEVEL                      INT,
  @SANCTIONING_DEPARTMENT     NVARCHAR(255),
  @SANCTIONING_AUTHORITY_MKEY INT,
  @Mode                     NVARCHAR(100) = NULL,
  @Status                     NVARCHAR(100) = NULL,
  @Comment                     NVARCHAR(max) = NULL,
  @CREATED_BY                 INT,
  @DELETE_FLAG                NVARCHAR(2),
  @Session_User_Id            INT = null,
  @Business_Group_Id          int = null,
  @METHOD_NAME                NVARCHAR(200),
  @METHOD                     NVARCHAR(200),
  @OUT_STATUS                 NVARCHAR(200) output,
  @OUT_MESSAGE                NVARCHAR(200) output
AS
  BEGIN
      -- SET NOCOUNT ON ADDED TO PREVENT EXTRA RESULT SETS FROM
      -- INTERFERING WITH SELECT STATEMENTS.
      SET nocount ON;

      DECLARE @DCOUNT                INT,
              @SANCTIONING_AUTHORITY NVARCHAR(255);

      BEGIN try
          IF( @CREATED_BY = 0
               OR @CREATED_BY IS NULL )
            BEGIN
                SET @OUT_STATUS = 'ERROR';
                SET @OUT_MESSAGE = 'Please enter created by';

                SELECT @OUT_STATUS  AS OUT_STATUS,
                       @OUT_MESSAGE AS OUT_MESSAGE;
            END
          ELSE IF( @TASK_MKEY = 0
               OR @TASK_MKEY IS NULL )
            BEGIN
                SET @OUT_STATUS = 'ERROR';
                SET @OUT_MESSAGE = 'Please enter Task No';

                SELECT @OUT_STATUS  AS OUT_STATUS,
                       @OUT_MESSAGE AS OUT_MESSAGE;
            END
          ELSE IF( @LEVEL = 0
               OR @LEVEL IS NULL )
            BEGIN
                SET @OUT_STATUS = 'ERROR';
                SET @OUT_MESSAGE = 'Please enter Level';

                SELECT @OUT_STATUS  AS OUT_STATUS,
                       @OUT_MESSAGE AS OUT_MESSAGE;
            END
          ELSE IF( @SANCTIONING_AUTHORITY_MKEY = 0
               OR @SANCTIONING_AUTHORITY_MKEY IS NULL )
            BEGIN
                SET @OUT_STATUS = 'ERROR';
                SET @OUT_MESSAGE = 'Please enter Sanctioning Authority';

                SELECT @OUT_STATUS  AS OUT_STATUS,
                       @OUT_MESSAGE AS OUT_MESSAGE;
            END
          ELSE IF( @SANCTIONING_DEPARTMENT = ''
               OR @SANCTIONING_DEPARTMENT IS NULL )
            BEGIN
                SET @OUT_STATUS = 'ERROR';
                SET @OUT_MESSAGE = 'Please enter Sanctioning Department';

                SELECT @OUT_STATUS  AS OUT_STATUS,
                       @OUT_MESSAGE AS OUT_MESSAGE;
            END
          ELSE
            BEGIN
                IF ( @SR_NO = 0
                      OR @SR_NO IS NULL )
                  BEGIN
                      SELECT @DCOUNT = Count(*)
                      FROM   task_sanctioning_department_trl
                      WHERE  mkey = @TASK_MKEY
                             AND Lower(sanctioning_department) = Lower(@SANCTIONING_DEPARTMENT)
                             AND sanctioning_authority_mkey = @SANCTIONING_AUTHORITY_MKEY
							 AND LEVEL = @LEVEL
                             AND delete_flag = 'N';

                      IF ( @DCOUNT > 0 )
                        BEGIN
                            PRINT '@SR_NO: ' + CONVERT(NVARCHAR(100), @SR_NO);

                            SET @OUT_STATUS = 'ERROR';
                            SET @OUT_MESSAGE = 'Already exists';

                            PRINT '@OUT_MESSAGE: '
                                  + CONVERT(VARCHAR(10), @OUT_MESSAGE );

                            SELECT DTRL.mkey,
                                   DTRL.sr_no,
                                   THDR.project_id
                                   AS
                                   PROPERTY_MKEY,
                                   THDR.sub_project_id
                                   AS
                                   BUILDING_MKEY,
                                   DTRL.sanctioning_department
                                   AS
                                   TYPE_CODE,
                                   DTRL.sanctioning_authority
                                   AS
                                   [TYPE_DESC],
                                   DTRL.sanctioning_authority_mkey
                                   AS
                                   SANCTIONING_AUTHORITY,
                                   DTRL.[status] AS [STATUS] ,
								   DTRL.STATUS_MODE AS MODE ,
                                   --CASE WHEN  DTRL.[STATUS] = NULL THEN 'IN-PROGRESS' END AS [STATUS],
                                   DTRL.[start_date],
                                   DTRL.end_date,
                                   DTRL.[level],
                                   Isnull(CONVERT(VARCHAR(50), DTRL.created_by),
                                   '')
                                   AS
                                   CREATED_BY_ID,
                                   Isnull(CONVERT(VARCHAR(50),
                                          CREATEDBY.emp_full_name),
                                   '')
                                   AS
                                   CREATED_BY_NAME,
                                   CASE
                                     WHEN DTRL.creation_date IS NULL THEN ''
                                     ELSE Format(DTRL.creation_date,
                                          'YYYY-MM-DD HH:MM:SS'
                                          )
                                   END
                                   AS
                                   CREATION_DATE,
                                   Isnull(CONVERT(VARCHAR(50),
                                          DTRL.last_updated_by),
                                   '')
                                   AS
                                   LAST_UPDATED_BY,
                                   Isnull(UPDATEDBY.emp_full_name, '')
                                   UPDATED_BY_NAME
                                   ,
                                   CASE
                                     WHEN DTRL.last_update_date IS NULL THEN ''
                                     ELSE Format(DTRL.last_update_date,
                                          'YYYY-MM-DD HH:MM:SS')
                                   END
                                   AS
                                   LAST_UPDATE_DATE,
                                   @OUT_STATUS
                                   AS
                                   OUT_STATUS,
                                   @OUT_MESSAGE
                                   AS
                                   OUT_MESSAGE
                            FROM   task_sanctioning_department_trl DTRL
                                   INNER JOIN task_hdr THDR
                                           ON DTRL.mkey = THDR.mkey
                                   INNER JOIN employee_mst CREATEDBY
                                           ON DTRL.created_by = CREATEDBY.mkey
                                   LEFT JOIN employee_mst UPDATEDBY
                                          ON DTRL.last_updated_by =
                                             UPDATEDBY.mkey
                            WHERE  DTRL.delete_flag = 'N'
                                   AND CREATEDBY.delete_flag = 'N'
                                   AND DTRL.mkey = @TASK_MKEY;
                        END
                      ELSE
            BEGIN
                DECLARE @CurrentStatus NVARCHAR(100),
                        @FromLevel     INT,
						@PreSrNo       INT,
						@TaskSrNo       INT;

                PRINT 'insert new';

                SELECT @SR_NO = Isnull(Max(sr_no), 0) + 1
                FROM   task_sanctioning_department_trl
                WHERE  mkey = @TASK_MKEY;
				
                SELECT @SANCTIONING_AUTHORITY = [type_desc]
                FROM   type_mst
                WHERE  type_code = 'SAUTHORITY'
                       AND master_mkey = @SANCTIONING_AUTHORITY_MKEY
                       AND delete_flag = 'N';

                INSERT INTO task_sanctioning_department_trl
                            (mkey,
                             sr_no,
                             [level],
                             sanctioning_department,
                             sanctioning_authority_mkey,
                             sanctioning_authority,
							 STATUS_MODE,
                             [status],
							 COMMENT,
                             delete_flag,
                             created_by,
                             creation_date)
                VALUES      (@TASK_MKEY,
                             @SR_NO,
                             @LEVEL,
                             @SANCTIONING_DEPARTMENT,
                             @SANCTIONING_AUTHORITY_MKEY,
                             @SANCTIONING_AUTHORITY,
							 @Mode,
                             @Status,
							 @Comment,
                             @DELETE_FLAG,
                             @CREATED_BY,
                             Getdate())

                PRINT 'TASK_SANCTIONING_DEPARTMENT_TRL_MOVEMENT_HISTORY SAUTHORITY';

                SELECT @SR_NO = Isnull(Max(sr_no), 0) + 1, @PreSrNo =  Max(sr_no) 
                FROM   TASK_SANCTIONING_DEPARTMENT_TRL_MOVEMENT_HISTORY
                WHERE  task_mkey = @TASK_MKEY
				AND		delete_flag = @DELETE_FLAG;

				if (@PreSrNo is null)
				Begin
					Select @PreSrNo = SR_NO from TASK_SANCTIONING_DEPARTMENT_TRL where MKEY = @TASK_MKEY and DELETE_FLAG = 'N';
					--select @TaskSrNo = TASK_SR_NO from TASK_SANCTIONING_DEPARTMENT_TRL_MOVEMENT_HISTORY where task_mkey = @TASK_MKEY AND delete_flag = @DELETE_FLAG 
					--and SR_NO =  @PreSrNo;
				End

                SELECT @CurrentStatus = status,
                       @FromLevel = level,
					   @TaskSrNo = SR_NO
                FROM   task_sanctioning_department_trl
                WHERE  mkey = @TASK_MKEY
                       AND sr_no = @PreSrNo
                       AND delete_flag = 'N';
					   print '@TaskSrNo: '+ convert(nvarchar,@TaskSrNo)

                INSERT INTO TASK_SANCTIONING_DEPARTMENT_TRL_MOVEMENT_HISTORY
                            (sr_no,
                             task_mkey,
							 TASK_SR_NO,
                             from_level,
                             to_level,
                             current_status,
                             updated_status,
                             history_date,
                             CREATED_BY,
                             CREATION_DATE,
                             delete_flag)
                VALUES      (@SR_NO,
                             @TASK_MKEY,
							 @TaskSrNo,
                             @FromLevel,
                             @LEVEL,
                             @CurrentStatus,
                             @CurrentStatus,
                             Getdate(),
                             @CREATED_BY,
                             Getdate(),
                             @DELETE_FLAG)
                
                SET @OUT_STATUS = 'OK';
                SET @OUT_MESSAGE = 'SUCCESSFULY INSERTED';

                SELECT DTRL.mkey,
                       DTRL.sr_no,
                       THDR.project_id AS PROPERTY_MKEY,
                       THDR.sub_project_id AS BUILDING_MKEY,
                       DTRL.sanctioning_department AS TYPE_CODE,
                       DTRL.sanctioning_authority AS [TYPE_DESC],
                       DTRL.sanctioning_authority_mkey AS SANCTIONING_AUTHORITY,
                       DTRL.[status] AS [STATUS],
					   DTRL.STATUS_MODE as MODE,
                       DTRL.[start_date],
                       DTRL.end_date,
                       DTRL.[level],
                       Isnull(CONVERT(VARCHAR(50), DTRL.created_by), '') AS CREATED_BY_ID,
                       Isnull(CONVERT(VARCHAR(50), CREATEDBY.emp_full_name), '') AS CREATED_BY_NAME,
                       CASE
                         WHEN DTRL.creation_date IS NULL THEN ''
                         ELSE Format(DTRL.creation_date, 'YYYY-MM-DD HH:MM:SS')
                       END AS CREATION_DATE,
                       Isnull(CONVERT(VARCHAR(50), DTRL.last_updated_by), '')
                       AS
                       LAST_UPDATED_BY,
                       Isnull(UPDATEDBY.emp_full_name, '')
                       UPDATED_BY_NAME
                       ,
                       CASE
                         WHEN DTRL.last_update_date IS NULL THEN ''
                         ELSE Format(DTRL.last_update_date,
                              'YYYY-MM-DD HH:MM:SS')
                       END
                       AS
                       LAST_UPDATE_DATE,
                       @OUT_STATUS
                       AS
                       OUT_STATUS,
                       @OUT_MESSAGE
                       AS
                       OUT_MESSAGE
                FROM   task_sanctioning_department_trl DTRL
                       INNER JOIN task_hdr THDR
                               ON DTRL.mkey = THDR.mkey
                       INNER JOIN employee_mst CREATEDBY
                               ON DTRL.created_by = CREATEDBY.mkey
                       LEFT JOIN employee_mst UPDATEDBY
                              ON DTRL.last_updated_by = UPDATEDBY.mkey
                WHERE  DTRL.delete_flag = 'N'
                       AND CREATEDBY.delete_flag = 'N'
                       AND DTRL.mkey = @TASK_MKEY;
            END
                  END
                ELSE
                  BEGIN
                      SELECT @SANCTIONING_AUTHORITY = [type_desc]
                      FROM   type_mst
                      WHERE  type_code = 'SAUTHORITY'
                             AND master_mkey = @SANCTIONING_AUTHORITY_MKEY
                             AND delete_flag = 'N';

                      PRINT 'insert SAUTHORITY';

                      INSERT INTO task_sanctioning_department_trl_h
                                  (hist_date,
                                   mkey,
                                   sr_no,
                                   level,
                                   sanctioning_department,
                                   sanctioning_authority_mkey,
                                   sanctioning_authority,
                                   status,
								   STATUS_MODE,
                                   start_date,
                                   end_date,
								   COMMENT,
                                   attribute1,
                                   attribute2,
                                   attribute3,
                                   attribute4,
                                   attribute5,
                                   created_by,
                                   creation_date,
                                   last_updated_by,
                                   last_update_date,
                                   delete_flag)
                      SELECT Getdate(),
                             mkey,
                             sr_no,
                             level,
                             sanctioning_department,
                             sanctioning_authority_mkey,
                             sanctioning_authority,
                             status,
							 STATUS_MODE,
                             start_date,
                             end_date,
							 COMMENT,
                             attribute1,
                             attribute2,
                             attribute3,
                             attribute4,
                             attribute5,
                             created_by,
                             creation_date,
                             last_updated_by,
                             last_update_date,
                             delete_flag
                      FROM   task_sanctioning_department_trl
                      WHERE  mkey = @TASK_MKEY
                             AND sr_no = @SR_NO
                             AND delete_flag = 'N';

                      UPDATE task_sanctioning_department_trl
                      SET    level = @LEVEL,
                             sanctioning_department = @SANCTIONING_DEPARTMENT,
                             sanctioning_authority_mkey =
                             @SANCTIONING_AUTHORITY_MKEY,
                             sanctioning_authority = @SANCTIONING_AUTHORITY,
                             [status] = @Status,
							 COMMENT = @Comment,
							 STATUS_MODE = @Mode,
                             last_updated_by = @CREATED_BY,
                             last_update_date = Getdate(),
                             delete_flag = @DELETE_FLAG
                      WHERE  mkey = @TASK_MKEY
                             AND sr_no = @SR_NO
                             AND delete_flag = 'N';

                      SET @OUT_STATUS = 'OK';
                      SET @OUT_MESSAGE = 'SUCCESSFULY INSERTED';

                      SELECT DTRL.mkey,
                             DTRL.sr_no,
                             THDR.project_id
                             AS
                             PROPERTY_MKEY,
                             THDR.sub_project_id
                             AS
                             BUILDING_MKEY,
                             DTRL.sanctioning_department
                             AS
                             TYPE_CODE,
                             DTRL.sanctioning_authority
                             AS
                             [TYPE_DESC],
                             DTRL.sanctioning_authority_mkey
                             AS
                             SANCTIONING_AUTHORITY,
                             DTRL.[status] AS [STATUS],
							 DTRL.STATUS_MODE as MODE,
                             DTRL.[start_date],
                             DTRL.end_date,
                             DTRL.[level],
                             Isnull(CONVERT(VARCHAR(50), DTRL.created_by), '')
                             AS
                             CREATED_BY_ID,
                             Isnull(CONVERT(VARCHAR(50),
                                    CREATEDBY.emp_full_name),
                             '')
                             AS
                             CREATED_BY_NAME,
                             CASE
                               WHEN DTRL.creation_date IS NULL THEN ''
                               ELSE Format(DTRL.creation_date,
                                    'YYYY-MM-DD HH:MM:SS')
                             END
                             AS
                             CREATION_DATE,
                             Isnull(CONVERT(VARCHAR(50), DTRL.last_updated_by),
                             ''
                             )
                             AS
                             LAST_UPDATED_BY,
                             Isnull(UPDATEDBY.emp_full_name, '')
                             UPDATED_BY_NAME
                             ,
                             CASE
                               WHEN DTRL.last_update_date IS NULL THEN ''
                               ELSE Format(DTRL.last_update_date,
                                    'YYYY-MM-DD HH:MM:SS')
                             END
                             AS
                             LAST_UPDATE_DATE,
                             @OUT_STATUS
                             AS
                             OUT_STATUS,
                             @OUT_MESSAGE
                             AS
                             OUT_MESSAGE
                      FROM   task_sanctioning_department_trl DTRL
                             INNER JOIN task_hdr THDR
                                     ON DTRL.mkey = THDR.mkey
                             INNER JOIN employee_mst CREATEDBY
                                     ON DTRL.created_by = CREATEDBY.mkey
                             LEFT JOIN employee_mst UPDATEDBY
                                    ON DTRL.last_updated_by = UPDATEDBY.mkey
                      WHERE  DTRL.delete_flag = 'N'
                             AND CREATEDBY.delete_flag = 'N'
                             AND DTRL.mkey = @TASK_MKEY;
                  END
            END
      END try

      BEGIN catch
          -------------------------------------------------------------------------------------------------------------------------------          
          SELECT Error_number()    AS ERRORNUMBER,
                 Error_severity()  AS ERRORSEVERITY,
                 Error_state()     AS ERRORSTATE,
                 Error_procedure() AS ERRORPROCEDURE,
                 Error_line()      AS ERRORLINE,
                 Error_message()   AS ERRORMESSAGE;

          -------------------------------------------------------------------------------------------------------------------------------
          DECLARE @ERROR_MESSAGE VARCHAR(max) = NULL;

          SET @ERROR_MESSAGE = Error_message();

          -------------------------------------------------------------------------------------------------------------------------------
          EXEC Sp_p_tms_insert_error_des
            @CREATED_BY,
            @METHOD_NAME,
            @METHOD,
            @ERROR_MESSAGE,
            'SAVE';
      -------------------------------------------------------------------------------------------------------------------------------
      END catch
  END 


	-- EXEC SP_GET_TASK_PROJECTS_BY_TASK_TYPE  'COMPLIANCE','','','',926,1
	-- =============================================
	ALTER PROCEDURE SP_GET_TASK_PROJECTS_BY_TASK_TYPE
	-- Add the parameters for the stored procedure here
	@TASK_TYPE	Nvarchar(255),
	@ProjectMkey  INT = NULL,
	@BuildingMkey  INT = NULL,
	@FILTER  VARCHAR(max) = NULL,
	@Session_User_Id          INT = NULL,  
	@Business_Group_Id	  INT = NULL
	AS
	BEGIN
		SET nocount ON;
			
	BEGIN try
		Declare @sql NVARCHAR(max) = NULL,
		@WhereClause NVARCHAR(max) = NULL,
		@TaskTypeMkey int;

		Select @TaskTypeMkey = MASTER_MKEY From TYPE_MST where TYPE_CODE = 'Task_Type' and DELETE_FLAG = 'N' and TYPE_DESC = @TASK_TYPE;
		
		SET @sql ='Select thdr.PROJECT_ID as PROJECT_Mkey,TProject.TYPE_DESC as Project_Name, 
			SUB_PROJECT_ID as Building_Mkey,TBuilding.TYPE_DESC as Building_Name, thdr.STATUS_PERC 
			,LTRIM(RTRIM(thdr.Priority)) as Priority,thdr.MKEY, TASK_NO,TASK_NAME,TASK_DESCRIPTION,thdr.TASK_PARENT_ID
			,thdr.TASK_MAIN_NODE_ID,ASSIGNED_TO, emst.EMP_FULL_NAME as Assigned_To_Name,COMPLETION_DATE,thdr.status as [Status]
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID';
			
			set @WhereClause = 'Where TASK_TYPE = '+ CONVERT(NVARCHAR, @TaskTypeMkey) + ' 
			and thdr.PROJECT_ID = '+ CONVERT(NVARCHAR, @ProjectMkey) + '
			and thdr.SUB_PROJECT_ID = '+ CONVERT(NVARCHAR, @BuildingMkey) + ' 
			And (RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR,@Session_User_Id) +' OR thdr.CREATED_BY = '+CONVERT(NVARCHAR, @Session_User_Id) +' )';

			IF @FILTER = 'Today'
			BEGIN
				SET @WhereClause += ' And (CONVERT(VARCHAR, thdr.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
										AND thdr.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
			END
			IF @FILTER = 'Pending'
			BEGIN
				SET @WhereClause +=' AND (STATUS_PERC = 0.0 AND thdr.completion_date < GETDATE() 
										and thdr.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
			END
			IF @FILTER = 'Review'
			BEGIN
				SET @WhereClause += ' AND (thdr.STATUS IN (''Close Initiated'',''Cancel Initiated''))';
			END
			IF @FILTER = 'Completed'
			BEGIN
				SET @WhereClause += ' And (thdr.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
			END
			IF @FILTER = 'Cancelled'
			BEGIN
				SET @WhereClause +=' AND (thdr.status IN (''CANCEL'', ''CANCELLED'')) ';
			END
			IF @FILTER = 'Overdue'
			BEGIN
				SET @WhereClause += ' And (thdr.completion_date < GETDATE() AND thdr.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
			END
			IF @FILTER = 'Future'
			BEGIN
				SET @WhereClause +=' AND (thdr.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
										and thdr.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
			END
			
			--print '@WhereClause: '+ @WhereClause;
			print '@ProjectMkey: '+ convert(nvarchar,@ProjectMkey)
			if ((@ProjectMkey != 0 or @BuildingMkey != 0) AND (@ProjectMkey != '' or @BuildingMkey != '')  
				AND (@WhereClause  is not null OR @WhereClause  != null))
			Begin
			print 'Inner where'
			
				set @sql +=' '+ @WhereClause + ' order by thdr.PROJECT_ID, thdr.SUB_PROJECT_ID,thdr.MKEY; ';
				
			End
			Else
			Begin
				print 'outer where'
				set @sql += ' WHERE thdr.DELETE_FLAG = ''N'' And (RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR,@Session_User_Id) +' 
						OR thdr.CREATED_BY = '+CONVERT(NVARCHAR, @Session_User_Id) +' )
						Order by thdr.PROJECT_ID, thdr.SUB_PROJECT_ID,thdr.MKEY; ';
						print @sql 
			End
			EXEC Sp_executesql @sql;

			Select 'Todays' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where TASK_TYPE = @TaskTypeMkey 
			and thdr.PROJECT_ID = @ProjectMkey
			and thdr.SUB_PROJECT_ID = @BuildingMkey 
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			And (CONVERT(VARCHAR, thdr.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
			AND thdr.status not IN ('CANCEL', 'COMPLETED','CANCELLED'))
			Union 
			Select 'Pending' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where TASK_TYPE = @TaskTypeMkey 
			and thdr.PROJECT_ID = @ProjectMkey
			and thdr.SUB_PROJECT_ID = @BuildingMkey 
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			AND (STATUS_PERC = 0.0 AND thdr.completion_date < GETDATE() 
			and thdr.status IN ('CREATED', 'SUB TASK CREATED','WORK IN PROGRESS','RE-WORK'))
			Union 
			Select 'Review' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where TASK_TYPE = @TaskTypeMkey 
			and thdr.PROJECT_ID = @ProjectMkey
			and thdr.SUB_PROJECT_ID = @BuildingMkey 
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			AND (thdr.STATUS IN ('Close Initiated','Cancel Initiated'))
			Union 
			Select 'Overdue' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where TASK_TYPE = @TaskTypeMkey 
			and thdr.PROJECT_ID = @ProjectMkey
			and thdr.SUB_PROJECT_ID = @BuildingMkey 
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			And (thdr.completion_date < GETDATE() AND thdr.status not IN ('CANCEL', 'COMPLETED','CANCELLED')) 
			Union 
			Select 'Future' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where TASK_TYPE = @TaskTypeMkey 
			and thdr.PROJECT_ID = @ProjectMkey
			and thdr.SUB_PROJECT_ID = @BuildingMkey 
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			AND (thdr.STATUS NOT IN ('COMPLETED','CANCELLED','Close Initiated','Cancel Initiated')) 
			and thdr.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103); 	
	END try
	BEGIN catch
	-------------------------------------------------------------------------------------------------------------------------------            
		SELECT Error_number()    AS ERRORNUMBER,
		Error_severity()  AS ERRORSEVERITY,
		Error_state()     AS ERRORSTATE,
		Error_procedure() AS ERRORPROCEDURE,
		Error_line()      AS ERRORLINE,
		Error_message()   AS ERRORMESSAGE;
		-------------------------------------------------------------------------------------------------------------------------------  
		DECLARE @ERROR_MESSAGE VARCHAR(max) = NULL;
		SET @ERROR_MESSAGE = Error_message();
	-------------------------------------------------------------------------------------------------------------------------------  
		EXEC Sp_p_tms_insert_error_des
								@Session_User_Id,
								'TMS',
								'Get Task Projects',
								@ERROR_MESSAGE,
								'Get';
	-------------------------------------------------------------------------------------------------------------------------------  
		END catch
	END 
----------------------------------------------------------------------------------------------------------------------------------------------------

02-06-2025


GO
/****** Object:  StoredProcedure [dbo].[Sp_get_team_progress_nt]    Script Date: 02-06-2025 13:33:25 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[Sp_get_team_progress_nt](@CURRENT_EMP_MKEY  INT,
                                                 @Session_User_Id   INT,
                                                 @Business_Group_Id INT)
AS
  BEGIN
      DECLARE @dCount      INT,
              @dErpEmpMkey INT

      SELECT @dErpEmpMkey = erp_emp_mkey
      FROM   employee_mst
      WHERE  mkey = @CURRENT_EMP_MKEY;

      WITH reportees
           AS (SELECT mkey 'CURRENT_EMP_MKEY',
                      department_id,
                      erp_emp_mkey,
                      emp_full_name'MEMBER_NAME',
                      ra1_mkey,
                      1            AS Level
               FROM   employee_mst
               WHERE  Isnull(delete_flag, 'N') = 'N'
                      AND ra1_mkey = @dErpEmpMkey
                      AND emp_code != 1
               UNION ALL
               SELECT E.mkey          'CURRENT_EMP_MKEY',
                      E.department_id,
                      E.erp_emp_mkey,
                      E.emp_full_name 'MEMBER_NAME',
                      E.ra1_mkey,
                      level + 1
               FROM   employee_mst AS E
                      INNER JOIN reportees
                              ON E.ra1_mkey = reportees.erp_emp_mkey
                                 AND Isnull(delete_flag, 'N') = 'N')
      SELECT *
      INTO   #temp_reportees
      FROM   reportees;

      --select * from #TEMP_REPORTEES order by level,MEMBER_NAME;  
      SELECT
  RPT.*,
  --T_HDR.*  
  T_HDR.mkey,
  Isnull(CATEGORY.type_desc, 'NA')                       CATEGORY,
  T_HDR.task_no,
  dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))     CREATOR,
  dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA')) RESPONSIBLE,
  dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))  ACTIONABLE,
  T_HDR.creation_date
  ,
  CONVERT(VARCHAR, T_HDR.completion_date, 103)           COMPLETION_DATE,
  dbo.[Initcap](T_HDR.task_name)                         TASK_NAME,
  T_HDR.task_description,
  T_HDR.tags,
  dbo.[Initcap](T_HDR.status)                            STATUS,
  CASE
    WHEN Isnull(CREATOR.first_name, 'NA') !=
         Isnull(RESPONSIBLE.first_name, 'NA')
  THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
  + ' > '
  + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA') )
    ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
  END
  RESPONSIBLE_TAG,
  ASSIGNEE.emp_full_name                                 'ASSIGNEE',
  ASSIGNEE.department_id
  'ASSIGNEE_DEPARTMENT_ID',
  CASE
    WHEN RPT.department_id = ASSIGNEE.department_id THEN 'DEPERTMENT'
    WHEN RPT.department_id != ASSIGNEE.department_id THEN
    'INTER-DEPERTMENT'
  END                                                    AS 'TASKTYPE',
  CASE
    WHEN RPT.department_id = ASSIGNEE.department_id
         AND ( T_HDR.assigned_to = RPT.current_emp_mkey
                OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
         AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
         AND CONVERT(VARCHAR, T_HDR.completion_date, 103) =
             CONVERT(VARCHAR, Getdate(), 103)
         AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN 'DEPT-TODAY'
    WHEN RPT.department_id = ASSIGNEE.department_id
         AND ( T_HDR.assigned_to = RPT.current_emp_mkey
                OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
         AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
         AND T_HDR.completion_date < CONVERT(DATETIME,
                                     CONVERT(VARCHAR, Getdate(),
                                     103),
                                     103)
         AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN 'DEPT-OVERDUE'
    WHEN RPT.department_id = ASSIGNEE.department_id
         AND ( T_HDR.assigned_to = RPT.current_emp_mkey
                OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
         AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
                    --AND T_HDR.STATUS  in ('Close Initiated','Cancel Initiated')  
                    AND T_HDR.completion_date > CONVERT(DATETIME,
                                                CONVERT(VARCHAR, Getdate(),
                                                103),
                                                103)
                    AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN 'DEPT-FUTURE'
               WHEN RPT.department_id != ASSIGNEE.department_id
                    AND ( T_HDR.assigned_to = RPT.current_emp_mkey
                           OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
                    AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
                    AND CONVERT(VARCHAR, T_HDR.completion_date, 103) =
                        CONVERT(VARCHAR, Getdate(), 103)
                    AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN
               'INTERDEPT-TODAY'
               WHEN RPT.department_id != ASSIGNEE.department_id
                    AND ( T_HDR.assigned_to = RPT.current_emp_mkey
                           OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
                    AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
                    AND T_HDR.completion_date < CONVERT(DATETIME,
                                                CONVERT(VARCHAR, Getdate(),
                                                103),
                                                103)
                    AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN
               'INTERDEPT-OVERDUE'
               WHEN RPT.department_id != ASSIGNEE.department_id
                    AND ( T_HDR.assigned_to = RPT.current_emp_mkey
                           OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
                    AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
                    --AND T_HDR.STATUS  in ('Close Initiated','Cancel Initiated')  
                    AND T_HDR.completion_date > CONVERT(DATETIME,
                                                CONVERT(VARCHAR, Getdate(),
                                                103),
                                                103)
                    AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN
               'INTERDEPT-FUTURE'
             END                                                    AS
             'TASKTYPE_DESC'
             ,
             dbo.[Initcap](Isnull(PROJ.type_desc, ''))
             PROJECT_NAME
      INTO   #temp_reportees_details
      FROM   #temp_reportees RPT
             LEFT JOIN task_hdr T_HDR
                    ON ( RPT.current_emp_mkey = T_HDR.assigned_to
                          OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
             LEFT JOIN employee_mst ASSIGNEE
                    ON T_HDR.created_by = ASSIGNEE.mkey
             LEFT JOIN employee_mst CREATOR
                    ON CREATOR.mkey = T_HDR.created_by
             LEFT JOIN employee_mst RESPONSIBLE
                    ON RESPONSIBLE.mkey = T_HDR.assigned_to
             LEFT JOIN employee_mst ACTIONABLE
                    ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
             LEFT JOIN v_category CATEGORY
                    ON CATEGORY.mkey = T_HDR.caregory
             LEFT JOIN v_project PROJ
                    ON T_HDR.project_id = PROJ.master_mkey
      WHERE  T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' );

      --ORDER BY RPT.MEMBER_NAME;  
      SELECT *,
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'DEPT-TODAY'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'DEPTTODAY'
             ,
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'DEPT-OVERDUE'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'DEPTOVERDUE',
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'DEPT-FUTURE'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'DEPTFUTURE',
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'INTERDEPT-TODAY'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'INTERDEPTTODAY',
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'INTERDEPT-OVERDUE'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'INTERDEPTOVERDUE',
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'INTERDEPT-FUTURE'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'INTERDEPTFUTURE'
      FROM   #temp_reportees A
      ORDER  BY level,
                member_name

      SELECT *
      FROM   #temp_reportees_details
      ORDER  BY member_name;

					Select 'Today' as Duration, count(*) as 'Count'
					into #temp_CardCount
					FROM   #temp_reportees_details RPT
					WHERE  RPT.tasktype_desc in ('DEPT-TODAY','INTERDEPT-TODAY')
					union all
					Select 'Overdue' as Duration, count(*) as 'Count'
					FROM  #temp_reportees_details RPT
					WHERE RPT.tasktype_desc in ('DEPT-OVERDUE','INTERDEPT-OVERDUE')
					union all
					Select 'Future' as Duration, count(*) as 'Count'
					FROM  #temp_reportees_details RPT
					WHERE RPT.tasktype_desc in ('DEPT-FUTURE','INTERDEPT-FUTURE')
					union all
					Select 'Team Members' as Duration, count(*) as 'Count'
					FROM  #temp_reportees RPT
					select * from #temp_CardCount;

      DROP TABLE #temp_reportees;
	  drop table #temp_CardCount;
      DROP TABLE #temp_reportees_details;
  /*  

				WITH reportees
				AS (SELECT mkey 'CURRENT_EMP_MKEY',department_id,erp_emp_mkey,emp_full_name'MEMBER_NAME',ra1_mkey,1 AS Level
				FROM   employee_mst
				WHERE  Isnull(delete_flag, 'N') = 'N' AND ra1_mkey = 926 AND emp_code != 1
				UNION ALL
				SELECT E.mkey 'CURRENT_EMP_MKEY',E.department_id,E.erp_emp_mkey,E.emp_full_name 'MEMBER_NAME',E.ra1_mkey,level + 1
				FROM   employee_mst AS E INNER JOIN reportees ON E.ra1_mkey = reportees.erp_emp_mkey AND Isnull(delete_flag, 'N') = 'N')
				select count(*) from reportees RPT LEFT JOIN task_hdr T_HDR
				ON ( RPT.current_emp_mkey = T_HDR.assigned_to OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
				where  T_HDR.DELETE_FLAG = 'N'
				AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
				AND CONVERT(DATETIME,CONVERT(VARCHAR, T_HDR.completion_date,103),103) > CONVERT(DATETIME,CONVERT(VARCHAR, Getdate(),103),103)


  select emp_code, EMP_FULL_NAME, 'Direct Report' Report_type ,mkey,DEPARTMENT_ID  
  from EMPLOYEE_MST where    
   RA1_MKEY in   
  (  
  @dErpEmpMkey  
  )   
  union    
  select emp_code, EMP_FULL_NAME , 'Indirect Report' Report_type ,mkey,DEPARTMENT_ID   
  from EMPLOYEE_MST where   RA2_MKEY in   
  (  
    @dErpEmpMkey  
  )  
  and emp_code not in (select emp_code  
  from EMPLOYEE_MST where    
   RA1_MKEY in   
  (  
  @dErpEmpMkey  
  ))    
  UNION  
  SELECT emp_code, EMP_FULL_NAME ,'Subordinate Report' Report_type ,mkey,DEPARTMENT_ID  
  from EMPLOYEE_MST where    
   RA1_MKEY in   
  (  
  select ERP_EMP_MKEY   
  from EMPLOYEE_MST where    
   RA1_MKEY in   
  (  
  @dErpEmpMkey  
  )   
  )   
  and emp_code not in (select emp_code  
  from EMPLOYEE_MST where    
   RA2_MKEY in   
  (  
  @dErpEmpMkey  
  ))  
    
  order by 1  
  */
  END
--EXEC [SP_GET_TEAM_PROGRESS] 9  
--select * from EMPLOYEE_MST where emp_name like '%vyom%'  


-------------------------------------------------------------------------
GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_DASHBOARD_NT]    Script Date: 02-06-2025 11:30:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--  EXEC SP_TASK_DASHBOARD_NT 926,null,'Default',null,null,926,1
 -- EXEC SP_TASK_DASHBOARD_NT 926,'','Next 7 Days','',null,null,926,1
  -- EXEC SP_TASK_DASHBOARD_NT 926,'fgdfg','Today','default',null,null,926,1
  --EXEC SP_TASK_DASHBOARD_NT 926,'Today,ALLOCATEDTOME,Completed',926,1
 --   EXEC SP_TASK_DASHBOARD_NT 926,5,926,2
ALTER PROCEDURE [dbo].[SP_TASK_DASHBOARD_NT] (@CURRENT_EMP_MKEY  INT,
                    @USER_FILTER       VARCHAR(max) = NULL,--'ALLOCATEDBYME,ALLOCATEDTOME,COMPLETEDBYME,COMPLETEDFORME,CANCELCLOSE',
                    @Session_User_Id   INT,
                    @Business_Group_Id INT)
					--@STATUS_FILTER     NVARCHAR(max) = NULL,--'Completed,Cancelled,Pending,Review',
					--@DURATION_FILTER   NVARCHAR(max) = NULL, -- Today,Future,Overdue,Next 3 Days,Next 7 Days,Next 2 Weeks,Next Month,
					--@PriorityFilter    VARCHAR(max) =NULL,--'High,Medium,Low',
                   -- @TypeFilter        VARCHAR(max) =NULL,--'RECURRING,APPROVAL,COMPLIANCE,APPROVAL,GENERAL,SYSTEM,EMAIL,RERA COMPLAIN';
                    
AS
  BEGIN
      DECLARE @DAY INT
      SET @DAY=0;
      DECLARE @sql NVARCHAR(max) = '';
      DECLARE @start INT = 1,
              @end   INT;
      DECLARE @hasWhereClause BIT = 0;
      DECLARE @WhereClause    NVARCHAR(max) = '',
              @filter         VARCHAR(100),
              @PriorityClause NVARCHAR(max) = '',
              @TypeClause     NVARCHAR(max) = '',
              @TaskTypeMkey   NVARCHAR(50),
              @STATUSClause   NVARCHAR(max) = '',
			  @DurationClause   NVARCHAR(max) = '';

	SET @sql ='SELECT  T_HDR.mkey as Sr_No, T_HDR.mkey,Isnull(TMST.type_desc, ''NA'') CATEGORY,T_HDR.task_no,dbo.[Initcap](Isnull(CREATOR.emp_full_name, ''NA'')) CREATOR,
	  dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, ''NA'')) RESPONSIBLE,
	  dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, ''NA'')) ACTIONABLE,
	  T_HDR.creation_date,                    
	  CASE                      
	  WHEN T_HDR.status IN ( ''CREATED'' ) THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUB TASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUBTASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status IN ( ''WORK IN PROGRESS'', ''CLOSE INITIATED'', ''CANCEL INITIATED'', ''RE-WORK'' ) THEN ''In Progress''                      
	  WHEN T_HDR.status IN ( ''CLOSE'', ''COMPLETED'' ) THEN ''Completed''                      ELSE ''Others''                    END AS Dashboard_Status, 
	  CONVERT(VARCHAR, T_HDR.completion_date, 103) AS COMPLETION_DATE,                    
	  dbo.[Initcap](T_HDR.task_name) AS TASK_NAME,                    
	  T_HDR.task_description,                    
	  T_HDR.tags,                    
	  dbo.[Initcap](T_HDR.status) AS STATUS,                   
	  CASE                      
	  WHEN Isnull(CREATOR.first_name, ''NA'') != Isnull(RESPONSIBLE.first_name, ''NA'') 
	  THEN dbo.[Initcap](Isnull(CREATOR.first_name, ''NA'')) + '' > '' + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, ''NA''))                      
	  ELSE dbo.[Initcap](Isnull(CREATOR.first_name, ''NA''))                    
	  END AS RESPONSIBLE_TAG,                   
	  dbo.[Initcap](Isnull(PMST.type_desc, '''')) AS PROJECT_NAME,                    
	  dbo.Tasknamestring(T_HDR.mkey) AS TASK_HISTORY,                    
	  Isnull(Rtrim(T_HDR.[priority]), '''') AS [Priority],                    
	  Isnull(T_HDR.percent_complete, ''0'') AS Progress_Percentage,                    
	  Isnull(parent_counts.parenttaskcount, 0) AS SubTask_Count,                    
	  T_HDR.CREATED_BY             
	  FROM task_hdr T_HDR             
	  LEFT JOIN employee_mst CREATOR ON CREATOR.mkey = T_HDR.created_by AND CREATOR.delete_flag = ''N''             
	  LEFT JOIN employee_mst RESPONSIBLE ON RESPONSIBLE.mkey = T_HDR.assigned_to AND RESPONSIBLE.delete_flag = ''N''             
	  LEFT JOIN employee_mst ACTIONABLE ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey AND ACTIONABLE.delete_flag = ''N''            
	  LEFT JOIN type_mst TMST ON TMST.master_mkey = T_HDR.caregory AND TMST.type_code = ''CATEGORY'' AND TMST.delete_flag = ''N''             
	  LEFT JOIN type_mst PMST ON PMST.master_mkey = T_HDR.project_id AND PMST.type_code = ''PROJECT'' AND PMST.delete_flag = ''N''             
	  LEFT JOIN (SELECT task_parent_id, Count(*) AS ParentTaskCount                        
	  FROM task_hdr WHERE task_parent_id IS NOT NULL AND mkey NOT IN (task_parent_id) AND delete_flag = ''N''                        
	  GROUP BY task_parent_id) parent_counts ON T_HDR.mkey = parent_counts.task_parent_id             
	  WHERE Isnull(T_HDR.status_flag, ''A'') IN (''A'') AND T_HDR.delete_flag = ''N'' ';
    /* @USER_FILTER */
    IF ( @USER_FILTER <> '' AND @USER_FILTER IS NOT NULL ) -- @USER_FILTER is not null OR
      BEGIN
          WHILE @start <= Len(@USER_FILTER)
            BEGIN
                SET @end = Charindex(',', @USER_FILTER, @start);
                IF @end = 0
                  SET @end = Len(@USER_FILTER) + 1;
                SET @filter = Ltrim(Rtrim(Substring(@USER_FILTER, @start, @end - @start)));
				
                IF @filter = 'Default'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @sql += ' OR ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' ) ';
                        END
                  END

                IF @filter = 'ALLOCATEDBYME' 
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +' ) ';
                        END
                  END

                IF @filter = 'ALLOCATEDTOME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN

                            SET @WhereClause +=' ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+ 
							' OR T_HDR.resposible_emp_mkey = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+')';
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                        SET @WhereClause +=' OR ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +')';
                  END

                IF @filter = 'COMPLETEDBYME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' ( CONVERT(int,T_HDR.assigned_to) = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+
                            ' AND T_HDR.status IN (''COMPLETED''))';
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause += ' OR ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'COMPLETEDFORME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @WhereClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) +
                            ' AND CONVERT(int,T_HDR.assigned_to) != '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+' AND CONVERT(int,T_HDR.assigned_to) != '
                                            + CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+ ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'CANCELCLOSE'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' ( T_HDR.created_by = ' + CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) +
                            ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
                        SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+
                        ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'') ) ';
                  --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                  END
				
				/*Priority Filter */
				 IF @filter = 'High'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                            SET @WhereClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                        SET @WhereClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
                  END

                IF @filter = 'Low'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                            SET @WhereClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                        SET @WhereClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
						END

                IF @filter = 'Medium'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                            SET @WhereClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                        SET @WhereClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'') ';
                  END
				  /* End Priority */

				  /*Type Filter*/
				   IF @filter = 'RECURRING'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'Approval'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'COMPLIANCE'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'GENERAL'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'SYSTEM'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
                  END

                IF @filter = 'Email'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'RERA COMPLAIN'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
                  END
				  /*End Type Filter*/

				  /*Status Filter*/
						IF @filter = 'Pending'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
														and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
								SET @hasWhereClause = 1;
							END
						ELSE
							SET @WhereClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
													and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
						END
			
						IF @filter = 'Review'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
								SET @hasWhereClause = 1;
							END
							ELSE
								SET @WhereClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
						END

						IF @filter = 'Completed'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
								SET @hasWhereClause = 1;
							END
						ELSE
								SET @WhereClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
						END

						IF @filter = 'Cancelled'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
								SET @hasWhereClause = 1;
							END
							ELSE
								SET @WhereClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
						END
			/*End Status Filter*/

						IF @filter = 'Today'
						BEGIN
							IF @hasWhereClause = 0
								BEGIN
									SET @WhereClause += ' (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
															AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
									SET @hasWhereClause = 1;
								END
								ELSE
									begin
									SET @WhereClause += ' OR (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) 
															AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
									end
						END

						IF @filter = 'Overdue'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause +=' (T_HDR.completion_date < GETDATE() 
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
								SET @hasWhereClause = 1;
							END
						ELSE
							SET @WhereClause += ' OR (T_HDR.completion_date < GETDATE() 
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
						END

						IF @filter = 'Future'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause += ' (T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
													and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
								SET @hasWhereClause = 1;
							END
						ELSE
								SET @WhereClause += ' OR ((T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
												and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103)) ';
						END

						IF @filter = 'Next 3 Days'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
					
								--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
								SET @WhereClause +=' (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
								SET @hasWhereClause = 1;
							END
							ELSE
								--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
								SET @WhereClause +=' OR (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
						END

						IF @filter = 'Next 7 Days'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								--SET @DurationClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
								--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
								SET @WhereClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
								SET @hasWhereClause = 1;
							END
						ELSE
							--SET @DurationClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
							--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
							SET @WhereClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
						END

						IF @filter = 'Next 2 Weeks'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								--SET @DurationClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
								SET @WhereClause +=' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
								SET @hasWhereClause = 1;
							END
						ELSE
								--SET @DurationClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
								SET @WhereClause +=' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
						END

						IF @filter = 'Next Month'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								--SET @DurationClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
								--SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
								SET @WhereClause += ' ( T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
								SET @hasWhereClause = 1;
							END
							ELSE
								--SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
								--SET @DurationClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
								SET @WhereClause += ' OR ( T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
						END

						print 'ISNUMERIC(@filter): '+ convert(nvarchar,ISNUMERIC(@filter))
						if (ISNUMERIC(@filter) = 1)
						Begin
						print 'isnumer'
							IF @hasWhereClause = 0
							BEGIN
					
								--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
								SET @WhereClause +=' (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY,'+ CONVERT(nvarchar,@filter) +' , GETDATE())) ';
								SET @hasWhereClause = 1;
							END
							ELSE
								--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
								SET @WhereClause +=' OR (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY,'+ CONVERT(nvarchar,@filter) +', GETDATE())) ';	
						End

			/*End Duration Filter*/


			SET @start = @end + 1;
            END
			If (@hasWhereClause = 1)
			Begin
				SET @sql += ' AND ( ' + @WhereClause + ' ) ';
			End
			Else if (@hasWhereClause = 0 and @WhereClause is not null or @WhereClause != null)
			Begin
				--print '@WhereClause is not null';
				SET @sql += ' AND ( 1 != 1 ) ';
			End
      END
    ELSE IF( @USER_FILTER IS NULL OR @USER_FILTER = 'Default'  OR @USER_FILTER = '' OR @filter is not null)
      BEGIN
         SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
          SET @hasWhereClause = 1;
          SET @sql += ' AND ( ' + @WhereClause + ' ) ';
      END
    print '@@sql: '+ @sql;
    EXEC Sp_executesql @sql;

    EXEC Sp_dashboard_count @CURRENT_EMP_MKEY;
	-----------------------------------------------------------------------------------------------------
 --   /* @PriorityFilter */
 --   IF ( @PriorityFilter IS NOT NULL
 --        AND @PriorityFilter <> '' )
 --     BEGIN
 --         SET @start = 1;
 --         SET @hasWhereClause = 0;

 --         WHILE @start <= Len(@PriorityFilter)
 --           BEGIN
 --               SET @end = Charindex(',', @PriorityFilter, @start);

 --               IF @end = 0
 --                 SET @end = Len(@PriorityFilter) + 1;

 --               SET @filter = Ltrim(Rtrim(Substring(@PriorityFilter, @start,@end - @start )) );

 --               -- Append the priority condition
 --               IF @filter = 'High'
 --                 BEGIN
 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
 --                           SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
 --                       SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
 --                 END

 --               IF @filter = 'Low'
 --                 BEGIN
 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
 --                           SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
 --                       SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
	--					END

 --               IF @filter = 'Medium'
 --                 BEGIN
 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
 --                           SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
 --                       SET @PriorityClause += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
 --                 END

 --               SET @start = @end + 1;
 --           END
	--		If (@hasWhereClause = 1)
	--		Begin
	--			SET @sql += ' AND ( ' + @PriorityClause + ' ) ';
	--		End
	--		Else if (@hasWhereClause = 0 and @PriorityClause is not null or @PriorityClause != null)
	--		Begin
	--		print '@PriorityFilter';
	--			SET @sql += ' AND ( 1 != 1 ) ';
	--		End
			
 --     END
 --   -----------------------------------------------------------------------------------------------------
 --   /* @TypeFilter */
 --   IF ( @TypeFilter IS NOT NULL
 --        AND @TypeFilter <> '' )
 --     BEGIN
 --         SET @start = 1;
 --         SET @hasWhereClause = 0;

 --         WHILE @start <= Len(@TypeFilter)
 --           BEGIN
 --               SET @end = Charindex(',', @TypeFilter, @start);

 --               IF @end = 0
 --                 SET @end = Len(@TypeFilter) + 1;

 --               SET @filter = Ltrim(Rtrim(Substring(@TypeFilter, @start, @end - @start)));

 --               IF @filter = 'RECURRING'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'Approval'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'COMPLIANCE'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') '
 --                           ;
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'GENERAL'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'SYSTEM'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                 END

 --               IF @filter = 'Email'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'RERA COMPLAIN'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                 END

 --               SET @start = @end + 1;
 --           END
	--		If (@hasWhereClause = 1)
	--		Begin
	--			SET @sql += ' AND ( ' + @TypeClause + ' ) ';
	--		End
	--		Else if (@hasWhereClause = 0 and @TypeClause is not null or @TypeClause != null)
	--		Begin
	--			print '@@TypeClause';
	--			SET @sql += ' AND ( 1 != 1 ) ';
	--		End
 --     END
 --   -----------------------------------------------------------------------------------------------------
 --   /* @STATUS_FILTER */
 --   IF ( @STATUS_FILTER IS NOT NULL
 --        AND @STATUS_FILTER <> '' )
	--	BEGIN
	--	SET @start = 1;
	--	SET @hasWhereClause = 0;

	--	WHILE @start <= Len(@STATUS_FILTER)
	--	BEGIN
	--		SET @end = Charindex(',', @STATUS_FILTER, @start);

	--		IF @end = 0
	--			SET @end = Len(@STATUS_FILTER) + 1;

	--		SET @filter = Ltrim(Rtrim(Substring(@STATUS_FILTER, @start, @end - @start)));

	--		IF @filter = 'Pending'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--										and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--			SET @STATUSClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--									and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--		END
			
	--		IF @filter = 'Review'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				SET @STATUSClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
	--		END

	--		IF @filter = 'Completed'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--				SET @STATUSClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--		END

	--		IF @filter = 'Cancelled'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				SET @STATUSClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--		END

	--		SET @start = @end + 1;
	--	END
	--			If (@hasWhereClause = 1)
	--			Begin
	--				SET @sql += ' AND ( ' + @STATUSClause + ' ) ';
	--			End
	--		Else if (@hasWhereClause = 0 and @STATUSClause is not null or @STATUSClause != null)
	--		Begin
	--		--print '@STATUSClause is not null11';
	--			SET @sql += ' AND ( 1 != 1 ) ';
	--		End
	--		END
 -------------------------------------------------------------------------------------------------------
	--IF ( @DURATION_FILTER IS NOT NULL
 --        AND @DURATION_FILTER <> '' )
	--	BEGIN
	--	SET @start = 1;
	--	SET @hasWhereClause = 0;

	--	WHILE @start <= Len(@DURATION_FILTER)
	--	BEGIN
	--		SET @end = Charindex(',', @DURATION_FILTER, @start);

	--		IF @end = 0
	--			SET @end = Len(@DURATION_FILTER) + 1;

	--		SET @filter = Ltrim(Rtrim(Substring(@DURATION_FILTER, @start, @end - @start)));

	--		IF @filter = 'Today'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--				BEGIN
	--					SET @DurationClause += ' (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
	--											AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--					SET @hasWhereClause = 1;
	--				END
	--				ELSE
	--					begin
	--					SET @DurationClause += ' OR (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) 
	--											AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--					end
	--		END

	--		IF @filter = 'Overdue'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @DurationClause +=' (T_HDR.completion_date < GETDATE() 
	--									AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--			SET @DurationClause += ' OR (T_HDR.completion_date < GETDATE() 
	--									AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--		END

	--		IF @filter = 'Future'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @DurationClause += ' (T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
	--									and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--				SET @DurationClause += ' OR ((T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
	--								and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103)) ';
	--		END

	--		IF @filter = 'Next 3 Days'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
					
	--				--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
	--				SET @DurationClause +=' (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
	--				SET @DurationClause +=' OR (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
	--		END

	--		IF @filter = 'Next 7 Days'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				--SET @DurationClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--				--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--				SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--			--SET @DurationClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--			--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--			SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
	--		END

	--		IF @filter = 'Next 2 Weeks'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				--SET @DurationClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--				SET @DurationClause +=' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--				--SET @DurationClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--				SET @DurationClause +=' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
	--		END

	--		IF @filter = 'Next Month'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				--SET @DurationClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--				--SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
	--				SET @DurationClause += ' ( T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				--SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
	--				--SET @DurationClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--				SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
	--		END

	--		SET @start = @end + 1;
	--	END
	--			If (@hasWhereClause = 1)
	--			Begin
	--				SET @sql += ' AND ( ' + @DurationClause + ' ) ';
	--			End
	--			Else if (@hasWhereClause = 0 and @DurationClause is not null or @DurationClause != null)
	--			Begin
	--			print '@DurationClause is not null';
	--				SET @sql += ' AND ( 1 != 1 ) ';
	--			End
	--		END
END




----------------------------------------------------------------------------------------------------------------------------------
04-06-2025

GO
/****** Object:  StoredProcedure [dbo].[SP_GET_TASK_PROJECTS_BY_TASK_TYPE]    Script Date: 04-06-2025 17:09:25 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	-- EXEC SP_GET_TASK_PROJECTS_BY_TASK_TYPE  '','','','',926,1
	-- =============================================
	ALTER PROCEDURE [dbo].[SP_GET_TASK_PROJECTS_BY_TASK_TYPE]
	-- Add the parameters for the stored procedure here
	@TASK_TYPE	Nvarchar(255),
	@ProjectMkey  INT = NULL,
	@BuildingMkey  INT = NULL,
	@FILTER  VARCHAR(max) = NULL,
	@Session_User_Id          INT = NULL,  
	@Business_Group_Id	  INT = NULL
	AS
	BEGIN
		SET nocount ON;
			
	BEGIN try
		Declare @sql NVARCHAR(max) = NULL,
		@WhereClause NVARCHAR(max) = NULL,
		@TaskTypeMkey int;

		Select @TaskTypeMkey = MASTER_MKEY From TYPE_MST where TYPE_CODE = 'Task_Type' and DELETE_FLAG = 'N' and TYPE_DESC = @TASK_TYPE;
		
		SET @sql ='Select thdr.PROJECT_ID as PROJECT_Mkey,TProject.TYPE_DESC as Project_Name, 
			SUB_PROJECT_ID as Building_Mkey,TBuilding.TYPE_DESC as Building_Name, thdr.STATUS_PERC 
			,LTRIM(RTRIM(thdr.Priority)) as Priority,thdr.MKEY, TASK_NO,TASK_NAME,TASK_DESCRIPTION,thdr.TASK_PARENT_ID
			,thdr.TASK_MAIN_NODE_ID,ASSIGNED_TO, emst.EMP_FULL_NAME as Assigned_To_Name,COMPLETION_DATE,thdr.status as [Status]
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID';
			
			set @WhereClause = 'Where TASK_TYPE = '+ CONVERT(NVARCHAR, @TaskTypeMkey) + ' 
			and thdr.PROJECT_ID = '+ CONVERT(NVARCHAR, @ProjectMkey) + '
			and thdr.SUB_PROJECT_ID = '+ CONVERT(NVARCHAR, @BuildingMkey) + ' 
			And (RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR,@Session_User_Id) +' OR thdr.CREATED_BY = '+CONVERT(NVARCHAR, @Session_User_Id) +' )';

			IF @FILTER = 'Today'
			BEGIN
				SET @WhereClause += ' And (CONVERT(VARCHAR, thdr.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
										AND thdr.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
			END
			IF @FILTER = 'Pending'
			BEGIN
				SET @WhereClause +=' AND (STATUS_PERC = 0.0 AND thdr.completion_date < GETDATE() 
										and thdr.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
			END
			IF @FILTER = 'Review'
			BEGIN
				SET @WhereClause += ' AND (thdr.STATUS IN (''Close Initiated'',''Cancel Initiated''))';
			END
			IF @FILTER = 'Completed'
			BEGIN
				SET @WhereClause += ' And (thdr.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
			END
			IF @FILTER = 'Cancelled'
			BEGIN
				SET @WhereClause +=' AND (thdr.status IN (''CANCEL'', ''CANCELLED'')) ';
			END
			IF @FILTER = 'Overdue'
			BEGIN
				SET @WhereClause += ' And (thdr.completion_date < GETDATE() AND thdr.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
			END
			IF @FILTER = 'Future'
			BEGIN
				SET @WhereClause +=' AND (thdr.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
										and thdr.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
			END
			
			if ((@ProjectMkey != 0 or @BuildingMkey != 0) AND (@ProjectMkey != '' or @BuildingMkey != '')  
				AND (@WhereClause  is not null OR @WhereClause  != null))
			Begin
			print 'Inner where'
			
				set @sql +=' '+ @WhereClause + ' order by thdr.PROJECT_ID, thdr.SUB_PROJECT_ID,thdr.MKEY; ';
				
			End
			Else
			Begin
				print 'outer where'
				set @sql += ' WHERE thdr.DELETE_FLAG = ''N'' And (RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR,@Session_User_Id) +' 
						OR thdr.CREATED_BY = '+CONVERT(NVARCHAR, @Session_User_Id) +' )
						Order by thdr.PROJECT_ID, thdr.SUB_PROJECT_ID,thdr.MKEY; ';
						print @sql 
			End
			EXEC Sp_executesql @sql;

			Select 'Todays' as DurationFilter,Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where 
			CASE
				WHEN @TaskTypeMkey != 0    THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
			AND	CASE
					WHEN @ProjectMkey != 0  OR @ProjectMkey <> '' THEN 
						CASE WHEN thdr.PROJECT_ID = @ProjectMkey THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN @BuildingMkey != 0 THEN 
						CASE WHEN thdr.SUB_PROJECT_ID = @BuildingMkey THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			And (CONVERT(VARCHAR, thdr.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
			AND thdr.status not IN ('CANCEL', 'COMPLETED','CANCELLED'))
			
			Union 
			
			Select 'Pending' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where 
			CASE
				WHEN @TaskTypeMkey != 0    THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
				AND	CASE
					WHEN @ProjectMkey != 0   THEN 
						CASE WHEN thdr.PROJECT_ID = @ProjectMkey THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN @BuildingMkey != 0 THEN 
						CASE WHEN thdr.SUB_PROJECT_ID = @BuildingMkey THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			AND (STATUS_PERC = 0.0 AND thdr.completion_date < GETDATE() 
			and thdr.status IN ('CREATED', 'SUB TASK CREATED','WORK IN PROGRESS','RE-WORK'))
			
			Union 
			
			Select 'Review' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where 
			CASE
				WHEN @TaskTypeMkey != 0    THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
			AND	CASE
					WHEN @ProjectMkey != 0   THEN 
						CASE WHEN thdr.PROJECT_ID = @ProjectMkey THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN @BuildingMkey != 0 THEN 
						CASE WHEN thdr.SUB_PROJECT_ID = @BuildingMkey THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			AND (thdr.STATUS IN ('Close Initiated','Cancel Initiated'))
			
			Union 
			
			Select 'Overdue' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where
			CASE
				WHEN @TaskTypeMkey != 0    THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
			AND	CASE
					WHEN @ProjectMkey != 0   THEN 
						CASE WHEN thdr.PROJECT_ID = @ProjectMkey THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN @BuildingMkey != 0 THEN 
						CASE WHEN thdr.SUB_PROJECT_ID = @BuildingMkey THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			And (thdr.completion_date < GETDATE() AND thdr.status not IN ('CANCEL', 'COMPLETED','CANCELLED')) 
			
			Union 
			
			Select 'Future' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where 
			CASE
				WHEN @TaskTypeMkey != 0  THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
			AND	CASE
					WHEN @ProjectMkey != 0   THEN 
						CASE WHEN thdr.PROJECT_ID = @ProjectMkey THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN @BuildingMkey != 0 THEN 
						CASE WHEN thdr.SUB_PROJECT_ID = @BuildingMkey THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			AND (thdr.STATUS NOT IN ('COMPLETED','CANCELLED','Close Initiated','Cancel Initiated')) 
			and thdr.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103); 

			--Select 'Todays' as DurationFilter, Count(*) DurationCount
			--From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			--left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			--left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			--Where TASK_TYPE = @TaskTypeMkey 
			--and thdr.PROJECT_ID = @ProjectMkey
			--and thdr.SUB_PROJECT_ID = @BuildingMkey 
			--And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			--And (CONVERT(VARCHAR, thdr.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
			--AND thdr.status not IN ('CANCEL', 'COMPLETED','CANCELLED'))
			--Union 
			--Select 'Pending' as DurationFilter, Count(*) DurationCount
			--From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			--left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			--left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			--Where TASK_TYPE = @TaskTypeMkey 
			--and thdr.PROJECT_ID = @ProjectMkey
			--and thdr.SUB_PROJECT_ID = @BuildingMkey 
			--And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			--AND (STATUS_PERC = 0.0 AND thdr.completion_date < GETDATE() 
			--and thdr.status IN ('CREATED', 'SUB TASK CREATED','WORK IN PROGRESS','RE-WORK'))
			--Union 
			--Select 'Review' as DurationFilter, Count(*) DurationCount
			--From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			--left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			--left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			--Where TASK_TYPE = @TaskTypeMkey 
			--and thdr.PROJECT_ID = @ProjectMkey
			--and thdr.SUB_PROJECT_ID = @BuildingMkey 
			--And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			--AND (thdr.STATUS IN ('Close Initiated','Cancel Initiated'))
			--Union 
			--Select 'Overdue' as DurationFilter, Count(*) DurationCount
			--From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			--left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			--left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			--Where TASK_TYPE = @TaskTypeMkey 
			--and thdr.PROJECT_ID = @ProjectMkey
			--and thdr.SUB_PROJECT_ID = @BuildingMkey 
			--And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			--And (thdr.completion_date < GETDATE() AND thdr.status not IN ('CANCEL', 'COMPLETED','CANCELLED')) 
			--Union 
			--Select 'Future' as DurationFilter, Count(*) DurationCount
			--From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			--left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			--left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			--Where TASK_TYPE = @TaskTypeMkey 
			--and thdr.PROJECT_ID = @ProjectMkey
			--and thdr.SUB_PROJECT_ID = @BuildingMkey 
			--And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			--AND (thdr.STATUS NOT IN ('COMPLETED','CANCELLED','Close Initiated','Cancel Initiated')) 
			--and thdr.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103); 	
	END try
	BEGIN catch
	-------------------------------------------------------------------------------------------------------------------------------            
		SELECT Error_number()    AS ERRORNUMBER,
		Error_severity()  AS ERRORSEVERITY,
		Error_state()     AS ERRORSTATE,
		Error_procedure() AS ERRORPROCEDURE,
		Error_line()      AS ERRORLINE,
		Error_message()   AS ERRORMESSAGE;
		-------------------------------------------------------------------------------------------------------------------------------  
		DECLARE @ERROR_MESSAGE VARCHAR(max) = NULL;
		SET @ERROR_MESSAGE = Error_message();
	-------------------------------------------------------------------------------------------------------------------------------  
		EXEC Sp_p_tms_insert_error_des
								@Session_User_Id,
								'TMS',
								'Get Task Projects',
								@ERROR_MESSAGE,
								'Get';
	-------------------------------------------------------------------------------------------------------------------------------  
		END catch
	END 


-------------------------------------------------------
GO
/****** Object:  StoredProcedure [dbo].[Sp_get_team_progress_nt]    Script Date: 04-06-2025 18:30:26 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[Sp_get_team_progress_nt](@CURRENT_EMP_MKEY  INT
												,@TASKTYPE   Nvarchar(255) = null
												,@TASKTYPE_DESC   Nvarchar(255)= null
												,@Filter   Nvarchar(255)= null
                                                ,@Session_User_Id   INT,
                                                 @Business_Group_Id INT)
AS
  BEGIN
      DECLARE @dCount      INT,
              @dErpEmpMkey INT

      SELECT @dErpEmpMkey = erp_emp_mkey
      FROM   employee_mst
      WHERE  mkey = @CURRENT_EMP_MKEY;

      WITH reportees
           AS (SELECT mkey 'CURRENT_EMP_MKEY',
                      department_id,
                      erp_emp_mkey,
                      emp_full_name'MEMBER_NAME',
                      ra1_mkey,
                      1            AS Level
               FROM   employee_mst
               WHERE  Isnull(delete_flag, 'N') = 'N'
                      AND ra1_mkey = @dErpEmpMkey
                      AND emp_code != 1
               UNION ALL
               SELECT E.mkey          'CURRENT_EMP_MKEY',
                      E.department_id,
                      E.erp_emp_mkey,
                      E.emp_full_name 'MEMBER_NAME',
                      E.ra1_mkey,
                      level + 1
               FROM   employee_mst AS E
                      INNER JOIN reportees
                              ON E.ra1_mkey = reportees.erp_emp_mkey
                                 AND Isnull(delete_flag, 'N') = 'N')
		SELECT *
		INTO   #temp_reportees
		FROM   reportees
		Where
		CASE
			WHEN @Filter    = 'Direct' THEN 
				CASE WHEN RA1_MKEY = @Session_User_Id THEN 1 ELSE 0 END
			ELSE 1  -- If none of the conditions match, return false
					END = 1;


      --select * from #TEMP_REPORTEES order by level,MEMBER_NAME;  
					SELECT
					RPT.*,
					--T_HDR.*  
					T_HDR.mkey,
					Isnull(CATEGORY.type_desc, 'NA')                       CATEGORY,
					T_HDR.task_no,
					dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))     CREATOR,
					dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA')) RESPONSIBLE,
					dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))  ACTIONABLE,
					T_HDR.creation_date,
					CONVERT(VARCHAR, T_HDR.completion_date, 103)           COMPLETION_DATE,
					dbo.[Initcap](T_HDR.task_name)                         TASK_NAME,
					T_HDR.task_description,
					T_HDR.tags,
					dbo.[Initcap](T_HDR.status)                            STATUS,
					CASE
					WHEN Isnull(CREATOR.first_name, 'NA') != Isnull(RESPONSIBLE.first_name, 'NA')
					THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
					+ ' > '
					+ dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA') )
					ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
					END
					RESPONSIBLE_TAG,
					ASSIGNEE.emp_full_name                                 'ASSIGNEE',
					ASSIGNEE.department_id
					'ASSIGNEE_DEPARTMENT_ID',
					CASE
					WHEN RPT.department_id = ASSIGNEE.department_id THEN 'DEPERTMENT'
					WHEN RPT.department_id != ASSIGNEE.department_id THEN
					'INTER-DEPERTMENT'
					END                                                    AS 'TASKTYPE',
					CASE
					WHEN RPT.department_id = ASSIGNEE.department_id
						AND ( T_HDR.assigned_to = RPT.current_emp_mkey
							OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
						AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
						AND CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, Getdate(), 103)
						AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN 'DEPT-TODAY'
					WHEN RPT.department_id = ASSIGNEE.department_id
						AND ( T_HDR.assigned_to = RPT.current_emp_mkey
							OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
						AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
						AND T_HDR.completion_date < CONVERT(DATETIME,CONVERT(VARCHAR, Getdate(),103),103)
						AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN 'DEPT-OVERDUE'
					WHEN RPT.department_id = ASSIGNEE.department_id
						AND ( T_HDR.assigned_to = RPT.current_emp_mkey
							OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
						AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
								--AND T_HDR.STATUS  in ('Close Initiated','Cancel Initiated')  
								AND T_HDR.completion_date > CONVERT(DATETIME,CONVERT(VARCHAR, Getdate(),103),103)
								AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN 'DEPT-FUTURE'
							WHEN RPT.department_id != ASSIGNEE.department_id
								AND ( T_HDR.assigned_to = RPT.current_emp_mkey
										OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
								AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
								AND CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, Getdate(), 103)
								AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN
							'INTERDEPT-TODAY'
							WHEN RPT.department_id != ASSIGNEE.department_id
								AND ( T_HDR.assigned_to = RPT.current_emp_mkey
										OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
								AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
								AND T_HDR.completion_date < CONVERT(DATETIME,CONVERT(VARCHAR, Getdate(),103),103)
								AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN
							'INTERDEPT-OVERDUE'
							WHEN RPT.department_id != ASSIGNEE.department_id
								AND ( T_HDR.assigned_to = RPT.current_emp_mkey
										OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
								AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
								--AND T_HDR.STATUS  in ('Close Initiated','Cancel Initiated')  
								AND T_HDR.completion_date > CONVERT(DATETIME,CONVERT(VARCHAR, Getdate(),103),103)
								AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN
							'INTERDEPT-FUTURE'
							END AS 'TASKTYPE_DESC',
							dbo.[Initcap](Isnull(PROJ.type_desc, ''))
							PROJECT_NAME
					INTO   #temp_reportees_details
					FROM   #temp_reportees RPT
							LEFT JOIN task_hdr T_HDR
								ON ( RPT.current_emp_mkey = T_HDR.assigned_to
										OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
							LEFT JOIN employee_mst ASSIGNEE
								ON T_HDR.created_by = ASSIGNEE.mkey
							LEFT JOIN employee_mst CREATOR
								ON CREATOR.mkey = T_HDR.created_by
							LEFT JOIN employee_mst RESPONSIBLE
								ON RESPONSIBLE.mkey = T_HDR.assigned_to
							LEFT JOIN employee_mst ACTIONABLE
								ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
							LEFT JOIN v_category CATEGORY
								ON CATEGORY.mkey = T_HDR.caregory
							LEFT JOIN v_project PROJ
								ON T_HDR.project_id = PROJ.master_mkey
					WHERE  T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' );

      --ORDER BY RPT.MEMBER_NAME;  
			SELECT *,
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'DEPT-TODAY'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'DEPTTODAY'
             ,
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'DEPT-OVERDUE'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'DEPTOVERDUE',
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'DEPT-FUTURE'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'DEPTFUTURE',
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'INTERDEPT-TODAY'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'INTERDEPTTODAY',
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'INTERDEPT-OVERDUE'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'INTERDEPTOVERDUE',
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'INTERDEPT-FUTURE'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'INTERDEPTFUTURE'
      FROM   #temp_reportees A
      ORDER  BY level,
                member_name

      SELECT *
      FROM   #temp_reportees_details
      ORDER  BY member_name;

					Select 'Today' as Duration, count(*) as 'Count'
					into #temp_CardCount
					FROM   #temp_reportees_details RPT
					WHERE  RPT.tasktype_desc in ('DEPT-TODAY','INTERDEPT-TODAY') 
					AND	CASE
						WHEN @Filter    = 'Direct' THEN 
							CASE WHEN RA1_MKEY = @Session_User_Id THEN 1 ELSE 0 END
						ELSE 1  -- If none of the conditions match, return false
						END = 1
					union ALL
					Select 'Overdue' as Duration, count(*) as 'Count'
					FROM  #temp_reportees_details RPT
					WHERE RPT.tasktype_desc in ('DEPT-OVERDUE','INTERDEPT-OVERDUE')
					AND	CASE
						WHEN @Filter    = 'Direct' THEN 
							CASE WHEN RA1_MKEY = @Session_User_Id THEN 1 ELSE 0 END
						ELSE 1  -- If none of the conditions match, return false
						END = 1
					union all
					Select 'Future' as Duration, count(*) as 'Count'
					FROM  #temp_reportees_details RPT
					WHERE RPT.tasktype_desc in ('DEPT-FUTURE','INTERDEPT-FUTURE')
					AND	CASE
						WHEN @Filter    = 'Direct' THEN 
							CASE WHEN RA1_MKEY = @Session_User_Id THEN 1 ELSE 0 END
						ELSE 1  -- If none of the conditions match, return false
						END = 1
					Union all
					Select 'Team Members' as Duration, Count(*) as 'Count'
					FROM  #temp_reportees RPT

					select * from #temp_CardCount;

      DROP TABLE #temp_reportees;
	  drop table #temp_CardCount;
      DROP TABLE #temp_reportees_details;
  /*  

				WITH reportees
				AS (SELECT mkey 'CURRENT_EMP_MKEY',department_id,erp_emp_mkey,emp_full_name'MEMBER_NAME',ra1_mkey,1 AS Level
				FROM   employee_mst
				WHERE  Isnull(delete_flag, 'N') = 'N' AND ra1_mkey = 926 AND emp_code != 1
				UNION ALL
				SELECT E.mkey 'CURRENT_EMP_MKEY',E.department_id,E.erp_emp_mkey,E.emp_full_name 'MEMBER_NAME',E.ra1_mkey,level + 1
				FROM   employee_mst AS E INNER JOIN reportees ON E.ra1_mkey = reportees.erp_emp_mkey AND Isnull(delete_flag, 'N') = 'N')
				select count(*) from reportees RPT LEFT JOIN task_hdr T_HDR
				ON ( RPT.current_emp_mkey = T_HDR.assigned_to OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
				where  T_HDR.DELETE_FLAG = 'N'
				AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
				AND CONVERT(DATETIME,CONVERT(VARCHAR, T_HDR.completion_date,103),103) > CONVERT(DATETIME,CONVERT(VARCHAR, Getdate(),103),103)


  select emp_code, EMP_FULL_NAME, 'Direct Report' Report_type ,mkey,DEPARTMENT_ID  
  from EMPLOYEE_MST where    
   RA1_MKEY in   
  (  
  @dErpEmpMkey  
  )   
  union    
  select emp_code, EMP_FULL_NAME , 'Indirect Report' Report_type ,mkey,DEPARTMENT_ID   
  from EMPLOYEE_MST where   RA2_MKEY in   
  (  
    @dErpEmpMkey  
  )  
  and emp_code not in (select emp_code  
  from EMPLOYEE_MST where    
   RA1_MKEY in   
  (  
  @dErpEmpMkey  
  ))    
  UNION  
  SELECT emp_code, EMP_FULL_NAME ,'Subordinate Report' Report_type ,mkey,DEPARTMENT_ID  
  from EMPLOYEE_MST where    
   RA1_MKEY in   
  (  
  select ERP_EMP_MKEY   
  from EMPLOYEE_MST where    
   RA1_MKEY in   
  (  
  @dErpEmpMkey  
  )   
  )   
  and emp_code not in (select emp_code  
  from EMPLOYEE_MST where    
   RA2_MKEY in   
  (  
  @dErpEmpMkey  
  ))  
    
  order by 1  
  */
  END
--EXEC [SP_GET_TEAM_PROGRESS] 9  
--select * from EMPLOYEE_MST where emp_name like '%vyom%'  


-----------------------------------------------------------------------------------------------------------
05-06-2025


GO
/****** Object:  StoredProcedure [dbo].[UPDATE_TASK_DETAILS_NT]    Script Date: 05-06-2025 17:05:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[UPDATE_TASK_DETAILS_NT] (@TASK_MKEY            VARCHAR(250),
                                                @TASK_NAME            VARCHAR(250),
                                                @TASK_DESCRIPTION     VARCHAR(250),
                                                @PROJECT_ID           VARCHAR(250),
                                                @SUBPROJECT_ID        VARCHAR(250),
                                                @COMPLETION_DATE      DATETIME,
                                                @ASSIGNED_TO          VARCHAR(250),
                                                @TAGS                 VARCHAR(250)=NULL,
                                                @Priority             VARCHAR(250)=NULL,
                                                @Tentative_Start_Date VARCHAR(250)=NULL,
                                                @Tentative_End_Date   VARCHAR(250)=NULL,
                                                @Actual_Start_Date    VARCHAR(250)=NULL,
                                                @Actual_End_Date      VARCHAR(250)=NULL,
                                                @LAST_UPDATED_BY      INT,
												@DELETE_FLAG          NCHAR(2)=NULL)
AS
  BEGIN
      BEGIN try
          DECLARE @DCOUNT INT,@NEXTLEVEL INT,@PreviousSrNo int, @CurrentStatus Nvarchar(100),@ToLevel int,@NextSR_NO int,
		  @SR_NO INT;
          SELECT @DCOUNT = Count(*)
          FROM   task_hdr
          WHERE  mkey = @TASK_MKEY and DELETE_FLAG = 'N';
		  print '@DCOUNT: '+ convert(nvarchar,@DCOUNT)
          IF ( @DCOUNT > 0 )
            BEGIN
                SELECT @ASSIGNED_TO = Cast(mkey AS VARCHAR)
                FROM   employee_mst
                WHERE  emp_full_name = @ASSIGNED_TO
                       AND delete_flag = 'N';

                PRINT '@ASSIGNED_TO: '
                      + CONVERT(NVARCHAR(20), @ASSIGNED_TO);

                INSERT INTO task_hdr_h
                SELECT Getdate(),
                       *
                FROM   task_hdr
                WHERE  mkey = @TASK_MKEY
                       AND delete_flag = 'N';

                PRINT '@@TASK_MKEY: '
                      + CONVERT(NVARCHAR(20), @TASK_MKEY);

                --print '@COMPLETION_DATE: '+ convert(varchar(50), @COMPLETION_DATE);
                UPDATE task_hdr
                SET    task_name =isnull(@TASK_NAME,task_name),
                       task_description = isnull(@TASK_DESCRIPTION,task_description),
                       project_id = @PROJECT_ID,
                       sub_project_id = @SUBPROJECT_ID,
                       completion_date = isnull(@COMPLETION_DATE,completion_date),
                       assigned_to = @ASSIGNED_TO,
                       resposible_emp_mkey = @ASSIGNED_TO,
                       tags = @TAGS,
                       [priority] = @Priority,
                       tentative_start_date = @Tentative_Start_Date,
                       tentative_end_date = @Tentative_End_Date,
                       actual_start_date = @Actual_Start_Date,
                       actual_end_date = @Actual_End_Date,
                       last_updated_by = @LAST_UPDATED_BY,
                       last_update_date = Getdate(),
					   delete_flag = @DELETE_FLAG
                WHERE  mkey = @TASK_MKEY
                       AND delete_flag = 'N';

				 SELECT @NextSR_NO = (Isnull(Max(sr_no), 0) + 1), @PreviousSrNo = Max(sr_no)
                      FROM   TASK_SANCTIONING_DEPARTMENT_TRL_MOVEMENT_HISTORY
                      WHERE  task_mkey = @TASK_MKEY
                             -- AND [level] = @LEVEL
                             AND delete_flag = 'N';
							 print '@SR_NO: '+ convert(nvarchar(100), @SR_NO);
							 print '@@PreviousSrNo: '+ convert(nvarchar(100), @PreviousSrNo);
---------------------------------------------------------------------------------------------------------------------------------------------------						
                      SELECT @ToLevel = TO_LEVEL,@CurrentStatus = UPDATED_STATUS 
                      FROM   TASK_SANCTIONING_DEPARTMENT_TRL_MOVEMENT_HISTORY
                      WHERE  task_mkey = @TASK_MKEY
                             AND SR_NO = @PreviousSrNo
                             AND delete_flag = 'N';
					print '@@ToLevel: '+ convert(nvarchar(100), @ToLevel);
					print '@CurrentStatus: '+ convert(nvarchar(100), @CurrentStatus);
---------------------------------------------------------------------------------------------------------------------------------------------------									
                     
					  INSERT INTO
								  TASK_SANCTIONING_DEPARTMENT_TRL_MOVEMENT_HISTORY
								  (sr_no,
								   task_mkey,
								   current_status,
								   HISTORY_DATE,
								   LAST_UPDATED_BY,
								   LAST_UPDATE_DATE,
								   delete_flag, CREATED_BY)
							VALUES	(@NextSR_NO,
									@TASK_MKEY,
									'Updated Task',
									Getdate(),
									@LAST_UPDATED_BY,
									Getdate(),
									'N',@LAST_UPDATED_BY)

									print 'Update into movement table';


                EXEC [Sp_emp_tags_insert_update]
                  @LAST_UPDATED_BY,
                  @TAGS,
                  @LAST_UPDATED_BY;

				IF(@DELETE_FLAG = 'Y')
				BEGIN
					SELECT task_no,
                       mkey,
                       task_parent_id,
                       task_main_node_id,
                       'Ok'     AS [Status],
                       'Deleted' AS [Message]
                FROM   task_hdr
                WHERE  mkey = @TASK_MKEY
                       AND delete_flag = 'Y'; 
				END
				ELSE
				BEGIN
					SELECT task_no,
						   mkey,
						   task_parent_id,
						   task_main_node_id,
						   'Ok'     AS [Status],
						   'Update' AS [Message]
					FROM   task_hdr
					WHERE  mkey = @TASK_MKEY
						   AND delete_flag = 'N';
				END
            END
          ELSE
            BEGIN
                SELECT 'Error'     AS [Status],
                       'Task mkey '+ @TASK_MKEY +' Not Found' AS [Message];
            END
      END try

      BEGIN catch
          -------------------------------------------------------------------------------------------------------------------------------              
          SELECT Error_number()    AS ERRORNUMBER,
                 Error_severity()  AS ERRORSEVERITY,
                 Error_state()     AS ERRORSTATE,
                 Error_procedure() AS ERRORPROCEDURE,
                 Error_line()      AS ERRORLINE,
                 Error_message()   AS ERRORMESSAGE;

          -------------------------------------------------------------------------------------------------------------------------------    
          DECLARE @ERROR_MESSAGE VARCHAR(max) = NULL;

          SET @ERROR_MESSAGE = Error_message();

          -------------------------------------------------------------------------------------------------------------------------------    
          EXEC Sp_p_tms_insert_error_des
            @LAST_UPDATED_BY,
            'TMS',
            ' update task details',
            @ERROR_MESSAGE,
            'Update';
      -------------------------------------------------------------------------------------------------------------------------------    
      END catch
  END 


-------------------------------------------------------------------------

GO
/****** Object:  StoredProcedure [dbo].[SP_GET_ACTIONS_NT]    Script Date: 05-06-2025 17:47:48 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--		exec SP_GET_ACTIONS_NT 424,926,'SUB TASK CREATED',926,1
--		exec SP_GET_ACTIONS_NT 1039,926,'CLOSE INITIATED','926',1
ALTER PROCEDURE [dbo].[SP_GET_ACTIONS_NT](@TASK_MKEY         INT,
                                          @CURRENT_EMP_MKEY  INT,
                                          @CURR_ACTION       NVARCHAR(100),
                                          @Session_User_Id   INT = NULL,
                                          @Business_Group_Id INT = NULL)
AS
  BEGIN
      DECLARE @dCount    INT,
              @dAllCount INT

      IF( @CURR_ACTION = 'WIP'
           OR @CURR_ACTION = 'PROGRESS UPDATED'
           OR @CURR_ACTION = 'WORK IN PROCESS'
           OR @CURR_ACTION = 'RE-WORK'
           OR @CURR_ACTION = 'WORK IN PROGRESS'
           OR @CURR_ACTION = 'CREATED' )
        BEGIN
            SELECT mkey,
                   type_desc
            FROM   v_status
            WHERE  mkey IN ( 75, 70, 69, 72 )
        END

      --or @CURR_ACTION= 'SUB TASK CREATED'
      IF( @CURR_ACTION = 'COMPLETED'
           OR @CURR_ACTION = 'CANCELLED'
           OR @CURR_ACTION = 'CANCELED'
           OR @CURR_ACTION = 'CANCEL' )
        BEGIN
            SELECT mkey,
                   type_desc
            FROM   v_status
            WHERE  mkey IN ( 0 )
        END

      IF( @CURR_ACTION = 'SUB TASK CREATED' )
        BEGIN
            SELECT @dCount = Count(*)
            FROM   task_hdr
            WHERE  task_parent_id = @TASK_MKEY
                   AND mkey != @TASK_MKEY

            SELECT @dAllCount = Count(*)
            FROM   task_hdr
            WHERE  task_parent_id = @TASK_MKEY
                   AND status IN ( 'COMPLETED', 'Cancel', 'Close' )

            IF( @dCount = @dAllCount )
              BEGIN
                  SELECT @dCount = Count(*)
                  FROM   task_hdr
                  WHERE  mkey = @TASK_MKEY
                         AND resposible_emp_mkey = @CURRENT_EMP_MKEY

                  IF( @dCount > 0 )
                    BEGIN
                        SELECT mkey,
                               type_desc
                        FROM   v_status
                        WHERE  mkey IN ( 75, 70, 69, 72 )
                    END
                  ELSE
                    BEGIN
                        SELECT mkey,
                               type_desc
                        FROM   v_status
                        WHERE  mkey IN ( 0 )
                    END
              END
            ELSE
              BEGIN
                  SELECT mkey,
                         type_desc
                  FROM   v_status
                  WHERE  mkey IN ( 0 )
              END
        END

      IF( @CURR_ACTION = 'CLOSE INITIATED' )
        BEGIN
		print '@CURR_ACTION = CLOSE INITIATED';
            SELECT @dCount = Count(*)
            FROM   task_hdr
            WHERE  mkey = @TASK_MKEY
                   AND resposible_emp_mkey = @CURRENT_EMP_MKEY

            IF( @dCount > 0 )
              BEGIN
                  SELECT mkey,
                         type_desc
                  FROM   v_status
                  WHERE  mkey IN ( 71, 82 )
              END
            ELSE
              BEGIN
                  SELECT mkey,
                         type_desc
                  FROM   v_status
                  WHERE  mkey IN ( 0 )
              END
        END

      IF( @CURR_ACTION = 'Cancel Initiated' )
        BEGIN
            SELECT @dCount = Count(*)
            FROM   task_hdr
            WHERE  mkey = @TASK_MKEY
                   AND resposible_emp_mkey = @CURRENT_EMP_MKEY

            IF( @dCount > 0 )
              BEGIN
                  SELECT mkey,
                         type_desc
                  FROM   v_status
                  WHERE  mkey IN ( 73, 82 )
              END
            ELSE
              BEGIN
                  SELECT mkey,
                         type_desc
                  FROM   v_status
                  WHERE  mkey IN ( 0 )
              END
        END
					SELECT  * 
					FROM (
						SELECT 'History' as [Type],--CONVERT(datetime,trl.CREATION_DATE) CREATION_DATE,
									progress_perc
									,CONVERT(nvarchar(max),action_type +' '+  DESCRIPTION_COMMENT +' '+ convert(nvarchar(100),PROGRESS_PERC) +' '+ 
									action_type +' '+ dbo.[Initcap](trl.status))                   STATUS
									,dbo.[Initcap](action_type)              ACTION_TYPE
									,dbo.[Initcap](description_comment)      COMMENT
									,thdr.task_type as Task_Type
									,tmst.TYPE_DESC as Task_Type_Name
									,Isnull(file_name, '')                   FILE_NAME
									,Isnull(file_path, '')                   FILE_PATH
									,trl.created_by                                        CREATED_BY_ID,
								   createdby.emp_full_name                               CREATED_BY_NAME,
								   CASE
									 WHEN trl.creation_date IS NULL THEN ''
									 ELSE Format(trl.creation_date, 'yyyy-MM-dd HH:mm:ss')
								   END                                                   AS CREATION_DATE,
								   Isnull(CONVERT(VARCHAR(50), trl.last_updated_by), '') AS LAST_UPDATED_BY,
								   Isnull(updatedby.emp_full_name, '')                   UPDATED_BY_NAME,
								   CASE
									 WHEN trl.last_update_date IS NULL THEN ''
									 ELSE Format(trl.last_update_date, 'yyyy-MM-dd HH:mm:ss')
								   END                                                   AS LAST_UPDATE_DATE
							FROM   task_action_trl trl  JOIN employee_mst createdby
									 ON trl.created_by = createdby.mkey
							Left JOIN TASK_HDR thdr on trl.TASK_MKEY = thdr.MKEY and thdr.DELETE_FLAG = 'N'
							Left JOIN TYPE_MST tmst on tmst.MKEY = thdr.TASK_TYPE and tmst.DELETE_FLAG = 'N'
								   LEFT JOIN employee_mst updatedby
										  ON trl.last_updated_by = updatedby.mkey
							WHERE  trl.delete_flag = 'N'
									AND trl.mkey = @TASK_MKEY
						Union all
						Select 'Movement' as [Type],--MHST.CREATION_DATE,
						0 as progress_perc
								--,'Level '+ CONVERT(NVARCHAR,FROM_LEVEL)+ ' ' + CURRENT_STATUS +' To '+ ' Level '+CONVERT(NVARCHAR,TO_LEVEL)+ ' ' + UPDATED_STATUS as [Status]
								--,ISNULL('Level '+ CONVERT(NVARCHAR,FROM_LEVEL)+ ' ' + CURRENT_STATUS +' To '+ ' Level '+CONVERT(NVARCHAR,TO_LEVEL)+ ' ' + UPDATED_STATUS, concat('The level ', TO_LEVEL,' is added'))  as [Status]
								,case when CURRENT_STATUS = 'Updated Task' then CURRENT_STATUS else 
								ISNULL('Level '+ CONVERT(NVARCHAR,FROM_LEVEL)+ ' ' + CURRENT_STATUS +' To '+ ' Level '
								+ CONVERT(NVARCHAR,TO_LEVEL)+ ' ' + UPDATED_STATUS
								, concat('The level ', TO_LEVEL,' is added')) end  as [Status]
								,null as ACTION_TYPE
								,COMMENT as Comment
								,thdr.task_type as Task_Type
								,tmst.TYPE_DESC as Task_Type_Name
								,null as [FILE_NAME]
								,null as FILE_PATH
								,MHST.created_by                                        CREATED_BY_ID,
								   createdby.emp_full_name                               CREATED_BY_NAME,
								   CASE
									 WHEN MHST.creation_date IS NULL THEN ''
									 ELSE Format(MHST.creation_date, 'yyyy-MM-dd HH:mm:ss')
								   END                                                   AS CREATION_DATE,
								   Isnull(CONVERT(VARCHAR(50), MHST.last_updated_by), '') AS LAST_UPDATED_BY,
								   Isnull(updatedby.emp_full_name, '')                   UPDATED_BY_NAME,
								   CASE
									 WHEN MHST.last_update_date IS NULL THEN ''
									 ELSE Format(MHST.last_update_date, 'yyyy-MM-dd HH:mm:ss')
								   END                                                   AS LAST_UPDATE_DATE
						From TASK_SANCTIONING_DEPARTMENT_TRL_MOVEMENT_HISTORY MHST JOIN employee_mst createdby
									 ON MHST.created_by = createdby.mkey
						Left JOIN TASK_HDR thdr on MHST.TASK_MKEY = thdr.MKEY and thdr.DELETE_FLAG = 'N'
						Left JOIN TYPE_MST tmst on tmst.MKEY = thdr.TASK_TYPE and tmst.DELETE_FLAG = 'N'
								   LEFT JOIN employee_mst updatedby
										  ON MHST.last_updated_by = updatedby.mkey
						where MHST.TASK_MKEY = @TASK_MKEY
					) ActionType
					ORDER BY ActionType.CREATION_DATE 
	   --SELECT CONVERT(VARCHAR(50), creation_date, 103)CREATION_DATE,
      --    progress_perc,
      --    dbo.[Initcap](status)                   STATUS,
      --    dbo.[Initcap](action_type)              ACTION_TYPE,
      --    dbo.[Initcap](description_comment)      COMMENT,
      --    Isnull(file_name, '')                   FILE_NAME,
      --    Isnull(file_path, '')                   FILE_PATH
      --FROM   task_action_trl
      --WHERE  delete_flag = 'N'
      --    AND mkey = @TASK_MKEY
      --ORDER  BY sr_no DESC
  END
--EXEC [SP_GET_ACTIONS] 154,248,'SUB TASK CREATED'
--SELECT CREATION_DATE,PROGRESS_PERC,STATUS,ACTION_TYPE,DESCRIPTION_COMMENT COMMENT,ISNULL(FILE_NAME,'NA') FILE_NAME FROM TASK_ACTION_TRL ORDER BY SR_NO DESC --SELECT * FROM TASK_ACTION_TRL


-----------------------------------------------------------------------------

06-0-2025

GO
/****** Object:  StoredProcedure [dbo].[Sp_get_team_progress_nt]    Script Date: 06-06-2025 10:47:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--		EXEC  Sp_get_team_progress_nt 926,'DEPARTMENT','DEPT-OVERDUE','aLL',926,1 
ALTER PROCEDURE [dbo].[SP_GET_TEAM_PROGRESS_NT](@CURRENT_EMP_MKEY  INT
												,@TASKTYPE   Nvarchar(255) = null
												,@TASKTYPE_DESC   Nvarchar(255)= null
												,@Filter   Nvarchar(255)= null
                                                ,@Session_User_Id   INT,
                                                 @Business_Group_Id INT)
AS
  BEGIN
      DECLARE @dCount      INT,
              @dErpEmpMkey INT

      SELECT @dErpEmpMkey = erp_emp_mkey
      FROM   employee_mst
      WHERE  mkey = @CURRENT_EMP_MKEY;

      WITH reportees
           AS (SELECT mkey 'CURRENT_EMP_MKEY',
                      department_id,
                      erp_emp_mkey,
                      emp_full_name'MEMBER_NAME',
                      ra1_mkey,
                      1            AS Level
               FROM   employee_mst
               WHERE  Isnull(delete_flag, 'N') = 'N'
                      AND ra1_mkey = @dErpEmpMkey
                      AND emp_code != 1
               UNION ALL
               SELECT E.mkey          'CURRENT_EMP_MKEY',
                      E.department_id,
                      E.erp_emp_mkey,
                      E.emp_full_name 'MEMBER_NAME',
                      E.ra1_mkey,
                      level + 1
               FROM   employee_mst AS E
                      INNER JOIN reportees
                              ON E.ra1_mkey = reportees.erp_emp_mkey
                                 AND Isnull(delete_flag, 'N') = 'N')
		SELECT *
		INTO   #temp_reportees
		FROM   reportees
		Where
		CASE
			WHEN @Filter  = 'Direct' THEN 
				CASE WHEN RA1_MKEY = @Session_User_Id THEN 1 ELSE 0 END
			ELSE 1  -- If none of the conditions match, return false
					END = 1;
      --select * from #TEMP_REPORTEES order by level,MEMBER_NAME;  
					SELECT
					RPT.*,
					--T_HDR.*  
					T_HDR.mkey,
					Isnull(CATEGORY.type_desc, 'NA')                       CATEGORY,
					T_HDR.task_no,
					dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))     CREATOR,
					dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA')) RESPONSIBLE,
					dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))  ACTIONABLE,
					T_HDR.creation_date,
					CONVERT(VARCHAR, T_HDR.completion_date, 103)           COMPLETION_DATE,
					dbo.[Initcap](T_HDR.task_name)                         TASK_NAME,
					T_HDR.task_description,
					T_HDR.tags,
					dbo.[Initcap](T_HDR.status)                            STATUS,
					CASE
					WHEN Isnull(CREATOR.first_name, 'NA') != Isnull(RESPONSIBLE.first_name, 'NA')
					THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
					+ ' > '
					+ dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA') )
					ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
					END
					RESPONSIBLE_TAG,
					ASSIGNEE.emp_full_name                                 'ASSIGNEE',
					ASSIGNEE.department_id
					'ASSIGNEE_DEPARTMENT_ID',
					CASE
					WHEN RPT.department_id = ASSIGNEE.department_id THEN 'DEPARTMENT'
					WHEN RPT.department_id != ASSIGNEE.department_id THEN 'INTER-DEPARTMENT'
					END  AS 'TASKTYPE',
					CASE
					WHEN RPT.department_id = ASSIGNEE.department_id
						AND ( T_HDR.assigned_to = RPT.current_emp_mkey
							OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
						AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
						AND CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, Getdate(), 103)
						AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN 'DEPT-TODAY'
					WHEN RPT.department_id = ASSIGNEE.department_id
						AND ( T_HDR.assigned_to = RPT.current_emp_mkey
							OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
						AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
						AND T_HDR.completion_date < CONVERT(DATETIME,CONVERT(VARCHAR, Getdate(),103),103)
						AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN 'DEPT-OVERDUE'
					WHEN RPT.department_id = ASSIGNEE.department_id
						AND ( T_HDR.assigned_to = RPT.current_emp_mkey
							OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
						AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
								--AND T_HDR.STATUS  in ('Close Initiated','Cancel Initiated')  
								AND T_HDR.completion_date > CONVERT(DATETIME,CONVERT(VARCHAR, Getdate(),103),103)
								AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN 'DEPT-FUTURE'
							WHEN RPT.department_id != ASSIGNEE.department_id
								AND ( T_HDR.assigned_to = RPT.current_emp_mkey
										OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
								AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
								AND CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, Getdate(), 103)
								AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN
							'INTERDEPT-TODAY'
							WHEN RPT.department_id != ASSIGNEE.department_id
								AND ( T_HDR.assigned_to = RPT.current_emp_mkey
										OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
								AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
								AND T_HDR.completion_date < CONVERT(DATETIME,CONVERT(VARCHAR, Getdate(),103),103)
								AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN
							'INTERDEPT-OVERDUE'
							WHEN RPT.department_id != ASSIGNEE.department_id
								AND ( T_HDR.assigned_to = RPT.current_emp_mkey
										OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
								AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
								--AND T_HDR.STATUS  in ('Close Initiated','Cancel Initiated')  
								AND T_HDR.completion_date > CONVERT(DATETIME,CONVERT(VARCHAR, Getdate(),103),103)
								AND Isnull(T_HDR.delete_flag, 'N') = 'N' THEN
							'INTERDEPT-FUTURE'
							END AS 'TASKTYPE_DESC',
							dbo.[Initcap](Isnull(PROJ.type_desc, ''))
							PROJECT_NAME
					INTO   #temp_reportees_details
					FROM   #temp_reportees RPT
							LEFT JOIN task_hdr T_HDR
								ON ( RPT.current_emp_mkey = T_HDR.assigned_to
										OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
							LEFT JOIN employee_mst ASSIGNEE
								ON T_HDR.created_by = ASSIGNEE.mkey
							LEFT JOIN employee_mst CREATOR
								ON CREATOR.mkey = T_HDR.created_by
							LEFT JOIN employee_mst RESPONSIBLE
								ON RESPONSIBLE.mkey = T_HDR.assigned_to
							LEFT JOIN employee_mst ACTIONABLE
								ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey
							LEFT JOIN v_category CATEGORY
								ON CATEGORY.mkey = T_HDR.caregory
							LEFT JOIN v_project PROJ
								ON T_HDR.project_id = PROJ.master_mkey
					WHERE  T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' );
      --ORDER BY RPT.MEMBER_NAME;  
			SELECT *,
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'DEPT-TODAY'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'DEPTTODAY',
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'DEPT-OVERDUE'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'DEPTOVERDUE',
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'DEPT-FUTURE'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'DEPTFUTURE',
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'INTERDEPT-TODAY'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'INTERDEPTTODAY',
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'INTERDEPT-OVERDUE'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'INTERDEPTOVERDUE',
             Isnull((SELECT Count(*)
                     FROM   #temp_reportees_details
                     WHERE  tasktype_desc = 'INTERDEPT-FUTURE'
                            AND current_emp_mkey = A.current_emp_mkey), 0)
             'INTERDEPTFUTURE'
      FROM   #temp_reportees A
      ORDER  BY level,
                member_name
      SELECT *
      FROM   #temp_reportees_details
	  WHERE  CASE
				WHEN  @TASKTYPE != '' OR @TASKTYPE <> '' THEN  --@TASKTYPE IS NOT NULL OR
							CASE WHEN  TASKTYPE = @TASKTYPE AND TASKTYPE_DESC = @TASKTYPE_DESC  THEN 1 ELSE 0 END
						ELSE 1  
						END = 1
      ORDER  BY member_name;

					Select 'Today' as Duration, count(*) as 'Count'
					into #temp_CardCount
					FROM   #temp_reportees_details RPT
					WHERE  RPT.tasktype_desc in ('DEPT-TODAY','INTERDEPT-TODAY') 
					AND	CASE
						WHEN @Filter    = 'Direct' THEN 
							CASE WHEN RA1_MKEY = @Session_User_Id THEN 1 ELSE 0 END
						ELSE 1  -- If none of the conditions match, return false
						END = 1
					union ALL
					Select 'Overdue' as Duration, count(*) as 'Count'
					FROM  #temp_reportees_details RPT
					WHERE RPT.tasktype_desc in ('DEPT-OVERDUE','INTERDEPT-OVERDUE')
					AND	CASE
						WHEN @Filter    = 'Direct' THEN 
							CASE WHEN RA1_MKEY = @Session_User_Id THEN 1 ELSE 0 END
						ELSE 1  -- If none of the conditions match, return false
						END = 1
					union all
					Select 'Future' as Duration, count(*) as 'Count'
					FROM  #temp_reportees_details RPT
					WHERE RPT.tasktype_desc in ('DEPT-FUTURE','INTERDEPT-FUTURE')
					AND	CASE
						WHEN @Filter    = 'Direct' THEN 
							CASE WHEN RA1_MKEY = @Session_User_Id THEN 1 ELSE 0 END
						ELSE 1  -- If none of the conditions match, return false
						END = 1
					Union all
					Select 'Team Members' as Duration, Count(*) as 'Count'
					FROM  #temp_reportees RPT

					select * from #temp_CardCount;

      DROP TABLE #temp_reportees;
	  drop table #temp_CardCount;
      DROP TABLE #temp_reportees_details;
  /*  

				WITH reportees
				AS (SELECT mkey 'CURRENT_EMP_MKEY',department_id,erp_emp_mkey,emp_full_name'MEMBER_NAME',ra1_mkey,1 AS Level
				FROM   employee_mst
				WHERE  Isnull(delete_flag, 'N') = 'N' AND ra1_mkey = 926 AND emp_code != 1
				UNION ALL
				SELECT E.mkey 'CURRENT_EMP_MKEY',E.department_id,E.erp_emp_mkey,E.emp_full_name 'MEMBER_NAME',E.ra1_mkey,level + 1
				FROM   employee_mst AS E INNER JOIN reportees ON E.ra1_mkey = reportees.erp_emp_mkey AND Isnull(delete_flag, 'N') = 'N')
				select count(*) from reportees RPT LEFT JOIN task_hdr T_HDR
				ON ( RPT.current_emp_mkey = T_HDR.assigned_to OR T_HDR.resposible_emp_mkey = RPT.current_emp_mkey )
				where  T_HDR.DELETE_FLAG = 'N'
				AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED' )
				AND CONVERT(DATETIME,CONVERT(VARCHAR, T_HDR.completion_date,103),103) > CONVERT(DATETIME,CONVERT(VARCHAR, Getdate(),103),103)


  select emp_code, EMP_FULL_NAME, 'Direct Report' Report_type ,mkey,DEPARTMENT_ID  
  from EMPLOYEE_MST where    
   RA1_MKEY in   
  (  
  @dErpEmpMkey  
  )   
  union    
  select emp_code, EMP_FULL_NAME , 'Indirect Report' Report_type ,mkey,DEPARTMENT_ID   
  from EMPLOYEE_MST where   RA2_MKEY in   
  (  
    @dErpEmpMkey  
  )  
  and emp_code not in (select emp_code  
  from EMPLOYEE_MST where    
   RA1_MKEY in   
  (  
  @dErpEmpMkey  
  ))    
  UNION  
  SELECT emp_code, EMP_FULL_NAME ,'Subordinate Report' Report_type ,mkey,DEPARTMENT_ID  
  from EMPLOYEE_MST where    
   RA1_MKEY in   
  (  
  select ERP_EMP_MKEY   
  from EMPLOYEE_MST where    
   RA1_MKEY in   
  (  
  @dErpEmpMkey  
  )   
  )   
  and emp_code not in (select emp_code  
  from EMPLOYEE_MST where    
   RA2_MKEY in   
  (  
  @dErpEmpMkey  
  ))  
    
  order by 1  
  */
  END
--EXEC [SP_GET_TEAM_PROGRESS] 9  
--select * from EMPLOYEE_MST where emp_name like '%vyom%'  


-------------------------------------------------
07-06-2025

--EXEC SP_GET_SCHEDULED_MSP 157,461,926,1
Create PROCEDURE SP_GET_SCHEDULED_MSP
	-- Add the parameters for the stored procedure here
	@ProjectMkey int,
	@BuildingMkey int,
	@Session_User_Id   INT,  
	@Business_Group_Id INT

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
		Select WBS,TASK_NAME as Name,Duration,Start_Date,Finish_Date
		,Predecessors,Resource_Names,Text1,Outline_Level,Number1,Unique_ID,Percent_Complete as STATUS_PERC
		from TASK_HDR 
		Where Is_Scheduled is not null 
		And DELETE_FLAG = 'N' 
		And PROJECT_ID = @ProjectMkey 
		And SUB_PROJECT_ID = @BuildingMkey;
END
GO



 

   --------------------------------------------

09-0-2025

ALTER PROCEDURE [dbo].[SP_GET_TASK_PROJECTS_BY_TASK_TYPE]
    @TASK_TYPE NVARCHAR(255),
    @ProjectMkey NVARCHAR(255) = NULL,
    @BuildingMkey NVARCHAR(255) = NULL,
    @FILTER VARCHAR(MAX) = NULL,
    @BUILDING_TYPE NVARCHAR(MAX) = NULL,
    @BUILDING_STANDARD NVARCHAR(MAX) = NULL,
    @STATUTORY_AUTHORITY NVARCHAR(MAX) = NULL,
    @Session_User_Id INT = NULL,  
    @Business_Group_Id INT = NULL
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @sql NVARCHAR(MAX) = NULL,
                @WhereClause NVARCHAR(MAX) = NULL,
                @TaskTypeMkey INT;

        -- Create temporary tables instead of table variables
        IF OBJECT_ID('tempdb..#TableOutputProjectMkey') IS NOT NULL DROP TABLE #TableOutputProjectMkey;
        CREATE TABLE #TableOutputProjectMkey (mkey INT);

        IF OBJECT_ID('tempdb..#TableOutputBuildingMkey') IS NOT NULL DROP TABLE #TableOutputBuildingMkey;
        CREATE TABLE #TableOutputBuildingMkey (mkey INT);

        IF OBJECT_ID('tempdb..#TableOutputBUILDING_TYPE') IS NOT NULL DROP TABLE #TableOutputBUILDING_TYPE;
        CREATE TABLE #TableOutputBUILDING_TYPE (mkey INT);

        IF OBJECT_ID('tempdb..#TableOutputBUILDING_STANDARD') IS NOT NULL DROP TABLE #TableOutputBUILDING_STANDARD;
        CREATE TABLE #TableOutputBUILDING_STANDARD (mkey INT);

        IF OBJECT_ID('tempdb..#TableOutputSTATUTORY_AUTHORITY') IS NOT NULL DROP TABLE #TableOutputSTATUTORY_AUTHORITY;
        CREATE TABLE #TableOutputSTATUTORY_AUTHORITY (mkey INT);

        -- Populate #TableOutputProjectMkey
        INSERT INTO #TableOutputProjectMkey
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(@ProjectMkey, ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);
		
        -- Populate #TableOutputBuildingMkey
        INSERT INTO #TableOutputBuildingMkey
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(@BuildingMkey, ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);

        -- Populate #TableOutputBUILDING_TYPE
        INSERT INTO #TableOutputBUILDING_TYPE
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(CAST(@BUILDING_TYPE AS NVARCHAR(max)), ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);

        -- Populate #TableOutputBUILDING_STANDARD
        INSERT INTO #TableOutputBUILDING_STANDARD
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(CAST(@BUILDING_STANDARD AS VARCHAR), ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);

        -- Populate #TableOutputSTATUTORY_AUTHORITY
        INSERT INTO #TableOutputSTATUTORY_AUTHORITY
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(@STATUTORY_AUTHORITY, ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);

        -- Get task type mkey
        SELECT @TaskTypeMkey = MASTER_MKEY
        FROM TYPE_MST
        WHERE TYPE_CODE = 'Task_Type' AND DELETE_FLAG = 'N' AND TYPE_DESC = @TASK_TYPE;

        -- Build dynamic SQL
        IF @TaskTypeMkey = 359  -- Approval
        BEGIN
            SET @sql = '
                SELECT thdr.PROJECT_ID AS PROJECT_Mkey, TProject.TYPE_DESC AS Project_Name,
                       SUB_PROJECT_ID AS Building_Mkey, TBuilding.TYPE_DESC AS Building_Name, thdr.STATUS_PERC,
                       LTRIM(RTRIM(thdr.Priority)) AS Priority, thdr.MKEY, TASK_NO, TASK_NAME, TASK_DESCRIPTION,
                       thdr.TASK_PARENT_ID, thdr.TASK_MAIN_NODE_ID, ASSIGNED_TO, emst.EMP_FULL_NAME AS Assigned_To_Name,
                       COMPLETION_DATE, thdr.status AS [Status]
                FROM TASK_HDR thdr
                INNER JOIN PROJECT_TRL_APPROVAL_ABBR Ahdr ON thdr.MKEY = Ahdr.TASK_NO_MKEY
                INNER JOIN PROJECT_HDR phdr ON phdr.MKEY = Ahdr.HEADER_MKEY AND phdr.DELETE_FLAG = ''N''
                INNER JOIN APPROVAL_TEMPLATE_HDR athdr ON athdr.MKEY = Ahdr.APPROVAL_MKEY AND Ahdr.DELETE_FLAG = ''N''
                LEFT JOIN EMPLOYEE_MST emst ON thdr.ASSIGNED_TO = emst.MKEY AND emst.DELETE_FLAG = ''N''
                LEFT JOIN TYPE_MST TProject ON TProject.TYPE_CODE = ''Project'' AND TProject.MASTER_MKEY = thdr.PROJECT_ID AND TProject.DELETE_FLAG = ''N''
                LEFT JOIN TYPE_MST TBuilding ON TBuilding.TYPE_CODE = ''Project'' AND TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID AND TBuilding.DELETE_FLAG = ''N''';
                set @WhereClause =' WHERE thdr.TASK_TYPE = ' + CONVERT(NVARCHAR, @TaskTypeMkey) + '
                      AND thdr.DELETE_FLAG = ''N''
                      AND Ahdr.DELETE_FLAG = ''N''
                      AND phdr.DELETE_FLAG = ''N''
                      AND athdr.DELETE_FLAG = ''N''
                      AND (thdr.PROJECT_ID IN (SELECT mkey FROM #TableOutputProjectMkey)
                           OR thdr.SUB_PROJECT_ID IN (SELECT mkey FROM #TableOutputBuildingMkey)
                           OR athdr.BUILDING_TYPE IN (SELECT mkey FROM #TableOutputBUILDING_TYPE)
                           OR athdr.BUILDING_STANDARD IN (SELECT mkey FROM #TableOutputBUILDING_STANDARD)
                           OR athdr.STATUTORY_AUTHORITY IN (SELECT mkey FROM #TableOutputSTATUTORY_AUTHORITY))
                      AND (thdr.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @Session_User_Id) + '
                           OR thdr.CREATED_BY = ' + CONVERT(NVARCHAR, @Session_User_Id) + ')';
			
        END
		else if (@TaskTypeMkey = 103) -- Compliance
		begin
			SET @sql = '
                SELECT thdr.PROJECT_ID AS PROJECT_Mkey, TProject.TYPE_DESC AS Project_Name,
SUB_PROJECT_ID AS Building_Mkey, TBuilding.TYPE_DESC AS Building_Name, thdr.STATUS_PERC,
LTRIM(RTRIM(thdr.Priority)) AS Priority, thdr.MKEY, TASK_NO, TASK_NAME, TASK_DESCRIPTION,
thdr.TASK_PARENT_ID, thdr.TASK_MAIN_NODE_ID, ASSIGNED_TO, emst.EMP_FULL_NAME AS Assigned_To_Name,
COMPLETION_DATE, thdr.status AS [Status]
FROM TASK_HDR thdr inner join COMPLIANCE_HDR chdr on thdr.MKEY = chdr.TASK_NO_MKEY
LEFT JOIN EMPLOYEE_MST emst ON thdr.ASSIGNED_TO = emst.MKEY AND emst.DELETE_FLAG = ''N''
LEFT JOIN TYPE_MST TProject ON TProject.TYPE_CODE = ''Project'' AND TProject.MASTER_MKEY = thdr.PROJECT_ID AND TProject.DELETE_FLAG = ''N''
LEFT JOIN TYPE_MST TBuilding ON TBuilding.TYPE_CODE = ''Project'' AND TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID AND TBuilding.DELETE_FLAG = ''N'' ';
		end

			IF @FILTER = 'Today'
			BEGIN
				SET @WhereClause += ' And (CONVERT(VARCHAR, thdr.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
										AND thdr.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
			END
			IF @FILTER = 'Pending'
			BEGIN
				SET @WhereClause +=' AND (STATUS_PERC = 0.0 AND thdr.completion_date < GETDATE() 
										and thdr.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
			END
			IF @FILTER = 'Review'
			BEGIN
				SET @WhereClause += ' AND (thdr.STATUS IN (''Close Initiated'',''Cancel Initiated''))';
			END
			IF @FILTER = 'Completed'
			BEGIN
				SET @WhereClause += ' And (thdr.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
			END
			IF @FILTER = 'Cancelled'
			BEGIN
				SET @WhereClause +=' AND (thdr.status IN (''CANCEL'', ''CANCELLED'')) ';
			END
			IF @FILTER = 'Overdue'
			BEGIN
				SET @WhereClause += ' And (thdr.completion_date < GETDATE() AND thdr.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
			END
			IF @FILTER = 'Future'
			BEGIN
				SET @WhereClause +=' AND (thdr.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
										and thdr.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
			END
			print '@ProjectMkey  '+ @ProjectMkey
			if (((@ProjectMkey != null or @BuildingMkey != null))  -- (@ProjectMkey != '' or @BuildingMkey != '') OR
				OR (@WhereClause  is not null OR @WhereClause  != null))
			Begin
			print '@ProjectMkey insdeid '+ @ProjectMkey
				Set @sql +=' '+ @WhereClause + ' order by thdr.PROJECT_ID, thdr.SUB_PROJECT_ID,thdr.MKEY; ';
				print '@sql: '+ @sql
			End
			Else
			Begin
			print '@ProjectMkey Outside '+ @ProjectMkey
				set @sql += ' WHERE thdr.DELETE_FLAG = ''N'' And (RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR,@Session_User_Id) +' 
						OR thdr.CREATED_BY = '+CONVERT(NVARCHAR, @Session_User_Id) +' )
						Order by thdr.PROJECT_ID, thdr.SUB_PROJECT_ID,thdr.MKEY; ';
			End
			
			EXEC Sp_executesql @sql;

			Select 'Todays' as DurationFilter,Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where 
			CASE
				WHEN @TaskTypeMkey != 0    THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
			AND	CASE
					WHEN @ProjectMkey != 0  OR @ProjectMkey <> '' THEN 
						CASE WHEN thdr.PROJECT_ID in (SELECT mkey FROM #TableOutputProjectMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN @BuildingMkey != 0 THEN 
						CASE WHEN thdr.SUB_PROJECT_ID in (SELECT mkey FROM #TableOutputBuildingMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			And (CONVERT(VARCHAR, thdr.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
			AND thdr.status not IN ('CANCEL', 'COMPLETED','CANCELLED'))
			
			Union 
			
			Select 'Pending' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where 
			CASE
				WHEN @TaskTypeMkey != 0    THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
				AND	CASE
					WHEN @ProjectMkey != 0   THEN 
						CASE WHEN thdr.PROJECT_ID in (SELECT mkey FROM #TableOutputProjectMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN @BuildingMkey != 0 THEN 
						CASE WHEN thdr.SUB_PROJECT_ID in (SELECT mkey FROM #TableOutputBuildingMkey)  THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			AND (STATUS_PERC = 0.0 AND thdr.completion_date < GETDATE() 
			and thdr.status IN ('CREATED', 'SUB TASK CREATED','WORK IN PROGRESS','RE-WORK'))
			
			Union 
			
			Select 'Review' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where 
			CASE
				WHEN @TaskTypeMkey != 0    THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
			AND	CASE
					WHEN @ProjectMkey != 0   THEN 
						CASE WHEN thdr.PROJECT_ID in (SELECT mkey FROM #TableOutputProjectMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN @BuildingMkey != 0 THEN 
						CASE WHEN thdr.SUB_PROJECT_ID in (SELECT mkey FROM #TableOutputBuildingMkey)  THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			AND (thdr.STATUS IN ('Close Initiated','Cancel Initiated'))
			
			Union 
			
			Select 'Overdue' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where
			CASE
				WHEN @TaskTypeMkey != 0    THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
			AND	CASE
					WHEN @ProjectMkey != 0   THEN 
						CASE WHEN thdr.PROJECT_ID in (SELECT mkey FROM #TableOutputProjectMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN @BuildingMkey != 0 THEN 
						CASE WHEN thdr.SUB_PROJECT_ID in (SELECT mkey FROM #TableOutputBuildingMkey)  THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			And (thdr.completion_date < GETDATE() AND thdr.status not IN ('CANCEL', 'COMPLETED','CANCELLED')) 
			
			Union 
			
			Select 'Future' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where 
			CASE
				WHEN @TaskTypeMkey != 0  THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
			AND	CASE
					WHEN @ProjectMkey != 0   THEN 
						CASE WHEN thdr.PROJECT_ID in (SELECT mkey FROM #TableOutputProjectMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN @BuildingMkey != 0 THEN 
						CASE WHEN thdr.SUB_PROJECT_ID in (SELECT mkey FROM #TableOutputBuildingMkey)  THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			AND (thdr.STATUS NOT IN ('COMPLETED','CANCELLED','Close Initiated','Cancel Initiated')) 
			and thdr.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103); 

        -- Final execution
        --PRINT '@sql: ' + @sql;
        --EXEC sp_executesql @sql;

        -- Return summary counts for filters (if needed) here...
        -- You can retain your UNION queries for 'Todays', 'Pending', etc., after this

    END TRY
    BEGIN CATCH
        SELECT
            ERROR_NUMBER() AS ERRORNUMBER,
            ERROR_SEVERITY() AS ERRORSEVERITY,
            ERROR_STATE() AS ERRORSTATE,
            ERROR_PROCEDURE() AS ERRORPROCEDURE,
            ERROR_LINE() AS ERRORLINE,
            ERROR_MESSAGE() AS ERRORMESSAGE;

        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
        SET @ERROR_MESSAGE = ERROR_MESSAGE();

        EXEC Sp_p_tms_insert_error_des
            @Session_User_Id,
            'TMS',
            'Get Task Projects',
            @ERROR_MESSAGE,
            'Get';
    END CATCH
END
------------------------------------
11-06-205


GO
/****** Object:  StoredProcedure [dbo].[SP_GET_TASK_PROJECTS_BY_TASK_TYPE]    Script Date: 11-06-2025 11:52:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- SP_GET_TASK_PROJECTS_BY_TASK_TYPE_NT 
ALTER PROCEDURE SP_GET_TASK_PROJECTS_BY_TASK_TYPE_NT
    @TASK_TYPE NVARCHAR(255),
	-- Common for all task type
    @ProjectMkey NVARCHAR(255) = NULL,
    @BuildingMkey NVARCHAR(255) = NULL,
    @FILTER VARCHAR(MAX) = NULL,
    -- Approval filter
	@BUILDING_TYPE NVARCHAR(MAX) = NULL,
    @BUILDING_STANDARD NVARCHAR(MAX) = NULL,
    @STATUTORY_AUTHORITY NVARCHAR(MAX) = NULL,
	-- Compliance Filter
	@ResponsibleDepart NVARCHAR(MAX) = NULL,
    @JobRole NVARCHAR(MAX) = NULL,
    @ResponsiblePerson NVARCHAR(MAX)= NULL,
	@RaisedAt NVARCHAR(MAX) = NULL,
	@RaisedAtBefore NVARCHAR(MAX) = NULL,
	@Status NVARCHAR(MAX) = NULL,
	-- MileStone Filter
	--@ NVARCHAR(MAX) = NULL,
    @Session_User_Id INT = NULL,  
    @Business_Group_Id INT = NULL
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @sql NVARCHAR(MAX) = NULL,
                @WhereClause NVARCHAR(MAX) = NULL,
                @TaskTypeMkey INT;

        -- Create temporary tables instead of table variables
        IF OBJECT_ID('tempdb..#TableOutputProjectMkey') IS NOT NULL DROP TABLE #TableOutputProjectMkey;
        CREATE TABLE #TableOutputProjectMkey (mkey INT);

        IF OBJECT_ID('tempdb..#TableOutputBuildingMkey') IS NOT NULL DROP TABLE #TableOutputBuildingMkey;
        CREATE TABLE #TableOutputBuildingMkey (mkey INT);

        IF OBJECT_ID('tempdb..#TableOutputBUILDING_TYPE') IS NOT NULL DROP TABLE #TableOutputBUILDING_TYPE;
        CREATE TABLE #TableOutputBUILDING_TYPE (mkey INT);

        IF OBJECT_ID('tempdb..#TableOutputBUILDING_STANDARD') IS NOT NULL DROP TABLE #TableOutputBUILDING_STANDARD;
        CREATE TABLE #TableOutputBUILDING_STANDARD (mkey INT);

        IF OBJECT_ID('tempdb..#TableOutputSTATUTORY_AUTHORITY') IS NOT NULL DROP TABLE #TableOutputSTATUTORY_AUTHORITY;
        CREATE TABLE #TableOutputSTATUTORY_AUTHORITY (mkey INT);

		-- Compliance
		  IF OBJECT_ID('tempdb..#TableOutputResponsibleDepart') IS NOT NULL DROP TABLE #TableOutputResponsibleDepart;
        CREATE TABLE #TableOutputResponsibleDepart (mkey INT);

		  IF OBJECT_ID('tempdb..#TableOutputJobRole') IS NOT NULL DROP TABLE #TableOutputJobRole;
        CREATE TABLE #TableOutputJobRole (mkey INT);

		  IF OBJECT_ID('tempdb..#TableOutputResponsiblePerson') IS NOT NULL DROP TABLE #TableOutputResponsiblePerson;
        CREATE TABLE #TableOutputResponsiblePerson (mkey INT);

		  IF OBJECT_ID('tempdb..#TableOutputRaisedAt') IS NOT NULL DROP TABLE #TableOutputRaisedAt;
        CREATE TABLE #TableOutputRaisedAt (mkey INT);

		  IF OBJECT_ID('tempdb..#TableOutputRaisedAtBefore') IS NOT NULL DROP TABLE #TableOutputRaisedAtBefore;
        CREATE TABLE #TableOutputRaisedAtBefore (mkey INT);

		  IF OBJECT_ID('tempdb..#TableOutputStatus') IS NOT NULL DROP TABLE #TableOutputStatus;
        CREATE TABLE #TableOutputStatus (mkey nvarchar(100));


        -- Populate #TableOutputProjectMkey
        INSERT INTO #TableOutputProjectMkey
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(@ProjectMkey, ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);
        -- Populate #TableOutputBuildingMkey
        INSERT INTO #TableOutputBuildingMkey
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(@BuildingMkey, ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);
        -- Populate #TableOutputBUILDING_TYPE
        INSERT INTO #TableOutputBUILDING_TYPE
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(CAST(@BUILDING_TYPE AS NVARCHAR(max)), ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);
        -- Populate #TableOutputBUILDING_STANDARD
        INSERT INTO #TableOutputBUILDING_STANDARD
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(CAST(@BUILDING_STANDARD AS VARCHAR), ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);
        -- Populate #TableOutputSTATUTORY_AUTHORITY
        INSERT INTO #TableOutputSTATUTORY_AUTHORITY
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(@STATUTORY_AUTHORITY, ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);

		
		/******/
		 INSERT INTO #TableOutputResponsibleDepart
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(CAST(@ResponsibleDepart AS NVARCHAR(max)), ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);

		 INSERT INTO #TableOutputJobRole
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(CAST(@JobRole AS NVARCHAR(max)), ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);

		 INSERT INTO #TableOutputResponsiblePerson
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(CAST(@ResponsiblePerson AS NVARCHAR(max)), ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);


		 INSERT INTO #TableOutputRaisedAt
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(CAST(@RaisedAt AS NVARCHAR(max)), ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);


		 INSERT INTO #TableOutputRaisedAtBefore
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(CAST(@RaisedAtBefore AS NVARCHAR(max)), ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);

		 INSERT INTO #TableOutputStatus
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(CAST(@Status AS NVARCHAR(max)), ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);


		/******/


        -- Get task type mkey
        SELECT @TaskTypeMkey = MASTER_MKEY
        FROM TYPE_MST
        WHERE TYPE_CODE = 'Task_Type' AND DELETE_FLAG = 'N' AND TYPE_DESC = @TASK_TYPE;

        -- Build dynamic SQL
        IF @TaskTypeMkey = 359  -- Approval
        BEGIN
            SET @sql = '
                SELECT thdr.PROJECT_ID AS PROJECT_Mkey, TProject.TYPE_DESC AS Project_Name,
                       SUB_PROJECT_ID AS Building_Mkey, TBuilding.TYPE_DESC AS Building_Name, thdr.STATUS_PERC,
                       LTRIM(RTRIM(thdr.Priority)) AS Priority, thdr.MKEY, TASK_NO, TASK_NAME, TASK_DESCRIPTION,
                       thdr.TASK_PARENT_ID, thdr.TASK_MAIN_NODE_ID, ASSIGNED_TO, emst.EMP_FULL_NAME AS Assigned_To_Name,
                       COMPLETION_DATE, thdr.status AS [Status]
                FROM TASK_HDR thdr
                INNER JOIN PROJECT_TRL_APPROVAL_ABBR Ahdr ON thdr.MKEY = Ahdr.TASK_NO_MKEY
                INNER JOIN PROJECT_HDR phdr ON phdr.MKEY = Ahdr.HEADER_MKEY AND phdr.DELETE_FLAG = ''N''
                INNER JOIN APPROVAL_TEMPLATE_HDR athdr ON athdr.MKEY = Ahdr.APPROVAL_MKEY AND Ahdr.DELETE_FLAG = ''N''
                LEFT JOIN EMPLOYEE_MST emst ON thdr.ASSIGNED_TO = emst.MKEY AND emst.DELETE_FLAG = ''N''
                LEFT JOIN TYPE_MST TProject ON TProject.TYPE_CODE = ''Project'' AND TProject.MASTER_MKEY = thdr.PROJECT_ID AND TProject.DELETE_FLAG = ''N''
                LEFT JOIN TYPE_MST TBuilding ON TBuilding.TYPE_CODE = ''Project'' AND TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID AND TBuilding.DELETE_FLAG = ''N''';
                set @WhereClause =' WHERE thdr.TASK_TYPE = ' + CONVERT(NVARCHAR, @TaskTypeMkey) + '
                      AND thdr.DELETE_FLAG = ''N''
                      AND Ahdr.DELETE_FLAG = ''N''
                      AND phdr.DELETE_FLAG = ''N''
                      AND athdr.DELETE_FLAG = ''N''
                      AND (thdr.PROJECT_ID IN (SELECT mkey FROM #TableOutputProjectMkey)
                           OR thdr.SUB_PROJECT_ID IN (SELECT mkey FROM #TableOutputBuildingMkey)
                           OR athdr.BUILDING_TYPE IN (SELECT mkey FROM #TableOutputBUILDING_TYPE)
                           OR athdr.BUILDING_STANDARD IN (SELECT mkey FROM #TableOutputBUILDING_STANDARD)
                           OR athdr.STATUTORY_AUTHORITY IN (SELECT mkey FROM #TableOutputSTATUTORY_AUTHORITY))
                      AND (thdr.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @Session_User_Id) + '
                           OR thdr.CREATED_BY = ' + CONVERT(NVARCHAR, @Session_User_Id) + ')';
			
        END
		else if (@TaskTypeMkey = 103) -- Compliance
		begin

		SELECT mkey as TableOutputBuildingMkey FROM #TableOutputBuildingMkey
		SELECT mkey as TableOutputResponsiblePerson FROM #TableOutputResponsiblePerson
		SELECT mkey as TableOutputJobRole FROM #TableOutputJobRole
			SET @sql = '
					Select chdr.MKEY,thdr.PROJECT_ID AS PROJECT_Mkey, TProject.TYPE_DESC AS Project_Name,SUB_PROJECT_ID AS Building_Mkey
					,TBuilding.TYPE_DESC AS Building_Name,thdr.STATUS_PERC,thdr.MKEY, TASK_NO, TASK_NAME, TASK_DESCRIPTION,
					thdr.TASK_PARENT_ID, thdr.TASK_MAIN_NODE_ID, ASSIGNED_TO, emst.EMP_FULL_NAME AS Assigned_To_Name,
					COMPLETION_DATE, thdr.status AS [Status], RESPONSIBLE_DEPARTMENT ,Dmst.TYPE_DESC as  RESPONSIBLE_DEPARTMENT_Name
					,chdr.RESPONSIBLE_PERSON,Rmst.EMP_FULL_NAME as RESPONSIBLE_PERSON_Name, chdr.JOB_ROLE , Jmst.TYPE_DESC as JOB_ROLE_Name
					,case when chdr.STATUS = ''I'' then ''Initiated'' 
					when chdr.STATUS = ''N'' then ''New'' when chdr.STATUS = ''C'' then ''Close'' end ''STATUS'',
					chdr.RAISED_AT,isnull(RaisedHDR.MAIN_ABBR,''General'') as RAISED_AT_Name,chdr.RAISED_AT_BEFORE
					, RaisedBeforeHDR.MAIN_ABBR as RAISED_AT_BEFORE_Name
					from COMPLIANCE_HDR chdr inner join TASK_HDR thdr on thdr.MKEY = chdr.TASK_NO_MKEY
					LEFT JOIN EMPLOYEE_MST emst ON thdr.ASSIGNED_TO = emst.MKEY AND emst.DELETE_FLAG = ''N''
					Inner JOIN TYPE_MST TProject ON TProject.TYPE_CODE = ''Project'' AND TProject.MASTER_MKEY = thdr.PROJECT_ID AND TProject.DELETE_FLAG = ''N''
					Inner JOIN TYPE_MST TBuilding ON TBuilding.TYPE_CODE = ''Project'' AND TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID AND TBuilding.DELETE_FLAG = ''N''
					left join TYPE_MST Dmst on chdr.RESPONSIBLE_DEPARTMENT = Dmst.MASTER_MKEY and Dmst.TYPE_CODE=''DEPARTMENT'' AND Dmst.DELETE_FLAG = ''N''
					left join employee_mst Rmst on rmst.MKEY = chdr.RESPONSIBLE_PERSON and Rmst.DELETE_FLAG = ''N''
					left join TYPE_MST Jmst on chdr.JOB_ROLE = Jmst.MASTER_MKEY and Jmst.TYPE_CODE=''JOBROLE'' AND Jmst.DELETE_FLAG = ''N''
					left JOIN APPROVAL_TEMPLATE_HDR RaisedHDR ON RaisedHDR.MKEY = chdr.RAISED_AT and RaisedHDR.DELETE_FLAG = ''N''
					left JOIN APPROVAL_TEMPLATE_HDR RaisedBeforeHDR ON RaisedBeforeHDR.MKEY = chdr.RAISED_AT_BEFORE and RaisedBeforeHDR.DELETE_FLAG = ''N''';
			 Set @WhereClause =' where chdr.TASK_TYPE = ' + CONVERT(NVARCHAR, @TaskTypeMkey) + '
					and chdr.PROPERTY In (SELECT mkey FROM #TableOutputProjectMkey)
					and chdr.BUILDING in (SELECT mkey FROM #TableOutputBuildingMkey)
					and RESPONSIBLE_DEPARTMENT in (SELECT mkey FROM #TableOutputResponsibleDepart)
					and chdr.RESPONSIBLE_PERSON in (SELECT mkey FROM #TableOutputResponsiblePerson)
					and chdr.JOB_ROLE in (SELECT mkey FROM #TableOutputJobRole)
					and chdr.STATUS in (SELECT mkey FROM #TableOutputStatus)
					and chdr.RAISED_AT in (SELECT mkey FROM #TableOutputRaisedAt)
					and chdr.RAISED_AT_BEFORE in (SELECT mkey FROM #TableOutputRaisedAtBefore)';
					

--Select AHDR.*
--from COMPLIANCE_HDR chdr Inner Join TASK_HDR thdr on thdr.MKEY = chdr.TASK_NO_MKEY
--left join PROJECT_TRL_APPROVAL_ABBR PABBR ON thdr.MKEY = PABBR.TASK_NO_MKEY and PABBR.DELETE_FLAG = 'N'
--left join PROJECT_HDR PHDR on PHDR.MKEY = PABBR.HEADER_MKEY
--left JOIN APPROVAL_TEMPLATE_HDR AHDR ON AHDR.MKEY = PABBR.APPROVAL_MKEY and AHDR.DELETE_FLAG = 'N'
--left join TYPE_MST Dmst on chdr.RESPONSIBLE_DEPARTMENT = Dmst.MASTER_MKEY and Dmst.TYPE_CODE='DEPARTMENT' AND Dmst.DELETE_FLAG = 'N'
--left join TYPE_MST Jmst on chdr.JOB_ROLE = Jmst.MASTER_MKEY and Jmst.TYPE_CODE='JOBROLE' AND Jmst.DELETE_FLAG = 'N'
--left join employee_mst Rmst on rmst.MKEY = chdr.RESPONSIBLE_PERSON and Rmst.DELETE_FLAG = 'N'
--LEFT JOIN TYPE_MST TProject ON TProject.TYPE_CODE = 'Project' AND TProject.MASTER_MKEY = chdr.PROPERTY AND TProject.DELETE_FLAG = 'N'
--LEFT JOIN TYPE_MST TBuilding ON TBuilding.TYPE_CODE = 'Project' AND TBuilding.MASTER_MKEY = chdr.BUILDING AND TBuilding.DELETE_FLAG = 'N'
--where chdr.PROPERTY = 157 and chdr.BUILDING = 468
----and RESPONSIBLE_DEPARTMENT = 134 and chdr.RESPONSIBLE_PERSON = 2693
--and chdr.DELETE_FLAG = 'N' and thdr.DELETE_FLAG = 'N';

		end

			IF @FILTER = 'Today'
			BEGIN
				SET @WhereClause += ' And (CONVERT(VARCHAR, thdr.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
										AND thdr.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
			END
			IF @FILTER = 'Pending'
			BEGIN
				SET @WhereClause +=' AND (STATUS_PERC = 0.0 AND thdr.completion_date < GETDATE() 
										and thdr.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
			END
			IF @FILTER = 'Review'
			BEGIN
				SET @WhereClause += ' AND (thdr.STATUS IN (''Close Initiated'',''Cancel Initiated''))';
			END
			IF @FILTER = 'Completed'
			BEGIN
				SET @WhereClause += ' And (thdr.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
			END
			IF @FILTER = 'Cancelled'
			BEGIN
				SET @WhereClause +=' AND (thdr.status IN (''CANCEL'', ''CANCELLED'')) ';
			END
			IF @FILTER = 'Overdue'
			BEGIN
				SET @WhereClause += ' And (thdr.completion_date < GETDATE() AND thdr.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
			END
			IF @FILTER = 'Future'
			BEGIN
				SET @WhereClause +=' AND (thdr.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
										and thdr.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
			END
			print '@ProjectMkey  '+ @ProjectMkey
			
			if (((@ProjectMkey != null or @BuildingMkey != null))  -- (@ProjectMkey != '' or @BuildingMkey != '') OR
				OR (@WhereClause  is not null OR @WhereClause  != null))
			Begin
			print '@ProjectMkey insdeid '+ @ProjectMkey
				Set @sql +=' '+ @WhereClause + ' order by thdr.PROJECT_ID, thdr.SUB_PROJECT_ID,thdr.MKEY; ';
				print '@sql: '+ @sql
			End
			Else
			Begin
			print '@ProjectMkey Outside '+ @ProjectMkey
				set @sql += ' WHERE thdr.DELETE_FLAG = ''N'' And (RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR,@Session_User_Id) +' 
						OR thdr.CREATED_BY = '+CONVERT(NVARCHAR, @Session_User_Id) +' )
						Order by thdr.PROJECT_ID, thdr.SUB_PROJECT_ID,thdr.MKEY; ';
			End
			
			EXEC Sp_executesql @sql;

			Select 'Todays' as DurationFilter,Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where 
			CASE
				WHEN @TaskTypeMkey != 0    THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
			AND	CASE
					WHEN ISNULL(@ProjectMkey, '') <> '' THEN
						CASE WHEN thdr.PROJECT_ID in (SELECT mkey FROM #TableOutputProjectMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN ISNULL(@BuildingMkey , '') <> '' THEN 
						CASE WHEN thdr.SUB_PROJECT_ID in (SELECT mkey FROM #TableOutputBuildingMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			And (CONVERT(VARCHAR, thdr.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
			AND thdr.status not IN ('CANCEL', 'COMPLETED','CANCELLED'))
			
			Union 
			
			Select 'Pending' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where 
			CASE
				WHEN @TaskTypeMkey != 0    THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
				AND	CASE
					WHEN ISNULL(@ProjectMkey, '') <> '' THEN
						CASE WHEN thdr.PROJECT_ID in (SELECT mkey FROM #TableOutputProjectMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN ISNULL(@BuildingMkey, '') <> '' THEN 
						CASE WHEN thdr.SUB_PROJECT_ID in (SELECT mkey FROM #TableOutputBuildingMkey)  THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			AND (STATUS_PERC = 0.0 AND thdr.completion_date < GETDATE() 
			and thdr.status IN ('CREATED', 'SUB TASK CREATED','WORK IN PROGRESS','RE-WORK'))
			
			Union 
			
			Select 'Review' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where 
			CASE
				WHEN @TaskTypeMkey != 0    THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
			AND	CASE
					WHEN ISNULL(@ProjectMkey, '') <> '' THEN  
						CASE WHEN thdr.PROJECT_ID in (SELECT mkey FROM #TableOutputProjectMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN ISNULL(@BuildingMkey, '') <> '' THEN  
						CASE WHEN thdr.SUB_PROJECT_ID in (SELECT mkey FROM #TableOutputBuildingMkey)  THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			AND (thdr.STATUS IN ('Close Initiated','Cancel Initiated'))
			
			Union 
			
			Select 'Overdue' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where
			CASE
				WHEN @TaskTypeMkey != 0    THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
			AND	CASE
					WHEN ISNULL(@ProjectMkey, '') <> '' THEN 
						CASE WHEN thdr.PROJECT_ID in (SELECT mkey FROM #TableOutputProjectMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN ISNULL(@BuildingMkey, '') <> '' THEN 
						CASE WHEN thdr.SUB_PROJECT_ID in (SELECT mkey FROM #TableOutputBuildingMkey)  THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			And (thdr.completion_date < GETDATE() AND thdr.status not IN ('CANCEL', 'COMPLETED','CANCELLED')) 
			
			Union 
			
			Select 'Future' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where 
			CASE
				WHEN @TaskTypeMkey != 0  THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
			AND	CASE
					WHEN ISNULL(@ProjectMkey, '') <> '' THEN
						CASE WHEN thdr.PROJECT_ID in (SELECT mkey FROM #TableOutputProjectMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN ISNULL(@BuildingMkey, '') <> '' THEN 
						CASE WHEN thdr.SUB_PROJECT_ID in (SELECT mkey FROM #TableOutputBuildingMkey)  THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			AND (thdr.STATUS NOT IN ('COMPLETED','CANCELLED','Close Initiated','Cancel Initiated')) 
			and thdr.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103); 

        -- Final execution
        --PRINT '@sql: ' + @sql;
        --EXEC sp_executesql @sql;

        -- Return summary counts for filters (if needed) here...
        -- You can retain your UNION queries for 'Todays', 'Pending', etc., after this

    END TRY
    BEGIN CATCH
        SELECT
            ERROR_NUMBER() AS ERRORNUMBER,
            ERROR_SEVERITY() AS ERRORSEVERITY,
            ERROR_STATE() AS ERRORSTATE,
            ERROR_PROCEDURE() AS ERRORPROCEDURE,
            ERROR_LINE() AS ERRORLINE,
            ERROR_MESSAGE() AS ERRORMESSAGE;

        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
        SET @ERROR_MESSAGE = ERROR_MESSAGE();

        EXEC Sp_p_tms_insert_error_des
            @Session_User_Id,
            'TMS',
            'Get Task Projects',
            @ERROR_MESSAGE,
            'Get';
    END CATCH
END
------------------------------------------------------------------------
12-06-2025
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_SCHEDULED_MSP]    Script Date: 12-06-2025 11:19:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--EXEC SP_GET_SCHEDULED_MSP 157,461,926,1
-- exec  SP_GET_SCHEDULED_MSP 214,325,926,1
ALTER PROCEDURE [dbo].[SP_GET_SCHEDULED_MSP]
	-- Add the parameters for the stored procedure here
	@ProjectMkey int,
	@BuildingMkey int,
	@Session_User_Id   INT,  
	@Business_Group_Id INT

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
		Select WBS,TASK_NAME as Name,Duration,Start_Date,Finish_Date
		,Predecessors, isnull(emst.EMP_FULL_NAME,'') as Resource_Names,isnull(emst.EMP_FULL_NAME,'') as Text1,Outline_Level,thdr.MKEY as Number1,Unique_ID
		,CONVERT(nvarchar(100),Percent_Complete) as Percent_Complete
		From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.Resource_Names = emst.EMP_FULL_NAME and emst.DELETE_FLAG = 'N'
		Where Is_Scheduled is not null 
		And thdr.DELETE_FLAG = 'N' 
		And thdr.PROJECT_ID = @ProjectMkey 
		And thdr.SUB_PROJECT_ID = @BuildingMkey;
END

------------------------------------------------------------------------


go
ALTER PROCEDURE [dbo].[Sp_insert_scheduled_msp](@Parameter1 VARCHAR(100) = NULL,--[Project]       
                                                @Parameter2 VARCHAR(100) = NULL,--Building      
                                                @Parameter3 VARCHAR(100) = NULL,--TASK_NO         
                                                @Parameter4 VARCHAR(100) = NULL,--TASK_DESC      
                                                @Parameter5 VARCHAR(100) = NULL,--DURATION        
                                                @Parameter6 VARCHAR(100) = NULL,--START       
                                                @Parameter7 VARCHAR(100) = NULL --FINISH       
)
AS
  BEGIN
      DECLARE @DCount            INT,
              @ROOT_MKEY         INT,
              @ROOT_NUMBER       NVARCHAR(50),
              @Mkey              INT,
              @WBS               NVARCHAR(50),
              @Name              NVARCHAR(500),
              @Duration          NVARCHAR(100),
              @Start_Date        DATETIME,
              @Finish_Date       DATETIME,
              @Predecessors      NVARCHAR(100),
              @Resource_Names    NVARCHAR(100),
              @Text1             NVARCHAR(100),
              @Outline_Level     INT,
              @Number1           INT,
              @Unique_ID         INT,
              @Percent_Complete  NUMERIC(18, 2),
              @Created_By        INT,
              @Creation_Date     DATETIME,
              @CreatorID         INT,
              @AssigneeID        INT,
              @TaskMkey          INT,
              @Task_Parent_ID    INT,
              @Task_Main_Node_ID INT,
              @Task_No           NVARCHAR(20),
              @Task_Type         INT,
              @Category          INT,
              @FileName          NVARCHAR(255),
              @MPP_NAME          NVARCHAR(255)
      DECLARE @lastIndex INT

      SET @DCount = 0;
      SET @lastIndex = 0;

      SELECT @Task_Type = master_mkey
      FROM   type_mst
      WHERE  delete_flag = 'N'
             AND type_code = 'TASK_TYPE'
             AND type_desc = 'MSP';

      SELECT @Category = master_mkey
      FROM   type_mst
      WHERE  type_code = 'CATEGORY'
             AND type_desc = 'PUBLIC'
             AND delete_flag = 'N';

      SET @Parameter1=Isnull(@Parameter1, '0');
      SET @Parameter2=Isnull(@Parameter2, '0');

      UPDATE msp_default_migration_table
      SET    remarks = 'Error : Resource Not Found'
      FROM   msp_default_migration_table MT
             LEFT JOIN employee_mst EMP
                    ON MT.resource_names = EMP.emp_full_name
             LEFT JOIN employee_mst Creator
                    ON MT.text1 = Creator.emp_full_name
      WHERE  ( Isnull(Creator.mkey, 0) = 0
                OR Isnull(EMP.mkey, 0) = 0 );

      SELECT wbs,
             Count(wbs) C_WBS
      INTO   #tempwbs
      FROM   msp_default_migration_table
      GROUP  BY wbs
      HAVING Count(wbs) > 1;

      UPDATE msp_default_migration_table
      SET    remarks = 'Error : Duplicate WBS No'
      FROM   msp_default_migration_table MT
             JOIN #tempwbs temp
               ON MT.wbs = temp.wbs;

      DROP TABLE #tempwbs;

      SELECT unique_id,
             Count(unique_id) C_unique_id
      INTO   #tempuniqueid
      FROM   msp_default_migration_table
      GROUP  BY unique_id
      HAVING Count(unique_id) > 1;

      UPDATE msp_default_migration_table
      SET    remarks = 'Error : Duplicate unique_id'
      FROM   msp_default_migration_table MT
             JOIN #tempuniqueid temp
               ON MT.unique_id = temp.unique_id

      DROP TABLE #tempuniqueid;

	  Select WBS ,count(WBS) as Count_Wbs 
			INTO   #tempCWBS
			from TASK_HDR 
			where PROJECT_ID = @Parameter1 and  SUB_PROJECT_ID = @Parameter2
			and Is_Scheduled is not null
			group by WBS 
			having COUNT(WBS) > 1

      UPDATE msp_default_migration_table
      SET    remarks = 'Error : Duplicate WBS'
      FROM   msp_default_migration_table MT
             JOIN #tempCWBS temp
               ON MT.WBS = temp.WBS

      DROP TABLE #tempCWBS;

	  SELECT Outline_Level,
             Count(wbs) C_Outline_Level
      INTO   #tempOutLineLevel
      FROM   msp_default_migration_table
	  WHERE  Outline_Level = 0
      GROUP  BY Outline_Level
      HAVING Count(Outline_Level) > 1;

      UPDATE msp_default_migration_table
      SET    remarks = 'Error : OutLine Level Cannot be 0'
      FROM   msp_default_migration_table MT
             JOIN #tempOutLineLevel temp
               ON MT.Outline_Level = temp.Outline_Level;

      DROP TABLE #tempOutLineLevel;


      SELECT @DCount = Isnull(Count(*), 0)
      FROM   msp_default_migration_table MT
      WHERE  remarks LIKE '%Error%';

      IF( @DCount <= 0 )
        BEGIN
            SELECT @DCount = Isnull(Count(*), 0)
            FROM   msp_default_migration_table MT
            WHERE  outline_level = 1

            --AND unique_id = 1     
            --order by Unique_id      
            IF( @DCount > 0 )
              BEGIN
                  SELECT @WBS = wbs,
                         @Name = NAME,
                         @Duration = duration,
                         @Start_Date = start_date,
                         @Finish_Date = finish_date,
                         @Predecessors = predecessors,
                         @Resource_Names = resource_names,
                         @Text1 = text1,
                         @Outline_Level = outline_level,
                         @Number1 = number1,
                         @Unique_ID = unique_id,
                         @Percent_Complete = percent_complete,
                         @Created_By = MT.created_by,
                         @Creation_Date = MT.creation_date,
                         @AssigneeID = emp.mkey,
                         @CreatorID = Creator.mkey,
                         @FileName = [filename],
                         @MPP_NAME = mpp_name
                  FROM   msp_default_migration_table MT
                         LEFT JOIN employee_mst EMP
                                ON MT.resource_names = EMP.emp_full_name
                         LEFT JOIN employee_mst Creator
                                ON MT.text1 = Creator.emp_full_name
                  WHERE  outline_level = 1

                  IF( @Number1 > 0 )/* CHECK WHETHER PROJECT ALREADY DEFINED*/
                    BEGIN
                        SELECT @ROOT_MKEY = mkey,
                               @ROOT_NUMBER = task_no,
                               @Task_Main_Node_ID = mkey
                        FROM   task_hdr
                        WHERE  mkey = @Number1

                        INSERT INTO task_hdr_h
                        SELECT Getdate(),
                               *
                        FROM   task_hdr
                        WHERE  mkey = @Number1

                        UPDATE task_hdr
                        SET    task_name = @Name,
                               task_description = @Name,
                               assigned_to = @AssigneeID,
                               task_created_by = @CreatorID,
                               start_date = @start_date,
                               completion_date = @Finish_Date,
                               is_scheduled = 'Y',
                               wbs = @WBS,
                               duration = @Duration,
                               sch_start_date = @Start_Date,
                               finish_date = @Finish_Date,
                               predecessors = @Predecessors,
                               resource_names = @Resource_Names,
                               text1 = @Text1,
                               outline_level = @Outline_Level,
                               number1 = @Number1,
                               unique_id = @Unique_ID,
                               percent_complete = @Percent_Complete,
                               task_type = @Task_Type,
                               attribute4 = @FileName,
                               attribute5 = @MPP_NAME
                        WHERE  mkey = @Number1
                               AND ( status NOT IN ( 'COMPLETED', 'CANCEL' )
                                      OR predecessors > 0 )
                               AND is_scheduled = 'Y'

                        UPDATE msp_default_migration_table
                        SET    process_flag = 'Y',
                               remarks = 'Task_No Updated Successfully'
                        WHERE  unique_id = @Unique_ID
                               AND outline_level = @Outline_Level
                    END
                  ELSE
                    /* PROJECT NOT DEFINED SO CREATE A ROOT TASK WITH DETAILS*/
                    BEGIN
                        DECLARE @TableOutput_TASK_DETAILS TABLE
                          (
                             mkey              INT,
                             task_parent_id    NVARCHAR(20),
                             task_main_node_id NVARCHAR(20),
                             task_no           NVARCHAR(20)
                          )

                        PRINT 'INM' + @Resource_Names;

                        INSERT INTO @TableOutput_TASK_DETAILS
                        EXEC [dbo].[Sp_insert_task_details]
                          '0000',
                          @Name,
                          @Name,
                          @Category,
                          @Parameter1,
                          @Parameter2,
                          @Finish_Date,
                          @AssigneeID,
                          -- @Resource_Names,     
                          'Scheduled',
                          'N',
                          --@START_DATE          DATETIME,       
                          '1900-01-01 00:00:00.000',
                          '1900-01-01 00:00:00.000',
                          0,
                          'WIP',
                          '0',
                          @CreatorID,
                          1,
                          @TASK_TYPE,
                          '',
                          '',
                          '',
                          '',
                          @FileName,
                          @MPP_NAME,
                          @CreatorID,
                          '1900-01-01 00:00:00.000',
                          @CreatorID,
                          '1900-01-01 00:00:00.000'

                        PRINT 'INsert ed' + @Resource_Names

                        --select * from task_hdr      
                        SELECT @TaskMkey = mkey,
                               @Task_Parent_ID = task_parent_id,
                               @Task_Main_Node_ID = task_main_node_id,
                               @Task_No = task_no
                        FROM   @TableOutput_TASK_DETAILS

                        UPDATE task_hdr
                        SET    start_date = @start_date,
                               is_scheduled = 'Y',
                               wbs = @WBS,
                               duration = @Duration,
                               sch_start_date = @Start_Date,
                               finish_date = @Finish_Date,
                               predecessors = @Predecessors,
                               resource_names = @Resource_Names,
                               text1 = @Text1,
                               outline_level = @Outline_Level,
                               number1 = @Number1,
                               unique_id = @Unique_ID,
                               percent_complete = @Percent_Complete,
                               attribute4 = @FileName,
                               attribute5 = @MPP_NAME
                        WHERE  mkey = @TaskMkey

                        UPDATE msp_default_migration_table
                        SET    number1 = @TaskMkey,
                               process_flag = 'Y',
                               remarks = 'Created Successfully--Task_No-->'
                                         + @Task_No
                        WHERE  unique_id = @Unique_ID
                               AND outline_level = @Outline_Level
                    END

                  /*Logic For SubTask Creation */
                  DECLARE pcursurbreak CURSOR FOR
                    SELECT wbs,
                           NAME,
                           duration,
                           start_date,
                           finish_date,
                           predecessors,
                           resource_names,
                           text1,
                           outline_level,
                           number1,
                           unique_id,
                           percent_complete,
                           --MT.created_by,     
                           Creator.mkey created_by,
                           MT.creation_date,
                           Creator.mkey 'CreatorID',
                           emp.mkey     'AssigneeID',
                           [filename],
                           mpp_name
                    FROM   msp_default_migration_table MT
                           LEFT JOIN employee_mst EMP
                                  ON MT.resource_names = EMP.emp_full_name
                           LEFT JOIN employee_mst Creator
                                  ON MT.text1 = Creator.emp_full_name
                    WHERE  outline_level > 1
                           AND Isnull(process_flag, 'N') = 'N'
                    ORDER  BY MT.mkey,
                              unique_id

                  OPEN pcursurbreak

                  FETCH next FROM pcursurbreak INTO @WBS, @Name, @Duration,
                  @Start_Date,
                  @Finish_Date, @Predecessors, @Resource_Names, @Text1,
                  @Outline_Level
                  ,
                  @Number1, @Unique_ID, @Percent_Complete, @Created_By,
                  @Creation_Date
                  ,
                  @CreatorID, @AssigneeID, @FileName, @MPP_NAME

                  WHILE @@FETCH_STATUS = 0
                    BEGIN
                        PRINT '@Number1-->' + Cast(@Number1 AS VARCHAR)

                        IF( @Number1 <= 0 )
                          BEGIN
                              SET @lastIndex=0;
                              SET @TaskMkey=0;
                              SET @Task_Parent_ID=0;
                              SET @Task_No=''
                              SET @lastIndex = ( Len(@WBS) ) -
                                               Charindex('.', Reverse(
                                               @WBS))

                              SELECT @Task_No = Substring(@WBS, 0,
                                                @lastindex + 1)

                              SELECT @TaskMkey = number1
                              FROM   msp_default_migration_table
                              WHERE  wbs = '' + @Task_No + ''

                              PRINT '@TaskMkey-->'
                                    + Cast(@TaskMkey AS VARCHAR)

                              SELECT @TaskMkey = mkey,
                                     @Task_Parent_ID = mkey,
                                     @ROOT_NUMBER = task_no
                              FROM   task_hdr
                              WHERE  mkey = @TaskMkey

                              IF( @TaskMkey = 0 )
                                BEGIN
                                    SET @ROOT_NUMBER='';
                                    SET @Task_Parent_ID=0;
                                END
                              ELSE IF( @TaskMkey > 0 )
                                BEGIN
                                    --select * from [TEMPLATE_TASK_DETAILS]      
                                    DECLARE @TableOutput_TASK_NODE_DETAILS TABLE
                                      (
                                         mkey              INT,
                                         task_parent_id    NVARCHAR(20),
                                         task_main_node_id NVARCHAR(20),
                                         task_no           NVARCHAR(20)
                                      )

                                    PRINT 'in insert sub node'

                                    INSERT INTO @TableOutput_TASK_NODE_DETAILS
                                    EXEC [dbo].[Sp_insert_task_node_details]
                                      @Task_Parent_ID,
                                      @Name,
                                      @Name,
                                      @Category,
                                      @Parameter1,
                                      @Parameter2,
                                      @Finish_Date,
                                      @Resource_Names,
                                      'Scheduled',
                                      'N',
                                      '1900-01-01 00:00:00.000',
                                      '1900-01-01 00:00:00.000',
                                      @Task_Parent_ID,
                                      @Task_Main_Node_ID,
                                      @ROOT_NUMBER,
                                      @Task_Type,-- Task_type  
                                      'WIP',
                                      '0',
                                      @CreatorID,
                                      1,
                                      '',
                                      '',
                                      '',
                                      '',
                                      @FileName,-- @ATTRIBUTE4
                                      @MPP_NAME,-- @ATTRIBUTE5    
                                      @CreatorID,
                                      '1900-01-01 00:00:00.000',
                                      @CreatorID,
                                      '1900-01-01 00:00:00.000',
                                      @Task_Parent_ID,
                                      'Low'

                                    PRINT 'Sub node inserted'

                                    SELECT @TaskMkey = mkey,
                                           @Task_Parent_ID = task_parent_id,
                                           @Task_Main_Node_ID =
                                           task_main_node_id,
                                           @Task_No = task_no
                                    FROM   @TableOutput_TASK_NODE_DETAILS

                                    UPDATE task_hdr
                                    SET    start_date = @start_date,
                                           is_scheduled = 'Y',
                                           wbs = @WBS,
                                           duration = @Duration,
                                           sch_start_date = @Start_Date,
                                           finish_date = @Finish_Date,
                                           predecessors = @Predecessors,
                                           resource_names = @Resource_Names,
                                           text1 = @Text1,
                                           outline_level = @Outline_Level,
                                           number1 = @Number1,
                                           unique_id = @Unique_ID,
                                           percent_complete = @Percent_Complete,
                                           attribute4 = @FileName,
                                           attribute5 = @MPP_NAME
                                    WHERE  mkey = @TaskMkey

                                    UPDATE msp_default_migration_table
                                    SET    number1 = @TaskMkey,
                                           process_flag = 'Y',
                                remarks = 'Created Successfully--Task_No-->'
                                          + @Task_No
                                    WHERE  unique_id = @Unique_ID
                                           AND outline_level = @Outline_Level
                                END

                              PRINT 'for @WBS' + @WBS + '-->@ROOT_NUMBER is '
                                    + @ROOT_NUMBER

                              PRINT 'for @WBS @Task_Parent_ID '
                                    + Cast(@Task_Parent_ID AS VARCHAR)

                              PRINT 'for @WBS @Task_Main_Node_ID '
                                    + Cast(@Task_Main_Node_ID AS VARCHAR)
                          END
                        ELSE IF( @Number1 > 0 )/*Start update logic*/
                          BEGIN
                              PRINT 'update'

                              INSERT INTO task_hdr_h
                              SELECT Getdate(),
                                     *
                              FROM   task_hdr
                              WHERE  mkey = @Number1

                              UPDATE task_hdr
                              SET    task_name = @Name,
                                     task_description = @Name,
                                     assigned_to = @AssigneeID,
                                     task_created_by = @CreatorID,
                                     start_date = @start_date,
                                     completion_date = @Finish_Date,
                                     is_scheduled = 'Y',
                                     wbs = @WBS,
                                     duration = @Duration,
                                     sch_start_date = @Start_Date,
                                     finish_date = @Finish_Date,
                                     predecessors = @Predecessors,
                                     resource_names = @Resource_Names,
                                     text1 = @Text1,
                                     outline_level = @Outline_Level,
                                     number1 = @Number1,
                                     unique_id = @Unique_ID,
                                     percent_complete = @Percent_Complete,
                                     attribute4 = @FileName,
                                     attribute5 = @MPP_NAME
                              WHERE  mkey = @Number1
                                     AND ( status NOT IN ( 'COMPLETED', 'CANCEL'
                                                         )
                                            OR Isnull(predecessors, '0') != '0'
                                         )
                                     AND is_scheduled = 'Y'

                              UPDATE msp_default_migration_table
                              SET    process_flag = 'Y',
                                     remarks = 'Task_No Updated Successfully'
                              WHERE  unique_id = @Unique_ID
                                     AND outline_level = @Outline_Level
                          END

                        FETCH next FROM pcursurbreak INTO @WBS, @Name, @Duration
                        ,
                        @Start_Date,
                        @Finish_Date, @Predecessors, @Resource_Names, @Text1,
                        @Outline_Level
                        ,
                        @Number1, @Unique_ID, @Percent_Complete, @Created_By,
                        @Creation_Date
                        ,
                        @CreatorID, @AssigneeID, @FileName, @MPP_NAME
                    END

                  CLOSE pcursurbreak

                  DEALLOCATE pcursurbreak
              END
        END

      SELECT *
      FROM   msp_default_migration_table

      -- delete from  MSP_Default_Migration_Table    
    --  TRUNCATE TABLE msp_default_migration_table
  END
--exec [SP_INSERT_SCHEDULED_MSP]  323,324    
--select * from task_hdr where mkey>237  and task_main_node_id=238    
--UPDATE task_hdr SET TASK_NAME='TEST',TASK_DESCRIPTION='TEST',PROJECT_ID=1,SUB_PROJECT_id=0,Is_Scheduled='N',RESPOSIBLE_EMP_MKEY=0,CREATED_BY=0,TASK_CREATED_BY=0,ASSIGNED_TO=0 WHERE MKEY=235    
--update task_hdr set SUB_PROJECT_ID=0 where  mkey>237  and task_main_node_id=238    
--SELECT * FROM TYPE_MST WHERE TYPE_CODE='PROJECT'    
--select * from MSP_Default_Migration_Table      
/*      
declare @x nvarchar(20)       
set @x= '1.2'      
 DECLARE @lastIndex int      
       SET @lastIndex = (LEN(@x)) -  CHARINDEX('.', REVERSE(@x))       
    
     select SUBSTRING(@x, 0, @lastindex + 1)       
           
select REVERSE(@x)      
SELECT RIGHT(@x , CHARINDEX ('.' ,REVERSE(@x))-1)      
select SUBSTRING(@x,len(@x),CHARINDEX('.',@x)-1 )      
*/



USE [TaskManagement_UAT2]
GO
/****** Object:  StoredProcedure [dbo].[SP_UPDATE_SCHEDULED_MSP]    Script Date: 12-06-2025 17:36:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

    
    
ALTER PROCEDURE [dbo].[SP_UPDATE_SCHEDULED_MSP] (@Parameter1 VARCHAR(100) = NULL,     -- Prooject ID
                                                @Parameter2 VARCHAR(100) = NULL,     -- Sub Project ID
                                                @Parameter3 VARCHAR(100) = NULL,     
                                                @Parameter4 VARCHAR(100) = NULL,     
                                                @Parameter5 VARCHAR(100) = NULL,     
                                                @Parameter6 VARCHAR(100) = NULL,   -- Session User ID  
                                                @Parameter7 VARCHAR(100) = NULL  -- Group ID
)     
AS     
  BEGIN     
      DECLARE @DCount            INT,     
              @ROOT_MKEY         INT,     
              @ROOT_NUMBER       NVARCHAR(50),     
              @Mkey              INT,     
              @WBS               NVARCHAR(50),     
              @Name              NVARCHAR(500),     
              @Duration          NVARCHAR(100),     
              @Start_Date        DATETIME,     
              @Finish_Date       DATETIME,     
              @Predecessors      NVARCHAR(100),     
              @Resource_Names    NVARCHAR(100),     
              @Text1             NVARCHAR(100),     
              @Outline_Level     INT,     
              @Number1           INT,     
              @Unique_ID         INT,     
			  @Percent_Complete  NUMERIC(18,2),    
              @Created_By        INT,     
              @Creation_Date     DATETIME,     
              @CreatorID         INT,     
              @AssigneeID        INT,     
              @TaskMkey          INT,     
              @Task_Parent_ID    INT,     
              @Task_Main_Node_ID INT,     
              @Task_No           NVARCHAR(20),
			  @Task_Type         INT,
			  @Category			 INT,
			  @FileName			NVARCHAR(255),
			  @MPP_NAME			NVARCHAR(255)
      DECLARE @lastIndex INT     
    
      SET @DCount=0     
    
      SET @lastIndex=0     
    
			SELECT @Task_Type = MASTER_MKEY FROM TYPE_MST WHERE DELETE_FLAG = 'N' AND TYPE_CODE = 'TASK_TYPE' AND TYPE_DESC = 'MSP';
			SELECT @Category = MASTER_MKEY FROM TYPE_MST WHERE TYPE_CODE='CATEGORY' And TYPE_DESC ='PUBLIC' and DELETE_FLAG = 'N';

			set @Parameter1=isnull(@Parameter1,'0')    
    
			set @Parameter2=isnull(@Parameter2,'0')    
    
			update msp_default_migration_table set remarks='Error : Resource Not Found'    
			FROM   msp_default_migration_table MT     
								 LEFT JOIN employee_mst EMP     
										ON MT.resource_names = EMP.emp_full_name     
								 LEFT JOIN employee_mst Creator     
										ON MT.text1 = Creator.emp_full_name     
			where (isnull(Creator.mkey,0) = 0 or isnull(EMP.mkey,0) = 0); 
			
			
			Select WBS ,count(WBS) as Count_Wbs 
			INTO   #tempCWBS
			from TASK_HDR 
			where PROJECT_ID = @Parameter1 and  SUB_PROJECT_ID = @Parameter2
			and Is_Scheduled is not null
			group by WBS 
			having COUNT(WBS) > 1

			UPDATE msp_default_migration_table
			SET    remarks = 'Error : Duplicate WBS'
			FROM   msp_default_migration_table MT
				JOIN #tempCWBS temp
				ON MT.WBS = temp.WBS

			DROP TABLE #tempCWBS;
    
		SELECT Outline_Level,
             Count(wbs) C_Outline_Level
      INTO   #tempOutLineLevel
      FROM   msp_default_migration_table
	  WHERE  Outline_Level = 0
      GROUP  BY Outline_Level
      HAVING Count(Outline_Level) > 1;

      UPDATE msp_default_migration_table
      SET    remarks = 'Error : OutLine Level Cannot be 0'
      FROM   msp_default_migration_table MT
             JOIN #tempOutLineLevel temp
               ON MT.Outline_Level = temp.Outline_Level;

      DROP TABLE #tempOutLineLevel;

      SELECT @DCount = Isnull(Count(*), 0)     
      FROM   msp_default_migration_table MT     
      WHERE  remarks like '%Error%'    
          
  IF( @DCount <= 0 )     
  BEGIN     
    
      SELECT @DCount = Isnull(Count(*), 0)     
      FROM   msp_default_migration_table MT     
      WHERE  outline_level = 1     
             --AND unique_id = 1     
    
      --order by Unique_id      
      IF( @DCount > 0 )     
        BEGIN     
    
            SELECT @WBS = wbs,     
                   @Name = NAME,     
                   @Duration = duration,     
                   @Start_Date = start_date,     
                   @Finish_Date = finish_date,     
                   @Predecessors = predecessors,     
                   @Resource_Names = resource_names,     
                   @Text1 = text1,     
                   @Outline_Level = outline_level,     
                   @Number1 = number1,     
                   @Unique_ID = unique_id,     
                   @Percent_Complete=Percent_Complete,    
                   @Created_By = MT.created_by,     
                   @Creation_Date = MT.creation_date,     
                   @AssigneeID = emp.mkey,     
                   @CreatorID = Creator.mkey,
				   @FileName = [FileName],
				   @MPP_NAME = mpp_name
            FROM   msp_default_migration_table MT     
                   LEFT JOIN employee_mst EMP     
                          ON MT.resource_names = EMP.emp_full_name     
                   LEFT JOIN employee_mst Creator     
                          ON MT.text1 = Creator.emp_full_name     
            WHERE  outline_level = 1   
    
            IF( @Number1 > 0 )/* CHECK WHETHER PROJECT ALREADY DEFINED*/     
              BEGIN     
    
                  SELECT @ROOT_MKEY = mkey,     
                         @ROOT_NUMBER = task_no,     
                         @Task_Main_Node_ID = mkey     
                  FROM   task_hdr     
                  WHERE  mkey = @Number1     
    
                  INSERT INTO task_hdr_h     
                  SELECT Getdate(), *     
                  FROM   task_hdr     
                  WHERE  mkey = @Number1;    
    
                  UPDATE task_hdr     
                  SET    task_name = @Name,     
                         task_description = @Name,     
                         assigned_to = @AssigneeID,     
                         task_created_by = @CreatorID,     
                         start_date = @start_date,     
                         completion_date = @Finish_Date,     
                         Is_Scheduled = 'Y',     
                         wbs = @WBS,     
                         duration = @Duration,     
                         sch_start_date = @Start_Date,     
                         finish_date = @Finish_Date,     
                         predecessors = @Predecessors,     
                         resource_names = @Resource_Names,     
                         text1 = @Text1,     
                         outline_level = @Outline_Level,     
                         number1 = @Number1,     
                         unique_id = @Unique_ID,    
						 Percent_Complete=@Percent_Complete,
						 task_type = @Task_Type,
						 ATTRIBUTE4 = @FileName ,
						 ATTRIBUTE5	= 	@MPP_NAME,
						 LAST_UPDATED_BY =  @Parameter6,
						 LAST_UPDATE_DATE = GETDATE()
                  WHERE  mkey = @Number1     
                         AND (    
                         status NOT IN ( 'COMPLETED', 'CANCEL' )     
                         or predecessors > 0 )    
                         AND Is_Scheduled = 'Y';    
    
                  UPDATE msp_default_migration_table     
                  SET    process_flag = 'Y',     
                         remarks = 'Task_No Updated Successfully'     
                  WHERE  unique_id = @Unique_ID     
                         AND outline_level = @Outline_Level     
              END     
            ELSE/* PROJECT NOT DEFINED SO CREATE A ROOT TASK WITH DETAILS*/     
              BEGIN     
                  DECLARE @TableOutput_TASK_DETAILS TABLE     
                    (     
                       mkey              INT,     
                       task_parent_id    NVARCHAR(20),     
                       task_main_node_id NVARCHAR(20),     
                       task_no           NVARCHAR(20)     
                    )     
				 print 'INM'+ @Resource_Names;
    
                  INSERT INTO @TableOutput_TASK_DETAILS     
                  EXEC [dbo].[Sp_insert_task_details]     
                    '0000',     
                    @Name,     
                    @Name,     
                    @Category,     
                    @Parameter1,     
                    @Parameter2,     
                    @Finish_Date,     
					@AssigneeID,  
                   -- @Resource_Names,     
                    'Scheduled',     
                    'N',     
                    --@START_DATE          DATETIME,       
                    '1900-01-01 00:00:00.000',     
                    '1900-01-01 00:00:00.000',     
                    0,     
                    'WIP',     
                    '0',     
                    @CreatorID,     
					1,   
					@TASK_TYPE,  
					'',     
                    '',     
                    '',     
                    '',     
                    @FileName ,
                    @MPP_NAME,     
                    @CreatorID,     
                    '1900-01-01 00:00:00.000',     
                    @CreatorID,     
                    '1900-01-01 00:00:00.000'     
    
   print 'INsert ed'+@Resource_Names  
    
                  --select * from task_hdr      
                  SELECT @TaskMkey = mkey,     
                         @Task_Parent_ID = task_parent_id,     
                         @Task_Main_Node_ID = task_main_node_id,     
                         @Task_No = task_no     
                  FROM   @TableOutput_TASK_DETAILS     
    
                  UPDATE task_hdr     
                  SET    start_date = @start_date,     
                         Is_Scheduled = 'Y',     
                         wbs = @WBS,     
                         duration = @Duration,     
                         sch_start_date = @Start_Date,     
                         finish_date = @Finish_Date,     
                         predecessors = @Predecessors,     
                         resource_names = @Resource_Names,     
                         text1 = @Text1,     
                         outline_level = @Outline_Level,     
                         number1 = @Number1,     
                         unique_id = @Unique_ID,    
						Percent_Complete=@Percent_Complete  ,   
						 ATTRIBUTE4 = @FileName ,
						 ATTRIBUTE5	= 	@MPP_NAME,
						 LAST_UPDATED_BY =  @Parameter6,
						 LAST_UPDATE_DATE = GETDATE()
                  WHERE  mkey = @TaskMkey     
    
                  UPDATE msp_default_migration_table     
                  SET    number1 = @TaskMkey,     
                         process_flag = 'Y',     
                         remarks = 'Created Successfully--Task_No-->'     
                                   + @Task_No     
                  WHERE  unique_id = @Unique_ID     
                         AND outline_level = @Outline_Level     
              END     
    
            /*Logic For SubTask Creation */     
            DECLARE pcursurbreak CURSOR FOR     
              SELECT wbs,     
                     NAME,     
                     duration,     
                     start_date,     
                     finish_date,     
                     predecessors,     
                     resource_names,     
                     text1,     
                     outline_level,     
                     number1,     
                     unique_id,    
					Percent_Complete,     
                     --MT.created_by,     
					Creator.mkey   created_by,  
                     MT.creation_date,     
                     Creator.mkey     'CreatorID',     
                     emp.mkey 'AssigneeID' ,
					 [FILENAME], 
					 mpp_name
              FROM   msp_default_migration_table MT     
                     LEFT JOIN employee_mst EMP     
                            ON MT.resource_names = EMP.emp_full_name     
                     LEFT JOIN employee_mst Creator     
                            ON MT.text1 = Creator.emp_full_name     
              WHERE  outline_level > 1     
                     AND Isnull(process_flag, 'N') = 'N'     
              ORDER  BY MT.mkey,     
                        unique_id     
    
            OPEN pcursurbreak     
    
            FETCH next FROM pcursurbreak INTO @WBS, @Name, @Duration,     
            @Start_Date,     
            @Finish_Date, @Predecessors, @Resource_Names, @Text1, @Outline_Level,     
            @Number1, @Unique_ID,@Percent_Complete, @Created_By, @Creation_Date, @CreatorID,     
            @AssigneeID,  @FileName ,@MPP_NAME
    
    WHILE @@FETCH_STATUS = 0     
              BEGIN     
              print '@Number1-->'+cast(@Number1 as varchar)    
                  IF( @Number1 <= 0 )     
                    BEGIN     
                        SET @lastIndex=0;     
                        SET @TaskMkey=0;     
                        SET @Task_Parent_ID=0;     
                        SET @Task_No=''     
                        SET @lastIndex = ( Len(@WBS) ) - Charindex('.', Reverse(@WBS))     
    
                        SELECT @Task_No = Substring(@WBS, 0, @lastindex + 1)     
    
                        SELECT @TaskMkey = number1     
                        FROM   msp_default_migration_table     
                        WHERE  wbs = '' + @Task_No + ''     
    
                        PRINT '@TaskMkey-->'     
                              + Cast(@TaskMkey AS VARCHAR)     
    
                        SELECT @TaskMkey = mkey,     
                               @Task_Parent_ID = mkey,     
                               @ROOT_NUMBER = task_no     
                        FROM   task_hdr     
                        WHERE  mkey = @TaskMkey     
    
                        IF( @TaskMkey = 0 )     
                          BEGIN     
                              SET @ROOT_NUMBER='';     
                              SET @Task_Parent_ID=0;     
                          END     
                        ELSE IF( @TaskMkey > 0 )     
                          BEGIN     
                              --select * from [TEMPLATE_TASK_DETAILS]      
                              DECLARE @TableOutput_TASK_NODE_DETAILS TABLE     
                                (     
                                   mkey              INT,     
                                   task_parent_id    NVARCHAR(20),     
                                   task_main_node_id NVARCHAR(20),     
                                   task_no           NVARCHAR(20)     
                                )     
				print 'in insert sub node'  
                              INSERT INTO @TableOutput_TASK_NODE_DETAILS     
                              EXEC [dbo].[Sp_insert_task_node_details]     
                                @Task_Parent_ID,     
                                @Name,     
                                @Name,     
                                @Category,     
                                @Parameter1,     
                                @Parameter2,     
                                @Finish_Date,     
                                @Resource_Names,     
                                'Scheduled',     
                                'N',     
                                '1900-01-01 00:00:00.000',     
                                '1900-01-01 00:00:00.000',     
                                @Task_Parent_ID,     
                                @Task_Main_Node_ID,     
                                @ROOT_NUMBER,     
								@Task_Type,-- Task_type  
                                'WIP',     
                                '0',     
                                @CreatorID, -- Task Created by     
                                1,   -- @APPROVER_ID   
                                '',      -- @IS_ARCHIVE
                                '',     
                                '',     
                                '',     
								@FileName , -- @ATTRIBUTE4
								@MPP_NAME,  -- @ATTRIBUTE5
                                @CreatorID,  -- @CREATED_BY    
                                '1900-01-01 00:00:00.000',     
                                @CreatorID,     
                                '1900-01-01 00:00:00.000',     
                                @Task_Parent_ID ,  
        'Low'  
        print 'Sub node inserted'  
    
                              SELECT @TaskMkey = mkey,     
                                     @Task_Parent_ID = task_parent_id,     
                                     @Task_Main_Node_ID = task_main_node_id,     
                                     @Task_No = task_no     
     FROM   @TableOutput_TASK_NODE_DETAILS     
    
                              UPDATE task_hdr     
                              SET    start_date = @start_date,     
                                     Is_Scheduled = 'Y',     
                                     wbs = @WBS,     
                                     duration = @Duration,     
                                     sch_start_date = @Start_Date,     
                                     finish_date = @Finish_Date,     
                                     predecessors = @Predecessors,     
                                     resource_names = @Resource_Names,     
                                     text1 = @Text1,     
                                     outline_level = @Outline_Level,     
                                     number1 = @Number1,     
                                     unique_id = @Unique_ID,    
									 Percent_Complete=@Percent_Complete,
									 ATTRIBUTE4 = @FileName ,
									ATTRIBUTE5	= 	@MPP_NAME,
									LAST_UPDATED_BY =  @Parameter6,
									LAST_UPDATE_DATE = GETDATE()
                              WHERE  mkey = @TaskMkey     
    
                              UPDATE msp_default_migration_table     
                              SET    number1 = @TaskMkey,     
                                     process_flag = 'Y',     
                          remarks = 'Created Successfully--Task_No-->'   
                                    + @Task_No     
                              WHERE  unique_id = @Unique_ID     
                                     AND outline_level = @Outline_Level     
                          END     
    
                        PRINT 'for @WBS' + @WBS + '-->@ROOT_NUMBER is '     
                              + @ROOT_NUMBER     
    
                        PRINT 'for @WBS @Task_Parent_ID '     
                              + Cast(@Task_Parent_ID AS VARCHAR)     
    
                        PRINT 'for @WBS @Task_Main_Node_ID '     
                              + Cast(@Task_Main_Node_ID AS VARCHAR)     
                    END     
                  ELSE IF( @Number1 > 0 )/*Start update logic*/     
                    BEGIN     
                        PRINT 'update'     
    
                        INSERT INTO task_hdr_h     
                        SELECT Getdate(),     
                               *     
                        FROM   task_hdr     
                        WHERE  mkey = @Number1     
    
                        UPDATE task_hdr     
                        SET    task_name = @Name,     
                               task_description = @Name,     
                               assigned_to = @AssigneeID,     
                               task_created_by = @CreatorID,     
                               start_date = @start_date,     
                               completion_date = @Finish_Date,     
                               Is_Scheduled = 'Y',     
                               wbs = @WBS,     
                               duration = @Duration,     
                               sch_start_date = @Start_Date,     
                               finish_date = @Finish_Date,     
                               predecessors = @Predecessors,     
                               resource_names = @Resource_Names,     
                               text1 = @Text1,     
                               outline_level = @Outline_Level,     
                               number1 = @Number1,     
                               unique_id = @Unique_ID,    
								Percent_Complete=@Percent_Complete ,
								ATTRIBUTE4 = @FileName ,
								ATTRIBUTE5	= 	@MPP_NAME,
								LAST_UPDATED_BY =  @Parameter6,
								LAST_UPDATE_DATE = GETDATE()
                        WHERE  mkey = @Number1     
                               AND (status NOT IN ( 'COMPLETED', 'CANCEL' )     
                                or isnull(predecessors,'0')!='0')    
                               AND Is_Scheduled = 'Y'     
    
                        UPDATE msp_default_migration_table     
                        SET    process_flag = 'Y',     
                               remarks = 'Task_No Updated Successfully'     
                        WHERE  unique_id = @Unique_ID     
                               AND outline_level = @Outline_Level     
                    END     
    
                  FETCH next FROM pcursurbreak INTO @WBS, @Name, @Duration,     
                  @Start_Date,     
                  @Finish_Date, @Predecessors, @Resource_Names, @Text1,     
                  @Outline_Level,     
                  @Number1, @Unique_ID,@Percent_Complete, @Created_By, @Creation_Date, @CreatorID,     
                  @AssigneeID,  @FileName ,@MPP_NAME     
              END     
    
            CLOSE pcursurbreak     
    
            DEALLOCATE pcursurbreak     
        END     
   END    
   select * from MSP_Default_Migration_Table    
  -- delete from  MSP_Default_Migration_Table    
  truncate table MSP_Default_Migration_Table
  END     
--exec [SP_INSERT_SCHEDULED_MSP]  323,324    
--select * from task_hdr where mkey>237  and task_main_node_id=238    
--UPDATE task_hdr SET TASK_NAME='TEST',TASK_DESCRIPTION='TEST',PROJECT_ID=1,SUB_PROJECT_id=0,Is_Scheduled='N',RESPOSIBLE_EMP_MKEY=0,CREATED_BY=0,TASK_CREATED_BY=0,ASSIGNED_TO=0 WHERE MKEY=235    
--update task_hdr set SUB_PROJECT_ID=0 where  mkey>237  and task_main_node_id=238    
--SELECT * FROM TYPE_MST WHERE TYPE_CODE='PROJECT'    
--select * from MSP_Default_Migration_Table      
/*      
declare @x nvarchar(20)       
set @x= '1.2'      
 DECLARE @lastIndex int      
       SET @lastIndex = (LEN(@x)) -  CHARINDEX('.', REVERSE(@x))       
    
     select SUBSTRING(@x, 0, @lastindex + 1)       
           
select REVERSE(@x)      
SELECT RIGHT(@x , CHARINDEX ('.' ,REVERSE(@x))-1)      
select SUBSTRING(@x,len(@x),CHARINDEX('.',@x)-1 )      
*/ 


USE [TaskManagement_UAT2]
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_TASK_PROJECTS_BY_TASK_TYPE_NT]    Script Date: 12-06-2025 10:18:52 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- SP_GET_TASK_PROJECTS_BY_TASK_TYPE_NT 
ALTER PROCEDURE [dbo].[SP_GET_TASK_PROJECTS_BY_TASK_TYPE_NT]
    @TASK_TYPE NVARCHAR(255),
	-- Common for all task type
    @ProjectMkey NVARCHAR(255) = NULL,
    @BuildingMkey NVARCHAR(255) = NULL,
    @FILTER VARCHAR(MAX) = NULL,
    -- Approval filter
	@BUILDING_TYPE NVARCHAR(MAX) = NULL,
    @BUILDING_STANDARD NVARCHAR(MAX) = NULL,
    @STATUTORY_AUTHORITY NVARCHAR(MAX) = NULL,
	-- Compliance Filter
	@ResponsibleDepart NVARCHAR(MAX) = NULL,
    @JobRole NVARCHAR(MAX) = NULL,
    @ResponsiblePerson NVARCHAR(MAX)= NULL,
	@RaisedAt NVARCHAR(MAX) = NULL,
	@RaisedAtBefore NVARCHAR(MAX) = NULL,
	@Status NVARCHAR(MAX) = NULL,
	-- MileStone Filter
	--@ NVARCHAR(MAX) = NULL,
    @Session_User_Id INT = NULL,  
    @Business_Group_Id INT = NULL
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @sql NVARCHAR(MAX) = NULL,
                @WhereClause NVARCHAR(MAX) = NULL,
                @TaskTypeMkey INT;

        -- Create temporary tables instead of table variables
        IF OBJECT_ID('tempdb..#TableOutputProjectMkey') IS NOT NULL DROP TABLE #TableOutputProjectMkey;
        CREATE TABLE #TableOutputProjectMkey (mkey INT);

        IF OBJECT_ID('tempdb..#TableOutputBuildingMkey') IS NOT NULL DROP TABLE #TableOutputBuildingMkey;
        CREATE TABLE #TableOutputBuildingMkey (mkey INT);

        IF OBJECT_ID('tempdb..#TableOutputBUILDING_TYPE') IS NOT NULL DROP TABLE #TableOutputBUILDING_TYPE;
        CREATE TABLE #TableOutputBUILDING_TYPE (mkey INT);

        IF OBJECT_ID('tempdb..#TableOutputBUILDING_STANDARD') IS NOT NULL DROP TABLE #TableOutputBUILDING_STANDARD;
        CREATE TABLE #TableOutputBUILDING_STANDARD (mkey INT);

        IF OBJECT_ID('tempdb..#TableOutputSTATUTORY_AUTHORITY') IS NOT NULL DROP TABLE #TableOutputSTATUTORY_AUTHORITY;
        CREATE TABLE #TableOutputSTATUTORY_AUTHORITY (mkey INT);

		-- Compliance
		  IF OBJECT_ID('tempdb..#TableOutputResponsibleDepart') IS NOT NULL DROP TABLE #TableOutputResponsibleDepart;
        CREATE TABLE #TableOutputResponsibleDepart (mkey INT);

		  IF OBJECT_ID('tempdb..#TableOutputJobRole') IS NOT NULL DROP TABLE #TableOutputJobRole;
        CREATE TABLE #TableOutputJobRole (mkey INT);

		  IF OBJECT_ID('tempdb..#TableOutputResponsiblePerson') IS NOT NULL DROP TABLE #TableOutputResponsiblePerson;
        CREATE TABLE #TableOutputResponsiblePerson (mkey INT);

		  IF OBJECT_ID('tempdb..#TableOutputRaisedAt') IS NOT NULL DROP TABLE #TableOutputRaisedAt;
        CREATE TABLE #TableOutputRaisedAt (mkey INT);

		  IF OBJECT_ID('tempdb..#TableOutputRaisedAtBefore') IS NOT NULL DROP TABLE #TableOutputRaisedAtBefore;
        CREATE TABLE #TableOutputRaisedAtBefore (mkey INT);

        -- Populate #TableOutputProjectMkey
        INSERT INTO #TableOutputProjectMkey
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(@ProjectMkey, ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);
        -- Populate #TableOutputBuildingMkey
        INSERT INTO #TableOutputBuildingMkey
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(@BuildingMkey, ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);
        -- Populate #TableOutputBUILDING_TYPE
        INSERT INTO #TableOutputBUILDING_TYPE
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(CAST(@BUILDING_TYPE AS NVARCHAR(max)), ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);
        -- Populate #TableOutputBUILDING_STANDARD
        INSERT INTO #TableOutputBUILDING_STANDARD
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(CAST(@BUILDING_STANDARD AS VARCHAR), ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);
        -- Populate #TableOutputSTATUTORY_AUTHORITY
        INSERT INTO #TableOutputSTATUTORY_AUTHORITY
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(@STATUTORY_AUTHORITY, ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);

		
		/******/
		 INSERT INTO #TableOutputResponsibleDepart
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(CAST(@ResponsibleDepart AS NVARCHAR(max)), ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);

		 INSERT INTO #TableOutputJobRole
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(CAST(@JobRole AS NVARCHAR(max)), ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);

		 INSERT INTO #TableOutputResponsiblePerson
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(CAST(@ResponsiblePerson AS NVARCHAR(max)), ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);


		 INSERT INTO #TableOutputRaisedAt
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(CAST(@RaisedAt AS NVARCHAR(max)), ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);
		 INSERT INTO #TableOutputRaisedAtBefore
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(CAST(@RaisedAtBefore AS NVARCHAR(max)), ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);
				/******/


        -- Get task type mkey
        SELECT @TaskTypeMkey = MASTER_MKEY
        FROM TYPE_MST
        WHERE TYPE_CODE = 'Task_Type' AND DELETE_FLAG = 'N' AND TYPE_DESC = @TASK_TYPE;

        -- Build dynamic SQL
        IF @TaskTypeMkey = 359  -- Approval
        BEGIN
            SET @sql = '
                SELECT thdr.PROJECT_ID AS PROJECT_Mkey, TProject.TYPE_DESC AS Project_Name,
                       SUB_PROJECT_ID AS Building_Mkey, TBuilding.TYPE_DESC AS Building_Name, thdr.STATUS_PERC,
                       LTRIM(RTRIM(thdr.Priority)) AS Priority, thdr.MKEY, TASK_NO, TASK_NAME, TASK_DESCRIPTION,
                       thdr.TASK_PARENT_ID, thdr.TASK_MAIN_NODE_ID, ASSIGNED_TO, emst.EMP_FULL_NAME AS Assigned_To_Name,
                       COMPLETION_DATE, thdr.status AS [Status]
                FROM TASK_HDR thdr
                INNER JOIN PROJECT_TRL_APPROVAL_ABBR Ahdr ON thdr.MKEY = Ahdr.TASK_NO_MKEY
                INNER JOIN PROJECT_HDR phdr ON phdr.MKEY = Ahdr.HEADER_MKEY AND phdr.DELETE_FLAG = ''N''
                INNER JOIN APPROVAL_TEMPLATE_HDR athdr ON athdr.MKEY = Ahdr.APPROVAL_MKEY AND Ahdr.DELETE_FLAG = ''N''
                LEFT JOIN EMPLOYEE_MST emst ON thdr.ASSIGNED_TO = emst.MKEY AND emst.DELETE_FLAG = ''N''
                LEFT JOIN TYPE_MST TProject ON TProject.TYPE_CODE = ''Project'' AND TProject.MASTER_MKEY = thdr.PROJECT_ID AND TProject.DELETE_FLAG = ''N''
                LEFT JOIN TYPE_MST TBuilding ON TBuilding.TYPE_CODE = ''Project'' AND TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID AND TBuilding.DELETE_FLAG = ''N''';
                set @WhereClause =' WHERE thdr.TASK_TYPE = ' + CONVERT(NVARCHAR, @TaskTypeMkey) + '
                      AND thdr.DELETE_FLAG = ''N''
                      AND Ahdr.DELETE_FLAG = ''N''
                      AND phdr.DELETE_FLAG = ''N''
                      AND athdr.DELETE_FLAG = ''N''
					  AND (thdr.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @Session_User_Id) + '
                      OR thdr.CREATED_BY = ' + CONVERT(NVARCHAR, @Session_User_Id) + ') ';

                      --AND (thdr.PROJECT_ID IN (SELECT mkey FROM #TableOutputProjectMkey)
                      --     OR thdr.SUB_PROJECT_ID IN (SELECT mkey FROM #TableOutputBuildingMkey)
                      --     OR athdr.BUILDING_TYPE IN (SELECT mkey FROM #TableOutputBUILDING_TYPE)
                      --     OR athdr.BUILDING_STANDARD IN (SELECT mkey FROM #TableOutputBUILDING_STANDARD)
                      --     OR athdr.STATUTORY_AUTHORITY IN (SELECT mkey FROM #TableOutputSTATUTORY_AUTHORITY))
					if 	ISNULL(@ProjectMkey, '') <> ''	
					begin
						set @WhereClause += ' and thdr.PROJECT_ID In (SELECT mkey FROM #TableOutputProjectMkey)';
					end

					if 	ISNULL(@BuildingMkey, '') <> ''	
					begin
						set @WhereClause += ' and thdr.SUB_PROJECT_ID in (SELECT mkey FROM #TableOutputBuildingMkey)';
					end

					if 	ISNULL(@BUILDING_TYPE, '') <> ''	
					begin
						set @WhereClause += ' and athdr.BUILDING_TYPE In (SELECT mkey FROM #TableOutputBUILDING_TYPE)';
					end

					if 	ISNULL(@BUILDING_STANDARD, '') <> ''	
					begin
						set @WhereClause += ' and athdr.BUILDING_STANDARD in (SELECT mkey FROM #TableOutputBUILDING_STANDARD)';
					end
					if 	ISNULL(@STATUTORY_AUTHORITY, '') <> ''	
					begin
						set @WhereClause += ' and athdr.STATUTORY_AUTHORITY in (SELECT mkey FROM #TableOutputSTATUTORY_AUTHORITY)';
					end
        END
		else if (@TaskTypeMkey = 103) -- Compliance
		begin
			SET @sql = '
					Select chdr.MKEY,thdr.PROJECT_ID AS PROJECT_Mkey, TProject.TYPE_DESC AS Project_Name,SUB_PROJECT_ID AS Building_Mkey
					,TBuilding.TYPE_DESC AS Building_Name,thdr.STATUS_PERC,thdr.MKEY, TASK_NO, TASK_NAME, TASK_DESCRIPTION,
					thdr.TASK_PARENT_ID, thdr.TASK_MAIN_NODE_ID, ASSIGNED_TO, emst.EMP_FULL_NAME AS Assigned_To_Name,
					COMPLETION_DATE, thdr.status AS [Status], RESPONSIBLE_DEPARTMENT ,Dmst.TYPE_DESC as  RESPONSIBLE_DEPARTMENT_Name
					,chdr.RESPONSIBLE_PERSON,Rmst.EMP_FULL_NAME as RESPONSIBLE_PERSON_Name, chdr.JOB_ROLE , Jmst.TYPE_DESC as JOB_ROLE_Name
					,case when chdr.STATUS = ''I'' then ''Initiated'' 
					when chdr.STATUS = ''N'' then ''New'' when chdr.STATUS = ''C'' then ''Close'' end ''STATUS'',
					chdr.RAISED_AT,isnull(RaisedHDR.MAIN_ABBR,''General'') as RAISED_AT_Name,chdr.RAISED_AT_BEFORE
					, RaisedBeforeHDR.MAIN_ABBR as RAISED_AT_BEFORE_Name
					from COMPLIANCE_HDR chdr inner join TASK_HDR thdr on thdr.MKEY = chdr.TASK_NO_MKEY
					LEFT JOIN EMPLOYEE_MST emst ON thdr.ASSIGNED_TO = emst.MKEY AND emst.DELETE_FLAG = ''N''
					Inner JOIN TYPE_MST TProject ON TProject.TYPE_CODE = ''Project'' AND TProject.MASTER_MKEY = thdr.PROJECT_ID AND TProject.DELETE_FLAG = ''N''
					Inner JOIN TYPE_MST TBuilding ON TBuilding.TYPE_CODE = ''Project'' AND TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID AND TBuilding.DELETE_FLAG = ''N''
					left join TYPE_MST Dmst on chdr.RESPONSIBLE_DEPARTMENT = Dmst.MASTER_MKEY and Dmst.TYPE_CODE=''DEPARTMENT'' AND Dmst.DELETE_FLAG = ''N''
					left join employee_mst Rmst on rmst.MKEY = chdr.RESPONSIBLE_PERSON and Rmst.DELETE_FLAG = ''N''
					left join TYPE_MST Jmst on chdr.JOB_ROLE = Jmst.MASTER_MKEY and Jmst.TYPE_CODE=''JOBROLE'' AND Jmst.DELETE_FLAG = ''N''
					left JOIN APPROVAL_TEMPLATE_HDR RaisedHDR ON RaisedHDR.MKEY = chdr.RAISED_AT and RaisedHDR.DELETE_FLAG = ''N''
					left JOIN APPROVAL_TEMPLATE_HDR RaisedBeforeHDR ON RaisedBeforeHDR.MKEY = chdr.RAISED_AT_BEFORE and RaisedBeforeHDR.DELETE_FLAG = ''N''';
					Set @WhereClause =' Where chdr.TASK_TYPE = ' + CONVERT(NVARCHAR, @TaskTypeMkey) + '';
					
					if 	ISNULL(@ProjectMkey, '') <> ''	
					begin
						set @WhereClause += ' and chdr.PROPERTY In (SELECT mkey FROM #TableOutputProjectMkey)';
					end

					if 	ISNULL(@BuildingMkey, '') <> ''	
					begin
						set @WhereClause += ' and chdr.BUILDING in (SELECT mkey FROM #TableOutputBuildingMkey)';
					end

					if 	ISNULL(@ResponsibleDepart, '') <> ''	
					begin
						set @WhereClause += ' and RESPONSIBLE_DEPARTMENT in (SELECT mkey FROM #TableOutputResponsibleDepart)';
					end

					if 	ISNULL(@ResponsiblePerson, '') <> ''	
					begin
						set @WhereClause += ' and chdr.RESPONSIBLE_PERSON in (SELECT mkey FROM #TableOutputResponsiblePerson)';
					end

					if 	ISNULL(@JobRole, '') <> ''	
					begin
						set @WhereClause += ' and chdr.JOB_ROLE in (SELECT mkey FROM #TableOutputJobRole)';
					end
					if 	ISNULL(@RaisedAt, '') <> ''	
					begin
						set @WhereClause += ' and chdr.RAISED_AT in (SELECT mkey FROM #TableOutputRaisedAt)';
					end

						if 	ISNULL(@RaisedAtBefore, '') <> ''	
					begin
						set @WhereClause += ' and chdr.RAISED_AT_BEFORE in (SELECT mkey FROM #TableOutputRaisedAtBefore)';
					end

					if 	ISNULL(@Status, '') <> ''	
					begin
						set @WhereClause += ' and chdr.STATUS in ('''+ REPLACE('I,N', ',', ''',''') + ''')';
					end
					--print '@Status: '+ @Status
					
					--Select AHDR.*
					--from COMPLIANCE_HDR chdr Inner Join TASK_HDR thdr on thdr.MKEY = chdr.TASK_NO_MKEY
					--left join PROJECT_TRL_APPROVAL_ABBR PABBR ON thdr.MKEY = PABBR.TASK_NO_MKEY and PABBR.DELETE_FLAG = 'N'
					--left join PROJECT_HDR PHDR on PHDR.MKEY = PABBR.HEADER_MKEY
					--left JOIN APPROVAL_TEMPLATE_HDR AHDR ON AHDR.MKEY = PABBR.APPROVAL_MKEY and AHDR.DELETE_FLAG = 'N'
					--left join TYPE_MST Dmst on chdr.RESPONSIBLE_DEPARTMENT = Dmst.MASTER_MKEY and Dmst.TYPE_CODE='DEPARTMENT' AND Dmst.DELETE_FLAG = 'N'
					--left join TYPE_MST Jmst on chdr.JOB_ROLE = Jmst.MASTER_MKEY and Jmst.TYPE_CODE='JOBROLE' AND Jmst.DELETE_FLAG = 'N'
					--left join employee_mst Rmst on rmst.MKEY = chdr.RESPONSIBLE_PERSON and Rmst.DELETE_FLAG = 'N'
					--LEFT JOIN TYPE_MST TProject ON TProject.TYPE_CODE = 'Project' AND TProject.MASTER_MKEY = chdr.PROPERTY AND TProject.DELETE_FLAG = 'N'
					--LEFT JOIN TYPE_MST TBuilding ON TBuilding.TYPE_CODE = 'Project' AND TBuilding.MASTER_MKEY = chdr.BUILDING AND TBuilding.DELETE_FLAG = 'N'
					--where chdr.PROPERTY = 157 and chdr.BUILDING = 468
					----and RESPONSIBLE_DEPARTMENT = 134 and chdr.RESPONSIBLE_PERSON = 2693
					--and chdr.DELETE_FLAG = 'N' and thdr.DELETE_FLAG = 'N';

		end

			IF @FILTER = 'Today'
			BEGIN
				SET @WhereClause += ' And (CONVERT(VARCHAR, thdr.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
										AND thdr.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
			END
			IF @FILTER = 'Pending'
			BEGIN
				SET @WhereClause +=' AND (STATUS_PERC = 0.0 AND thdr.completion_date < GETDATE() 
										and thdr.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
			END
			IF @FILTER = 'Review'
			BEGIN
				SET @WhereClause += ' AND (thdr.STATUS IN (''Close Initiated'',''Cancel Initiated''))';
			END
			IF @FILTER = 'Completed'
			BEGIN
				SET @WhereClause += ' And (thdr.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
			END
			IF @FILTER = 'Cancelled'
			BEGIN
				SET @WhereClause +=' AND (thdr.status IN (''CANCEL'', ''CANCELLED'')) ';
			END
			IF @FILTER = 'Overdue'
			BEGIN
				SET @WhereClause += ' And (thdr.completion_date < GETDATE() AND thdr.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
			END
			IF @FILTER = 'Future'
			BEGIN
				SET @WhereClause +=' AND (thdr.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
										and thdr.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
			END
			
			
			if (((@ProjectMkey != null or @BuildingMkey != null))  -- (@ProjectMkey != '' or @BuildingMkey != '') OR
				OR (@WhereClause  is not null OR @WhereClause  != null))
			Begin
		
				Set @sql +=' '+ @WhereClause + ' order by thdr.PROJECT_ID, thdr.SUB_PROJECT_ID,thdr.MKEY; ';
			End
			Else
			Begin
		
				set @sql += ' WHERE thdr.DELETE_FLAG = ''N'' And (RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR,@Session_User_Id) +' 
						OR thdr.CREATED_BY = '+CONVERT(NVARCHAR, @Session_User_Id) +' )
						Order by thdr.PROJECT_ID, thdr.SUB_PROJECT_ID,thdr.MKEY; ';
			End
			
			EXEC Sp_executesql @sql;
			-- End 

			-- Filter count
			Select 'Todays' as DurationFilter,Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where 
			CASE
				WHEN @TaskTypeMkey != 0    THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
			AND	CASE
					WHEN ISNULL(@ProjectMkey, '') <> '' THEN
						CASE WHEN thdr.PROJECT_ID in (SELECT mkey FROM #TableOutputProjectMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN ISNULL(@BuildingMkey , '') <> '' THEN 
						CASE WHEN thdr.SUB_PROJECT_ID in (SELECT mkey FROM #TableOutputBuildingMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			And (CONVERT(VARCHAR, thdr.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
			AND thdr.status not IN ('CANCEL', 'COMPLETED','CANCELLED'))
			
			Union 
			
			Select 'Pending' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where 
			CASE
				WHEN @TaskTypeMkey != 0    THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
				AND	CASE
					WHEN ISNULL(@ProjectMkey, '') <> '' THEN
						CASE WHEN thdr.PROJECT_ID in (SELECT mkey FROM #TableOutputProjectMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN ISNULL(@BuildingMkey, '') <> '' THEN 
						CASE WHEN thdr.SUB_PROJECT_ID in (SELECT mkey FROM #TableOutputBuildingMkey)  THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			AND (STATUS_PERC = 0.0 AND thdr.completion_date < GETDATE() 
			and thdr.status IN ('CREATED', 'SUB TASK CREATED','WORK IN PROGRESS','RE-WORK'))
			
			Union 
			
			Select 'Review' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where 
			CASE
				WHEN @TaskTypeMkey != 0    THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
			AND	CASE
					WHEN ISNULL(@ProjectMkey, '') <> '' THEN  
						CASE WHEN thdr.PROJECT_ID in (SELECT mkey FROM #TableOutputProjectMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN ISNULL(@BuildingMkey, '') <> '' THEN  
						CASE WHEN thdr.SUB_PROJECT_ID in (SELECT mkey FROM #TableOutputBuildingMkey)  THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			AND (thdr.STATUS IN ('Close Initiated','Cancel Initiated'))
			
			Union 
			
			Select 'Overdue' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where
			CASE
				WHEN @TaskTypeMkey != 0    THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
			AND	CASE
					WHEN ISNULL(@ProjectMkey, '') <> '' THEN 
						CASE WHEN thdr.PROJECT_ID in (SELECT mkey FROM #TableOutputProjectMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN ISNULL(@BuildingMkey, '') <> '' THEN 
						CASE WHEN thdr.SUB_PROJECT_ID in (SELECT mkey FROM #TableOutputBuildingMkey)  THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			And (thdr.completion_date < GETDATE() AND thdr.status not IN ('CANCEL', 'COMPLETED','CANCELLED')) 
			
			Union 
			
			Select 'Future' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where 
			CASE
				WHEN @TaskTypeMkey != 0  THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
			AND	CASE
					WHEN ISNULL(@ProjectMkey, '') <> '' THEN
						CASE WHEN thdr.PROJECT_ID in (SELECT mkey FROM #TableOutputProjectMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN ISNULL(@BuildingMkey, '') <> '' THEN 
						CASE WHEN thdr.SUB_PROJECT_ID in (SELECT mkey FROM #TableOutputBuildingMkey)  THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			AND (thdr.STATUS NOT IN ('COMPLETED','CANCELLED','Close Initiated','Cancel Initiated')) 
			and thdr.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103); 

        -- Final execution
        --PRINT '@sql: ' + @sql;
        --EXEC sp_executesql @sql;

        -- Return summary counts for filters (if needed) here...
        -- You can retain your UNION queries for 'Todays', 'Pending', etc., after this

    END TRY
    BEGIN CATCH
        SELECT
            ERROR_NUMBER() AS ERRORNUMBER,
            ERROR_SEVERITY() AS ERRORSEVERITY,
            ERROR_STATE() AS ERRORSTATE,
            ERROR_PROCEDURE() AS ERRORPROCEDURE,
            ERROR_LINE() AS ERRORLINE,
            ERROR_MESSAGE() AS ERRORMESSAGE;

        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
        SET @ERROR_MESSAGE = ERROR_MESSAGE();

        EXEC Sp_p_tms_insert_error_des
            @Session_User_Id,
            'TMS',
            'Get Task Projects',
            @ERROR_MESSAGE,
            'Get';
    END CATCH
END
--- -----------------------------------------------------------------------------------

13-06-2025


GO
/****** Object:  StoredProcedure [dbo].[SP_GET_ACTIONS_NT]    Script Date: 13-06-2025 17:45:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--		exec SP_GET_ACTIONS_NT 424,926,'SUB TASK CREATED',926,1
--		exec SP_GET_ACTIONS_NT 1225,928,'SUB TASK CREATED','926',1
ALTER PROCEDURE [dbo].[SP_GET_ACTIONS_NT](@TASK_MKEY         INT,
                                          @CURRENT_EMP_MKEY  INT,
                                          @CURR_ACTION       NVARCHAR(100),
                                          @Session_User_Id   INT = NULL,
                                          @Business_Group_Id INT = NULL)
AS
  BEGIN
      DECLARE @dCount    INT,
              @dAllCount INT

      IF( @CURR_ACTION = 'WIP'
           OR @CURR_ACTION = 'PROGRESS UPDATED'
           OR @CURR_ACTION = 'WORK IN PROCESS'
           OR @CURR_ACTION = 'RE-WORK'
           OR @CURR_ACTION = 'WORK IN PROGRESS'
           OR @CURR_ACTION = 'CREATED' )
        BEGIN
            SELECT mkey,
                   type_desc
            FROM   v_status
            WHERE  mkey IN ( 75, 70, 69, 72 )
        END

      --or @CURR_ACTION= 'SUB TASK CREATED'
      IF( @CURR_ACTION = 'COMPLETED'
           OR @CURR_ACTION = 'CANCELLED'
           OR @CURR_ACTION = 'CANCELED'
           OR @CURR_ACTION = 'CANCEL' )
        BEGIN
            SELECT mkey,
                   type_desc
            FROM   v_status
            WHERE  mkey IN ( 0 )
        END

      IF( @CURR_ACTION = 'SUB TASK CREATED' )
        BEGIN
		print 'inside subtask'
            SELECT @dCount = Count(*)
            FROM   task_hdr
            WHERE  task_parent_id = @TASK_MKEY
                   AND mkey != @TASK_MKEY

            SELECT @dAllCount = Count(*)
            FROM   task_hdr
            WHERE  task_parent_id = @TASK_MKEY
                   AND status IN ( 'COMPLETED', 'Cancel', 'Close' )

            IF( @dCount = @dAllCount )
              BEGIN
			  print ' @dCount = @dAllCount'
                  SELECT @dCount = Count(*)
                  FROM   task_hdr
                  WHERE  mkey = @TASK_MKEY
                         AND resposible_emp_mkey = @CURRENT_EMP_MKEY

                  IF( @dCount > 0 )
                    BEGIN
                        SELECT mkey,
                               type_desc
                        FROM   v_status
                        WHERE  mkey IN ( 75, 70, 69, 72 )
                    END
                  ELSE
                    BEGIN
                        SELECT mkey,
                               type_desc
                        FROM   v_status
                        WHERE  mkey IN ( 0 )
                    END
              END
            ELSE
              BEGIN
			  print ' @dCount != @dAllCount'
                  SELECT mkey,
                         type_desc
                  FROM   v_status
                  WHERE  mkey IN ( 0 )
              END
        END

      IF( @CURR_ACTION = 'CLOSE INITIATED' )
        BEGIN
		print '@CURR_ACTION = CLOSE INITIATED';
            SELECT @dCount = Count(*)
            FROM   task_hdr
            WHERE  mkey = @TASK_MKEY
                   AND resposible_emp_mkey = @CURRENT_EMP_MKEY

            IF( @dCount > 0 )
              BEGIN
                  SELECT mkey,
                         type_desc
                  FROM   v_status
                  WHERE  mkey IN ( 71, 82 )
              END
            ELSE
              BEGIN
                  SELECT mkey,
                         type_desc
                  FROM   v_status
                  WHERE  mkey IN ( 0 )
              END
        END

      IF( @CURR_ACTION = 'Cancel Initiated' )
        BEGIN
            SELECT @dCount = Count(*)
            FROM   task_hdr
            WHERE  mkey = @TASK_MKEY
                   AND resposible_emp_mkey = @CURRENT_EMP_MKEY

            IF( @dCount > 0 )
              BEGIN
                  SELECT mkey,
                         type_desc
                  FROM   v_status
                  WHERE  mkey IN ( 73, 82 )
              END
            ELSE
              BEGIN
                  SELECT mkey,
                         type_desc
                  FROM   v_status
                  WHERE  mkey IN ( 0 )
              END
        END
					SELECT  * 
					FROM (
						SELECT 'History' as [Type],--CONVERT(datetime,trl.CREATION_DATE) CREATION_DATE,
									progress_perc
									,case when trl.DESCRIPTION_COMMENT is not null then CONVERT(nvarchar(max),action_type +' '+  DESCRIPTION_COMMENT +' '+ convert(nvarchar(100),PROGRESS_PERC) +' '+ 
									action_type +' '+ dbo.[Initcap](trl.status)) else action_type  end                   STATUS
									,dbo.[Initcap](action_type)              ACTION_TYPE
									,dbo.[Initcap](description_comment)      COMMENT
									,thdr.task_type as Task_Type
									,tmst.TYPE_DESC as Task_Type_Name
									,Isnull(file_name, '')                   FILE_NAME
									,Isnull(file_path, '')                   FILE_PATH
									,trl.created_by                                        CREATED_BY_ID,
								   createdby.emp_full_name                               CREATED_BY_NAME,
								   CASE
									 WHEN trl.creation_date IS NULL THEN ''
									 ELSE Format(trl.creation_date, 'yyyy-MM-dd HH:mm:ss')
								   END                                                   AS CREATION_DATE,
								   Isnull(CONVERT(VARCHAR(50), trl.last_updated_by), '') AS LAST_UPDATED_BY,
								   Isnull(updatedby.emp_full_name, '')                   UPDATED_BY_NAME,
								   CASE
									 WHEN trl.last_update_date IS NULL THEN ''
									 ELSE Format(trl.last_update_date, 'yyyy-MM-dd HH:mm:ss')
								   END                                                   AS LAST_UPDATE_DATE
							FROM   task_action_trl trl  JOIN employee_mst createdby
									 ON trl.created_by = createdby.mkey
							Left JOIN TASK_HDR thdr on trl.TASK_MKEY = thdr.MKEY and thdr.DELETE_FLAG = 'N'
							Left JOIN TYPE_MST tmst on tmst.MKEY = thdr.TASK_TYPE and tmst.DELETE_FLAG = 'N'
								   LEFT JOIN employee_mst updatedby
										  ON trl.last_updated_by = updatedby.mkey
							WHERE  trl.delete_flag = 'N'
									AND trl.mkey = @TASK_MKEY
						Union all
						Select 'Movement' as [Type],--MHST.CREATION_DATE,
						0 as progress_perc
								--,'Level '+ CONVERT(NVARCHAR,FROM_LEVEL)+ ' ' + CURRENT_STATUS +' To '+ ' Level '+CONVERT(NVARCHAR,TO_LEVEL)+ ' ' + UPDATED_STATUS as [Status]
								--,ISNULL('Level '+ CONVERT(NVARCHAR,FROM_LEVEL)+ ' ' + CURRENT_STATUS +' To '+ ' Level '+CONVERT(NVARCHAR,TO_LEVEL)+ ' ' + UPDATED_STATUS, concat('The level ', TO_LEVEL,' is added'))  as [Status]
								,case when CURRENT_STATUS = 'Updated Task' then CURRENT_STATUS else 
								ISNULL('Level '+ CONVERT(NVARCHAR,FROM_LEVEL)+ ' ' + CURRENT_STATUS +' To '+ ' Level '
								+ CONVERT(NVARCHAR,TO_LEVEL)+ ' ' + UPDATED_STATUS
								, concat('The level ', TO_LEVEL,' is added')) end  as [Status]
								,null as ACTION_TYPE
								,COMMENT as Comment
								,thdr.task_type as Task_Type
								,tmst.TYPE_DESC as Task_Type_Name
								,null as [FILE_NAME]
								,null as FILE_PATH
								,MHST.created_by                                        CREATED_BY_ID,
								   createdby.emp_full_name                               CREATED_BY_NAME,
								   CASE
									 WHEN MHST.creation_date IS NULL THEN ''
									 ELSE Format(MHST.creation_date, 'yyyy-MM-dd HH:mm:ss')
								   END                                                   AS CREATION_DATE,
								   Isnull(CONVERT(VARCHAR(50), MHST.last_updated_by), '') AS LAST_UPDATED_BY,
								   Isnull(updatedby.emp_full_name, '')                   UPDATED_BY_NAME,
								   CASE
									 WHEN MHST.last_update_date IS NULL THEN ''
									 ELSE Format(MHST.last_update_date, 'yyyy-MM-dd HH:mm:ss')
								   END                                                   AS LAST_UPDATE_DATE
						From TASK_SANCTIONING_DEPARTMENT_TRL_MOVEMENT_HISTORY MHST JOIN employee_mst createdby
									 ON MHST.created_by = createdby.mkey
						Left JOIN TASK_HDR thdr on MHST.TASK_MKEY = thdr.MKEY and thdr.DELETE_FLAG = 'N'
						Left JOIN TYPE_MST tmst on tmst.MKEY = thdr.TASK_TYPE and tmst.DELETE_FLAG = 'N'
								   LEFT JOIN employee_mst updatedby
										  ON MHST.last_updated_by = updatedby.mkey
						where MHST.TASK_MKEY = @TASK_MKEY
					) ActionType
					ORDER BY ActionType.CREATION_DATE 
	   --SELECT CONVERT(VARCHAR(50), creation_date, 103)CREATION_DATE,
      --    progress_perc,
      --    dbo.[Initcap](status)                   STATUS,
      --    dbo.[Initcap](action_type)              ACTION_TYPE,
      --    dbo.[Initcap](description_comment)      COMMENT,
      --    Isnull(file_name, '')                   FILE_NAME,
      --    Isnull(file_path, '')                   FILE_PATH
      --FROM   task_action_trl
      --WHERE  delete_flag = 'N'
      --    AND mkey = @TASK_MKEY
      --ORDER  BY sr_no DESC
  END
--EXEC [SP_GET_ACTIONS] 154,248,'SUB TASK CREATED'
--SELECT CREATION_DATE,PROGRESS_PERC,STATUS,ACTION_TYPE,DESCRIPTION_COMMENT COMMENT,ISNULL(FILE_NAME,'NA') FILE_NAME FROM TASK_ACTION_TRL ORDER BY SR_NO DESC --SELECT * FROM TASK_ACTION_TRL

------------------------------------------------------------------------------
16-06-2025

GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_DASHBOARD_NT]    Script Date: 16-06-2025 16:14:20 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  --		EXEC SP_TASK_DASHBOARD_NT 928,'Future',928,1
 --   EXEC SP_TASK_DASHBOARD_NT 926,5,926,2
ALTER PROCEDURE [dbo].[SP_TASK_DASHBOARD_NT] (@CURRENT_EMP_MKEY  INT,
                    @USER_FILTER       VARCHAR(max) = NULL,--'ALLOCATEDBYME,ALLOCATEDTOME,COMPLETEDBYME,COMPLETEDFORME,CANCELCLOSE',
                    @Session_User_Id   INT,
                    @Business_Group_Id INT)
					--@STATUS_FILTER     NVARCHAR(max) = NULL,--'Completed,Cancelled,Pending,Review',
					--@DURATION_FILTER   NVARCHAR(max) = NULL, -- Today,Future,Overdue,Next 3 Days,Next 7 Days,Next 2 Weeks,Next Month,
					--@PriorityFilter    VARCHAR(max) =NULL,--'High,Medium,Low',
                   -- @TypeFilter        VARCHAR(max) =NULL,--'RECURRING,APPROVAL,COMPLIANCE,APPROVAL,GENERAL,SYSTEM,EMAIL,RERA COMPLAIN';
                    
AS
  BEGIN
      DECLARE @DAY INT
      SET @DAY=0;
      DECLARE @sql NVARCHAR(max) = '';
      DECLARE @start INT = 1,
              @end   INT;
      DECLARE @hasWhereClause BIT = 0;
      DECLARE @WhereClause    NVARCHAR(max) = '',
              @filter         VARCHAR(100),
              @PriorityClause NVARCHAR(max) = '',
              @TypeClause     NVARCHAR(max) = '',
              @TaskTypeMkey   NVARCHAR(50),
              @STATUSClause   NVARCHAR(max) = '',
			  @DurationClause   NVARCHAR(max) = '';

	SET @sql ='SELECT  T_HDR.mkey as Sr_No, T_HDR.mkey,Isnull(TMST.type_desc, ''NA'') CATEGORY,T_HDR.task_no,dbo.[Initcap](Isnull(CREATOR.emp_full_name, ''NA'')) CREATOR,
	  dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, ''NA'')) RESPONSIBLE,
	  dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, ''NA'')) ACTIONABLE,
	  T_HDR.creation_date,                    
	  CASE                      
	  WHEN T_HDR.status IN ( ''CREATED'' ) THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUB TASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUBTASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status IN ( ''WORK IN PROGRESS'', ''CLOSE INITIATED'', ''CANCEL INITIATED'', ''RE-WORK'' ) THEN ''In Progress''                      
	  WHEN T_HDR.status IN ( ''CLOSE'', ''COMPLETED'' ) THEN ''Completed''                      ELSE ''Others''                    END AS Dashboard_Status, 
	  CONVERT(VARCHAR, T_HDR.completion_date, 103) AS COMPLETION_DATE,                    
	  dbo.[Initcap](T_HDR.task_name) AS TASK_NAME,                    
	  T_HDR.task_description,                    
	  T_HDR.tags,                    
	  dbo.[Initcap](T_HDR.status) AS STATUS,                   
	  CASE                      
	  WHEN Isnull(CREATOR.first_name, ''NA'') != Isnull(RESPONSIBLE.first_name, ''NA'') 
	  THEN dbo.[Initcap](Isnull(CREATOR.first_name, ''NA'')) + '' > '' + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, ''NA''))                      
	  ELSE dbo.[Initcap](Isnull(CREATOR.first_name, ''NA''))                    
	  END AS RESPONSIBLE_TAG,                   
	  dbo.[Initcap](Isnull(PMST.type_desc, '''')) AS PROJECT_NAME,                    
	  dbo.Tasknamestring(T_HDR.mkey) AS TASK_HISTORY,                    
	  Isnull(Rtrim(T_HDR.[priority]), '''') AS [Priority],                    
	  Isnull(T_HDR.percent_complete, ''0'') AS Progress_Percentage,                    
	  Isnull(parent_counts.parenttaskcount, 0) AS SubTask_Count,                    
	  T_HDR.CREATED_BY             
	  FROM task_hdr T_HDR             
	  LEFT JOIN employee_mst CREATOR ON CREATOR.mkey = T_HDR.created_by AND CREATOR.delete_flag = ''N''             
	  LEFT JOIN employee_mst RESPONSIBLE ON RESPONSIBLE.mkey = T_HDR.assigned_to AND RESPONSIBLE.delete_flag = ''N''             
	  LEFT JOIN employee_mst ACTIONABLE ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey AND ACTIONABLE.delete_flag = ''N''            
	  LEFT JOIN type_mst TMST ON TMST.master_mkey = T_HDR.caregory AND TMST.type_code = ''CATEGORY'' AND TMST.delete_flag = ''N''             
	  LEFT JOIN type_mst PMST ON PMST.master_mkey = T_HDR.project_id AND PMST.type_code = ''PROJECT'' AND PMST.delete_flag = ''N''             
	  LEFT JOIN (SELECT task_parent_id, Count(*) AS ParentTaskCount                        
	  FROM task_hdr WHERE task_parent_id IS NOT NULL AND mkey NOT IN (task_parent_id) AND delete_flag = ''N''                        
	  GROUP BY task_parent_id) parent_counts ON T_HDR.mkey = parent_counts.task_parent_id             
	  WHERE Isnull(T_HDR.status_flag, ''A'') IN (''A'') AND T_HDR.delete_flag = ''N'' ';
    /* @USER_FILTER */
    IF ( @USER_FILTER <> '' AND @USER_FILTER IS NOT NULL ) -- @USER_FILTER is not null OR
      BEGIN
          WHILE @start <= Len(@USER_FILTER)
            BEGIN
                SET @end = Charindex(',', @USER_FILTER, @start);
                IF @end = 0
                  SET @end = Len(@USER_FILTER) + 1;
                SET @filter = Ltrim(Rtrim(Substring(@USER_FILTER, @start, @end - @start)));
				
                IF @filter = 'Default'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @sql += ' OR ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' ) ';
                        END
                  END

                IF @filter = 'ALLOCATEDBYME' 
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +' ) ';
                        END
                  END

                IF @filter = 'ALLOCATEDTOME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN

                            SET @WhereClause +=' ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+ 
							' OR T_HDR.resposible_emp_mkey = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+')';
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                        SET @WhereClause +=' OR ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +')';
                  END

                IF @filter = 'COMPLETEDBYME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' ( CONVERT(int,T_HDR.assigned_to) = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+
                            ' AND T_HDR.status IN (''COMPLETED''))';
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause += ' OR ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'COMPLETEDFORME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @WhereClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) +
                            ' AND CONVERT(int,T_HDR.assigned_to) != '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+' AND CONVERT(int,T_HDR.assigned_to) != '
                                            + CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+ ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'CANCELCLOSE'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' ( T_HDR.created_by = ' + CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) +
                            ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
                        SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+
                        ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'') ) ';
                  --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                  END
				
				/*Priority Filter */
				 IF @filter = 'High'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                        SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
                  END

                IF @filter = 'Low'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                        SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
						END

                IF @filter = 'Medium'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                        SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'') ';
                  END
				  /* End Priority */

				  /*Type Filter*/
				   IF @filter = 'RECURRING'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'Approval'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'COMPLIANCE'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'GENERAL'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'SYSTEM'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey +') ';
                  END

                IF @filter = 'Email'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'RERA COMPLAIN'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey +') ';
                  END
				  /*End Type Filter*/

				  /*Status Filter*/
						IF @filter = 'Pending'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause += '(T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
														AND STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
														and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
								SET @hasWhereClause = 1;
							END
						ELSE
							SET @WhereClause +=' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
													and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
						END
			
						IF @filter = 'Review'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
								AND T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
								SET @hasWhereClause = 1;
							END
							ELSE
								SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND  T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
						END

						IF @filter = 'Completed'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
								SET @hasWhereClause = 1;
							END
						ELSE
								SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
						END

						IF @filter = 'Cancelled'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
								SET @hasWhereClause = 1;
							END
							ELSE
								SET @WhereClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
						END
			/*End Status Filter*/

						IF @filter = 'Today'
						BEGIN
							IF @hasWhereClause = 0
								BEGIN
									SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
															AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
									SET @hasWhereClause = 1;
								END
								ELSE
									begin
									SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) 
															AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
									end
						END

						IF @filter = 'Overdue'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND T_HDR.completion_date < GETDATE() 
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
								SET @hasWhereClause = 1;
							END
						ELSE
							SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND T_HDR.completion_date < GETDATE() 
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
						END

						IF @filter = 'Future'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' or T_HDR.ASSIGNED_TO= ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + '   
													AND  T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
													and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
								SET @hasWhereClause = 1;
							END
						ELSE
								SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													  or T_HDR.ASSIGNED_TO = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND  (T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
												and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103)) ';
						END

						IF @filter = 'Next 3 Days'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
					
								--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
								SET @hasWhereClause = 1;
							END
							ELSE
								--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
								SET @WhereClause +=' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
						END

						IF @filter = 'Next 7 Days'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								--SET @DurationClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
								--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
								SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
								SET @hasWhereClause = 1;
							END
						ELSE
							--SET @DurationClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
							--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
							SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
						END

						IF @filter = 'Next 2 Weeks'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								--SET @DurationClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
													T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
								SET @hasWhereClause = 1;
							END
						ELSE
								--SET @DurationClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
								SET @WhereClause +=' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
						END

						IF @filter = 'Next Month'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								--SET @DurationClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
								--SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
								SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)  
															AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
								SET @hasWhereClause = 1;
							END
							ELSE
								--SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
								--SET @DurationClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
								SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
													T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)  
															AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
						END

						print 'ISNUMERIC(@filter): '+ convert(nvarchar,ISNUMERIC(@filter))
						if (ISNUMERIC(@filter) = 1)
						Begin
						print 'isnumer'
							IF @hasWhereClause = 0
							BEGIN
					
								--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
													T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY,'+ CONVERT(nvarchar,@filter) +' , GETDATE())) ';
								SET @hasWhereClause = 1;
							END
							ELSE
								--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
								SET @WhereClause +=' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
											T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY,'+ CONVERT(nvarchar,@filter) +', GETDATE())) ';	
						End

			/*End Duration Filter*/


			SET @start = @end + 1;
            END
			If (@hasWhereClause = 1)
			Begin
				SET @sql += ' AND ( ' + @WhereClause + ' ) ';
			End
			Else if (@hasWhereClause = 0 and @WhereClause is not null or @WhereClause != null)
			Begin
				--print '@WhereClause is not null';
				SET @sql += ' AND ( 1 != 1 ) ';
			End
      END
    ELSE IF( @USER_FILTER IS NULL OR @USER_FILTER = 'Default'  OR @USER_FILTER = '' OR @filter is not null)
      BEGIN
         SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
          SET @hasWhereClause = 1;
          SET @sql += ' AND ( ' + @WhereClause + ' ) ';
      END
    print '@@sql: '+ @sql;
    EXEC Sp_executesql @sql;

    EXEC Sp_dashboard_count @CURRENT_EMP_MKEY;
	-----------------------------------------------------------------------------------------------------
 --   /* @PriorityFilter */
 --   IF ( @PriorityFilter IS NOT NULL
 --        AND @PriorityFilter <> '' )
 --     BEGIN
 --         SET @start = 1;
 --         SET @hasWhereClause = 0;

 --         WHILE @start <= Len(@PriorityFilter)
 --           BEGIN
 --               SET @end = Charindex(',', @PriorityFilter, @start);

 --               IF @end = 0
 --                 SET @end = Len(@PriorityFilter) + 1;

 --               SET @filter = Ltrim(Rtrim(Substring(@PriorityFilter, @start,@end - @start )) );

 --               -- Append the priority condition
 --               IF @filter = 'High'
 --                 BEGIN
 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
 --                           SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
 --                       SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
 --                 END

 --               IF @filter = 'Low'
 --                 BEGIN
 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
 --                           SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
 --                       SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
	--					END

 --               IF @filter = 'Medium'
 --                 BEGIN
 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
 --                           SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
 --                       SET @PriorityClause += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
 --                 END

 --               SET @start = @end + 1;
 --           END
	--		If (@hasWhereClause = 1)
	--		Begin
	--			SET @sql += ' AND ( ' + @PriorityClause + ' ) ';
	--		End
	--		Else if (@hasWhereClause = 0 and @PriorityClause is not null or @PriorityClause != null)
	--		Begin
	--		print '@PriorityFilter';
	--			SET @sql += ' AND ( 1 != 1 ) ';
	--		End
			
 --     END
 --   -----------------------------------------------------------------------------------------------------
 --   /* @TypeFilter */
 --   IF ( @TypeFilter IS NOT NULL
 --        AND @TypeFilter <> '' )
 --     BEGIN
 --         SET @start = 1;
 --         SET @hasWhereClause = 0;

 --         WHILE @start <= Len(@TypeFilter)
 --           BEGIN
 --               SET @end = Charindex(',', @TypeFilter, @start);

 --               IF @end = 0
 --                 SET @end = Len(@TypeFilter) + 1;

 --               SET @filter = Ltrim(Rtrim(Substring(@TypeFilter, @start, @end - @start)));

 --               IF @filter = 'RECURRING'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'Approval'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'COMPLIANCE'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') '
 --                           ;
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'GENERAL'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'SYSTEM'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                 END

 --               IF @filter = 'Email'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'RERA COMPLAIN'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                 END

 --               SET @start = @end + 1;
 --           END
	--		If (@hasWhereClause = 1)
	--		Begin
	--			SET @sql += ' AND ( ' + @TypeClause + ' ) ';
	--		End
	--		Else if (@hasWhereClause = 0 and @TypeClause is not null or @TypeClause != null)
	--		Begin
	--			print '@@TypeClause';
	--			SET @sql += ' AND ( 1 != 1 ) ';
	--		End
 --     END
 --   -----------------------------------------------------------------------------------------------------
 --   /* @STATUS_FILTER */
 --   IF ( @STATUS_FILTER IS NOT NULL
 --        AND @STATUS_FILTER <> '' )
	--	BEGIN
	--	SET @start = 1;
	--	SET @hasWhereClause = 0;

	--	WHILE @start <= Len(@STATUS_FILTER)
	--	BEGIN
	--		SET @end = Charindex(',', @STATUS_FILTER, @start);

	--		IF @end = 0
	--			SET @end = Len(@STATUS_FILTER) + 1;

	--		SET @filter = Ltrim(Rtrim(Substring(@STATUS_FILTER, @start, @end - @start)));

	--		IF @filter = 'Pending'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--										and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--			SET @STATUSClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--									and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--		END
			
	--		IF @filter = 'Review'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				SET @STATUSClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
	--		END

	--		IF @filter = 'Completed'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--				SET @STATUSClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--		END

	--		IF @filter = 'Cancelled'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				SET @STATUSClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--		END

	--		SET @start = @end + 1;
	--	END
	--			If (@hasWhereClause = 1)
	--			Begin
	--				SET @sql += ' AND ( ' + @STATUSClause + ' ) ';
	--			End
	--		Else if (@hasWhereClause = 0 and @STATUSClause is not null or @STATUSClause != null)
	--		Begin
	--		--print '@STATUSClause is not null11';
	--			SET @sql += ' AND ( 1 != 1 ) ';
	--		End
	--		END
 -------------------------------------------------------------------------------------------------------
	--IF ( @DURATION_FILTER IS NOT NULL
 --        AND @DURATION_FILTER <> '' )
	--	BEGIN
	--	SET @start = 1;
	--	SET @hasWhereClause = 0;

	--	WHILE @start <= Len(@DURATION_FILTER)
	--	BEGIN
	--		SET @end = Charindex(',', @DURATION_FILTER, @start);

	--		IF @end = 0
	--			SET @end = Len(@DURATION_FILTER) + 1;

	--		SET @filter = Ltrim(Rtrim(Substring(@DURATION_FILTER, @start, @end - @start)));

	--		IF @filter = 'Today'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--				BEGIN
	--					SET @DurationClause += ' (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
	--											AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--					SET @hasWhereClause = 1;
	--				END
	--				ELSE
	--					begin
	--					SET @DurationClause += ' OR (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) 
	--											AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--					end
	--		END

	--		IF @filter = 'Overdue'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @DurationClause +=' (T_HDR.completion_date < GETDATE() 
	--									AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--			SET @DurationClause += ' OR (T_HDR.completion_date < GETDATE() 
	--									AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--		END

	--		IF @filter = 'Future'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @DurationClause += ' (T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
	--									and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--				SET @DurationClause += ' OR ((T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
	--								and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103)) ';
	--		END

	--		IF @filter = 'Next 3 Days'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
					
	--				--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
	--				SET @DurationClause +=' (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
	--				SET @DurationClause +=' OR (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
	--		END

	--		IF @filter = 'Next 7 Days'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				--SET @DurationClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--				--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--				SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--			--SET @DurationClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--			--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--			SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
	--		END

	--		IF @filter = 'Next 2 Weeks'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				--SET @DurationClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--				SET @DurationClause +=' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--				--SET @DurationClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--				SET @DurationClause +=' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
	--		END

	--		IF @filter = 'Next Month'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				--SET @DurationClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--				--SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
	--				SET @DurationClause += ' ( T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				--SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
	--				--SET @DurationClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--				SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
	--		END

	--		SET @start = @end + 1;
	--	END
	--			If (@hasWhereClause = 1)
	--			Begin
	--				SET @sql += ' AND ( ' + @DurationClause + ' ) ';
	--			End
	--			Else if (@hasWhereClause = 0 and @DurationClause is not null or @DurationClause != null)
	--			Begin
	--			print '@DurationClause is not null';
	--				SET @sql += ' AND ( 1 != 1 ) ';
	--			End
	--		END
END

------------------------------------------------------------------

USE [TaskManagement_UAT2]
GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_DASHBOARD]    Script Date: 16-06-2025 17:38:08 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	exec SP_TASK_DASHBOARD 926,'CANCELCLOSE'
ALTER PROCEDURE [dbo].[SP_TASK_DASHBOARD] (@CURRENT_EMP_MKEY INT,
                                           @FILTER           NVARCHAR(100))
AS
  BEGIN
      DECLARE @DAY INT

      SET @DAY=0

      --SELECT  T_HDR.MKEY,T_HDR.TASK_NO,T_HDR.CREATION_DATE,T_HDR.TASK_NAME,T_HDR.TASK_DESCRIPTION,E_MST.EMP_FULL_NAME,T_HDR.TAGS,T_HDR.STATUS FROM TASK_HDR  T_HDR  
      --INNER JOIN EMPLOYEE_MST E_MST ON E_MST.MKEY= T_HDR.ASSIGNED_TO  
      IF( @FILTER = 'DEFAULT' )
        BEGIN
            SELECT
        T_HDR.mkey,
        Isnull(TMST.type_desc, 'NA')                       CATEGORY,
        T_HDR.task_no,
        dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))     CREATOR,
        dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA')) RESPONSIBLE,
        dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))  ACTIONABLE,
        T_HDR.creation_date
        ,
        CONVERT(VARCHAR, T_HDR.completion_date, 103)           COMPLETION_DATE,
        dbo.[Initcap](T_HDR.task_name)                         TASK_NAME,
        T_HDR.task_description,
        T_HDR.tags,
        dbo.[Initcap](T_HDR.status)                            STATUS,
        CASE
          WHEN Isnull(CREATOR.first_name, 'NA') !=
               Isnull(RESPONSIBLE.first_name, 'NA')
        THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
        + ' > '
        + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA') )
          ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
        END
        RESPONSIBLE_TAG,
        dbo.[Initcap](Isnull(PMST.type_desc, ''))              PROJECT_NAME,
        dbo.Tasknamestring(T_HDR.mkey)                         AS
        'TASK_HISTORY'
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by and CREATOR.DELETE_FLAG = 'N' 
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to and RESPONSIBLE.DELETE_FLAG = 'N' 
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey  and ACTIONABLE.DELETE_FLAG = 'N' 
                    --LEFT JOIN v_category CATEGORY
					   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
					 LEFT JOIN TYPE_MST TMST 
							ON TMST.MASTER_MKEY = T_HDR.caregory AND TMST.TYPE_CODE = 'CATEGORY' AND TMST.DELETE_FLAG = 'N'
					   --LEFT JOIN v_project PROJ
					   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
						LEFT JOIN TYPE_MST PMST 
							ON PMST.MASTER_MKEY = T_HDR.project_id AND PMST.TYPE_CODE = 'PROJECT' AND PMST.DELETE_FLAG = 'N'
            WHERE  (
                   --T_HDR.Created_by=@CURRENT_EMP_MKEY  
                   --OR  
                   --T_HDR.ASSIGNED_TO=@CURRENT_EMP_MKEY  
                   --OR  
                   --T_HDR.RESPOSIBLE_EMP_MKEY=@CURRENT_EMP_MKEY  
                   --T_HDR.ASSIGNED_TO=@CURRENT_EMP_MKEY  
                   --OR  
                   T_HDR.resposible_emp_mkey = @CURRENT_EMP_MKEY )
                   AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED', 'Cancel'
                                           )
                   AND Isnull(T_HDR.status_flag, 'A') IN ( 'A' )
				   and T_HDR.DELETE_FLAG = 'N' 
            ORDER  BY creation_date DESC
        END

      IF( @FILTER = 'ALLOCATEDBYME' )
        BEGIN
            SELECT
        T_HDR.mkey,
        Isnull(TMST.type_desc, 'NA')                       CATEGORY,
        T_HDR.task_no,
        dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))     CREATOR,
        dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA')) RESPONSIBLE,
        dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))  ACTIONABLE,
        T_HDR.creation_date,
        CONVERT(VARCHAR, T_HDR.completion_date, 103)
        COMPLETION_DATE,
        T_HDR.task_name,
        T_HDR.task_description,
        T_HDR.tags,
        dbo.[Initcap](T_HDR.status)                            STATUS,
        CASE
          WHEN Isnull(CREATOR.first_name, 'NA') !=
               Isnull(RESPONSIBLE.first_name, 'NA')
        THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
        + ' > '
        + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA') )
          ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
        END
        RESPONSIBLE_TAG,
        dbo.[Initcap](Isnull(PMST.type_desc, ''))              PROJECT_NAME
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by and CREATOR.DELETE_FLAG = 'N' 
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to and RESPONSIBLE.DELETE_FLAG = 'N' 
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey and ACTIONABLE.DELETE_FLAG = 'N' 
                    --LEFT JOIN v_category CATEGORY
					   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
					 LEFT JOIN TYPE_MST TMST 
							ON TMST.MASTER_MKEY = T_HDR.caregory AND TMST.TYPE_CODE = 'CATEGORY' AND TMST.DELETE_FLAG = 'N'
					   --LEFT JOIN v_project PROJ
					   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
						LEFT JOIN TYPE_MST PMST 
							ON PMST.MASTER_MKEY = T_HDR.project_id AND PMST.TYPE_CODE = 'PROJECT' AND PMST.DELETE_FLAG = 'N'
            WHERE  ( T_HDR.created_by = @CURRENT_EMP_MKEY )
                   AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED', 'Cancel'
                                           )
                   AND Isnull(T_HDR.status_flag, 'A') IN ( 'A' ) 
				   and T_HDR.DELETE_FLAG = 'N' 
            ORDER  BY creation_date DESC
        END

      IF( @FILTER = 'ALLOCATEDTOME' )
        BEGIN
			SELECT
			T_HDR.mkey,
			Isnull(TMST.type_desc, 'NA')                       CATEGORY,
			T_HDR.task_no,
			dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))     CREATOR,
			dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA')) RESPONSIBLE,
			dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))  ACTIONABLE,
			T_HDR.creation_date,
			CONVERT(VARCHAR, T_HDR.completion_date, 103)
			COMPLETION_DATE,
			T_HDR.task_name,
			T_HDR.task_description,
			T_HDR.tags,
			dbo.[Initcap](T_HDR.status)                            STATUS,
			CASE
			  WHEN Isnull(CREATOR.first_name, 'NA') !=
				   Isnull(RESPONSIBLE.first_name, 'NA')
			THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
			+ ' > '
			+ dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA') )
			  ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
			END
			RESPONSIBLE_TAG,
			dbo.[Initcap](Isnull(PMST.type_desc, ''))              PROJECT_NAME
			,
			dbo.Tasknamestring(T_HDR.mkey)
			AS
			'TASK_HISTORY'
			   FROM   task_hdr T_HDR
					   LEFT JOIN employee_mst CREATOR
							  ON CREATOR.mkey = T_HDR.created_by and CREATOR.DELETE_FLAG = 'N' 
					   LEFT JOIN employee_mst RESPONSIBLE
							  ON RESPONSIBLE.mkey = T_HDR.assigned_to and RESPONSIBLE.DELETE_FLAG = 'N' 
					   LEFT JOIN employee_mst ACTIONABLE
							  ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey and ACTIONABLE.DELETE_FLAG = 'N' 
					   --LEFT JOIN v_category CATEGORY
					   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
					 LEFT JOIN TYPE_MST TMST 
							ON TMST.MASTER_MKEY = T_HDR.caregory AND TMST.TYPE_CODE = 'CATEGORY' AND TMST.DELETE_FLAG = 'N'
					   --LEFT JOIN v_project PROJ
					   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
						LEFT JOIN TYPE_MST PMST 
							ON PMST.MASTER_MKEY = T_HDR.project_id AND PMST.TYPE_CODE = 'PROJECT' AND PMST.DELETE_FLAG = 'N'
				WHERE  ( T_HDR.assigned_to = @CURRENT_EMP_MKEY
						  OR T_HDR.resposible_emp_mkey = @CURRENT_EMP_MKEY )
					   AND T_HDR.status NOT IN ( 'COMPLETED', 'CANCELLED', 'Cancel')
					   AND Isnull(T_HDR.status_flag, 'A') IN ( 'A' )
					   and T_HDR.DELETE_FLAG = 'N' 
				ORDER  BY creation_date DESC
        END

      IF( @FILTER = 'COMPLETEDBYME' )
        BEGIN
            SELECT
        T_HDR.mkey,
        Isnull(TMST.type_desc, 'NA')                       CATEGORY,
        T_HDR.task_no,
        dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))     CREATOR,
        dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA')) RESPONSIBLE,
        dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))  ACTIONABLE,
        T_HDR.creation_date,
        CONVERT(VARCHAR, T_HDR.completion_date, 103)
        COMPLETION_DATE,
        T_HDR.task_name,
        T_HDR.task_description,
        T_HDR.tags,
        dbo.[Initcap](T_HDR.status)                            STATUS,
        CASE
          WHEN Isnull(CREATOR.first_name, 'NA') !=
               Isnull(RESPONSIBLE.first_name, 'NA')
        THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
        + ' > '
        + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA') )
          ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
        END
        RESPONSIBLE_TAG,
        dbo.[Initcap](Isnull(PMST.type_desc, ''))              PROJECT_NAME
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by and CREATOR.DELETE_FLAG = 'N' 
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to and RESPONSIBLE.DELETE_FLAG = 'N' 
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey and ACTIONABLE.DELETE_FLAG = 'N' 
                    --LEFT JOIN v_category CATEGORY
					   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
					 LEFT JOIN TYPE_MST TMST 
							ON TMST.MASTER_MKEY = T_HDR.caregory AND TMST.TYPE_CODE = 'CATEGORY' AND TMST.DELETE_FLAG = 'N'
					   --LEFT JOIN v_project PROJ
					   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
						LEFT JOIN TYPE_MST PMST 
							ON PMST.MASTER_MKEY = T_HDR.project_id AND PMST.TYPE_CODE = 'PROJECT' AND PMST.DELETE_FLAG = 'N'
            WHERE  ( T_HDR.assigned_to = @CURRENT_EMP_MKEY )
                   AND T_HDR.status IN ( 'COMPLETED' )
                   AND Isnull(T_HDR.status_flag, 'A') IN ( 'A' )
				    and T_HDR.DELETE_FLAG = 'N' 
            ORDER  BY creation_date DESC
        END

      IF( @FILTER = 'COMPLETEDFORME' )
        BEGIN
        SELECT
        T_HDR.mkey,
        Isnull(TMST.type_desc, 'NA')                       CATEGORY,
        T_HDR.task_no,
        dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))     CREATOR,
        dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA')) RESPONSIBLE,
        dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))  ACTIONABLE,
        T_HDR.creation_date,
        CONVERT(VARCHAR, T_HDR.completion_date, 103)
        COMPLETION_DATE,
        T_HDR.task_name,
        T_HDR.task_description,
        T_HDR.tags,
        dbo.[Initcap](T_HDR.status)                            STATUS,
        CASE
          WHEN Isnull(CREATOR.first_name, 'NA') !=
               Isnull(RESPONSIBLE.first_name, 'NA')
        THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
        + ' > '
        + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA') )
          ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
        END
        RESPONSIBLE_TAG,
        dbo.[Initcap](Isnull(PMST.type_desc, ''))              PROJECT_NAME
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by and CREATOR.DELETE_FLAG = 'N' 
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to and RESPONSIBLE.DELETE_FLAG = 'N' 
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey and ACTIONABLE.DELETE_FLAG = 'N' 
                    --LEFT JOIN v_category CATEGORY
					   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
					 LEFT JOIN TYPE_MST TMST 
							ON TMST.MASTER_MKEY = T_HDR.caregory AND TMST.TYPE_CODE = 'CATEGORY' AND TMST.DELETE_FLAG = 'N'
					   --LEFT JOIN v_project PROJ
					   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
						LEFT JOIN TYPE_MST PMST 
							ON PMST.MASTER_MKEY = T_HDR.project_id AND PMST.TYPE_CODE = 'PROJECT' AND PMST.DELETE_FLAG = 'N'
            WHERE  ( T_HDR.created_by = @CURRENT_EMP_MKEY
                     AND T_HDR.assigned_to != @CURRENT_EMP_MKEY
                    --OR  
                    --T_HDR.ASSIGNED_TO=@CURRENT_EMP_MKEY  
                    --OR  
                    --T_HDR.RESPOSIBLE_EMP_MKEY=@CURRENT_EMP_MKEY  
                    )
                   AND T_HDR.status IN ( 'COMPLETED' )
            --and Isnull(T_HDR.STATUS_Flag,'A') in ('A')  
			and T_HDR.DELETE_FLAG = 'N' 
            ORDER  BY creation_date DESC
        END

      IF( @FILTER = 'CANCELCLOSE' )
        BEGIN
            SELECT
        T_HDR.mkey,
        Isnull(TMST.type_desc, 'NA')                       CATEGORY,
        T_HDR.task_no,
        dbo.[Initcap](Isnull(CREATOR.emp_full_name, 'NA'))     CREATOR,
        dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, 'NA')) RESPONSIBLE,
        dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, 'NA'))  ACTIONABLE,
        T_HDR.creation_date,
        CONVERT(VARCHAR, T_HDR.completion_date, 103)
        COMPLETION_DATE,
        T_HDR.task_name,
        T_HDR.task_description,
        T_HDR.tags,
        dbo.[Initcap](T_HDR.status)                            STATUS,
        CASE
          WHEN Isnull(CREATOR.first_name, 'NA') !=
               Isnull(RESPONSIBLE.first_name, 'NA')
        THEN dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
        + ' > '
        + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, 'NA') )
          ELSE dbo.[Initcap](Isnull(CREATOR.first_name, 'NA'))
        END
        RESPONSIBLE_TAG,
        dbo.[Initcap](Isnull(PMST.type_desc, ''))              PROJECT_NAME
            FROM   task_hdr T_HDR
                   LEFT JOIN employee_mst CREATOR
                          ON CREATOR.mkey = T_HDR.created_by and CREATOR.DELETE_FLAG = 'N' 
                   LEFT JOIN employee_mst RESPONSIBLE
                          ON RESPONSIBLE.mkey = T_HDR.assigned_to and RESPONSIBLE.DELETE_FLAG = 'N' 
                   LEFT JOIN employee_mst ACTIONABLE
                          ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey and ACTIONABLE.DELETE_FLAG = 'N' 
                   --LEFT JOIN v_category CATEGORY
					   --       ON CATEGORY.mkey = T_HDR.caregory and CATEGORY.DELETE_FLAG = 'N'
					 LEFT JOIN TYPE_MST TMST 
							ON TMST.MASTER_MKEY = T_HDR.caregory AND TMST.TYPE_CODE = 'CATEGORY' AND TMST.DELETE_FLAG = 'N'
					   --LEFT JOIN v_project PROJ
					   --       ON T_HDR.project_id = PROJ.master_mkey and PROJ.DELETE_FLAG = 'N' 
						LEFT JOIN TYPE_MST PMST 
							ON PMST.MASTER_MKEY = T_HDR.project_id AND PMST.TYPE_CODE = 'PROJECT' AND PMST.DELETE_FLAG = 'N'
            WHERE  ( T_HDR.created_by = @CURRENT_EMP_MKEY
                      OR T_HDR.resposible_emp_mkey = @CURRENT_EMP_MKEY )
                   AND T_HDR.status IN ( 'CANCEL', 'CANCELLED' )
				   and T_HDR.DELETE_FLAG = 'N' 
            ORDER  BY creation_date DESC
        END

      EXEC Sp_dashboard_count
        @CURRENT_EMP_MKEY
  --WHERE CONVERT(VARCHAR(25),DATEADD(DAY,@DAY,T_HDR.CREATION_DATE),103)=CONVERT(VARCHAR(25),DATEADD(DAY,@DAY,GETDATE()),103)  
  END 

---------------------------------------------------------------
GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_DASHBOARD_NT]    Script Date: 16-06-2025 16:14:20 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  --		EXEC SP_TASK_DASHBOARD_NT 928,'Review',928,1
 --   EXEC SP_TASK_DASHBOARD_NT 926,5,926,2
ALTER PROCEDURE [dbo].[SP_TASK_DASHBOARD_NT] (@CURRENT_EMP_MKEY  INT,
                    @USER_FILTER       VARCHAR(max) = NULL,--'ALLOCATEDBYME,ALLOCATEDTOME,COMPLETEDBYME,COMPLETEDFORME,CANCELCLOSE',
                    @Session_User_Id   INT,
                    @Business_Group_Id INT)
					--@STATUS_FILTER     NVARCHAR(max) = NULL,--'Completed,Cancelled,Pending,Review',
					--@DURATION_FILTER   NVARCHAR(max) = NULL, -- Today,Future,Overdue,Next 3 Days,Next 7 Days,Next 2 Weeks,Next Month,
					--@PriorityFilter    VARCHAR(max) =NULL,--'High,Medium,Low',
                   -- @TypeFilter        VARCHAR(max) =NULL,--'RECURRING,APPROVAL,COMPLIANCE,APPROVAL,GENERAL,SYSTEM,EMAIL,RERA COMPLAIN';
                    
AS
  BEGIN
      DECLARE @DAY INT
      SET @DAY=0;
      DECLARE @sql NVARCHAR(max) = '';
      DECLARE @start INT = 1,
              @end   INT;
      DECLARE @hasWhereClause BIT = 0;
      DECLARE @WhereClause    NVARCHAR(max) = '',
              @filter         VARCHAR(100),
              @PriorityClause NVARCHAR(max) = '',
              @TypeClause     NVARCHAR(max) = '',
              @TaskTypeMkey   NVARCHAR(50),
              @STATUSClause   NVARCHAR(max) = '',
			  @DurationClause   NVARCHAR(max) = '';

	SET @sql ='SELECT  T_HDR.mkey as Sr_No, T_HDR.mkey,Isnull(TMST.type_desc, ''NA'') CATEGORY,T_HDR.task_no,dbo.[Initcap](Isnull(CREATOR.emp_full_name, ''NA'')) CREATOR,
	  dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, ''NA'')) RESPONSIBLE,
	  dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, ''NA'')) ACTIONABLE,
	  T_HDR.creation_date,                    
	  CASE                      
	  WHEN T_HDR.status IN ( ''CREATED'' ) THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUB TASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUBTASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status IN ( ''WORK IN PROGRESS'', ''CLOSE INITIATED'', ''CANCEL INITIATED'', ''RE-WORK'' ) THEN ''In Progress''                      
	  WHEN T_HDR.status IN ( ''CLOSE'', ''COMPLETED'' ) THEN ''Completed''                      ELSE ''Others''                    END AS Dashboard_Status, 
	  CONVERT(VARCHAR, T_HDR.completion_date, 103) AS COMPLETION_DATE,                    
	  dbo.[Initcap](T_HDR.task_name) AS TASK_NAME,                    
	  T_HDR.task_description,                    
	  T_HDR.tags,                    
	  dbo.[Initcap](T_HDR.status) AS STATUS,                   
	  CASE                      
	  WHEN Isnull(CREATOR.first_name, ''NA'') != Isnull(RESPONSIBLE.first_name, ''NA'') 
	  THEN dbo.[Initcap](Isnull(CREATOR.first_name, ''NA'')) + '' > '' + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, ''NA''))                      
	  ELSE dbo.[Initcap](Isnull(CREATOR.first_name, ''NA''))                    
	  END AS RESPONSIBLE_TAG,                   
	  dbo.[Initcap](Isnull(PMST.type_desc, '''')) AS PROJECT_NAME,                    
	  dbo.Tasknamestring(T_HDR.mkey) AS TASK_HISTORY,                    
	  Isnull(Rtrim(T_HDR.[priority]), '''') AS [Priority],                    
	  Isnull(T_HDR.percent_complete, ''0'') AS Progress_Percentage,                    
	  Isnull(parent_counts.parenttaskcount, 0) AS SubTask_Count,                    
	  T_HDR.CREATED_BY             
	  FROM task_hdr T_HDR             
	  LEFT JOIN employee_mst CREATOR ON CREATOR.mkey = T_HDR.created_by AND CREATOR.delete_flag = ''N''             
	  LEFT JOIN employee_mst RESPONSIBLE ON RESPONSIBLE.mkey = T_HDR.assigned_to AND RESPONSIBLE.delete_flag = ''N''             
	  LEFT JOIN employee_mst ACTIONABLE ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey AND ACTIONABLE.delete_flag = ''N''            
	  LEFT JOIN type_mst TMST ON TMST.master_mkey = T_HDR.caregory AND TMST.type_code = ''CATEGORY'' AND TMST.delete_flag = ''N''             
	  LEFT JOIN type_mst PMST ON PMST.master_mkey = T_HDR.project_id AND PMST.type_code = ''PROJECT'' AND PMST.delete_flag = ''N''             
	  LEFT JOIN (SELECT task_parent_id, Count(*) AS ParentTaskCount                        
	  FROM task_hdr WHERE task_parent_id IS NOT NULL AND mkey NOT IN (task_parent_id) AND delete_flag = ''N''                        
	  GROUP BY task_parent_id) parent_counts ON T_HDR.mkey = parent_counts.task_parent_id             
	  WHERE Isnull(T_HDR.status_flag, ''A'') IN (''A'') AND T_HDR.delete_flag = ''N'' ';
    /* @USER_FILTER */
    IF ( @USER_FILTER <> '' AND @USER_FILTER IS NOT NULL ) -- @USER_FILTER is not null OR
      BEGIN
          WHILE @start <= Len(@USER_FILTER)
            BEGIN
                SET @end = Charindex(',', @USER_FILTER, @start);
                IF @end = 0
                  SET @end = Len(@USER_FILTER) + 1;
                SET @filter = Ltrim(Rtrim(Substring(@USER_FILTER, @start, @end - @start)));
				
                IF @filter = 'Default'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @sql += ' OR ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' ) ';
                        END
                  END

                IF @filter = 'ALLOCATEDBYME' 
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +' ) ';
                        END
                  END

                IF @filter = 'ALLOCATEDTOME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN

                            SET @WhereClause +=' ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+ 
							' OR T_HDR.resposible_emp_mkey = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+')';
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                        SET @WhereClause +=' OR ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +')';
                  END

                IF @filter = 'COMPLETEDBYME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' ( CONVERT(int,T_HDR.assigned_to) = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+
                            ' AND T_HDR.status IN (''COMPLETED''))';
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause += ' OR ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'COMPLETEDFORME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @WhereClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) +
                            ' AND CONVERT(int,T_HDR.assigned_to) != '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+' AND CONVERT(int,T_HDR.assigned_to) != '
                                            + CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+ ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'CANCELCLOSE'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' ( T_HDR.created_by = ' + CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) +
                            ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
                        SET @WhereClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+
                        ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'') ) ';
                  --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                  END
				
				/*Priority Filter */
				 IF @filter = 'High'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                        SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
                  END

                IF @filter = 'Low'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                        SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
						END

                IF @filter = 'Medium'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                        SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'') ';
                  END
				  /* End Priority */

				  /*Type Filter*/
				   IF @filter = 'RECURRING'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'Approval'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'COMPLIANCE'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'GENERAL'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'SYSTEM'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey +') ';
                  END

                IF @filter = 'Email'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'RERA COMPLAIN'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey +') ';
                  END
				  /*End Type Filter*/

				  /*Status Filter*/
						IF @filter = 'Pending'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause += '(T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
														AND STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
														and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
								SET @hasWhereClause = 1;
							END
						ELSE
							SET @WhereClause +=' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
													and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
						END
			
						IF @filter = 'Review'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
								AND T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
								SET @hasWhereClause = 1;
							END
							ELSE
								SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND  T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
						END

						IF @filter = 'Completed'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
								SET @hasWhereClause = 1;
							END
						ELSE
								SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
						END

						IF @filter = 'Cancelled'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
								SET @hasWhereClause = 1;
							END
							ELSE
								SET @WhereClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
						END
				/*End Status Filter*/

						IF @filter = 'Today'
						BEGIN
							IF @hasWhereClause = 0
								BEGIN
									SET @WhereClause += ' ( T_HDR.ASSIGNED_TO = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + '
														  OR T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ') 
															AND CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
															AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'',''Close Initiated''
																,''Cancel Initiated'') ';
									SET @hasWhereClause = 1;
								END
								ELSE
									begin
									SET @WhereClause += ' OR (T_HDR.ASSIGNED_TO = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + '
														  OR T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ') 
														 AND CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) 
															AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'',''Close Initiated''
																,''Cancel Initiated'') ';
									end
						END

						IF @filter = 'Overdue'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ')
														AND T_HDR.COMPLETION_DATE < convert(DATETIME, convert(VARCHAR, getdate(), 103), 103) 
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
								SET @hasWhereClause = 1;
							END
						ELSE
							SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )
													AND T_HDR.COMPLETION_DATE < convert(DATETIME, convert(VARCHAR, getdate(), 103), 103)
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
						END

						IF @filter = 'Future'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													OR T_HDR.ASSIGNED_TO = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )  
													AND  T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'') 
													and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
								SET @hasWhereClause = 1;
							END
						ELSE
								SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													  OR T_HDR.ASSIGNED_TO = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )
													AND  (T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'') 
												and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103)) ';
						END

						IF @filter = 'Next 3 Days'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
					
								--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
								SET @hasWhereClause = 1;
							END
							ELSE
								--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
								SET @WhereClause +=' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
						END

						IF @filter = 'Next 7 Days'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								--SET @DurationClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
								--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
								SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
								SET @hasWhereClause = 1;
							END
						ELSE
							--SET @DurationClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
							--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
							SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
						END

						IF @filter = 'Next 2 Weeks'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								--SET @DurationClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
													T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
								SET @hasWhereClause = 1;
							END
						ELSE
								--SET @DurationClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
								SET @WhereClause +=' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
						END

						IF @filter = 'Next Month'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								--SET @DurationClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
								--SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
								SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)  
															AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
								SET @hasWhereClause = 1;
							END
							ELSE
								--SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
								--SET @DurationClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
								SET @WhereClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
													T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)  
															AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
						END
						
						if (ISNUMERIC(@filter) = 1)
						Begin
						
							IF @hasWhereClause = 0
							BEGIN
					
								--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
													T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY,'+ CONVERT(nvarchar,@filter) +' , GETDATE())) ';
								SET @hasWhereClause = 1;
							END
							ELSE
								--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
								SET @WhereClause +=' OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
											T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY,'+ CONVERT(nvarchar,@filter) +', GETDATE())) ';	
						End

			/*End Duration Filter*/


			SET @start = @end + 1;
            END
			If (@hasWhereClause = 1)
			Begin
				SET @sql += ' AND ( ' + @WhereClause + ' ) ';
			End
			Else if (@hasWhereClause = 0 and @WhereClause is not null or @WhereClause != null)
			Begin
				--print '@WhereClause is not null';
				SET @sql += ' AND ( 1 != 1 ) ';
			End
      END
    ELSE IF( @USER_FILTER IS NULL OR @USER_FILTER = 'Default'  OR @USER_FILTER = '' OR @filter is not null)
      BEGIN
         SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
          SET @hasWhereClause = 1;
          SET @sql += ' AND ( ' + @WhereClause + ' ) ';
      END
    print '@@sql: '+ @sql;
    EXEC Sp_executesql @sql;

    EXEC Sp_dashboard_count @CURRENT_EMP_MKEY;
	-----------------------------------------------------------------------------------------------------
 --   /* @PriorityFilter */
 --   IF ( @PriorityFilter IS NOT NULL
 --        AND @PriorityFilter <> '' )
 --     BEGIN
 --         SET @start = 1;
 --         SET @hasWhereClause = 0;

 --         WHILE @start <= Len(@PriorityFilter)
 --           BEGIN
 --               SET @end = Charindex(',', @PriorityFilter, @start);

 --               IF @end = 0
 --                 SET @end = Len(@PriorityFilter) + 1;

 --               SET @filter = Ltrim(Rtrim(Substring(@PriorityFilter, @start,@end - @start )) );

 --               -- Append the priority condition
 --               IF @filter = 'High'
 --                 BEGIN
 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
 --                           SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
 --                       SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
 --                 END

 --               IF @filter = 'Low'
 --                 BEGIN
 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
 --                           SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
 --                       SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
	--					END

 --               IF @filter = 'Medium'
 --                 BEGIN
 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
 --                           SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
 --                       SET @PriorityClause += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
 --                 END

 --               SET @start = @end + 1;
 --           END
	--		If (@hasWhereClause = 1)
	--		Begin
	--			SET @sql += ' AND ( ' + @PriorityClause + ' ) ';
	--		End
	--		Else if (@hasWhereClause = 0 and @PriorityClause is not null or @PriorityClause != null)
	--		Begin
	--		print '@PriorityFilter';
	--			SET @sql += ' AND ( 1 != 1 ) ';
	--		End
			
 --     END
 --   -----------------------------------------------------------------------------------------------------
 --   /* @TypeFilter */
 --   IF ( @TypeFilter IS NOT NULL
 --        AND @TypeFilter <> '' )
 --     BEGIN
 --         SET @start = 1;
 --         SET @hasWhereClause = 0;

 --         WHILE @start <= Len(@TypeFilter)
 --           BEGIN
 --               SET @end = Charindex(',', @TypeFilter, @start);

 --               IF @end = 0
 --                 SET @end = Len(@TypeFilter) + 1;

 --               SET @filter = Ltrim(Rtrim(Substring(@TypeFilter, @start, @end - @start)));

 --               IF @filter = 'RECURRING'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'Approval'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'COMPLIANCE'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') '
 --                           ;
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'GENERAL'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'SYSTEM'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                 END

 --               IF @filter = 'Email'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'RERA COMPLAIN'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                 END

 --               SET @start = @end + 1;
 --           END
	--		If (@hasWhereClause = 1)
	--		Begin
	--			SET @sql += ' AND ( ' + @TypeClause + ' ) ';
	--		End
	--		Else if (@hasWhereClause = 0 and @TypeClause is not null or @TypeClause != null)
	--		Begin
	--			print '@@TypeClause';
	--			SET @sql += ' AND ( 1 != 1 ) ';
	--		End
 --     END
 --   -----------------------------------------------------------------------------------------------------
 --   /* @STATUS_FILTER */
 --   IF ( @STATUS_FILTER IS NOT NULL
 --        AND @STATUS_FILTER <> '' )
	--	BEGIN
	--	SET @start = 1;
	--	SET @hasWhereClause = 0;

	--	WHILE @start <= Len(@STATUS_FILTER)
	--	BEGIN
	--		SET @end = Charindex(',', @STATUS_FILTER, @start);

	--		IF @end = 0
	--			SET @end = Len(@STATUS_FILTER) + 1;

	--		SET @filter = Ltrim(Rtrim(Substring(@STATUS_FILTER, @start, @end - @start)));

	--		IF @filter = 'Pending'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--										and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--			SET @STATUSClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--									and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--		END
			
	--		IF @filter = 'Review'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				SET @STATUSClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
	--		END

	--		IF @filter = 'Completed'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--				SET @STATUSClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--		END

	--		IF @filter = 'Cancelled'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				SET @STATUSClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--		END

	--		SET @start = @end + 1;
	--	END
	--			If (@hasWhereClause = 1)
	--			Begin
	--				SET @sql += ' AND ( ' + @STATUSClause + ' ) ';
	--			End
	--		Else if (@hasWhereClause = 0 and @STATUSClause is not null or @STATUSClause != null)
	--		Begin
	--		--print '@STATUSClause is not null11';
	--			SET @sql += ' AND ( 1 != 1 ) ';
	--		End
	--		END
 -------------------------------------------------------------------------------------------------------
	--IF ( @DURATION_FILTER IS NOT NULL
 --        AND @DURATION_FILTER <> '' )
	--	BEGIN
	--	SET @start = 1;
	--	SET @hasWhereClause = 0;

	--	WHILE @start <= Len(@DURATION_FILTER)
	--	BEGIN
	--		SET @end = Charindex(',', @DURATION_FILTER, @start);

	--		IF @end = 0
	--			SET @end = Len(@DURATION_FILTER) + 1;

	--		SET @filter = Ltrim(Rtrim(Substring(@DURATION_FILTER, @start, @end - @start)));

	--		IF @filter = 'Today'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--				BEGIN
	--					SET @DurationClause += ' (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
	--											AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--					SET @hasWhereClause = 1;
	--				END
	--				ELSE
	--					begin
	--					SET @DurationClause += ' OR (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) 
	--											AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--					end
	--		END

	--		IF @filter = 'Overdue'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @DurationClause +=' (T_HDR.completion_date < GETDATE() 
	--									AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--			SET @DurationClause += ' OR (T_HDR.completion_date < GETDATE() 
	--									AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--		END

	--		IF @filter = 'Future'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @DurationClause += ' (T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
	--									and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--				SET @DurationClause += ' OR ((T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
	--								and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103)) ';
	--		END

	--		IF @filter = 'Next 3 Days'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
					
	--				--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
	--				SET @DurationClause +=' (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
	--				SET @DurationClause +=' OR (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
	--		END

	--		IF @filter = 'Next 7 Days'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				--SET @DurationClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--				--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--				SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--			--SET @DurationClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--			--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--			SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
	--		END

	--		IF @filter = 'Next 2 Weeks'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				--SET @DurationClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--				SET @DurationClause +=' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--				--SET @DurationClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--				SET @DurationClause +=' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
	--		END

	--		IF @filter = 'Next Month'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				--SET @DurationClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--				--SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
	--				SET @DurationClause += ' ( T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				--SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
	--				--SET @DurationClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--				SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
	--		END

	--		SET @start = @end + 1;
	--	END
	--			If (@hasWhereClause = 1)
	--			Begin
	--				SET @sql += ' AND ( ' + @DurationClause + ' ) ';
	--			End
	--			Else if (@hasWhereClause = 0 and @DurationClause is not null or @DurationClause != null)
	--			Begin
	--			print '@DurationClause is not null';
	--				SET @sql += ' AND ( 1 != 1 ) ';
	--			End
	--		END
END

-------------------------------------------------------

USE [TaskManagement_DEV]
GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_SCHEDULED_MSP]    Script Date: 16-06-2025 18:07:54 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[SP_INSERT_SCHEDULED_MSP](@Parameter1 VARCHAR(100) = NULL,--[Project]       
                                                @Parameter2 VARCHAR(100) = NULL,--Building      
                                                @Parameter3 VARCHAR(100) = NULL,--TASK_NO         
                                                @Parameter4 VARCHAR(100) = NULL,--TASK_DESC      
                                                @Parameter5 VARCHAR(100) = NULL,--DURATION        
                                                @Parameter6 VARCHAR(100) = NULL,--START       
                                                @Parameter7 VARCHAR(100) = NULL --FINISH       
)
AS
  BEGIN
      DECLARE @DCount            INT,
              @ROOT_MKEY         INT,
              @ROOT_NUMBER       NVARCHAR(50),
              @Mkey              INT,
              @WBS               NVARCHAR(50),
              @Name              NVARCHAR(500),
              @Duration          NVARCHAR(100),
              @Start_Date        DATETIME,
              @Finish_Date       DATETIME,
              @Predecessors      NVARCHAR(100),
              @Resource_Names    NVARCHAR(100),
              @Text1             NVARCHAR(100),
              @Outline_Level     INT,
              @Number1           INT,
              @Unique_ID         INT,
              @Percent_Complete  NUMERIC(18, 2),
              @Created_By        INT,
              @Creation_Date     DATETIME,
              @CreatorID         INT,
              @AssigneeID        INT,
              @TaskMkey          INT,
              @Task_Parent_ID    INT,
              @Task_Main_Node_ID INT,
              @Task_No           NVARCHAR(20),
              @Task_Type         INT,
              @Category          INT,
              @FileName          NVARCHAR(255),
              @MPP_NAME          NVARCHAR(255)
      DECLARE @lastIndex INT

      SET @DCount = 0;
      SET @lastIndex = 0;

      SELECT @Task_Type = master_mkey
      FROM   type_mst
      WHERE  delete_flag = 'N'
             AND type_code = 'TASK_TYPE'
             AND type_desc = 'MSP';

      SELECT @Category = master_mkey
      FROM   type_mst
      WHERE  type_code = 'CATEGORY'
             AND type_desc = 'PUBLIC'
             AND delete_flag = 'N';

      SET @Parameter1=Isnull(@Parameter1, '0');
      SET @Parameter2=Isnull(@Parameter2, '0');

      UPDATE msp_default_migration_table
      SET    remarks = 'Error : Resource Not Found'
      FROM   msp_default_migration_table MT
             LEFT JOIN employee_mst EMP
                    ON MT.resource_names = EMP.emp_full_name
             LEFT JOIN employee_mst Creator
                    ON MT.text1 = Creator.emp_full_name
      WHERE  ( Isnull(Creator.mkey, 0) = 0
                OR Isnull(EMP.mkey, 0) = 0 );

      SELECT wbs,
             Count(wbs) C_WBS
      INTO   #tempwbs
      FROM   msp_default_migration_table
      GROUP  BY wbs
      HAVING Count(wbs) > 1;

      UPDATE msp_default_migration_table
      SET    remarks = 'Error : Duplicate WBS No'
      FROM   msp_default_migration_table MT
             JOIN #tempwbs temp
               ON MT.wbs = temp.wbs;

      DROP TABLE #tempwbs;

      SELECT unique_id,
             Count(unique_id) C_unique_id
      INTO   #tempuniqueid
      FROM   msp_default_migration_table
      GROUP  BY unique_id
      HAVING Count(unique_id) > 1;

      UPDATE msp_default_migration_table
      SET    remarks = 'Error : Duplicate unique_id'
      FROM   msp_default_migration_table MT
             JOIN #tempuniqueid temp
               ON MT.unique_id = temp.unique_id

      DROP TABLE #tempuniqueid;
	 
	  --SELECT Outline_Level,
   --          Count(wbs) C_Outline_Level
   --   INTO   #tempOutLineLevel
   --   FROM   msp_default_migration_table
	  --WHERE  Outline_Level = 0
   --   GROUP  BY Outline_Level
   --   HAVING Count(Outline_Level) > 1;

      UPDATE msp_default_migration_table
      SET    remarks = 'Error : OutLine Level Cannot be 0'
	  FROM   msp_default_migration_table MT
      where  Outline_Level = 0

      SELECT @DCount = Isnull(Count(*), 0)
      FROM   msp_default_migration_table MT
      WHERE  remarks LIKE '%Error%';
	  
      IF( @DCount <= 0 )
        BEGIN
            SELECT @DCount = Isnull(Count(*), 0)
            FROM   msp_default_migration_table MT
            WHERE  outline_level = 1

            --AND unique_id = 1     
            --order by Unique_id      
            IF( @DCount > 0 )
              BEGIN
                  SELECT @WBS = wbs,
                         @Name = NAME,
                         @Duration = duration,
                         @Start_Date = start_date,
                         @Finish_Date = finish_date,
                         @Predecessors = predecessors,
                         @Resource_Names = resource_names,
                         @Text1 = text1,
                         @Outline_Level = outline_level,
                         @Number1 = number1,
                         @Unique_ID = unique_id,
                         @Percent_Complete = percent_complete,
                         @Created_By = MT.created_by,
                         @Creation_Date = MT.creation_date,
                         @AssigneeID = emp.mkey,
                         @CreatorID = Creator.mkey,
                         @FileName = [filename],
                         @MPP_NAME = mpp_name
                  FROM   msp_default_migration_table MT
                         LEFT JOIN employee_mst EMP
                                ON MT.resource_names = EMP.emp_full_name
                         LEFT JOIN employee_mst Creator
                                ON MT.text1 = Creator.emp_full_name
                  WHERE  outline_level = 1

                  IF( @Number1 > 0 )/* CHECK WHETHER PROJECT ALREADY DEFINED*/
                    BEGIN
                        SELECT @ROOT_MKEY = mkey,
                               @ROOT_NUMBER = task_no,
                               @Task_Main_Node_ID = mkey
                        FROM   task_hdr
                        WHERE  mkey = @Number1

                        INSERT INTO task_hdr_h
                        SELECT Getdate(),
                               *
                        FROM   task_hdr
                        WHERE  mkey = @Number1

                        UPDATE task_hdr
                        SET    task_name = @Name,
                               task_description = @Name,
                               assigned_to = @AssigneeID,
                               task_created_by = @CreatorID,
                               start_date = @start_date,
                               completion_date = @Finish_Date,
                               is_scheduled = 'Y',
                               wbs = @WBS,
                               duration = @Duration,
                               sch_start_date = @Start_Date,
                               finish_date = @Finish_Date,
                               predecessors = @Predecessors,
                               resource_names = @Resource_Names,
                               text1 = @Text1,
                               outline_level = @Outline_Level,
                               number1 = @Number1,
                               unique_id = @Unique_ID,
                               percent_complete = @Percent_Complete,
                               task_type = @Task_Type,
                               attribute4 = @FileName,
                               attribute5 = @MPP_NAME
                        WHERE  mkey = @Number1
                               AND ( status NOT IN ( 'COMPLETED', 'CANCEL' )
                                      OR predecessors > 0 )
                               AND is_scheduled = 'Y';

                        UPDATE msp_default_migration_table
                        SET    process_flag = 'Y',
                               remarks = 'Task_No Updated Successfully'
                        WHERE  unique_id = @Unique_ID
                               AND outline_level = @Outline_Level;
                    END
                  ELSE
                    /* PROJECT NOT DEFINED SO CREATE A ROOT TASK WITH DETAILS*/
                    BEGIN
                        DECLARE @TableOutput_TASK_DETAILS TABLE
                          (
                             mkey              INT,
                             task_parent_id    NVARCHAR(20),
                             task_main_node_id NVARCHAR(20),
                             task_no           NVARCHAR(20)
                          )

                        PRINT 'INM' + @Resource_Names;

                        INSERT INTO @TableOutput_TASK_DETAILS
                        EXEC [dbo].[Sp_insert_task_details]
                          '0000',
                          @Name,
                          @Name,
                          @Category,
                          @Parameter1,
                          @Parameter2,
                          @Finish_Date,
                          @AssigneeID,
                          -- @Resource_Names,     
                          'Scheduled',
                          'N',
                          --@START_DATE          DATETIME,       
                          '1900-01-01 00:00:00.000',
                          '1900-01-01 00:00:00.000',
                          0,
                          'WIP',
                          '0',
                          @CreatorID,
                          1,
                          @TASK_TYPE,
                          '',
                          '',
                          '',
                          '',
                          @FileName,
                          @MPP_NAME,
                          @CreatorID,
                          '1900-01-01 00:00:00.000',
                          @CreatorID,
                          '1900-01-01 00:00:00.000'

                        PRINT 'INsert ed' + @Resource_Names;

                        --select * from task_hdr      
                        SELECT @TaskMkey = mkey,
                               @Task_Parent_ID = task_parent_id,
                               @Task_Main_Node_ID = task_main_node_id,
                               @Task_No = task_no
                        FROM   @TableOutput_TASK_DETAILS

                        UPDATE task_hdr
                        SET    start_date = @start_date,
                               is_scheduled = 'Y',
                               wbs = @WBS,
                               duration = @Duration,
                               sch_start_date = @Start_Date,
                               finish_date = @Finish_Date,
                               predecessors = @Predecessors,
                               resource_names = @Resource_Names,
                               text1 = @Text1,
                               outline_level = @Outline_Level,
                               number1 = @Number1,
                               unique_id = @Unique_ID,
                               percent_complete = @Percent_Complete,
                               attribute4 = @FileName,
                               attribute5 = @MPP_NAME
                        WHERE  mkey = @TaskMkey;

                        UPDATE msp_default_migration_table
                        SET    number1 = @TaskMkey,
                               process_flag = 'Y',
                               remarks = 'Created Successfully--Task_No-->'
                                         + @Task_No
                        WHERE  unique_id = @Unique_ID
                               AND outline_level = @Outline_Level;
                    END

                  /*Logic For SubTask Creation */
                  DECLARE pcursurbreak CURSOR FOR
                    SELECT wbs,
                           NAME,
                           duration,
                           start_date,
                           finish_date,
                           predecessors,
                           resource_names,
                           text1,
                           outline_level,
                           number1,
                           unique_id,
                           percent_complete,
                           --MT.created_by,     
                           Creator.mkey created_by,
                           MT.creation_date,
                           Creator.mkey 'CreatorID',
                           emp.mkey     'AssigneeID',
                           [filename],
                           mpp_name
                    FROM   msp_default_migration_table MT
                           LEFT JOIN employee_mst EMP
                                  ON MT.resource_names = EMP.emp_full_name
                           LEFT JOIN employee_mst Creator
                                  ON MT.text1 = Creator.emp_full_name
                    WHERE  outline_level > 1
                           AND Isnull(process_flag, 'N') = 'N'
                    ORDER  BY MT.mkey,
                              unique_id

                  OPEN pcursurbreak

                  FETCH next FROM pcursurbreak INTO @WBS, @Name, @Duration,
                  @Start_Date,
                  @Finish_Date, @Predecessors, @Resource_Names, @Text1,
                  @Outline_Level
                  ,
                  @Number1, @Unique_ID, @Percent_Complete, @Created_By,
                  @Creation_Date
                  ,
                  @CreatorID, @AssigneeID, @FileName, @MPP_NAME

                  WHILE @@FETCH_STATUS = 0
                    BEGIN
                        PRINT '@Number1-->' + Cast(@Number1 AS VARCHAR)

                        IF( @Number1 <= 0 )
                          BEGIN
                              SET @lastIndex=0;
                              SET @TaskMkey=0;
                              SET @Task_Parent_ID=0;
                              SET @Task_No=''
                              SET @lastIndex = ( Len(@WBS) ) -
                                               Charindex('.', Reverse(
                                               @WBS))

                              SELECT @Task_No = Substring(@WBS, 0,
                                                @lastindex + 1)

                              SELECT @TaskMkey = number1
                              FROM   msp_default_migration_table
                              WHERE  wbs = '' + @Task_No + ''

                              PRINT '@TaskMkey-->'
                                    + Cast(@TaskMkey AS VARCHAR)

                              SELECT @TaskMkey = mkey,
                                     @Task_Parent_ID = mkey,
                                     @ROOT_NUMBER = task_no
                              FROM   task_hdr
                              WHERE  mkey = @TaskMkey

                              IF( @TaskMkey = 0 )
                                BEGIN
                                    SET @ROOT_NUMBER='';
                                    SET @Task_Parent_ID=0;
                                END
                              ELSE IF( @TaskMkey > 0 )
                                BEGIN
                                    --select * from [TEMPLATE_TASK_DETAILS]      
                                    DECLARE @TableOutput_TASK_NODE_DETAILS TABLE
                                      (
                                         mkey              INT,
                                         task_parent_id    NVARCHAR(20),
                                         task_main_node_id NVARCHAR(20),
                                         task_no           NVARCHAR(20)
                                      )

                                    PRINT 'in insert sub node'

                                    INSERT INTO @TableOutput_TASK_NODE_DETAILS
                                    EXEC [dbo].[Sp_insert_task_node_details]
                                      @Task_Parent_ID,
                                      @Name,
                                      @Name,
                                      @Category,
                                      @Parameter1,
                                      @Parameter2,
                                      @Finish_Date,
                                      @Resource_Names,
                                      'Scheduled',
                                      'N',
                                      '1900-01-01 00:00:00.000',
                                      '1900-01-01 00:00:00.000',
                                      @Task_Parent_ID,
                                      @Task_Main_Node_ID,
                                      @ROOT_NUMBER,
                                      @Task_Type,-- Task_type  
                                      'WIP',
                                      '0',
                                      @CreatorID,
                                      1,
                                      '',
                                      '',
                                      '',
                                      '',
                                      @FileName,-- @ATTRIBUTE4
                                      @MPP_NAME,-- @ATTRIBUTE5    
                                      @CreatorID,
                                      '1900-01-01 00:00:00.000',
                                      @CreatorID,
                                      '1900-01-01 00:00:00.000',
                                      @Task_Parent_ID,
                                      'Low'

                                    PRINT 'Sub node inserted'

                                    SELECT @TaskMkey = mkey,
                                           @Task_Parent_ID = task_parent_id,
                                           @Task_Main_Node_ID =
                                           task_main_node_id,
                                           @Task_No = task_no
                                    FROM   @TableOutput_TASK_NODE_DETAILS

                                    UPDATE task_hdr
                                    SET    start_date = @start_date,
                                           is_scheduled = 'Y',
                                           wbs = @WBS,
                                           duration = @Duration,
                                           sch_start_date = @Start_Date,
                                           finish_date = @Finish_Date,
                                           predecessors = @Predecessors,
                                           resource_names = @Resource_Names,
                                           text1 = @Text1,
                                           outline_level = @Outline_Level,
                                           number1 = @Number1,
                                           unique_id = @Unique_ID,
                                           percent_complete = @Percent_Complete,
                                           attribute4 = @FileName,
                                           attribute5 = @MPP_NAME
                                    WHERE  mkey = @TaskMkey

                                    UPDATE msp_default_migration_table
                                    SET    number1 = @TaskMkey,
                                           process_flag = 'Y',
                                remarks = 'Created Successfully--Task_No-->'
                                          + @Task_No
                                    WHERE  unique_id = @Unique_ID
                                           AND outline_level = @Outline_Level
                                END

                              PRINT 'for @WBS' + @WBS + '-->@ROOT_NUMBER is '
                                    + @ROOT_NUMBER

                              PRINT 'for @WBS @Task_Parent_ID '
                                    + Cast(@Task_Parent_ID AS VARCHAR)

                              PRINT 'for @WBS @Task_Main_Node_ID '
                                    + Cast(@Task_Main_Node_ID AS VARCHAR)
                          END
                        ELSE IF( @Number1 > 0 )/*Start update logic*/
                          BEGIN
                              PRINT 'update'

                              INSERT INTO task_hdr_h
                              SELECT Getdate(),
                                     *
                              FROM   task_hdr
                              WHERE  mkey = @Number1

                              UPDATE task_hdr
                              SET    task_name = @Name,
                                     task_description = @Name,
                                     assigned_to = @AssigneeID,
                                     task_created_by = @CreatorID,
                                     start_date = @start_date,
                                     completion_date = @Finish_Date,
                                     is_scheduled = 'Y',
                                     wbs = @WBS,
                                     duration = @Duration,
                                     sch_start_date = @Start_Date,
                                     finish_date = @Finish_Date,
                                     predecessors = @Predecessors,
                                     resource_names = @Resource_Names,
                                     text1 = @Text1,
                                     outline_level = @Outline_Level,
                                     number1 = @Number1,
                                     unique_id = @Unique_ID,
                                     percent_complete = @Percent_Complete,
                                     attribute4 = @FileName,
                                     attribute5 = @MPP_NAME
                              WHERE  mkey = @Number1
                                     AND ( status NOT IN ( 'COMPLETED', 'CANCEL'
                                                         )
                                            OR Isnull(predecessors, '0') != '0'
                                         )
                                     AND is_scheduled = 'Y'

                              UPDATE msp_default_migration_table
                              SET    process_flag = 'Y',
                                     remarks = 'Task_No Updated Successfully'
                              WHERE  unique_id = @Unique_ID
                                     AND outline_level = @Outline_Level
                          END

                        FETCH next FROM pcursurbreak INTO @WBS, @Name, @Duration
                        ,
                        @Start_Date,
                        @Finish_Date, @Predecessors, @Resource_Names, @Text1,
                        @Outline_Level
                        ,
                        @Number1, @Unique_ID, @Percent_Complete, @Created_By,
                        @Creation_Date
                        ,
                        @CreatorID, @AssigneeID, @FileName, @MPP_NAME
                    END

                  CLOSE pcursurbreak

                  DEALLOCATE pcursurbreak
              END
        END
		print '@DCount: '+ convert(nvarchar, @DCount )
      SELECT *
      FROM   msp_default_migration_table

      -- delete from  MSP_Default_Migration_Table    
      --  TRUNCATE TABLE msp_default_migration_table
  END
--exec [SP_INSERT_SCHEDULED_MSP]  323,324    
--select * from task_hdr where mkey>237  and task_main_node_id=238    
--UPDATE task_hdr SET TASK_NAME='TEST',TASK_DESCRIPTION='TEST',PROJECT_ID=1,SUB_PROJECT_id=0,Is_Scheduled='N',RESPOSIBLE_EMP_MKEY=0,CREATED_BY=0,TASK_CREATED_BY=0,ASSIGNED_TO=0 WHERE MKEY=235    
--update task_hdr set SUB_PROJECT_ID=0 where  mkey>237  and task_main_node_id=238    
--SELECT * FROM TYPE_MST WHERE TYPE_CODE='PROJECT'    
--select * from MSP_Default_Migration_Table      
/*      
declare @x nvarchar(20)       
set @x= '1.2'      
 DECLARE @lastIndex int      
       SET @lastIndex = (LEN(@x)) -  CHARINDEX('.', REVERSE(@x))       
    
     select SUBSTRING(@x, 0, @lastindex + 1)       
           
select REVERSE(@x)      
SELECT RIGHT(@x , CHARINDEX ('.' ,REVERSE(@x))-1)      
select SUBSTRING(@x,len(@x),CHARINDEX('.',@x)-1 )      
*/

---------------------------------------------------------------------------------------------------
18-06-2025

CREATE PROCEDURE [dbo].[SP_GET_BUILDINGCLASS_NT] (
                    @Session_User_Id   INT,
                    @Business_Group_Id INT)
AS
  BEGIN
	SELECT * FROM V_Building_Classification
  END


-------------------------------------------------------------------------------------------------------------------------------
19-06-2025


create view ProjectApproval as
select subp.Mkey
,'Project' as [Type_Code]
,(select TYPE_DESC from TYPE_MST pPro where TYPE_CODE = 'project' 
and ISNULL(DELETE_FLAG,'N') = 'N' and  pPro.MKEY= subp.PARENT_ID) as [Key]
,subp.TYPE_DESC as [DisplayName], 
subp.CREATED_BY as Created_By_Id, 
EMST.EMP_FULL_NAME as Created_By_Name,
subp.Creation_Date,
subp.Last_Updated_By,
LMST.EMP_FULL_NAME as Updated_By_Name, 
subp.Last_Update_Date
From TYPE_MST subp 
inner JOIN EMPLOYEE_MST EMST ON subp.CREATED_BY = EMST.MKEY  
left JOIN EMPLOYEE_MST LMST ON subp.LAST_UPDATED_BY = EMST.MKEY  
where TYPE_CODE = 'Project' and ISNULL(subp.DELETE_FLAG,'N') = 'N' and PARENT_ID != 0
union all 
select subp.Mkey , 'Building' as  [Type_Code], TYPE_CODE as [Key], TYPE_DESC as [DisplayName],subp.CREATED_BY as Created_By_Id, 
EMST.EMP_FULL_NAME as Created_By_Name,
subp.Creation_Date,
subp.Last_Updated_By,
LMST.EMP_FULL_NAME as Updated_By_Name, 
subp.Last_Update_Date
from TYPE_MST subp inner JOIN EMPLOYEE_MST EMST ON subp.CREATED_BY = EMST.MKEY  
left JOIN EMPLOYEE_MST LMST ON subp.LAST_UPDATED_BY = EMST.MKEY
Where type_code = 'BUILDCLASS' and isnull(subp.DELETE_FLAG,'') = 'N'
union all 
select subp.Mkey , 'Building Standard' as  [Type_Code], TYPE_CODE as [Key], TYPE_DESC as [DisplayName],subp.CREATED_BY as Created_By_Id, 
EMST.EMP_FULL_NAME as Created_By_Name,
subp.Creation_Date,
subp.Last_Updated_By,
LMST.EMP_FULL_NAME as Updated_By_Name, 
subp.Last_Update_Date
from TYPE_MST subp inner JOIN EMPLOYEE_MST EMST ON subp.CREATED_BY = EMST.MKEY  
left JOIN EMPLOYEE_MST LMST ON subp.LAST_UPDATED_BY = EMST.MKEY
Where type_code = 'STND' and isnull(subp.DELETE_FLAG,'') = 'N'
union all 
select subp.Mkey , 'Statutory Authority' as  [Type_Code], TYPE_CODE as [Key], TYPE_DESC as [DisplayName],subp.CREATED_BY as Created_By_Id, 
EMST.EMP_FULL_NAME as Created_By_Name,
subp.Creation_Date,
subp.Last_Updated_By,
LMST.EMP_FULL_NAME as Updated_By_Name, 
subp.Last_Update_Date
from TYPE_MST subp inner JOIN EMPLOYEE_MST EMST ON subp.CREATED_BY = EMST.MKEY  
left JOIN EMPLOYEE_MST LMST ON subp.LAST_UPDATED_BY = EMST.MKEY
Where type_code = 'STAAUTH' and isnull(subp.DELETE_FLAG,'') = 'N'


----------------------------------------------------------------------------------------
20-06-2025

GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_DASHBOARD_NT]    Script Date: 20-06-2025 10:44:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  --		EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT',926,1
 --   EXEC SP_TASK_DASHBOARD_NT 926,5,926,2
ALTER PROCEDURE [dbo].[SP_TASK_DASHBOARD_NT] (@CURRENT_EMP_MKEY  INT,
                    @USER_FILTER       VARCHAR(max) = NULL,--'ALLOCATEDBYME,ALLOCATEDTOME,COMPLETEDBYME,COMPLETEDFORME,CANCELCLOSE',
                    @Session_User_Id   INT,
                    @Business_Group_Id INT)
					--@STATUS_FILTER     NVARCHAR(max) = NULL,--'Completed,Cancelled,Pending,Review',
					--@DURATION_FILTER   NVARCHAR(max) = NULL, -- Today,Future,Overdue,Next 3 Days,Next 7 Days,Next 2 Weeks,Next Month,
					--@PriorityFilter    VARCHAR(max) =NULL,--'High,Medium,Low',
                   -- @TypeFilter        VARCHAR(max) =NULL,--'RECURRING,APPROVAL,COMPLIANCE,APPROVAL,GENERAL,SYSTEM,EMAIL,RERA COMPLAIN';
                    
AS
  BEGIN
      DECLARE @DAY INT
      SET @DAY=0;
      DECLARE @sql NVARCHAR(max) = '';
      DECLARE @start INT = 1,
              @end   INT;
      DECLARE @hasWhereClause BIT = 0;
      DECLARE @WhereClause    NVARCHAR(max) = '',
              @filter         VARCHAR(100),
              @PriorityClause NVARCHAR(max) = '',
              @TypeClause     NVARCHAR(max) = '',
              @TaskTypeMkey   NVARCHAR(50),
              @STATUSClause   NVARCHAR(max) = '',
			  @DurationClause   NVARCHAR(max) = '';

	SET @sql ='SELECT  T_HDR.mkey as Sr_No, T_HDR.mkey,Isnull(TMST.type_desc, ''NA'') CATEGORY,T_HDR.task_no,dbo.[Initcap](Isnull(CREATOR.emp_full_name, ''NA'')) CREATOR,
	  dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, ''NA'')) RESPONSIBLE,
	  dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, ''NA'')) ACTIONABLE,
	  T_HDR.creation_date,                    
	  CASE                      
	  WHEN T_HDR.status IN ( ''CREATED'' ) THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUB TASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUBTASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status IN ( ''WORK IN PROGRESS'', ''CLOSE INITIATED'', ''CANCEL INITIATED'', ''RE-WORK'' ) THEN ''In Progress''                      
	  WHEN T_HDR.status IN ( ''CLOSE'', ''COMPLETED'' ) THEN ''Completed''                      ELSE ''Others''                    END AS Dashboard_Status, 
	   T_HDR.completion_date AS COMPLETION_DATE,                    
	  dbo.[Initcap](T_HDR.task_name) AS TASK_NAME,                    
	  T_HDR.task_description,                    
	  T_HDR.tags,                    
	  dbo.[Initcap](T_HDR.status) AS STATUS,                   
	  CASE                      
	  WHEN Isnull(CREATOR.first_name, ''NA'') != Isnull(RESPONSIBLE.first_name, ''NA'') 
	  THEN dbo.[Initcap](Isnull(CREATOR.first_name, ''NA'')) + '' > '' + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, ''NA''))                      
	  ELSE dbo.[Initcap](Isnull(CREATOR.first_name, ''NA''))                    
	  END AS RESPONSIBLE_TAG,                   
	  dbo.[Initcap](Isnull(PMST.type_desc, '''')) AS PROJECT_NAME,                    
	  dbo.Tasknamestring(T_HDR.mkey) AS TASK_HISTORY,                    
	  Isnull(Rtrim(T_HDR.[priority]), '''') AS [Priority],                    
	  Isnull(T_HDR.percent_complete, ''0'') AS Progress_Percentage,                    
	  Isnull(parent_counts.parenttaskcount, 0) AS SubTask_Count,                    
	  T_HDR.CREATED_BY             
	  FROM task_hdr T_HDR             
	  LEFT JOIN employee_mst CREATOR ON CREATOR.mkey = T_HDR.created_by AND CREATOR.delete_flag = ''N''             
	  LEFT JOIN employee_mst RESPONSIBLE ON RESPONSIBLE.mkey = T_HDR.assigned_to AND RESPONSIBLE.delete_flag = ''N''             
	  LEFT JOIN employee_mst ACTIONABLE ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey AND ACTIONABLE.delete_flag = ''N''            
	  LEFT JOIN type_mst TMST ON TMST.master_mkey = T_HDR.caregory AND TMST.type_code = ''CATEGORY'' AND TMST.delete_flag = ''N''             
	  LEFT JOIN type_mst PMST ON PMST.master_mkey = T_HDR.project_id AND PMST.type_code = ''PROJECT'' AND PMST.delete_flag = ''N''             
	  LEFT JOIN (SELECT task_parent_id, Count(*) AS ParentTaskCount                        
	  FROM task_hdr WHERE task_parent_id IS NOT NULL AND mkey NOT IN (task_parent_id) AND delete_flag = ''N''                        
	  GROUP BY task_parent_id) parent_counts ON T_HDR.mkey = parent_counts.task_parent_id             
	  WHERE Isnull(T_HDR.status_flag, ''A'') IN (''A'') AND T_HDR.delete_flag = ''N'' ';
    /* @USER_FILTER */
    IF ( @USER_FILTER <> '' AND @USER_FILTER IS NOT NULL ) -- @USER_FILTER is not null OR
      BEGIN
          WHILE @start <= Len(@USER_FILTER)
            BEGIN
                SET @end = Charindex(',', @USER_FILTER, @start);
                IF @end = 0
                  SET @end = Len(@USER_FILTER) + 1;
                SET @filter = Ltrim(Rtrim(Substring(@USER_FILTER, @start, @end - @start)));
				
                IF @filter = 'Default'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @sql += ' and ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' ) ';
                        END
                  END

                IF @filter = 'ALLOCATEDBYME' 
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @WhereClause += ' and ( T_HDR.created_by = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +' ) ';
                        END
                  END

                IF @filter = 'ALLOCATEDTOME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN

                            SET @WhereClause +=' ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+ 
							' OR T_HDR.resposible_emp_mkey = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+')';
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                        SET @WhereClause +=' and ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +')';
                  END

                IF @filter = 'COMPLETEDBYME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' ( CONVERT(int,T_HDR.assigned_to) = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+
                            ' AND T_HDR.status IN (''COMPLETED''))';
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause += ' AND ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'COMPLETEDFORME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @WhereClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) +
                            ' AND CONVERT(int,T_HDR.assigned_to) != '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause += ' AND ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+' AND CONVERT(int,T_HDR.assigned_to) != '
                                            + CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+ ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'CANCELCLOSE'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' ( T_HDR.created_by = ' + CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) +
                            ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
                        SET @WhereClause += ' AND ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+
                        ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'') ) ';
                  --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                  END
				
				/*Priority Filter */
				 IF @filter = 'High'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                        SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
                  END

                IF @filter = 'Low'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                        SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
						END

                IF @filter = 'Medium'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                        SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'') ';
                  END
				  /* End Priority */

				  /*Type Filter*/
				   IF @filter = 'RECURRING'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'Approval'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'COMPLIANCE'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'GENERAL'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'SYSTEM'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey +') ';
                  END

                IF @filter = 'Email'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'RERA COMPLAIN'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey +') ';
                  END
				  /*End Type Filter*/

				  /*Status Filter*/
						IF @filter = 'Pending'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause += '(T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
														AND STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
														and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
								SET @hasWhereClause = 1;
							END
						ELSE
							SET @WhereClause +=' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
													and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
						END
			
						IF @filter = 'Review'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
								AND T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
								SET @hasWhereClause = 1;
							END
							ELSE
								SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND  T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
						END

						IF @filter = 'Completed'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
								SET @hasWhereClause = 1;
							END
						ELSE
								SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
						END

						IF @filter = 'Cancelled'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
								SET @hasWhereClause = 1;
							END
							ELSE
								SET @WhereClause +=' AND (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
						END
				/*End Status Filter*/

						IF @filter = 'Today'
						BEGIN
							IF @hasWhereClause = 0
								BEGIN
									SET @WhereClause += ' ( T_HDR.ASSIGNED_TO = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + '
														  OR T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ') 
															AND CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
															AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'',''Close Initiated''
																,''Cancel Initiated'') ';
									SET @hasWhereClause = 1;
								END
								ELSE
									begin
									SET @WhereClause += ' and (T_HDR.ASSIGNED_TO = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + '
														  OR T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ') 
														 AND CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) 
															AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'',''Close Initiated''
																,''Cancel Initiated'') ';
									end
						END

						IF @filter = 'Overdue'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ')
														AND T_HDR.COMPLETION_DATE < convert(DATETIME, convert(VARCHAR, getdate(), 103), 103) 
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
								SET @hasWhereClause = 1;
							END
						ELSE
							SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )
													AND T_HDR.COMPLETION_DATE < convert(DATETIME, convert(VARCHAR, getdate(), 103), 103)
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
						END

						IF @filter = 'Future'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													OR T_HDR.ASSIGNED_TO = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )  
													AND  T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'') 
													and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
								SET @hasWhereClause = 1;
							END
						ELSE
								SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													  OR T_HDR.ASSIGNED_TO = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )
													AND  (T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'') 
												and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103)) ';
						END

						IF @filter = 'Next 3 Days'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
					
								--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
								SET @hasWhereClause = 1;
							END
							ELSE
								--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
								SET @WhereClause +=' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
						END

						IF @filter = 'Next 7 Days'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								--SET @DurationClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
								--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
								SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
								SET @hasWhereClause = 1;
							END
						ELSE
							--SET @DurationClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
							--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
							SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
						END

						IF @filter = 'Next 2 Weeks'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								--SET @DurationClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
													T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
								SET @hasWhereClause = 1;
							END
						ELSE
								--SET @DurationClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
								SET @WhereClause +=' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
						END

						IF @filter = 'Next Month'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								--SET @DurationClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
								--SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
								SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)  
															AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
								SET @hasWhereClause = 1;
							END
							ELSE
								--SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
								--SET @DurationClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
								SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
													T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)  
															AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
						END
						
						if (ISNUMERIC(@filter) = 1)
						Begin
						
							IF @hasWhereClause = 0
							BEGIN
					
								--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
													T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY,'+ CONVERT(nvarchar,@filter) +' , GETDATE())) ';
								SET @hasWhereClause = 1;
							END
							ELSE
								--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
								SET @WhereClause +=' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
											T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY,'+ CONVERT(nvarchar,@filter) +', GETDATE())) ';	
						End

			/*End Duration Filter*/


			SET @start = @end + 1;
            END
			If (@hasWhereClause = 1)
			Begin
				SET @sql += ' AND ( ' + @WhereClause + ' ) ';
			End
			Else if (@hasWhereClause = 0 and @WhereClause is not null or @WhereClause != null)
			Begin
				--print '@WhereClause is not null';
				SET @sql += ' AND ( 1 != 1 ) ';
			End
      END
    ELSE IF( @USER_FILTER IS NULL OR @USER_FILTER = 'Default'  OR @USER_FILTER = '' OR @filter is not null)
      BEGIN
         SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
          SET @hasWhereClause = 1;
          SET @sql += ' AND  ' + @WhereClause + '  ';
      END
    print '@@sql: '+ @sql;
    EXEC Sp_executesql @sql;

    EXEC Sp_dashboard_count @CURRENT_EMP_MKEY;
	-----------------------------------------------------------------------------------------------------
 --   /* @PriorityFilter */
 --   IF ( @PriorityFilter IS NOT NULL
 --        AND @PriorityFilter <> '' )
 --     BEGIN
 --         SET @start = 1;
 --         SET @hasWhereClause = 0;

 --         WHILE @start <= Len(@PriorityFilter)
 --           BEGIN
 --               SET @end = Charindex(',', @PriorityFilter, @start);

 --               IF @end = 0
 --                 SET @end = Len(@PriorityFilter) + 1;

 --               SET @filter = Ltrim(Rtrim(Substring(@PriorityFilter, @start,@end - @start )) );

 --               -- Append the priority condition
 --               IF @filter = 'High'
 --                 BEGIN
 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
 --                           SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
 --                       SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
 --                 END

 --               IF @filter = 'Low'
 --                 BEGIN
 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
 --                           SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
 --                       SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
	--					END

 --               IF @filter = 'Medium'
 --                 BEGIN
 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
 --                           SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
 --                       SET @PriorityClause += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
 --                 END

 --               SET @start = @end + 1;
 --           END
	--		If (@hasWhereClause = 1)
	--		Begin
	--			SET @sql += ' AND ( ' + @PriorityClause + ' ) ';
	--		End
	--		Else if (@hasWhereClause = 0 and @PriorityClause is not null or @PriorityClause != null)
	--		Begin
	--		print '@PriorityFilter';
	--			SET @sql += ' AND ( 1 != 1 ) ';
	--		End
			
 --     END
 --   -----------------------------------------------------------------------------------------------------
 --   /* @TypeFilter */
 --   IF ( @TypeFilter IS NOT NULL
 --        AND @TypeFilter <> '' )
 --     BEGIN
 --         SET @start = 1;
 --         SET @hasWhereClause = 0;

 --         WHILE @start <= Len(@TypeFilter)
 --           BEGIN
 --               SET @end = Charindex(',', @TypeFilter, @start);

 --               IF @end = 0
 --                 SET @end = Len(@TypeFilter) + 1;

 --               SET @filter = Ltrim(Rtrim(Substring(@TypeFilter, @start, @end - @start)));

 --               IF @filter = 'RECURRING'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'Approval'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'COMPLIANCE'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') '
 --                           ;
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'GENERAL'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'SYSTEM'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                 END

 --               IF @filter = 'Email'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'RERA COMPLAIN'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                 END

 --               SET @start = @end + 1;
 --           END
	--		If (@hasWhereClause = 1)
	--		Begin
	--			SET @sql += ' AND ( ' + @TypeClause + ' ) ';
	--		End
	--		Else if (@hasWhereClause = 0 and @TypeClause is not null or @TypeClause != null)
	--		Begin
	--			print '@@TypeClause';
	--			SET @sql += ' AND ( 1 != 1 ) ';
	--		End
 --     END
 --   -----------------------------------------------------------------------------------------------------
 --   /* @STATUS_FILTER */
 --   IF ( @STATUS_FILTER IS NOT NULL
 --        AND @STATUS_FILTER <> '' )
	--	BEGIN
	--	SET @start = 1;
	--	SET @hasWhereClause = 0;

	--	WHILE @start <= Len(@STATUS_FILTER)
	--	BEGIN
	--		SET @end = Charindex(',', @STATUS_FILTER, @start);

	--		IF @end = 0
	--			SET @end = Len(@STATUS_FILTER) + 1;

	--		SET @filter = Ltrim(Rtrim(Substring(@STATUS_FILTER, @start, @end - @start)));

	--		IF @filter = 'Pending'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--										and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--			SET @STATUSClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--									and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--		END
			
	--		IF @filter = 'Review'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				SET @STATUSClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
	--		END

	--		IF @filter = 'Completed'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--				SET @STATUSClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--		END

	--		IF @filter = 'Cancelled'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				SET @STATUSClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--		END

	--		SET @start = @end + 1;
	--	END
	--			If (@hasWhereClause = 1)
	--			Begin
	--				SET @sql += ' AND ( ' + @STATUSClause + ' ) ';
	--			End
	--		Else if (@hasWhereClause = 0 and @STATUSClause is not null or @STATUSClause != null)
	--		Begin
	--		--print '@STATUSClause is not null11';
	--			SET @sql += ' AND ( 1 != 1 ) ';
	--		End
	--		END
 -------------------------------------------------------------------------------------------------------
	--IF ( @DURATION_FILTER IS NOT NULL
 --        AND @DURATION_FILTER <> '' )
	--	BEGIN
	--	SET @start = 1;
	--	SET @hasWhereClause = 0;

	--	WHILE @start <= Len(@DURATION_FILTER)
	--	BEGIN
	--		SET @end = Charindex(',', @DURATION_FILTER, @start);

	--		IF @end = 0
	--			SET @end = Len(@DURATION_FILTER) + 1;

	--		SET @filter = Ltrim(Rtrim(Substring(@DURATION_FILTER, @start, @end - @start)));

	--		IF @filter = 'Today'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--				BEGIN
	--					SET @DurationClause += ' (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
	--											AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--					SET @hasWhereClause = 1;
	--				END
	--				ELSE
	--					begin
	--					SET @DurationClause += ' OR (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) 
	--											AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--					end
	--		END

	--		IF @filter = 'Overdue'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @DurationClause +=' (T_HDR.completion_date < GETDATE() 
	--									AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--			SET @DurationClause += ' OR (T_HDR.completion_date < GETDATE() 
	--									AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--		END

	--		IF @filter = 'Future'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @DurationClause += ' (T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
	--									and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--				SET @DurationClause += ' OR ((T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
	--								and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103)) ';
	--		END

	--		IF @filter = 'Next 3 Days'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
					
	--				--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
	--				SET @DurationClause +=' (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
	--				SET @DurationClause +=' OR (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
	--		END

	--		IF @filter = 'Next 7 Days'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				--SET @DurationClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--				--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--				SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--			--SET @DurationClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--			--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--			SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
	--		END

	--		IF @filter = 'Next 2 Weeks'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				--SET @DurationClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--				SET @DurationClause +=' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--				--SET @DurationClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--				SET @DurationClause +=' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
	--		END

	--		IF @filter = 'Next Month'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				--SET @DurationClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--				--SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
	--				SET @DurationClause += ' ( T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				--SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
	--				--SET @DurationClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--				SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
	--		END

	--		SET @start = @end + 1;
	--	END
	--			If (@hasWhereClause = 1)
	--			Begin
	--				SET @sql += ' AND ( ' + @DurationClause + ' ) ';
	--			End
	--			Else if (@hasWhereClause = 0 and @DurationClause is not null or @DurationClause != null)
	--			Begin
	--			print '@DurationClause is not null';
	--				SET @sql += ' AND ( 1 != 1 ) ';
	--			End
	--		END
END

----------------------------------------------------------------

23-06-2025
GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_SCHEDULED_MSP]    Script Date: 23-06-2025 18:27:07 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[SP_INSERT_SCHEDULED_MSP](@Parameter1 VARCHAR(100) = NULL,--[Project]       
                                                @Parameter2 VARCHAR(100) = NULL,--Building      
                                                @Parameter3 VARCHAR(100) = NULL,--TASK_NO         
                                                @Parameter4 VARCHAR(100) = NULL,--TASK_DESC      
                                                @Parameter5 VARCHAR(100) = NULL,--DURATION        
                                                @Parameter6 VARCHAR(100) = NULL,--START       
                                                @Parameter7 VARCHAR(100) = NULL --FINISH       
)
AS
  BEGIN
      DECLARE @DCount            INT,
              @ROOT_MKEY         INT,
              @ROOT_NUMBER       NVARCHAR(50),
              @Mkey              INT,
              @WBS               NVARCHAR(50),
              @Name              NVARCHAR(500),
              @Duration          NVARCHAR(100),
              @Start_Date        DATETIME,
              @Finish_Date       DATETIME,
              @Predecessors      NVARCHAR(100),
              @Resource_Names    NVARCHAR(100),
              @Text1             NVARCHAR(100),
              @Outline_Level     INT,
              @Number1           INT,
              @Unique_ID         INT,
              @Percent_Complete  NUMERIC(18, 2),
              @Created_By        INT,
              @Creation_Date     DATETIME,
              @CreatorID         INT,
              @AssigneeID        INT,
              @TaskMkey          INT,
              @Task_Parent_ID    INT,
              @Task_Main_Node_ID INT,
              @Task_No           NVARCHAR(20),
              @Task_Type         INT,
              @Category          INT,
              @FileName          NVARCHAR(255),
              @MPP_NAME          NVARCHAR(255)
      DECLARE @lastIndex INT

      SET @DCount = 0;
      SET @lastIndex = 0;

      SELECT @Task_Type = master_mkey
      FROM   type_mst
      WHERE  delete_flag = 'N'
             AND type_code = 'TASK_TYPE'
             AND type_desc = 'MSP';

      SELECT @Category = master_mkey
      FROM   type_mst
      WHERE  type_code = 'CATEGORY'
             AND type_desc = 'PUBLIC'
             AND delete_flag = 'N';

      SET @Parameter1=Isnull(@Parameter1, '0');
      SET @Parameter2=Isnull(@Parameter2, '0');

      UPDATE msp_default_migration_table
      SET    remarks = 'Error : Resource Not Found'
      FROM   msp_default_migration_table MT
             LEFT JOIN employee_mst EMP
                    ON MT.resource_names = EMP.emp_full_name
             LEFT JOIN employee_mst Creator
                    ON MT.text1 = Creator.emp_full_name
      WHERE  ( Isnull(Creator.mkey, 0) = 0
                OR Isnull(EMP.mkey, 0) = 0 );

		-- TO check null value in wbs 
		UPDATE msp_default_migration_table
		SET    remarks = 'Error : WBS is null'
		FROM   msp_default_migration_table MT
		where  MT.WBS is null or MT.WBS = ''
		-- end 

		  SELECT wbs,
				 Count(wbs) C_WBS
		  INTO   #tempwbs
		  FROM   msp_default_migration_table
		  GROUP  BY wbs
		  HAVING Count(wbs) > 1;

		  UPDATE msp_default_migration_table
		  SET    remarks = 'Error : Duplicate WBS No'
		  FROM   msp_default_migration_table MT
				 JOIN #tempwbs temp
				   ON MT.wbs = temp.wbs;
		  DROP TABLE #tempwbs;

		-- Duplicate WBS
		Select WBS ,count(WBS) as Count_Wbs 
		INTO   #tempCWBS
		from TASK_HDR 
		where PROJECT_ID = @Parameter1 and  SUB_PROJECT_ID = @Parameter2
		and Is_Scheduled is not null
		group by WBS 
		having COUNT(WBS) >= 1

		UPDATE msp_default_migration_table
		SET    remarks = 'Error : Duplicate WBS in PROJECT_ID: '+ @Parameter1 + ' and  SUB_PROJECT_ID: '+ @Parameter2 + ' '
		FROM   msp_default_migration_table MT
			JOIN #tempCWBS temp
			ON MT.WBS = temp.WBS

		DROP TABLE #tempCWBS;
		--end  Duplicate WBS
		
      SELECT unique_id,
             Count(unique_id) C_unique_id
      INTO   #tempuniqueid
      FROM   msp_default_migration_table
      GROUP  BY unique_id
      HAVING Count(unique_id) > 1;

      UPDATE msp_default_migration_table
      SET    remarks = 'Error : Duplicate unique_id'
      FROM   msp_default_migration_table MT
             JOIN #tempuniqueid temp
               ON MT.unique_id = temp.unique_id

      DROP TABLE #tempuniqueid;



	  SELECT Outline_Level,
             Count(wbs) C_Outline_Level
      INTO   #tempOutLineLevel
      FROM   msp_default_migration_table
	  WHERE  Outline_Level = 0
      GROUP  BY Outline_Level
      HAVING Count(Outline_Level) >= 1;

      UPDATE msp_default_migration_table
      SET    remarks = 'Error : OutLine Level Cannot be 0'
      FROM   msp_default_migration_table MT
             JOIN #tempOutLineLevel temp
               ON MT.Outline_Level = temp.Outline_Level;

      DROP TABLE #tempOutLineLevel;


      SELECT @DCount = Isnull(Count(*), 0)
      FROM   msp_default_migration_table MT
      WHERE  remarks LIKE '%Error%';

      IF( @DCount <= 0 )
        BEGIN
            SELECT @DCount = Isnull(Count(*), 0)
            FROM   msp_default_migration_table MT
            WHERE  outline_level = 1

            --AND unique_id = 1     
            --order by Unique_id      
            IF( @DCount > 0 )
              BEGIN
                  SELECT @WBS = wbs,
                         @Name = NAME,
                         @Duration = duration,
                         @Start_Date = start_date,
                         @Finish_Date = finish_date,
                         @Predecessors = predecessors,
                         @Resource_Names = resource_names,
                         @Text1 = text1,
                         @Outline_Level = outline_level,
                         @Number1 = number1,
                         @Unique_ID = unique_id,
                         @Percent_Complete = percent_complete,
                         @Created_By = MT.created_by,
                         @Creation_Date = MT.creation_date,
                         @AssigneeID = emp.mkey,
                         @CreatorID = Creator.mkey,
                         @FileName = [filename],
                         @MPP_NAME = mpp_name
                  FROM   msp_default_migration_table MT
                         LEFT JOIN employee_mst EMP
                                ON MT.resource_names = EMP.emp_full_name
                         LEFT JOIN employee_mst Creator
                                ON MT.text1 = Creator.emp_full_name
                  WHERE  outline_level = 1

                  IF( @Number1 > 0 )/* CHECK WHETHER PROJECT ALREADY DEFINED*/
                    BEGIN
                        SELECT @ROOT_MKEY = mkey,
                               @ROOT_NUMBER = task_no,
                               @Task_Main_Node_ID = mkey
                        FROM   task_hdr
                        WHERE  mkey = @Number1

                        INSERT INTO task_hdr_h
                        SELECT Getdate(),
                               *
                        FROM   task_hdr
                        WHERE  mkey = @Number1

                        UPDATE task_hdr
                        SET    task_name = @Name,
                               task_description = @Name,
                               assigned_to = @AssigneeID,
                               task_created_by = @CreatorID,
                               start_date = @start_date,
                               completion_date = @Finish_Date,
                               is_scheduled = 'Y',
                               wbs = @WBS,
                               duration = @Duration,
                               sch_start_date = @Start_Date,
                               finish_date = @Finish_Date,
                               predecessors = @Predecessors,
                               resource_names = @Resource_Names,
                               text1 = @Text1,
                               outline_level = @Outline_Level,
                               number1 = @Number1,
                               unique_id = @Unique_ID,
                               percent_complete = @Percent_Complete,
                               task_type = @Task_Type,
                               attribute4 = @FileName,
                               attribute5 = @MPP_NAME
                        WHERE  mkey = @Number1
                               AND ( status NOT IN ( 'COMPLETED', 'CANCEL' )
                                      OR predecessors > 0 )
                               AND is_scheduled = 'Y';

                        UPDATE msp_default_migration_table
                        SET    process_flag = 'Y',
                               remarks = 'Task_No Updated Successfully'
                        WHERE  unique_id = @Unique_ID
                               AND outline_level = @Outline_Level;
                    END
                  ELSE
                    /* PROJECT NOT DEFINED SO CREATE A ROOT TASK WITH DETAILS*/
                    BEGIN
                        DECLARE @TableOutput_TASK_DETAILS TABLE
                          (
                             mkey              INT,
                             task_parent_id    NVARCHAR(20),
                             task_main_node_id NVARCHAR(20),
                             task_no           NVARCHAR(20)
                          )

                        PRINT 'INM' + @Resource_Names;

                        INSERT INTO @TableOutput_TASK_DETAILS
                        EXEC [dbo].[Sp_insert_task_details]
                          '0000',
                          @Name,
                          @Name,
                          @Category,
                          @Parameter1,
                          @Parameter2,
                          @Finish_Date,
                          @AssigneeID,
                          -- @Resource_Names,     
                          'Scheduled',
                          'N',
                          --@START_DATE          DATETIME,       
                          '1900-01-01 00:00:00.000',
                          '1900-01-01 00:00:00.000',
                          0,
                          'WIP',
                          '0',
                          @CreatorID,
                          1,
                          @TASK_TYPE,
                          '',
                          '',
                          '',
                          '',
                          @FileName,
                          @MPP_NAME,
                          @CreatorID,
                          '1900-01-01 00:00:00.000',
                          @CreatorID,
                          '1900-01-01 00:00:00.000'

                        PRINT 'INsert ed' + @Resource_Names;

                        --select * from task_hdr      
                        SELECT @TaskMkey = mkey,
                               @Task_Parent_ID = task_parent_id,
                               @Task_Main_Node_ID = task_main_node_id,
                               @Task_No = task_no
                        FROM   @TableOutput_TASK_DETAILS

                        UPDATE task_hdr
                        SET    start_date = @start_date,
                               is_scheduled = 'Y',
                               wbs = @WBS,
                               duration = @Duration,
                               sch_start_date = @Start_Date,
                               finish_date = @Finish_Date,
                               predecessors = @Predecessors,
                               resource_names = @Resource_Names,
                               text1 = @Text1,
                               outline_level = @Outline_Level,
                               number1 = @Number1,
                               unique_id = @Unique_ID,
                               percent_complete = @Percent_Complete,
                               attribute4 = @FileName,
                               attribute5 = @MPP_NAME
                        WHERE  mkey = @TaskMkey;

                        UPDATE msp_default_migration_table
                        SET    number1 = @TaskMkey,
                               process_flag = 'Y',
                               remarks = 'Created Successfully--Task_No-->'
                                         + @Task_No
                        WHERE  unique_id = @Unique_ID
                               AND outline_level = @Outline_Level;
                    END

                  /*Logic For SubTask Creation */
                  DECLARE pcursurbreak CURSOR FOR
                    SELECT wbs,
                           NAME,
                           duration,
                           start_date,
                           finish_date,
                           predecessors,
                           resource_names,
                           text1,
                           outline_level,
                           number1,
                           unique_id,
                           percent_complete,
                           --MT.created_by,     
                           Creator.mkey created_by,
                           MT.creation_date,
                           Creator.mkey 'CreatorID',
                           emp.mkey     'AssigneeID',
                           [filename],
                           mpp_name
                    FROM   msp_default_migration_table MT
                           LEFT JOIN employee_mst EMP
                                  ON MT.resource_names = EMP.emp_full_name
                           LEFT JOIN employee_mst Creator
                                  ON MT.text1 = Creator.emp_full_name
                    WHERE  outline_level > 1
                           AND Isnull(process_flag, 'N') = 'N'
                    ORDER  BY MT.mkey,
                              unique_id

                  OPEN pcursurbreak

                  FETCH next FROM pcursurbreak INTO @WBS, @Name, @Duration,
                  @Start_Date,
                  @Finish_Date, @Predecessors, @Resource_Names, @Text1,
                  @Outline_Level
                  ,
                  @Number1, @Unique_ID, @Percent_Complete, @Created_By,
                  @Creation_Date
                  ,
                  @CreatorID, @AssigneeID, @FileName, @MPP_NAME

                  WHILE @@FETCH_STATUS = 0
                    BEGIN
                        PRINT '@Number1-->' + Cast(@Number1 AS VARCHAR)

                        IF( @Number1 <= 0 )
                          BEGIN
                              SET @lastIndex=0;
                              SET @TaskMkey=0;
                              SET @Task_Parent_ID=0;
                              SET @Task_No=''
                              SET @lastIndex = ( Len(@WBS) ) -
                                               Charindex('.', Reverse(
                                               @WBS))

                              SELECT @Task_No = Substring(@WBS, 0,
                                                @lastindex + 1)

                              SELECT @TaskMkey = number1
                              FROM   msp_default_migration_table
                              WHERE  wbs = '' + @Task_No + ''

                              PRINT '@TaskMkey-->'
                                    + Cast(@TaskMkey AS VARCHAR)

                              SELECT @TaskMkey = mkey,
                                     @Task_Parent_ID = mkey,
                                     @ROOT_NUMBER = task_no
                              FROM   task_hdr
                              WHERE  mkey = @TaskMkey

                              IF( @TaskMkey = 0 )
                                BEGIN
                                    SET @ROOT_NUMBER='';
                                    SET @Task_Parent_ID=0;
                                END
                              ELSE IF( @TaskMkey > 0 )
                                BEGIN
                                    --select * from [TEMPLATE_TASK_DETAILS]      
                                    DECLARE @TableOutput_TASK_NODE_DETAILS TABLE
                                      (
                                         mkey              INT,
                                         task_parent_id    NVARCHAR(20),
                                         task_main_node_id NVARCHAR(20),
                                         task_no           NVARCHAR(20)
                                      )

                                    PRINT 'in insert sub node'

                                    INSERT INTO @TableOutput_TASK_NODE_DETAILS
                                    EXEC [dbo].[Sp_insert_task_node_details]
                                      @Task_Parent_ID,
                                      @Name,
                                      @Name,
                                      @Category,
                                      @Parameter1,
                                      @Parameter2,
                                      @Finish_Date,
                                      @Resource_Names,
                                      'Scheduled',
                                      'N',
                                      '1900-01-01 00:00:00.000',
                                      '1900-01-01 00:00:00.000',
                                      @Task_Parent_ID,
                                      @Task_Main_Node_ID,
                                      @ROOT_NUMBER,
                                      @Task_Type,-- Task_type  
                                      'WIP',
                                      '0',
                                      @CreatorID,
                                      1,
                                      '',
                                      '',
                                      '',
                                      '',
                                      @FileName,-- @ATTRIBUTE4
                                      @MPP_NAME,-- @ATTRIBUTE5    
                                      @CreatorID,
                                      '1900-01-01 00:00:00.000',
                                      @CreatorID,
                                      '1900-01-01 00:00:00.000',
                                      @Task_Parent_ID,
                                      'Low'

                                    PRINT 'Sub node inserted'

                                    SELECT @TaskMkey = mkey,
                                           @Task_Parent_ID = task_parent_id,
                                           @Task_Main_Node_ID =
                                           task_main_node_id,
                                           @Task_No = task_no
                                    FROM   @TableOutput_TASK_NODE_DETAILS

                                    UPDATE task_hdr
                                    SET    start_date = @start_date,
                                           is_scheduled = 'Y',
                                           wbs = @WBS,
                                           duration = @Duration,
                                           sch_start_date = @Start_Date,
                                           finish_date = @Finish_Date,
                                           predecessors = @Predecessors,
                                           resource_names = @Resource_Names,
                                           text1 = @Text1,
                                           outline_level = @Outline_Level,
                                           number1 = @Number1,
                                           unique_id = @Unique_ID,
                                           percent_complete = @Percent_Complete,
                                           attribute4 = @FileName,
                                           attribute5 = @MPP_NAME
                                    WHERE  mkey = @TaskMkey

                                    UPDATE msp_default_migration_table
                                    SET    number1 = @TaskMkey,
                                           process_flag = 'Y',
                                remarks = 'Created Successfully--Task_No-->'
                                          + @Task_No
                                    WHERE  unique_id = @Unique_ID
                                           AND outline_level = @Outline_Level
                                END

                              PRINT 'for @WBS' + @WBS + '-->@ROOT_NUMBER is '
                                    + @ROOT_NUMBER

                              PRINT 'for @WBS @Task_Parent_ID '
                                    + Cast(@Task_Parent_ID AS VARCHAR)

                              PRINT 'for @WBS @Task_Main_Node_ID '
                                    + Cast(@Task_Main_Node_ID AS VARCHAR)
                          END
                        ELSE IF( @Number1 > 0 )/*Start update logic*/
                          BEGIN
                              PRINT 'update'

                              INSERT INTO task_hdr_h
                              SELECT Getdate(),
                                     *
                              FROM   task_hdr
                              WHERE  mkey = @Number1

                              UPDATE task_hdr
                              SET    task_name = @Name,
                                     task_description = @Name,
                                     assigned_to = @AssigneeID,
                                     task_created_by = @CreatorID,
                                     start_date = @start_date,
                                     completion_date = @Finish_Date,
                                     is_scheduled = 'Y',
                                     wbs = @WBS,
                                     duration = @Duration,
                                     sch_start_date = @Start_Date,
                                     finish_date = @Finish_Date,
                                     predecessors = @Predecessors,
                                     resource_names = @Resource_Names,
                                     text1 = @Text1,
                                     outline_level = @Outline_Level,
                                     number1 = @Number1,
                                     unique_id = @Unique_ID,
                                     percent_complete = @Percent_Complete,
                                     attribute4 = @FileName,
                                     attribute5 = @MPP_NAME
                              WHERE  mkey = @Number1
                                     AND ( status NOT IN ( 'COMPLETED', 'CANCEL'
                                                         )
                                            OR Isnull(predecessors, '0') != '0'
                                         )
                                     AND is_scheduled = 'Y'

                              UPDATE msp_default_migration_table
                              SET    process_flag = 'Y',
                                     remarks = 'Task_No Updated Successfully'
                              WHERE  unique_id = @Unique_ID
                                     AND outline_level = @Outline_Level
                          END

                        FETCH next FROM pcursurbreak INTO @WBS, @Name, @Duration
                        ,
                        @Start_Date,
                        @Finish_Date, @Predecessors, @Resource_Names, @Text1,
                        @Outline_Level
                        ,
                        @Number1, @Unique_ID, @Percent_Complete, @Created_By,
                        @Creation_Date
                        ,
                        @CreatorID, @AssigneeID, @FileName, @MPP_NAME
                    END

                  CLOSE pcursurbreak

                  DEALLOCATE pcursurbreak
              END
        END

      SELECT *
      FROM   msp_default_migration_table

      -- delete from  MSP_Default_Migration_Table    
     TRUNCATE TABLE msp_default_migration_table
  END
--exec [SP_INSERT_SCHEDULED_MSP]  323,324    
--select * from task_hdr where mkey>237  and task_main_node_id=238    
--UPDATE task_hdr SET TASK_NAME='TEST',TASK_DESCRIPTION='TEST',PROJECT_ID=1,SUB_PROJECT_id=0,Is_Scheduled='N',RESPOSIBLE_EMP_MKEY=0,CREATED_BY=0,TASK_CREATED_BY=0,ASSIGNED_TO=0 WHERE MKEY=235    
--update task_hdr set SUB_PROJECT_ID=0 where  mkey>237  and task_main_node_id=238    
--SELECT * FROM TYPE_MST WHERE TYPE_CODE='PROJECT'    
--select * from MSP_Default_Migration_Table      
/*      
declare @x nvarchar(20)       
set @x= '1.2'      
 DECLARE @lastIndex int      
       SET @lastIndex = (LEN(@x)) -  CHARINDEX('.', REVERSE(@x))       
    
     select SUBSTRING(@x, 0, @lastindex + 1)       
           
select REVERSE(@x)      
SELECT RIGHT(@x , CHARINDEX ('.' ,REVERSE(@x))-1)      
select SUBSTRING(@x,len(@x),CHARINDEX('.',@x)-1 )      
*/

---------------------------------------------------------------------------------------

24-06-2025


GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_TASK_DETAILS_NT]    Script Date: 24-06-2025 17:30:40 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[SP_INSERT_TASK_DETAILS_NT](@TASK_NO              VARCHAR(250),
                                                  @TASK_NAME            VARCHAR(250),
                                                  @TASK_DESCRIPTION     VARCHAR(250) = NULL,
                                                  @CATEGORY             VARCHAR(250)= NULL,
                                                  @PROJECT_ID           VARCHAR(250)= NULL,
                                                  @SUBPROJECT_ID        VARCHAR(250)= NULL,
                                                  @ASSING_BY_EMAIL      NVARCHAR(max)= NULL,
                                                  @CREATED_BY_EMAIL     NVARCHAR(max)= NULL,
                                                  @COMPLETION_DATE      DATETIME= NULL,
                                                  @ASSIGNED_TO          VARCHAR(250) = NULL,
                                                  @TAGS                 VARCHAR(250) = NULL,
                                                  @ISNODE               CHAR(1),
                                                  --@START_DATE          DATETIME, 
                                                  @CLOSE_DATE           DATETIME= NULL,
                                                  @DUE_DATE             DATETIME= NULL,
                                                  @TASK_PARENT_ID       INT,
                                                  @STATUS               VARCHAR(250) = NULL,
                                                  @STATUS_PERC          VARCHAR(250) = NULL,
                                                  @TASK_CREATED_BY      INT,
                                                  @APPROVER_ID          INT =NULL,
                                                  @TASK_TYPE            INT =NULL,
                                                  @IS_ARCHIVE           CHAR(1)= NULL,
                                                  @ATTRIBUTE1           VARCHAR(250)= NULL,
                                                  @ATTRIBUTE2           VARCHAR(250)= NULL,
                                                  @ATTRIBUTE3           VARCHAR(250)= NULL,
                                                  @ATTRIBUTE4           VARCHAR(250)= NULL,
                                                  @ATTRIBUTE5           VARCHAR(250)= NULL,
                                                  @CREATED_BY           INT,
                                                  @CREATION_DATE        DATETIME,
                                                  @LAST_UPDATED_BY      INT,
                                                  @APPROVE_ACTION_DATE  DATETIME= NULL,
                                                  @Priority             NCHAR(40) = NULL,
                                                  @Tentative_Start_Date DATETIME= NULL,
                                                  @Tentative_End_Date   DATETIME= NULL,
                                                  @Actual_Start_Date    DATETIME= NULL,
                                                  @Actual_End_Date      DATETIME= NULL)
AS
  BEGIN
		DECLARE @ASSING_MKEY INT, @CREATED_MKEY INT;
		IF (@ASSING_BY_EMAIL IS NOT NULL AND @CREATED_BY_EMAIL IS NOT NULL)
		BEGIN

			SELECT @ASSING_MKEY = count(*) FROM EMPLOYEE_MST WHERE (EMAIL_ID_PERSONAL = @ASSING_BY_EMAIL OR EMAIL_ID_OFFICIAL = @ASSING_BY_EMAIL) AND DELETE_FLAG = 'N';
			SELECT @CREATED_MKEY = count(*) FROM EMPLOYEE_MST WHERE (EMAIL_ID_PERSONAL = @CREATED_BY_EMAIL OR EMAIL_ID_OFFICIAL = @CREATED_BY_EMAIL) AND DELETE_FLAG = 'N';

			IF((@ASSING_MKEY IS NULL OR @CREATED_MKEY IS NULL) OR (@ASSING_MKEY = 0 OR @CREATED_MKEY = 0))
			BEGIN
				 SELECT 'Error' [Status] ,
				 	 'Assign By Email or Created By Email not present' AS '@ATTRIBUTE1',
					 'Assign By Email or Created By Email not present' AS 'Message';
					 
					 GOTO ENDTASK;
			END

			SELECT @ASSING_MKEY = mkey FROM EMPLOYEE_MST WHERE (EMAIL_ID_PERSONAL = @ASSING_BY_EMAIL OR EMAIL_ID_OFFICIAL = @ASSING_BY_EMAIL) AND DELETE_FLAG = 'N';
			SELECT @CREATED_MKEY = mkey FROM EMPLOYEE_MST WHERE (EMAIL_ID_PERSONAL = @CREATED_BY_EMAIL OR EMAIL_ID_OFFICIAL = @CREATED_BY_EMAIL) AND DELETE_FLAG = 'N';
		END
			 INSERT INTO [dbo].[TEMPLATE_TASK_DETAILS]
           ([TASK_NO]
           ,[TASK_NAME]
           ,[TASK_DESCRIPTION]
           ,[CATEGORY]
           ,[PROJECT_ID]
           ,[SUBPROJECT_ID]
           ,[COMPLETION_DATE]
           ,[ASSIGNED_TO]
           ,[TAGS]
           ,[ISNODE]
           ,[CLOSE_DATE]
           ,[DUE_DATE]
           ,[TASK_PARENT_ID]
           ,[STATUS]
           ,[STATUS_PERC]
           ,[TASK_CREATED_BY]
           ,[APPROVER_ID]
		   ,[TASK_TYPE]
           ,[IS_ARCHIVE]
           ,[ATTRIBUTE1]
           ,[ATTRIBUTE2]
           ,[ATTRIBUTE3]
           ,[ATTRIBUTE4]
           ,[ATTRIBUTE5]
           ,[CREATED_BY]
           ,[CREATION_DATE]
           ,[LAST_UPDATED_BY]
           ,[APPROVE_ACTION_DATE]
		   ,FunctionCall
		   ,Priority
			,Tentative_Start_Date
			,Tentative_End_Date
			,Actual_Start_Date
			,Actual_End_Date
		   )
     VALUES
           (@TASK_NO             , 
                                        @TASK_NAME           , 
                                        @TASK_DESCRIPTION    , 
                                        @CATEGORY            , 
                                        @PROJECT_ID          , 
                                        @SUBPROJECT_ID       , 
                                        @COMPLETION_DATE     , 
                                        --@ASSIGNED_TO         , 
										CASE WHEN @ASSING_MKEY IS NULL THEN @ASSIGNED_TO ELSE @ASSING_MKEY END,
                                        @TAGS                , 
                                        @ISNODE              , 
                                        --@START_DATE          DATETIME, 
                                        @CLOSE_DATE          , 
                                        @DUE_DATE            , 
                                        @TASK_PARENT_ID      , 
                                        @STATUS              , 
                                        @STATUS_PERC         , 
                                        @TASK_CREATED_BY     , 
                                        @APPROVER_ID         , 
										@TASK_TYPE	         ,
                                        @IS_ARCHIVE          , 
                                        @ATTRIBUTE1          , 
                                        @ATTRIBUTE2          , 
                                        @ATTRIBUTE3          , 
                                        @ATTRIBUTE4          , 
                                        @ATTRIBUTE5          , 
                                        --@CREATED_BY          , 
										CASE WHEN @CREATED_MKEY IS NULL THEN @CREATED_BY ELSE @CREATED_MKEY END,
                                        @CREATION_DATE       , 
                                        @LAST_UPDATED_BY     , 
                                        @APPROVE_ACTION_DATE,'SP_INSERT_TASK_DETAILS',
										@Priority ,
										 @Tentative_Start_Date,
										 @Tentative_End_Date ,
										 @Actual_Start_Date ,
										 @Actual_End_Date 
										 )

      --return;
      DECLARE @Dcount INT;

      SET @TASK_NO='100';

      SELECT @Dcount = Count(*)
      FROM   task_hdr
      WHERE  task_no NOT LIKE '%.%'
             AND mkey = (SELECT Max(mkey)
                         FROM   task_hdr
                         WHERE  task_no NOT LIKE '%.%');

      IF @Dcount > 0
        BEGIN
            SELECT @TASK_NO = Cast(Cast(Isnull(task_no, '100') AS FLOAT) + 1 AS
                                   VARCHAR)
            FROM   task_hdr
            WHERE  task_no NOT LIKE '%.%'
                   AND mkey = (SELECT Max(mkey)
                               FROM   task_hdr
                               WHERE  task_no NOT LIKE '%.%');
        END

      SET @STATUS='CREATED';
      SET @TASK_PARENT_ID = 0;

      --select * from type_mst where type_code='STATUS'
      SELECT @ASSIGNED_TO = Cast(mkey AS VARCHAR)
      FROM   employee_mst
      WHERE  emp_full_name = @ASSIGNED_TO;

      IF( @TASK_CREATED_BY = @ASSIGNED_TO )
        BEGIN
            SET @STATUS='WORK IN PROGRESS';
        END

       INSERT INTO [DBO].[task_hdr] 
                  ([task_no], 
                   [task_name], 
                   [task_description], 
                   [caregory], 
                   [project_id], 
                   [sub_project_id], 
                   [start_date], 
                   [completion_date], 
                   [close_date], 
                   [due_date], 
                   [assigned_to], 
                   [tags], 
                   [isnode], 
                   [task_parent_id],
                   [TASK_MAIN_NODE_ID], 
                   [status], 
                   [status_perc], 
                   [task_created_by], 
				   [task_type],
                   [approver_id], 
                   [approve_action_date], 
                   [is_archive], 
                   [attribute1], 
                   [attribute2], 
                   [attribute3], 
                   [attribute4], 
                   [attribute5], 
                   [created_by], 
                   [creation_date], 
                   [last_updated_by], 
                   [last_update_date], 
                   [delete_flag],RESPOSIBLE_EMP_MKEY,
				   Priority
				  ,Tentative_Start_Date
				  ,Tentative_End_Date
				  ,Actual_Start_Date
				  ,Actual_End_Date
				  ) 
      VALUES      ( @TASK_NO, 
                    @TASK_NAME, 
                    @TASK_DESCRIPTION, 
                    @CATEGORY, 
                    @PROJECT_ID, 
                    @SUBPROJECT_ID, 
                    GETDATE(),--@START_DATE, 
                    @COMPLETION_DATE, 
                    @CLOSE_DATE, 
                    @DUE_DATE, 
                    --@ASSIGNED_TO, 
					CASE WHEN @ASSING_MKEY IS NULL THEN @ASSIGNED_TO ELSE @ASSING_MKEY END,
                    @TAGS, 
                    @ISNODE, 
                    @TASK_PARENT_ID, 
                    @TASK_PARENT_ID,
                    @STATUS, 
                    @STATUS_PERC, 
                    @TASK_CREATED_BY, 
					@TASK_TYPE,
                    @APPROVER_ID, 
                    @APPROVE_ACTION_DATE, 
                    @IS_ARCHIVE, 
                    @ATTRIBUTE1, 
                    @ATTRIBUTE2, 
                    @ATTRIBUTE3, 
                    @ATTRIBUTE4, 
                    @ATTRIBUTE5, 
                    --@CREATED_BY, 
					CASE WHEN @CREATED_MKEY IS NULL THEN @CREATED_BY ELSE @CREATED_MKEY END,
                    getdate(), 
                    @LAST_UPDATED_BY, 
                    getdate(), 
                    'N',@ASSIGNED_TO ,@Priority ,
										 @Tentative_Start_Date,
										 @Tentative_End_Date ,
										 @Actual_Start_Date ,
										 @Actual_End_Date) 

      SET @ATTRIBUTE2 =  CASE WHEN Cast(@CREATED_MKEY AS VARCHAR) IS NULL THEN Cast(@CREATED_BY AS VARCHAR) ELSE Cast(@CREATED_MKEY AS VARCHAR)END;

      SELECT @ATTRIBUTE1 = Scope_identity();

      SELECT Scope_identity()Mkey,
             @ATTRIBUTE1     TASK_PARENT_ID,
             @ATTRIBUTE1     TASK_MAIN_NODE_ID,
             @TASK_NO        TASK_NO,
			 'Ok'		as [Status],
			 'Created'		as [Message];
      --select * from type_mst
      PRINT Cast(@TASK_PARENT_ID AS VARCHAR);

      UPDATE [task_hdr]
      SET    task_parent_id = @ATTRIBUTE1,
             task_main_node_id = @ATTRIBUTE1
      WHERE  mkey = @ATTRIBUTE1

		EXEC Sp_task_action_trl_insert_update
			@ATTRIBUTE1,--    @Parameter1       @MKEY,
			@ATTRIBUTE1,-- @Parameter2          @TASK_MKEY,                 
			@ATTRIBUTE1,--@Parameter3 @TASK_PARENT_ID
			'ROOTTASKCREATED',--    @Parameter4 @ACTION_TYPE
			'TASK CREATED',--    @Parameter5 @DESCRIPTION_COMMENT
			'0',--  @Parameter6 @PROGRESS_PERC
			'CREATED',--  @Parameter7 @STATUS
			@ATTRIBUTE2,--@Parameter8 @CREATED_BY
			@ATTRIBUTE1;--@Parameter9 @TASK_MAIN_NODE_ID
		EXEC [Sp_emp_tags_insert_update] @CREATED_BY,@TAGS,@CREATED_BY;
		ENDTASK:
  END 
-------------------------------------------------------------------------------------------


25-06-2025

GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_SCHEDULED_MSP]    Script Date: 25-06-2025 11:23:31 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[SP_INSERT_SCHEDULED_MSP](@Parameter1 VARCHAR(100) = NULL,--[Project]       
                                                @Parameter2 VARCHAR(100) = NULL,--Building      
                                                @Parameter3 VARCHAR(100) = NULL,--TASK_NO         
                                                @Parameter4 VARCHAR(100) = NULL,--TASK_DESC      
                                                @Parameter5 VARCHAR(100) = NULL,--DURATION        
                                                @Parameter6 VARCHAR(100) = NULL,--START       
                                                @Parameter7 VARCHAR(100) = NULL --FINISH       
)
AS
  BEGIN
	SET NOCOUNT ON;

	--BEGIN TRY
		--BEGIN TRANSACTION;

      DECLARE @DCount            INT,
              @ROOT_MKEY         INT,
              @ROOT_NUMBER       NVARCHAR(50),
              @Mkey              INT,
              @WBS               NVARCHAR(50),
              @Name              NVARCHAR(500),
              @Duration          NVARCHAR(100),
              @Start_Date        DATETIME,
              @Finish_Date       DATETIME,
              @Predecessors      NVARCHAR(100),
              @Resource_Names    NVARCHAR(100),
              @Text1             NVARCHAR(100),
              @Outline_Level     INT,
              @Number1           INT,
              @Unique_ID         INT,
              @Percent_Complete  NUMERIC(18, 2),
              @Created_By        INT,
              @Creation_Date     DATETIME,
              @CreatorID         INT,
              @AssigneeID        INT,
              @TaskMkey          INT,
              @Task_Parent_ID    INT,
              @Task_Main_Node_ID INT,
              @Task_No           NVARCHAR(20),
              @Task_Type         INT,
              @Category          INT,
              @FileName          NVARCHAR(255),
              @MPP_NAME          NVARCHAR(255)
      DECLARE @lastIndex INT

      SET @DCount = 0;
      SET @lastIndex = 0;

      SELECT @Task_Type = master_mkey
      FROM   type_mst
      WHERE  delete_flag = 'N'
             AND type_code = 'TASK_TYPE'
             AND type_desc = 'MSP';

      SELECT @Category = master_mkey
      FROM   type_mst
      WHERE  type_code = 'CATEGORY'
             AND type_desc = 'PUBLIC'
             AND delete_flag = 'N';

      SET @Parameter1=Isnull(@Parameter1, '0');
      SET @Parameter2=Isnull(@Parameter2, '0');

      UPDATE msp_default_migration_table
      SET    remarks = 'Error : Resource Not Found'
      FROM   msp_default_migration_table MT
             LEFT JOIN employee_mst EMP
                    ON MT.resource_names = EMP.emp_full_name
             LEFT JOIN employee_mst Creator
                    ON MT.text1 = Creator.emp_full_name
      WHERE  ( Isnull(Creator.mkey, 0) = 0
                OR Isnull(EMP.mkey, 0) = 0 );

		-- TO check null value in wbs 
		UPDATE msp_default_migration_table
		SET    remarks = 'Error : WBS is null'
		FROM   msp_default_migration_table MT
		where  MT.WBS is null or MT.WBS = ''
		-- end 

		  SELECT wbs,
				 Count(wbs) C_WBS
		  INTO   #tempwbs
		  FROM   msp_default_migration_table
		  GROUP  BY wbs
		  HAVING Count(wbs) > 1;

		  UPDATE msp_default_migration_table
		  SET    remarks = 'Error : Duplicate WBS No'
		  FROM   msp_default_migration_table MT
				 JOIN #tempwbs temp
				   ON MT.wbs = temp.wbs;
		  DROP TABLE #tempwbs;


		  Select @DCount = count(*) from msp_default_migration_table where Outline_Level = 1

		IF( @DCount <= 0 OR @DCount > 1 )
        BEGIN
			UPDATE msp_default_migration_table
			SET    remarks = 'Error : Outline Level 1 is not define';
		END
		SET @DCount = 0;
		
		Select WBS ,count(WBS) as Count_Wbs 
		INTO   #tempCWBS
		from TASK_HDR 
		where PROJECT_ID = @Parameter1 and  SUB_PROJECT_ID = @Parameter2
		and Is_Scheduled is not null
		group by WBS 
		having COUNT(WBS) >= 1

		UPDATE msp_default_migration_table
		SET    remarks = 'Error : Duplicate WBS in PROJECT_ID: '+ @Parameter1 + ' and  SUB_PROJECT_ID: '+ @Parameter2 + ' '
		FROM   msp_default_migration_table MT
			JOIN #tempCWBS temp
			ON MT.WBS = temp.WBS

		DROP TABLE #tempCWBS;
		--end  Duplicate WBS
		
      SELECT unique_id,
             Count(unique_id) C_unique_id
      INTO   #tempuniqueid
      FROM   msp_default_migration_table
      GROUP  BY unique_id
      HAVING Count(unique_id) > 1;

      UPDATE msp_default_migration_table
      SET    remarks = 'Error : Duplicate unique_id'
      FROM   msp_default_migration_table MT
             JOIN #tempuniqueid temp
               ON MT.unique_id = temp.unique_id

      DROP TABLE #tempuniqueid;

	  SELECT Outline_Level,
             Count(wbs) C_Outline_Level
      INTO   #tempOutLineLevel
      FROM   msp_default_migration_table
	  WHERE  Outline_Level = 0
      GROUP  BY Outline_Level
      HAVING Count(Outline_Level) >= 1;

      UPDATE msp_default_migration_table
      SET    remarks = 'Error : OutLine Level Cannot be 0'
      FROM   msp_default_migration_table MT
             JOIN #tempOutLineLevel temp
               ON MT.Outline_Level = temp.Outline_Level;

      DROP TABLE #tempOutLineLevel;


      SELECT @DCount = Isnull(Count(*), 0)
      FROM   msp_default_migration_table MT
      WHERE  remarks LIKE '%Error%';

      IF( @DCount <= 0 )
        BEGIN
            SELECT @DCount = Isnull(Count(*), 0)
            FROM   msp_default_migration_table MT
            WHERE  outline_level = 1

            --AND unique_id = 1     
            --order by Unique_id      
            IF( @DCount > 0 )
              BEGIN
                  SELECT @WBS = wbs,
                         @Name = NAME,
                         @Duration = duration,
                         @Start_Date = start_date,
                         @Finish_Date = finish_date,
                         @Predecessors = predecessors,
                         @Resource_Names = resource_names,
                         @Text1 = text1,
                         @Outline_Level = outline_level,
                         @Number1 = number1,
                         @Unique_ID = unique_id,
                         @Percent_Complete = percent_complete,
                         @Created_By = MT.created_by,
                         @Creation_Date = MT.creation_date,
                         @AssigneeID = emp.mkey,
                         @CreatorID = Creator.mkey,
                         @FileName = [filename],
                         @MPP_NAME = mpp_name
                  FROM   msp_default_migration_table MT
                         LEFT JOIN employee_mst EMP
                                ON MT.resource_names = EMP.emp_full_name
                         LEFT JOIN employee_mst Creator
                                ON MT.text1 = Creator.emp_full_name
                  WHERE  outline_level = 1

                  IF( @Number1 > 0 )/* CHECK WHETHER PROJECT ALREADY DEFINED*/
                    BEGIN
                        SELECT @ROOT_MKEY = mkey,
                               @ROOT_NUMBER = task_no,
                               @Task_Main_Node_ID = mkey
                        FROM   task_hdr
                        WHERE  mkey = @Number1

                        INSERT INTO task_hdr_h
                        SELECT Getdate(),
                               *
                        FROM   task_hdr
                        WHERE  mkey = @Number1

                        UPDATE task_hdr
                        SET    task_name = @Name,
                               task_description = @Name,
                               assigned_to = @AssigneeID,
                               task_created_by = @CreatorID,
                               start_date = @start_date,
                               completion_date = @Finish_Date,
                               is_scheduled = 'Y',
                               wbs = @WBS,
                               duration = @Duration,
                               sch_start_date = @Start_Date,
                               finish_date = @Finish_Date,
                               predecessors = @Predecessors,
                               resource_names = @Resource_Names,
                               text1 = @Text1,
                               outline_level = @Outline_Level,
                               number1 = @Number1,
                               unique_id = @Unique_ID,
                               percent_complete = @Percent_Complete,
                               task_type = @Task_Type,
                               attribute4 = @FileName,
                               attribute5 = @MPP_NAME
                        WHERE  mkey = @Number1
                               AND ( status NOT IN ( 'COMPLETED', 'CANCEL' )
                                      OR predecessors > 0 )
                               AND is_scheduled = 'Y';

                        UPDATE msp_default_migration_table
                        SET    process_flag = 'Y',
                               remarks = 'Task_No Updated Successfully'
                        WHERE  unique_id = @Unique_ID
                               AND outline_level = @Outline_Level;
                    END
                  ELSE
                    /* PROJECT NOT DEFINED SO CREATE A ROOT TASK WITH DETAILS*/
                    BEGIN
                        DECLARE @TableOutput_TASK_DETAILS TABLE
                          (
                             mkey              INT,
                             task_parent_id    NVARCHAR(20),
                             task_main_node_id NVARCHAR(20),
                             task_no           NVARCHAR(20)
                          )

                        PRINT 'INM' + @Resource_Names;

                        INSERT INTO @TableOutput_TASK_DETAILS
                        EXEC [dbo].[Sp_insert_task_details]
                          '0000',
                          @Name,
                          @Name,
                          @Category,
                          @Parameter1,
                          @Parameter2,
                          @Finish_Date,
                          @AssigneeID,
                          -- @Resource_Names,     
                          'Scheduled',
                          'N',
                          --@START_DATE          DATETIME,       
                          '1900-01-01 00:00:00.000',
                          '1900-01-01 00:00:00.000',
                          0,
                          'WIP',
                          '0',
                          @CreatorID,
                          1,
                          @TASK_TYPE,
                          '',
                          '',
                          '',
                          '',
                          @FileName,
                          @MPP_NAME,
                          @CreatorID,
                          '1900-01-01 00:00:00.000',
                          @CreatorID,
                          '1900-01-01 00:00:00.000'

                        PRINT 'INsert ed' + @Resource_Names;

                        --select * from task_hdr      
                        SELECT @TaskMkey = mkey,
                               @Task_Parent_ID = task_parent_id,
                               @Task_Main_Node_ID = task_main_node_id,
                               @Task_No = task_no
                        FROM   @TableOutput_TASK_DETAILS

                        UPDATE task_hdr
                        SET    start_date = @start_date,
                               is_scheduled = 'Y',
                               wbs = @WBS,
                               duration = @Duration,
                               sch_start_date = @Start_Date,
                               finish_date = @Finish_Date,
                               predecessors = @Predecessors,
                               resource_names = @Resource_Names,
                               text1 = @Text1,
                               outline_level = @Outline_Level,
                               number1 = @Number1,
                               unique_id = @Unique_ID,
                               percent_complete = @Percent_Complete,
                               attribute4 = @FileName,
                               attribute5 = @MPP_NAME
                        WHERE  mkey = @TaskMkey;

                        UPDATE msp_default_migration_table
                        SET    number1 = @TaskMkey,
                               process_flag = 'Y',
                               remarks = 'Created Successfully--Task_No-->'
                                         + @Task_No
                        WHERE  unique_id = @Unique_ID
                               AND outline_level = @Outline_Level;
                    END

                  /*Logic For SubTask Creation */
                  DECLARE pcursurbreak CURSOR FOR
                    SELECT wbs,
                           NAME,
                           duration,
                           start_date,
                           finish_date,
                           predecessors,
                           resource_names,
                           text1,
                           outline_level,
                           number1,
                           unique_id,
                           percent_complete,
                           --MT.created_by,     
                           Creator.mkey created_by,
                           MT.creation_date,
                           Creator.mkey 'CreatorID',
                           emp.mkey     'AssigneeID',
                           [filename],
                           mpp_name
                    FROM   msp_default_migration_table MT
                           LEFT JOIN employee_mst EMP
                                  ON MT.resource_names = EMP.emp_full_name
                           LEFT JOIN employee_mst Creator
                                  ON MT.text1 = Creator.emp_full_name
                    WHERE  outline_level > 1
                           AND Isnull(process_flag, 'N') = 'N'
                    ORDER  BY MT.mkey,
                              unique_id

                  OPEN pcursurbreak

                  FETCH next FROM pcursurbreak INTO @WBS, @Name, @Duration,
                  @Start_Date,
                  @Finish_Date, @Predecessors, @Resource_Names, @Text1,
                  @Outline_Level
                  ,
                  @Number1, @Unique_ID, @Percent_Complete, @Created_By,
                  @Creation_Date
                  ,
                  @CreatorID, @AssigneeID, @FileName, @MPP_NAME

                  WHILE @@FETCH_STATUS = 0
                    BEGIN
                        PRINT '@Number1-->' + Cast(@Number1 AS VARCHAR)

                        IF( @Number1 <= 0 )
                          BEGIN
                              SET @lastIndex=0;
                              SET @TaskMkey=0;
                              SET @Task_Parent_ID=0;
                              SET @Task_No=''
                              SET @lastIndex = ( Len(@WBS) ) - Charindex('.', Reverse(@WBS))

                              SELECT @Task_No = Substring(@WBS, 0,@lastindex + 1)

                              SELECT @TaskMkey = number1
                              FROM   msp_default_migration_table
                              WHERE  wbs = '' + @Task_No + ''

                              PRINT '@TaskMkey-->'
                                    + Cast(@TaskMkey AS VARCHAR)

                              SELECT @TaskMkey = mkey,
                                     @Task_Parent_ID = mkey,
                                     @ROOT_NUMBER = task_no
                              FROM   task_hdr
                              WHERE  mkey = @TaskMkey

                              IF( @TaskMkey = 0 )
                                BEGIN
                                    SET @ROOT_NUMBER='';
                                    SET @Task_Parent_ID=0;
                                END
                              ELSE IF( @TaskMkey > 0 )
                                BEGIN
                                    --select * from [TEMPLATE_TASK_DETAILS]      
                                    DECLARE @TableOutput_TASK_NODE_DETAILS TABLE
                                      (
                                         mkey              INT,
                                         task_parent_id    NVARCHAR(20),
                                         task_main_node_id NVARCHAR(20),
                                         task_no           NVARCHAR(20)
                                      )

                                    PRINT 'in insert sub node'

                                    INSERT INTO @TableOutput_TASK_NODE_DETAILS
                                    EXEC [dbo].[Sp_insert_task_node_details]
                                      @Task_Parent_ID,
                                      @Name,
                                      @Name,
                                      @Category,
                                      @Parameter1,
                                      @Parameter2,
                                      @Finish_Date,
                                      @Resource_Names,
                                      'Scheduled',
                                      'N',
                                      '1900-01-01 00:00:00.000',
                                      '1900-01-01 00:00:00.000',
                                      @Task_Parent_ID,
                                      @Task_Main_Node_ID,
                                      @ROOT_NUMBER,
                                      @Task_Type,-- Task_type  
                                      'WIP',
                                      '0',
                                      @CreatorID,
                                      1,
                                      '',
                                      '',
                                      '',
                                      '',
                                      @FileName,-- @ATTRIBUTE4
                                      @MPP_NAME,-- @ATTRIBUTE5    
                                      @CreatorID,
                                      '1900-01-01 00:00:00.000',
                                      @CreatorID,
                                      '1900-01-01 00:00:00.000',
                                      @Task_Parent_ID,
                                      'Low'

                                    PRINT 'Sub node inserted'

                                    SELECT @TaskMkey = mkey,
                                           @Task_Parent_ID = task_parent_id,
                                           @Task_Main_Node_ID =
                                           task_main_node_id,
                                           @Task_No = task_no
                                    FROM   @TableOutput_TASK_NODE_DETAILS

                                    UPDATE task_hdr
                                    SET    start_date = @start_date,
                                           is_scheduled = 'Y',
                                           wbs = @WBS,
                                           duration = @Duration,
                                           sch_start_date = @Start_Date,
                                           finish_date = @Finish_Date,
                                           predecessors = @Predecessors,
                                           resource_names = @Resource_Names,
                                           text1 = @Text1,
                                           outline_level = @Outline_Level,
                                           number1 = @Number1,
                                           unique_id = @Unique_ID,
                                           percent_complete = @Percent_Complete,
                                           attribute4 = @FileName,
                                           attribute5 = @MPP_NAME
                                    WHERE  mkey = @TaskMkey

                                    UPDATE msp_default_migration_table
                                    SET    number1 = @TaskMkey,
                                           process_flag = 'Y',
                                remarks = 'Created Successfully--Task_No-->'
                                          + @Task_No
                                    WHERE  unique_id = @Unique_ID
                                           AND outline_level = @Outline_Level
                                END

                              PRINT 'for @WBS' + @WBS + '-->@ROOT_NUMBER is '
                                    + @ROOT_NUMBER

                              PRINT 'for @WBS @Task_Parent_ID '
                                    + Cast(@Task_Parent_ID AS VARCHAR)

                              PRINT 'for @WBS @Task_Main_Node_ID '
                                    + Cast(@Task_Main_Node_ID AS VARCHAR)
                          END
                        ELSE IF( @Number1 > 0 )/*Start update logic*/
                          BEGIN
                              PRINT 'update'

                              INSERT INTO task_hdr_h
                              SELECT Getdate(),
                                     *
                              FROM   task_hdr
                              WHERE  mkey = @Number1

                              UPDATE task_hdr
                              SET    task_name = @Name,
                                     task_description = @Name,
                                     assigned_to = @AssigneeID,
                                     task_created_by = @CreatorID,
                                     start_date = @start_date,
                                     completion_date = @Finish_Date,
                                     is_scheduled = 'Y',
                                     wbs = @WBS,
                                     duration = @Duration,
                                     sch_start_date = @Start_Date,
                                     finish_date = @Finish_Date,
                                     predecessors = @Predecessors,
                                     resource_names = @Resource_Names,
                                     text1 = @Text1,
                                     outline_level = @Outline_Level,
                                     number1 = @Number1,
                                     unique_id = @Unique_ID,
                                     percent_complete = @Percent_Complete,
                                     attribute4 = @FileName,
                                     attribute5 = @MPP_NAME
                              WHERE  mkey = @Number1
                                     AND ( status NOT IN ( 'COMPLETED', 'CANCEL'
                                                         )
                                            OR Isnull(predecessors, '0') != '0'
                                         )
                                     AND is_scheduled = 'Y'

                              UPDATE msp_default_migration_table
                              SET    process_flag = 'Y',
                                     remarks = 'Task_No Updated Successfully'
                              WHERE  unique_id = @Unique_ID
                                     AND outline_level = @Outline_Level
                          END

                        FETCH next FROM pcursurbreak INTO @WBS, @Name, @Duration,
                        @Start_Date,
                        @Finish_Date, @Predecessors, @Resource_Names, @Text1,
                        @Outline_Level,
                        @Number1, @Unique_ID, @Percent_Complete, @Created_By,
                        @Creation_Date,
                        @CreatorID, @AssigneeID, @FileName, @MPP_NAME
                    END

                  CLOSE pcursurbreak

                  DEALLOCATE pcursurbreak
              END
        END

		SET @DCount = 0;
		SELECT @DCount = count(*)
		FROM   msp_default_migration_table A
		WHERE  NOT EXISTS (SELECT 1 
						   FROM   TASK_HDR B
						   WHERE  A.WBS = B.WBS and Is_Scheduled is not null
						   and b.PROJECT_ID = @Parameter1 and b.SUB_PROJECT_ID = @Parameter2)
		 IF (@DCount > 0)
        BEGIN
            --ROLLBACK TRANSACTION;

            UPDATE msp_default_migration_table
            SET remarks = 'Error: Due to incomplete insert all rows not inserted';
            --WHERE Remarks IS NULL;
			--SELECT * FROM   msp_default_migration_table
            --RETURN;
        END
        --ELSE
        --BEGIN
        --    --COMMIT TRANSACTION;
        --END
		SELECT * FROM   msp_default_migration_table


      -- delete from  MSP_Default_Migration_Table    
    TRUNCATE TABLE msp_default_migration_table
		--END TRY
		--BEGIN CATCH
			-- Rollback in case of error
			--ROLLBACK TRANSACTION;

		--	-- Error info in remarks
		--	UPDATE msp_default_migration_table
		--	SET remarks = 'Error: Transaction failed. ' + ERROR_MESSAGE()
		--	--WHERE Remarks IS NULL;

		--	RETURN;
		--END CATCH
	END
--exec [SP_INSERT_SCHEDULED_MSP]  323,324    
--select * from task_hdr where mkey>237  and task_main_node_id=238    
--UPDATE task_hdr SET TASK_NAME='TEST',TASK_DESCRIPTION='TEST',PROJECT_ID=1,SUB_PROJECT_id=0,Is_Scheduled='N',RESPOSIBLE_EMP_MKEY=0,CREATED_BY=0,TASK_CREATED_BY=0,ASSIGNED_TO=0 WHERE MKEY=235    
--update task_hdr set SUB_PROJECT_ID=0 where  mkey>237  and task_main_node_id=238    
--SELECT * FROM TYPE_MST WHERE TYPE_CODE='PROJECT'    
--select * from MSP_Default_Migration_Table      
/*      
declare @x nvarchar(20)       
set @x= '1.2'      
 DECLARE @lastIndex int      
       SET @lastIndex = (LEN(@x)) -  CHARINDEX('.', REVERSE(@x))       
    
     select SUBSTRING(@x, 0, @lastindex + 1)       
           
select REVERSE(@x)      
SELECT RIGHT(@x , CHARINDEX ('.' ,REVERSE(@x))-1)      
select SUBSTRING(@x,len(@x),CHARINDEX('.',@x)-1 )      
*/

--------------------------------------------------------------------------------


26-0-2025


GO
/****** Object:  StoredProcedure [dbo].[SP_GET_PROJECTS_TASK_TYPE_NT]    Script Date: 26-06-2025 12:52:53 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	exec SP_GET_PROJECTS_TASK_TYPE_NT 'Approval','157,208,209,210',926,1

ALTER procedure [dbo].[SP_GET_PROJECTS_TASK_TYPE_NT]
			@TaskType nvarchar(100),
			@PropertyMkey nvarchar(255) = null,
			@Session_User_Id          INT,  
			@Business_Group_Id	  INT
AS
BEGIN
		
			IF OBJECT_ID('tempdb..#TableOutputProjectMkey') IS NOT NULL DROP TABLE #TableOutputProjectMkey;
			CREATE TABLE #TableOutputProjectMkey (mkey INT);
			if (@PropertyMkey is not null)
			Begin
				INSERT INTO #TableOutputProjectMkey
				SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
				FROM (
					SELECT CAST('<M>' + REPLACE(@PropertyMkey, ',', '</M><M>') + '</M>' AS XML) AS CVS
				) AS A
				CROSS APPLY CVS.nodes('/M') AS Split(a);
			End

	if (@TaskType = 'Approval')
	Begin
			Select * from  V_ProjectApproval
			Where [key] is not null
			Union all 
			Select 2 as sr_no, subp.Mkey    
			,'Building' as [Type_Code]  
			,subp.TYPE_DESC as [Key]  --'Building' as [Key]   
			--,(select TYPE_DESC from TYPE_MST pPro where TYPE_CODE = 'project' and ISNULL(DELETE_FLAG,'N') = 'N' and  pPro.MKEY= subp.PARENT_ID) as [Type_Code]     
			,subp.TYPE_DESC as [DisplayName],     
			   Pubp.MKEY as PropertyMkey,
			  Pubp.TYPE_DESC as PropertyName,
			  subp.Mkey as BuildingMkey,
			  subp.TYPE_DESC as BuilngName,
			subp.CREATED_BY as Created_By_Id,     
			EMST.EMP_FULL_NAME as Created_By_Name,    
			subp.Creation_Date,    
			subp.Last_Updated_By,    
			LMST.EMP_FULL_NAME as Updated_By_Name,     
			subp.Last_Update_Date    
			From TYPE_MST subp     
			Left join TYPE_MST Pubp on subp.PARENT_ID = Pubp.MASTER_MKEY and Pubp.TYPE_CODE = 'Project' and Pubp.PARENT_ID = 0    
			inner JOIN EMPLOYEE_MST EMST ON subp.CREATED_BY = EMST.MKEY      
			left JOIN EMPLOYEE_MST LMST ON subp.LAST_UPDATED_BY = EMST.MKEY      
			where subp.TYPE_CODE = 'Project' and ISNULL(subp.DELETE_FLAG,'N') = 'N' 
			and 1 = (CASE WHEN @PropertyMkey is not null and subp.PARENT_ID in (select mkey from #TableOutputProjectMkey) then 1 ELSE 0 END) 
			order by sr_no 
	End
	
	If (@TaskType = 'Compliance')
	Begin
		select * from  V_ProjectsCompliance
		where [key] is not null
		Union all 
			Select 2 as sr_no, subp.Mkey    
				,'Building' as [Type_Code] 
			,subp.TYPE_DESC as [Key]-- 'Building' as [Key]   
			--,(select TYPE_DESC from TYPE_MST pPro where TYPE_CODE = 'project'     
			--and ISNULL(DELETE_FLAG,'N') = 'N' and  pPro.MKEY= subp.PARENT_ID) as [Type_Code]     
			,subp.TYPE_DESC as [DisplayName],     
			   Pubp.MKEY as PropertyMkey,
			  Pubp.TYPE_DESC as PropertyName,
			  subp.Mkey as BuildingMkey,
			  subp.TYPE_DESC as BuilngName,
			subp.CREATED_BY as Created_By_Id,     
			EMST.EMP_FULL_NAME as Created_By_Name,    
			subp.Creation_Date,    
			subp.Last_Updated_By,    
			LMST.EMP_FULL_NAME as Updated_By_Name,     
			subp.Last_Update_Date    
			From TYPE_MST subp     
			Left join TYPE_MST Pubp on subp.PARENT_ID = Pubp.MASTER_MKEY and Pubp.TYPE_CODE = 'Project' and Pubp.PARENT_ID = 0    
			inner JOIN EMPLOYEE_MST EMST ON subp.CREATED_BY = EMST.MKEY      
			left JOIN EMPLOYEE_MST LMST ON subp.LAST_UPDATED_BY = EMST.MKEY      
			where subp.TYPE_CODE = 'Project' and ISNULL(subp.DELETE_FLAG,'N') = 'N' 
			and 1 = (CASE WHEN @PropertyMkey is not null and subp.PARENT_ID in (select mkey from #TableOutputProjectMkey) then 1 ELSE 0 END) 
			order by sr_no 
	End
END

----------------------------------------------------------------
Alter view V_ProjectsCompliance as                  
    Select 1 as sr_no,subp.Mkey                    
   ,subp.TYPE_DESC  as [Key] --isnull(pPro.type_desc,subp.TYPE_DESC) as [Key]           
  ,'Property'   as [Type_Code]                    
    ,subp.TYPE_DESC as [DisplayName],          
  0 as PropertyMkey,        
  '' as PropertyName,        
  0 as BuildingMkey,        
  '' as BuilngName,        
    subp.CREATED_BY as Created_By_Id,                     
    EMST.EMP_FULL_NAME as Created_By_Name,                    
    subp.Creation_Date,                    
    subp.Last_Updated_By,                    
    LMST.EMP_FULL_NAME as Updated_By_Name,                     
    subp.Last_Update_Date                    
    From TYPE_MST subp                     
    left join TYPE_MST pPro on  pPro.TYPE_CODE = 'project' and ISNULL(pPro.DELETE_FLAG,'N') = 'N' and  pPro.MKEY= subp.PARENT_ID              
    inner JOIN EMPLOYEE_MST EMST ON subp.CREATED_BY = EMST.MKEY                      
    left JOIN EMPLOYEE_MST LMST ON subp.LAST_UPDATED_BY = EMST.MKEY                      
    where subp.TYPE_CODE = 'Project' and ISNULL(subp.DELETE_FLAG,'N') = 'N' and subp.PARENT_ID = 0                    
    union all      
 SELECT     
    2, 0, 'No Data', 'Building', 'No Data', 0, '', 0, '', 0, '', NULL, 0, '', NULL    
 UNION ALL    
    select 3 as sr_no,subp.Mkey , TYPE_DESC as [key],-- 'COMPLIANCE STATUS' as [Key],   
 TYPE_CODE as  [Type_Code], TYPE_DESC as [DisplayName],        
  0 as PropertyMkey,        
  '' as PropertyName,        
  0 as BuildingMkey,        
  '' as BuilngName,        
 subp.CREATED_BY as Created_By_Id,                     
    EMST.EMP_FULL_NAME as Created_By_Name,                    
    subp.Creation_Date,                    
    subp.Last_Updated_By,                    
    LMST.EMP_FULL_NAME as Updated_By_Name,                     
    subp.Last_Update_Date                    
    from TYPE_MST subp inner JOIN EMPLOYEE_MST EMST ON subp.CREATED_BY = EMST.MKEY                      
    left JOIN EMPLOYEE_MST LMST ON subp.LAST_UPDATED_BY = EMST.MKEY                    
    Where type_code = 'COMPLIANCE_STATUS' and isnull(subp.DELETE_FLAG,'') = 'N'                    
    union all                     
    select 4 as sr_no,subp.Mkey ,TYPE_DESC as [Key],-- 'JOBROLE' as [Key],  
 TYPE_CODE as  [Type_Code], TYPE_DESC as [DisplayName],        
  0 as PropertyMkey,        
  '' as PropertyName,        
  0 as BuildingMkey,        
  '' as BuilngName,        
 subp.CREATED_BY as Created_By_Id,                     
    EMST.EMP_FULL_NAME as Created_By_Name,                    
    subp.Creation_Date,                    
    subp.Last_Updated_By,                    
    LMST.EMP_FULL_NAME as Updated_By_Name,                     
    subp.Last_Update_Date                    
    from TYPE_MST subp inner JOIN EMPLOYEE_MST EMST ON subp.CREATED_BY = EMST.MKEY                      
    left JOIN EMPLOYEE_MST LMST ON subp.LAST_UPDATED_BY = EMST.MKEY                    
    Where type_code = 'JOBROLE' and isnull(subp.DELETE_FLAG,'') = 'N'                    
    union all                     
    select 5 as sr_no,subp.Mkey ,  TYPE_DESC as [Key],-- 'DEPARTMENT' as [Key],  
 TYPE_CODE as  [Type_Code], TYPE_DESC as [DisplayName],        
  0 as PropertyMkey,        
  '' as PropertyName,        
  0 as BuildingMkey,        
  '' as BuilngName,        
 subp.CREATED_BY as Created_By_Id,                     
    EMST.EMP_FULL_NAME as Created_By_Name,                    
    subp.Creation_Date,                    
    subp.Last_Updated_By,                    
    LMST.EMP_FULL_NAME as Updated_By_Name,                     
    subp.Last_Update_Date                    
    from TYPE_MST subp inner JOIN EMPLOYEE_MST EMST ON subp.CREATED_BY = EMST.MKEY                      
    left JOIN EMPLOYEE_MST LMST ON subp.LAST_UPDATED_BY = EMST.MKEY                    
    Where type_code = 'DEPARTMENT' and isnull(subp.DELETE_FLAG,'') = 'N'                  
    union all                     
    select 6 as sr_no,Mkey , EMP_FULL_NAME as [Key] --'Responsible Person' as [Key]  
 , 'Responsible Employee' as  [Type_Code], EMP_FULL_NAME as [DisplayName],        
  0 as PropertyMkey,        
  '' as PropertyName,        
  0 as BuildingMkey,        
  '' as BuilngName,        
 CREATED_BY as Created_By_Id,                     
    EMP_FULL_NAME as Created_By_Name,                    
    Creation_Date,                    
    Last_Updated_By,                    
    EMP_FULL_NAME as Updated_By_Name,                     
    Last_Update_Date          
    from EMPLOYEE_MST                   
    Where isnull(DELETE_FLAG,'') = 'N'                  
    union all                     
    select 7 as sr_no,Mkey , CONVERT(nvarchar,TYPE_DESC) as [Key],'Raised AT' as  [Type_Code],CONVERT(nvarchar,TYPE_DESC) as [DisplayName],        
  0 as PropertyMkey,        
  '' as PropertyName,        
  0 as BuildingMkey,        
  '' as BuilngName,        
 Created_By_Id,                     
    Created_By_Name,                    
    Creation_Date,                    
    convert(int,Last_Updated_By) as Last_Updated_By,                    
    Updated_By_Name,                     
    Last_Update_Date                    
    from V_RaisedAT                   
    group by Mkey,TYPE_ABBR,TYPE_DESC,Created_By_Id,Created_By_Name,Creation_Date,Last_Updated_By,Updated_By_Name,Last_Update_Date                  
    union all    
    select 8 as sr_no,Mkey , CONVERT(nvarchar,TYPE_DESC)  as [Key],'Raised AT Before' as  [Type_Code],CONVERT(nvarchar,TYPE_DESC) as [DisplayName],        
  0 as PropertyMkey,        
  '' as PropertyName,        
  0 as BuildingMkey,        
  '' as BuilngName,        
 Created_By_Id,                     
    Created_By_Name,                    
    Creation_Date,                    
    convert(int,Last_Updated_By) as Last_Updated_By,                    
    Updated_By_Name,                     
    Last_Update_Date                    
    from V_Before_RaisedAT                   
    group by Mkey,TYPE_ABBR,TYPE_DESC,Created_By_Id,Created_By_Name,Creation_Date,Last_Updated_By,Updated_By_Name,Last_Update_Date;

------------------------------------------------------------------
  
CREATE view V_ProjectApproval as                   
  Select 1 as sr_no,subp.Mkey                    
  ,'Property'   as [Type_Code]                    
  ,subp.TYPE_DESC as [Key] --isnull(pPro.type_desc,subp.TYPE_DESC) as [Key]              
  ,subp.TYPE_DESC as [DisplayName],        
  0 as PropertyMkey,        
  '' as PropertyName,        
  0 as BuildingMkey,        
  '' as BuilngName,        
  subp.CREATED_BY as Created_By_Id,                     
  EMST.EMP_FULL_NAME as Created_By_Name,                    
  subp.Creation_Date,                    
  subp.Last_Updated_By,                    
  LMST.EMP_FULL_NAME as Updated_By_Name,                     
  subp.Last_Update_Date                    
  From TYPE_MST subp                     
  left join TYPE_MST pPro on  pPro.TYPE_CODE = 'project' and ISNULL(pPro.DELETE_FLAG,'N') = 'N' and  pPro.MKEY= subp.PARENT_ID              
  inner JOIN EMPLOYEE_MST EMST ON subp.CREATED_BY = EMST.MKEY                      
  left JOIN EMPLOYEE_MST LMST ON subp.LAST_UPDATED_BY = EMST.MKEY                      
  where subp.TYPE_CODE = 'Project' and ISNULL(subp.DELETE_FLAG,'N') = 'N' and subp.PARENT_ID = 0    
  union all    
  Select 2 as sr_no,0 as Mkey                    
  ,'Building'   as [Type_Code]                    
  ,'No Data' as [Key] --'Building' as [Key]              
  ,'No Data' as [DisplayName],        
  0 as PropertyMkey,        
  '' as PropertyName,        
  0 as BuildingMkey,        
  '' as BuilngName,        
  0 as Created_By_Id,                     
  '' as Created_By_Name,                    
  '' Creation_Date,                    
  0 Last_Updated_By,                    
  ''  as Updated_By_Name,                     
  '' as Last_Update_Date                  
  union all            
  select 3 as sr_no,subp.Mkey , 'Building Classification' as  [Type_Code],   
  TYPE_DESC  as [Key]      --TYPE_CODE as [Key]        
  , TYPE_DESC as [DisplayName],        
  0 as PropertyMkey,        
  '' as PropertyName,        
  0 as BuildingMkey,        
  '' as BuilngName        
  ,subp.CREATED_BY as Created_By_Id,                     
  EMST.EMP_FULL_NAME as Created_By_Name,                    
  subp.Creation_Date,                    
  subp.Last_Updated_By,                    
  LMST.EMP_FULL_NAME as Updated_By_Name,                     
  subp.Last_Update_Date                    
  from TYPE_MST subp inner JOIN EMPLOYEE_MST EMST ON subp.CREATED_BY = EMST.MKEY                      
  left JOIN EMPLOYEE_MST LMST ON subp.LAST_UPDATED_BY = EMST.MKEY                    
  Where type_code = 'BUILDCLASS' and isnull(subp.DELETE_FLAG,'') = 'N'                    
  union all                     
  select 4 as sr_no,subp.Mkey , 'Building Standard' as  [Type_Code],   
  TYPE_DESC as [Key], --TYPE_CODE as [Key],   
  TYPE_DESC as [DisplayName],        
   0 as PropertyMkey,        
  '' as PropertyName,        
  0 as BuildingMkey,        
  '' as BuilngName,        
  subp.CREATED_BY as Created_By_Id,                     
  EMST.EMP_FULL_NAME as Created_By_Name,                    
  subp.Creation_Date,                    
  subp.Last_Updated_By,                    
  LMST.EMP_FULL_NAME as Updated_By_Name,                     
  subp.Last_Update_Date                    
  from TYPE_MST subp inner JOIN EMPLOYEE_MST EMST ON subp.CREATED_BY = EMST.MKEY                      
  left JOIN EMPLOYEE_MST LMST ON subp.LAST_UPDATED_BY = EMST.MKEY                    
  Where type_code = 'STND' and isnull(subp.DELETE_FLAG,'') = 'N'                    
  union all                     
  select 5 as sr_no,subp.Mkey , 'Statutory Authority' as  [Type_Code], TYPE_DESC as [Key] --TYPE_CODE as [Key],  
  ,TYPE_DESC as [DisplayName],        
   0 as PropertyMkey,        
  '' as PropertyName,        
  0 as BuildingMkey,        
  '' as BuilngName,        
  subp.CREATED_BY as Created_By_Id,                     
  EMST.EMP_FULL_NAME as Created_By_Name,                    
  subp.Creation_Date,                    
  subp.Last_Updated_By,                    
  LMST.EMP_FULL_NAME as Updated_By_Name,                     
  subp.Last_Update_Date                    
  from TYPE_MST subp inner JOIN EMPLOYEE_MST EMST ON subp.CREATED_BY = EMST.MKEY                      
  left JOIN EMPLOYEE_MST LMST ON subp.LAST_UPDATED_BY = EMST.MKEY                    
  Where type_code = 'STAAUTH' and isnull(subp.DELETE_FLAG,'') = 'N'; 
--------------------------------------------------------------------

Alter view V_ProjectsCompliance as                  
    Select 1 as sr_no,subp.Mkey                    
   ,subp.TYPE_DESC  as [Key] --isnull(pPro.type_desc,subp.TYPE_DESC) as [Key]           
  ,'Property'   as [Type_Code]                    
    ,subp.TYPE_DESC as [DisplayName],          
  0 as PropertyMkey,        
  '' as PropertyName,        
  0 as BuildingMkey,        
  '' as BuilngName,        
    subp.CREATED_BY as Created_By_Id,                     
    EMST.EMP_FULL_NAME as Created_By_Name,                    
    subp.Creation_Date,                    
    subp.Last_Updated_By,                    
    LMST.EMP_FULL_NAME as Updated_By_Name,                     
    subp.Last_Update_Date                    
    From TYPE_MST subp                     
    left join TYPE_MST pPro on  pPro.TYPE_CODE = 'project' and ISNULL(pPro.DELETE_FLAG,'N') = 'N' and  pPro.MKEY= subp.PARENT_ID              
    inner JOIN EMPLOYEE_MST EMST ON subp.CREATED_BY = EMST.MKEY                      
    left JOIN EMPLOYEE_MST LMST ON subp.LAST_UPDATED_BY = EMST.MKEY                      
    where subp.TYPE_CODE = 'Project' and ISNULL(subp.DELETE_FLAG,'N') = 'N' and subp.PARENT_ID = 0                    
    union all      
 SELECT     
    2, 0, 'No Data', 'Building', 'No Data', 0, '', 0, '', 0, '', NULL, 0, '', NULL    
 UNION ALL    
    select 3 as sr_no,subp.Mkey , TYPE_DESC as [key],-- 'COMPLIANCE STATUS' as [Key],   
 TYPE_CODE as  [Type_Code], TYPE_DESC as [DisplayName],        
  0 as PropertyMkey,        
  '' as PropertyName,        
  0 as BuildingMkey,        
  '' as BuilngName,        
 subp.CREATED_BY as Created_By_Id,                     
    EMST.EMP_FULL_NAME as Created_By_Name,                    
    subp.Creation_Date,                    
    subp.Last_Updated_By,                    
    LMST.EMP_FULL_NAME as Updated_By_Name,                     
    subp.Last_Update_Date                    
    from TYPE_MST subp inner JOIN EMPLOYEE_MST EMST ON subp.CREATED_BY = EMST.MKEY                      
    left JOIN EMPLOYEE_MST LMST ON subp.LAST_UPDATED_BY = EMST.MKEY                    
    Where type_code = 'COMPLIANCE_STATUS' and isnull(subp.DELETE_FLAG,'') = 'N'                    
 --   union all                     
 --   select 4 as sr_no,subp.Mkey ,TYPE_DESC as [Key],-- 'JOBROLE' as [Key],  
 --TYPE_CODE as  [Type_Code], TYPE_DESC as [DisplayName],        
 -- 0 as PropertyMkey,        
 -- '' as PropertyName,        
 -- 0 as BuildingMkey,        
 -- '' as BuilngName,        
 --subp.CREATED_BY as Created_By_Id,                     
 --   EMST.EMP_FULL_NAME as Created_By_Name,                    
 --   subp.Creation_Date,                    
 --   subp.Last_Updated_By,                    
 --   LMST.EMP_FULL_NAME as Updated_By_Name,                     
 --   subp.Last_Update_Date                    
 --   from TYPE_MST subp inner JOIN EMPLOYEE_MST EMST ON subp.CREATED_BY = EMST.MKEY                      
 --   left JOIN EMPLOYEE_MST LMST ON subp.LAST_UPDATED_BY = EMST.MKEY                    
 --   Where type_code = 'JOBROLE' and isnull(subp.DELETE_FLAG,'') = 'N'                    
 --   union all                     
 --   select 5 as sr_no,subp.Mkey ,  TYPE_DESC as [Key],-- 'DEPARTMENT' as [Key],  
 --TYPE_CODE as  [Type_Code], TYPE_DESC as [DisplayName],        
 -- 0 as PropertyMkey,        
 -- '' as PropertyName,        
 -- 0 as BuildingMkey,        
 -- '' as BuilngName,        
 --subp.CREATED_BY as Created_By_Id,                     
 --   EMST.EMP_FULL_NAME as Created_By_Name,                    
 --   subp.Creation_Date,                    
 --   subp.Last_Updated_By,                    
 --   LMST.EMP_FULL_NAME as Updated_By_Name,                     
 --   subp.Last_Update_Date                    
 --   from TYPE_MST subp inner JOIN EMPLOYEE_MST EMST ON subp.CREATED_BY = EMST.MKEY                      
 --   left JOIN EMPLOYEE_MST LMST ON subp.LAST_UPDATED_BY = EMST.MKEY                    
 --   Where type_code = 'DEPARTMENT' and isnull(subp.DELETE_FLAG,'') = 'N'                  
 --   union all                     
 --   select 6 as sr_no,Mkey , EMP_FULL_NAME as [Key] --'Responsible Person' as [Key]  
 --, 'Responsible Employee' as  [Type_Code], EMP_FULL_NAME as [DisplayName],        
 -- 0 as PropertyMkey,        
 -- '' as PropertyName,        
 -- 0 as BuildingMkey,        
 -- '' as BuilngName,        
 --CREATED_BY as Created_By_Id,                     
 --   EMP_FULL_NAME as Created_By_Name,                    
 --   Creation_Date,                    
 --   Last_Updated_By,                    
 --   EMP_FULL_NAME as Updated_By_Name,                     
 --   Last_Update_Date          
 --   from EMPLOYEE_MST                   
 --   Where isnull(DELETE_FLAG,'') = 'N'                  
 --   union all                     
 --   select 7 as sr_no,Mkey , CONVERT(nvarchar,TYPE_DESC) as [Key],'Raised AT' as  [Type_Code],CONVERT(nvarchar,TYPE_DESC) as [DisplayName],        
 -- 0 as PropertyMkey,        
 -- '' as PropertyName,        
 -- 0 as BuildingMkey,        
 -- '' as BuilngName,        
 --Created_By_Id,                     
 --   Created_By_Name,                    
 --   Creation_Date,                    
 --   convert(int,Last_Updated_By) as Last_Updated_By,                    
 --   Updated_By_Name,                     
 --   Last_Update_Date                    
 --   from V_RaisedAT                   
 --   group by Mkey,TYPE_ABBR,TYPE_DESC,Created_By_Id,Created_By_Name,Creation_Date,Last_Updated_By,Updated_By_Name,Last_Update_Date                  
 --   union all    
 --   select 8 as sr_no,Mkey , CONVERT(nvarchar,TYPE_DESC)  as [Key],'Raised AT Before' as  [Type_Code],CONVERT(nvarchar,TYPE_DESC) as [DisplayName],        
 -- 0 as PropertyMkey,        
 -- '' as PropertyName,        
 -- 0 as BuildingMkey,        
 -- '' as BuilngName,        
 --Created_By_Id,                     
 --   Created_By_Name,                    
 --   Creation_Date,                    
 --   convert(int,Last_Updated_By) as Last_Updated_By,                    
 --   Updated_By_Name,                     
 --   Last_Update_Date                    
 --   from V_Before_RaisedAT                   
 --   group by Mkey,TYPE_ABBR,TYPE_DESC,Created_By_Id,Created_By_Name,Creation_Date,Last_Updated_By,Updated_By_Name,Last_Update_Date;


-------------------------------------------------------------------------------------------------
30-06-2025

USE [TaskManagement_UAT2]
GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_DASHBOARD_NT]    Script Date: 30-06-2025 11:41:21 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  --		EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT',926,1
 --   EXEC SP_TASK_DASHBOARD_NT 926,5,926,2
ALTER PROCEDURE [dbo].[SP_TASK_DASHBOARD_NT] (@CURRENT_EMP_MKEY  INT,
                    @USER_FILTER       VARCHAR(max) = NULL,--'ALLOCATEDBYME,ALLOCATEDTOME,COMPLETEDBYME,COMPLETEDFORME,CANCELCLOSE',
                    @Session_User_Id   INT,
                    @Business_Group_Id INT)
					--@STATUS_FILTER     NVARCHAR(max) = NULL,--'Completed,Cancelled,Pending,Review',
					--@DURATION_FILTER   NVARCHAR(max) = NULL, -- Today,Future,Overdue,Next 3 Days,Next 7 Days,Next 2 Weeks,Next Month,
					--@PriorityFilter    VARCHAR(max) =NULL,--'High,Medium,Low',
                   -- @TypeFilter        VARCHAR(max) =NULL,--'RECURRING,APPROVAL,COMPLIANCE,APPROVAL,GENERAL,SYSTEM,EMAIL,RERA COMPLAIN';
                    
AS
  BEGIN
      DECLARE @DAY INT
      SET @DAY=0;
      DECLARE @sql NVARCHAR(max) = '';
      DECLARE @start INT = 1,
              @end   INT;
      DECLARE @hasWhereClause BIT = 0;
      DECLARE @WhereClause    NVARCHAR(max) = '',
              @filter         VARCHAR(100),
              @PriorityClause NVARCHAR(max) = '',
              @TypeClause     NVARCHAR(max) = '',
              @TaskTypeMkey   NVARCHAR(50),
              @STATUSClause   NVARCHAR(max) = '',
			  @DurationClause   NVARCHAR(max) = '';
	SET @sql ='SELECT  T_HDR.mkey as Sr_No, T_HDR.mkey,Isnull(TMST.type_desc, ''NA'') CATEGORY,T_HDR.task_no,dbo.[Initcap](Isnull(CREATOR.emp_full_name, ''NA'')) CREATOR,
	  dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, ''NA'')) RESPONSIBLE,
	  dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, ''NA'')) ACTIONABLE,
	  T_HDR.creation_date,                    
	  CASE                      
	  WHEN T_HDR.status IN ( ''CREATED'' ) THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUB TASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status LIKE ''%SUBTASK CREATED%'' THEN ''Not Started''                      
	  WHEN T_HDR.status IN ( ''WORK IN PROGRESS'', ''CLOSE INITIATED'', ''CANCEL INITIATED'', ''RE-WORK'' ) THEN ''In Progress''                      
	  WHEN T_HDR.status IN ( ''CLOSE'', ''COMPLETED'' ) THEN ''Completed''                      ELSE ''Others''                    END AS Dashboard_Status, 
	 T_HDR.completion_date AS COMPLETION_DATE,                    
	  dbo.[Initcap](T_HDR.task_name) AS TASK_NAME,                    
	  T_HDR.task_description,                    
	  T_HDR.tags,                    
	  dbo.[Initcap](T_HDR.status) AS STATUS,                   
	  CASE                      
	  WHEN Isnull(CREATOR.first_name, ''NA'') != Isnull(RESPONSIBLE.first_name, ''NA'') 
	  THEN dbo.[Initcap](Isnull(CREATOR.first_name, ''NA'')) + '' > '' + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, ''NA''))                      
	  ELSE dbo.[Initcap](Isnull(CREATOR.first_name, ''NA''))                    
	  END AS RESPONSIBLE_TAG,                   
	  dbo.[Initcap](Isnull(PMST.type_desc, '''')) AS PROJECT_NAME,                    
	  dbo.Tasknamestring(T_HDR.mkey) AS TASK_HISTORY,                    
	  Isnull(Rtrim(T_HDR.[priority]), '''') AS [Priority],                    
	  Isnull(T_HDR.percent_complete, ''0'') AS Progress_Percentage,                    
	  Isnull(parent_counts.parenttaskcount, 0) AS SubTask_Count,                    
	  T_HDR.CREATED_BY             
	  FROM task_hdr T_HDR             
	  LEFT JOIN employee_mst CREATOR ON CREATOR.mkey = T_HDR.created_by AND CREATOR.delete_flag = ''N''             
	  LEFT JOIN employee_mst RESPONSIBLE ON RESPONSIBLE.mkey = T_HDR.assigned_to AND RESPONSIBLE.delete_flag = ''N''             
	  LEFT JOIN employee_mst ACTIONABLE ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey AND ACTIONABLE.delete_flag = ''N''            
	  LEFT JOIN type_mst TMST ON TMST.master_mkey = T_HDR.caregory AND TMST.type_code = ''CATEGORY'' AND TMST.delete_flag = ''N''             
	  LEFT JOIN type_mst PMST ON PMST.master_mkey = T_HDR.project_id AND PMST.type_code = ''PROJECT'' AND PMST.delete_flag = ''N''             
	  LEFT JOIN (SELECT task_parent_id, Count(*) AS ParentTaskCount                        
	  FROM task_hdr WHERE task_parent_id IS NOT NULL AND mkey NOT IN (task_parent_id) AND delete_flag = ''N''                        
	  GROUP BY task_parent_id) parent_counts ON T_HDR.mkey = parent_counts.task_parent_id             
	  WHERE Isnull(T_HDR.status_flag, ''A'') IN (''A'') AND T_HDR.delete_flag = ''N'' ';
    /* @USER_FILTER */
    IF ( @USER_FILTER <> '' AND @USER_FILTER IS NOT NULL ) -- @USER_FILTER is not null OR
      BEGIN
          WHILE @start <= Len(@USER_FILTER)
            BEGIN
                SET @end = Charindex(',', @USER_FILTER, @start);
                IF @end = 0
                  SET @end = Len(@USER_FILTER) + 1;
                SET @filter = Ltrim(Rtrim(Substring(@USER_FILTER, @start, @end - @start)));
				
                IF @filter = 'Default'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @sql += ' and ( T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' ) ';
                        END
                  END

                IF @filter = 'ALLOCATEDBYME' 
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                            SET @WhereClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+' )';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        BEGIN
                            SET @WhereClause += ' and ( T_HDR.created_by = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +' ) ';
                        END
                  END

                IF @filter = 'ALLOCATEDTOME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN

                            SET @WhereClause +=' ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+ 
							' OR T_HDR.resposible_emp_mkey = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+')';
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                        SET @WhereClause +=' and ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +')';
                  END

                IF @filter = 'COMPLETEDBYME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' ( CONVERT(int,T_HDR.assigned_to) = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+
                            ' AND T_HDR.status IN (''COMPLETED''))';
                            --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause += ' AND ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                        + ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'COMPLETEDFORME'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @WhereClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) +
                            ' AND CONVERT(int,T_HDR.assigned_to) != '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''COMPLETED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                        SET @WhereClause += ' AND ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+' AND CONVERT(int,T_HDR.assigned_to) != '
                                            + CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+ ' AND T_HDR.status IN (''COMPLETED''))';
                  END

                IF @filter = 'CANCELCLOSE'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' ( T_HDR.created_by = ' + CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) +
                            ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                            --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
                        SET @WhereClause += ' AND ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+
                        ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'') ) ';
                  --OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
                  END
				
				/*Priority Filter */
				 IF @filter = 'High'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
                        SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
                  END

                IF @filter = 'Low'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
                        SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
						END

                IF @filter = 'Medium'
                  BEGIN
                      IF @hasWhereClause = 0
                        BEGIN
                            --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
                        SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'') ';
                  END
				  /* End Priority */

				  /*Type Filter*/
				   IF @filter = 'RECURRING'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'Approval'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'COMPLIANCE'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'GENERAL'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'SYSTEM'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey +') ';
                  END

                IF @filter = 'Email'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey +') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                  END

                IF @filter = 'RERA COMPLAIN'
                  BEGIN
                      SELECT @TaskTypeMkey = master_mkey
                      FROM   type_mst
                      WHERE  type_code = 'TASK_TYPE'
                             AND type_desc = @filter and DELETE_FLAG = 'N';

                      IF @hasWhereClause = 0
                        BEGIN
                            SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey + ') ';
                            SET @hasWhereClause = 1;
                        END
                      ELSE
                        SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND TASK_TYPE = ' + @TaskTypeMkey +') ';
                  END
				  /*End Type Filter*/

				  /*Status Filter*/
						IF @filter = 'Pending'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause += '(T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
														AND STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
														and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
								SET @hasWhereClause = 1;
							END
						ELSE
							SET @WhereClause +=' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
													and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
						END
			
						IF @filter = 'Review'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
								AND T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
								SET @hasWhereClause = 1;
							END
							ELSE
								SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
												AND  T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
						END

						IF @filter = 'Completed'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
								SET @hasWhereClause = 1;
							END
						ELSE
								SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													AND T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
						END

						IF @filter = 'Cancelled'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
								SET @hasWhereClause = 1;
							END
							ELSE
								SET @WhereClause +=' AND (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
						END
				/*End Status Filter*/

						IF @filter = 'Today'
						BEGIN
							IF @hasWhereClause = 0
								BEGIN
									SET @WhereClause += ' ( T_HDR.ASSIGNED_TO = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + '
														  OR T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ') 
															AND CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
															AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'',''Close Initiated''
																,''Cancel Initiated'') ';
									SET @hasWhereClause = 1;
								END
								ELSE
									begin
									SET @WhereClause += ' and (T_HDR.ASSIGNED_TO = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + '
														  OR T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ') 
														 AND CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) 
															AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'',''Close Initiated''
																,''Cancel Initiated'') ';
									end
						END

						IF @filter = 'Overdue'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ')
														AND T_HDR.COMPLETION_DATE < convert(DATETIME, convert(VARCHAR, getdate(), 103), 103) 
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
								SET @hasWhereClause = 1;
							END
						ELSE
							SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )
													AND T_HDR.COMPLETION_DATE < convert(DATETIME, convert(VARCHAR, getdate(), 103), 103)
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
						END

						IF @filter = 'Future'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													OR T_HDR.ASSIGNED_TO = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )  
													AND  T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'') 
													and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
								SET @hasWhereClause = 1;
							END
						ELSE
								SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
													  OR T_HDR.ASSIGNED_TO = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )
													AND  (T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'') 
												and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103)) ';
						END

						IF @filter = 'Next 3 Days'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
					
								--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
								SET @hasWhereClause = 1;
							END
							ELSE
								--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
								SET @WhereClause +=' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
						END

						IF @filter = 'Next 7 Days'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								--SET @DurationClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
								--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
								SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
								SET @hasWhereClause = 1;
							END
						ELSE
							--SET @DurationClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
							--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
							SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
						END

						IF @filter = 'Next 2 Weeks'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								--SET @DurationClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
													T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
								SET @hasWhereClause = 1;
							END
						ELSE
								--SET @DurationClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
								SET @WhereClause +=' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
						END

						IF @filter = 'Next Month'
						BEGIN
							IF @hasWhereClause = 0
							BEGIN
								--SET @DurationClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
								--SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
								SET @WhereClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
														T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)  
															AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
								SET @hasWhereClause = 1;
							END
							ELSE
								--SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
								--SET @DurationClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
								SET @WhereClause += ' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
													T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)  
															AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
						END
						
						if (ISNUMERIC(@filter) = 1)
						Begin
						
							IF @hasWhereClause = 0
							BEGIN
					
								--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
								SET @WhereClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
													T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY,'+ CONVERT(nvarchar,@filter) +' , GETDATE())) ';
								SET @hasWhereClause = 1;
							END
							ELSE
								--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
								SET @WhereClause +=' AND (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' AND 
											T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY,'+ CONVERT(nvarchar,@filter) +', GETDATE())) ';	
						End

			/*End Duration Filter*/


			SET @start = @end + 1;
            END
			If (@hasWhereClause = 1)
			Begin
				SET @sql += ' AND ( ' + @WhereClause + ' ) ';
			End
			Else if (@hasWhereClause = 0 and @WhereClause is not null or @WhereClause != null)
			Begin
				--print '@WhereClause is not null';
				SET @sql += ' AND ( 1 != 1 ) ';
			End
      END
    ELSE IF( @USER_FILTER IS NULL OR @USER_FILTER = 'Default'  OR @USER_FILTER = '' OR @filter is not null)
      BEGIN
         SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
          SET @hasWhereClause = 1;
          SET @sql += ' AND  ' + @WhereClause + '  ';
      END
    print '@@sql: '+ @sql;
    EXEC Sp_executesql @sql;

    EXEC Sp_dashboard_count @CURRENT_EMP_MKEY;
	-----------------------------------------------------------------------------------------------------
 --   /* @PriorityFilter */
 --   IF ( @PriorityFilter IS NOT NULL
 --        AND @PriorityFilter <> '' )
 --     BEGIN
 --         SET @start = 1;
 --         SET @hasWhereClause = 0;

 --         WHILE @start <= Len(@PriorityFilter)
 --           BEGIN
 --               SET @end = Charindex(',', @PriorityFilter, @start);

 --               IF @end = 0
 --                 SET @end = Len(@PriorityFilter) + 1;

 --               SET @filter = Ltrim(Rtrim(Substring(@PriorityFilter, @start,@end - @start )) );

 --               -- Append the priority condition
 --               IF @filter = 'High'
 --                 BEGIN
 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
 --                           SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
 --                       SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
 --                 END

 --               IF @filter = 'Low'
 --                 BEGIN
 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
 --                           SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
 --                       SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
	--					END

 --               IF @filter = 'Medium'
 --                 BEGIN
 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
 --                           SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
 --                       SET @PriorityClause += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
 --                 END

 --               SET @start = @end + 1;
 --           END
	--		If (@hasWhereClause = 1)
	--		Begin
	--			SET @sql += ' AND ( ' + @PriorityClause + ' ) ';
	--		End
	--		Else if (@hasWhereClause = 0 and @PriorityClause is not null or @PriorityClause != null)
	--		Begin
	--		print '@PriorityFilter';
	--			SET @sql += ' AND ( 1 != 1 ) ';
	--		End
			
 --     END
 --   -----------------------------------------------------------------------------------------------------
 --   /* @TypeFilter */
 --   IF ( @TypeFilter IS NOT NULL
 --        AND @TypeFilter <> '' )
 --     BEGIN
 --         SET @start = 1;
 --         SET @hasWhereClause = 0;

 --         WHILE @start <= Len(@TypeFilter)
 --           BEGIN
 --               SET @end = Charindex(',', @TypeFilter, @start);

 --               IF @end = 0
 --                 SET @end = Len(@TypeFilter) + 1;

 --               SET @filter = Ltrim(Rtrim(Substring(@TypeFilter, @start, @end - @start)));

 --               IF @filter = 'RECURRING'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'Approval'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'COMPLIANCE'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') '
 --                           ;
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'GENERAL'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'SYSTEM'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                 END

 --               IF @filter = 'Email'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                 END

 --               IF @filter = 'RERA COMPLAIN'
 --                 BEGIN
 --                     SELECT @TaskTypeMkey = master_mkey
 --                     FROM   type_mst
 --                     WHERE  type_code = 'TASK_TYPE'
 --                            AND type_desc = @filter and DELETE_FLAG = 'N';

 --                     IF @hasWhereClause = 0
 --                       BEGIN
 --                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
 --                           SET @hasWhereClause = 1;
 --                       END
 --                     ELSE
 --                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
 --                 END

 --               SET @start = @end + 1;
 --           END
	--		If (@hasWhereClause = 1)
	--		Begin
	--			SET @sql += ' AND ( ' + @TypeClause + ' ) ';
	--		End
	--		Else if (@hasWhereClause = 0 and @TypeClause is not null or @TypeClause != null)
	--		Begin
	--			print '@@TypeClause';
	--			SET @sql += ' AND ( 1 != 1 ) ';
	--		End
 --     END
 --   -----------------------------------------------------------------------------------------------------
 --   /* @STATUS_FILTER */
 --   IF ( @STATUS_FILTER IS NOT NULL
 --        AND @STATUS_FILTER <> '' )
	--	BEGIN
	--	SET @start = 1;
	--	SET @hasWhereClause = 0;

	--	WHILE @start <= Len(@STATUS_FILTER)
	--	BEGIN
	--		SET @end = Charindex(',', @STATUS_FILTER, @start);

	--		IF @end = 0
	--			SET @end = Len(@STATUS_FILTER) + 1;

	--		SET @filter = Ltrim(Rtrim(Substring(@STATUS_FILTER, @start, @end - @start)));

	--		IF @filter = 'Pending'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--										and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--			SET @STATUSClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--									and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--		END
			
	--		IF @filter = 'Review'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				SET @STATUSClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
	--		END

	--		IF @filter = 'Completed'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--				SET @STATUSClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--		END

	--		IF @filter = 'Cancelled'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @STATUSClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				SET @STATUSClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--		END

	--		SET @start = @end + 1;
	--	END
	--			If (@hasWhereClause = 1)
	--			Begin
	--				SET @sql += ' AND ( ' + @STATUSClause + ' ) ';
	--			End
	--		Else if (@hasWhereClause = 0 and @STATUSClause is not null or @STATUSClause != null)
	--		Begin
	--		--print '@STATUSClause is not null11';
	--			SET @sql += ' AND ( 1 != 1 ) ';
	--		End
	--		END
 -------------------------------------------------------------------------------------------------------
	--IF ( @DURATION_FILTER IS NOT NULL
 --        AND @DURATION_FILTER <> '' )
	--	BEGIN
	--	SET @start = 1;
	--	SET @hasWhereClause = 0;

	--	WHILE @start <= Len(@DURATION_FILTER)
	--	BEGIN
	--		SET @end = Charindex(',', @DURATION_FILTER, @start);

	--		IF @end = 0
	--			SET @end = Len(@DURATION_FILTER) + 1;

	--		SET @filter = Ltrim(Rtrim(Substring(@DURATION_FILTER, @start, @end - @start)));

	--		IF @filter = 'Today'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--				BEGIN
	--					SET @DurationClause += ' (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
	--											AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--					SET @hasWhereClause = 1;
	--				END
	--				ELSE
	--					begin
	--					SET @DurationClause += ' OR (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) 
	--											AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--					end
	--		END

	--		IF @filter = 'Overdue'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @DurationClause +=' (T_HDR.completion_date < GETDATE() 
	--									AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--			SET @DurationClause += ' OR (T_HDR.completion_date < GETDATE() 
	--									AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
	--		END

	--		IF @filter = 'Future'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				SET @DurationClause += ' (T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
	--									and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--				SET @DurationClause += ' OR ((T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
	--								and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103)) ';
	--		END

	--		IF @filter = 'Next 3 Days'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
					
	--				--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
	--				SET @DurationClause +=' (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
	--				SET @DurationClause +=' OR (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
	--		END

	--		IF @filter = 'Next 7 Days'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				--SET @DurationClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--				--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--				SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--			--SET @DurationClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
	--			--						and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
	--			SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
	--		END

	--		IF @filter = 'Next 2 Weeks'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				--SET @DurationClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--				SET @DurationClause +=' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
	--				SET @hasWhereClause = 1;
	--			END
	--		ELSE
	--				--SET @DurationClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
	--				SET @DurationClause +=' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
	--		END

	--		IF @filter = 'Next Month'
	--		BEGIN
	--			IF @hasWhereClause = 0
	--			BEGIN
	--				--SET @DurationClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--				--SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
	--				SET @DurationClause += ' ( T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
	--				SET @hasWhereClause = 1;
	--			END
	--			ELSE
	--				--SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
	--				--SET @DurationClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
	--				SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
	--		END

	--		SET @start = @end + 1;
	--	END
	--			If (@hasWhereClause = 1)
	--			Begin
	--				SET @sql += ' AND ( ' + @DurationClause + ' ) ';
	--			End
	--			Else if (@hasWhereClause = 0 and @DurationClause is not null or @DurationClause != null)
	--			Begin
	--			print '@DurationClause is not null';
	--				SET @sql += ' AND ( 1 != 1 ) ';
	--			End
	--		END
END
-----------------------------------------------------------------------------------------------

01-07-2025


GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_DASHBOARD_NT]    Script Date: 01-07-2025 10:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--    EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT',926,1
--   EXEC SP_TASK_DASHBOARD_NT 926,5,926,2
ALTER PROCEDURE [dbo].[SP_TASK_DASHBOARD_NT] (@CURRENT_EMP_MKEY  INT,
                                              @USER_FILTER       VARCHAR(max) =NULL,--'ALLOCATEDBYME,ALLOCATEDTOME,COMPLETEDBYME,COMPLETEDFORME,CANCELCLOSE',
                                              @Session_User_Id   INT,
                                              @Business_Group_Id INT)
--@STATUS_FILTER     NVARCHAR(max) = NULL,--'Completed,Cancelled,Pending,Review',
--@DURATION_FILTER   NVARCHAR(max) = NULL, -- Today,Future,Overdue,Next 3 Days,Next 7 Days,Next 2 Weeks,Next Month,
--@PriorityFilter    VARCHAR(max) =NULL,--'High,Medium,Low',
-- @TypeFilter        VARCHAR(max) =NULL,--'RECURRING,APPROVAL,COMPLIANCE,APPROVAL,GENERAL,SYSTEM,EMAIL,RERA COMPLAIN';
AS
  BEGIN
      DECLARE @DAY INT

      SET @DAY=0;

      DECLARE @sql NVARCHAR(max) = '';
      DECLARE @start INT = 1,
              @end   INT;
      DECLARE @hasWhereClause BIT = 0,@hasUserClause BIT = 0,@hasPriorityClause BIT = 0,@hasTypeClause BIT = 0,@hasSTATUSClause BIT = 0
	  ,@hasDurationClause BIT = 0;
      DECLARE @WhereClause    NVARCHAR(max) = '',
              @filter         VARCHAR(500),
              @TaskTypeMkey   NVARCHAR(50),
			  @PriorityClause NVARCHAR(max) = '',
              @TypeClause     NVARCHAR(max) = '',
              @STATUSClause   NVARCHAR(max) = '',
              @DurationClause NVARCHAR(max) = '',
			  @UserClause	  NVARCHAR(max) = '',
			  @CONCATFILETR BIT  = 0;

      SET @sql = 'SELECT  T_HDR.mkey as Sr_No, T_HDR.mkey,Isnull(TMST.type_desc, ''NA'') CATEGORY,T_HDR.task_no
				 ,dbo.[Initcap](Isnull(CREATOR.emp_full_name, ''NA'')) CREATOR,   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, ''NA'')) RESPONSIBLE
				 ,dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, ''NA'')) ACTIONABLE,   T_HDR.creation_date,
				 CASE WHEN T_HDR.status IN ( ''CREATED'' ) THEN ''Not Started'' WHEN T_HDR.status LIKE ''%SUB TASK CREATED%'' THEN ''Not Started''                        
				 WHEN T_HDR.status LIKE ''%SUBTASK CREATED%'' THEN ''Not Started''                         
				 WHEN T_HDR.status IN ( ''WORK IN PROGRESS'', ''CLOSE INITIATED'', ''CANCEL INITIATED'', ''RE-WORK'' ) THEN ''In Progress''                         
				 WHEN T_HDR.status IN ( ''CLOSE'', ''COMPLETED'' ) THEN ''Completed''                      ELSE ''Others''                    END AS Dashboard_Status,   
				 T_HDR.completion_date AS COMPLETION_DATE,                       dbo.[Initcap](T_HDR.task_name) AS TASK_NAME,                       
				 T_HDR.task_description,T_HDR.tags,dbo.[Initcap](T_HDR.status) AS STATUS,
				 CASE
				 WHEN Isnull(CREATOR.first_name, ''NA'') != Isnull(RESPONSIBLE.first_name, ''NA'') 
				 THEN dbo.[Initcap](Isnull(CREATOR.first_name, ''NA'')) + '' > '' + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, ''NA''))                         
				 ELSE dbo.[Initcap](Isnull(CREATOR.first_name, ''NA''))                       END AS RESPONSIBLE_TAG,                      
				 dbo.[Initcap](Isnull(PMST.type_desc, '''')) AS PROJECT_NAME,                       dbo.Tasknamestring(T_HDR.mkey) AS TASK_HISTORY,                       
				 Isnull(Rtrim(T_HDR.[priority]), '''') AS [Priority],                       
				 Isnull(T_HDR.percent_complete, ''0'') AS Progress_Percentage,                       
				 Isnull(parent_counts.parenttaskcount, 0) AS SubTask_Count,                       
				 T_HDR.CREATED_BY                
				 FROM task_hdr T_HDR                
				 LEFT JOIN employee_mst CREATOR ON CREATOR.mkey = T_HDR.created_by AND CREATOR.delete_flag = ''N''                
				 LEFT JOIN employee_mst RESPONSIBLE ON RESPONSIBLE.mkey = T_HDR.assigned_to AND RESPONSIBLE.delete_flag = ''N''                
				 LEFT JOIN employee_mst ACTIONABLE ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey AND ACTIONABLE.delete_flag = ''N''               
				 LEFT JOIN type_mst TMST ON TMST.master_mkey = T_HDR.caregory AND TMST.type_code = ''CATEGORY'' AND TMST.delete_flag = ''N''               
				 LEFT JOIN type_mst PMST ON PMST.master_mkey = T_HDR.project_id AND PMST.type_code = ''PROJECT'' AND PMST.delete_flag = ''N''               
				 LEFT JOIN (SELECT task_parent_id, Count(*) AS ParentTaskCount                          
				 FROM task_hdr WHERE task_parent_id IS NOT NULL AND mkey NOT IN (task_parent_id) AND delete_flag = ''N''                           
				 GROUP BY task_parent_id) parent_counts ON T_HDR.mkey = parent_counts.task_parent_id
				 WHERE Isnull(T_HDR.status_flag, ''A'') IN (''A'') AND T_HDR.delete_flag = ''N'' '    ;

    /* @USER_FILTER */
    IF ( @USER_FILTER <> ''
         AND @USER_FILTER IS NOT NULL ) -- @USER_FILTER is not null OR
	BEGIN
		WHILE @start <= Len(@USER_FILTER)
			BEGIN
                SET @end = Charindex(',', @USER_FILTER, @start);

                IF @end = 0
				SET @end = Len(@USER_FILTER) + 1;

                SET @filter = Ltrim(Rtrim(Substring(@USER_FILTER, @start, @end - @start)));
				--SET @hasUserClause = 0;
				-- @UserClause
                IF ( @filter = 'Default'
                      OR @filter = 'ALLOCATEDBYME'
                      OR @filter = 'ALLOCATEDTOME'
                      OR @filter = 'COMPLETEDBYME'
                      OR @filter = 'COMPLETEDFORME'
                      OR @filter = 'CANCELCLOSE' )
				BEGIN
					IF @filter = 'Default'
					BEGIN
						IF @hasUserClause = 0
						BEGIN
							--SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
							SET @UserClause	+= ' ( T_HDR.RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) + ' 
													OR T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) + ')	
													and (T_HDR.STATUS not in (''CANCEL'',''CANCELLED'',''CLOSE'',''COMPLETED'',''Completed''))';
							SET @hasUserClause = 1;
						END
							ELSE
                            BEGIN
								SET @UserClause +=' OR ( T_HDR.RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+' 
													OR T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) + ')
													and (T_HDR.STATUS not in (''CANCEL'',''CANCELLED'',''CLOSE'',''COMPLETED'',''Completed''))';
                            END
                        END

					IF @filter = 'ALLOCATEDBYME'
					BEGIN
                        IF @hasUserClause = 0
						BEGIN
                                --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                                SET @UserClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+ '
													OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+ ')
													and (T_HDR.STATUS not in (''CANCEL'',''CANCELLED'',''CLOSE'',''COMPLETED'',''Completed''))';
                                SET @hasUserClause = 1;
                        END
						ELSE
                        BEGIN
                                SET @UserClause +=' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+'  
													OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+')
													and (T_HDR.STATUS not in (''CANCEL'',''CANCELLED'',''CLOSE'',''COMPLETED''))';
                        END
                    END

                    IF @filter = 'ALLOCATEDTOME'
                    BEGIN
                        IF @hasUserClause = 0
                            BEGIN
                                SET @UserClause += ' ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +'
												and T_HDR.STATUS not in (''CANCEL'',''CANCELLED'',''CLOSE'',''COMPLETED'',''Completed''))';
                               -- + ' OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+')';
                                --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                                SET @hasUserClause = 1;
                            END
                        ELSE
                            --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                            SET @UserClause +=' OR ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +'
												and T_HDR.STATUS not in (''CANCEL'',''CANCELLED'',''CLOSE'',''COMPLETED'',''Completed''))';
											--+ ' OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +')';
                    END
					
                    IF @filter = 'COMPLETEDBYME'
                    BEGIN
                        IF @hasUserClause = 0
                            BEGIN
                                SET @UserClause +=
                                ' ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                                +
                                ' AND T_HDR.status IN (''COMPLETED'',''Completed''))';
                                --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                                SET @hasUserClause = 1;
                            END
                        ELSE
                            --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                            SET @UserClause +=
                            ' OR ( CONVERT(int,T_HDR.assigned_to) = '
                            + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                            + ' AND T_HDR.status IN (''COMPLETED'',''Completed''))';
                    END

                    IF @filter = 'COMPLETEDFORME'
                    BEGIN
                        IF @hasUserClause = 0
                            BEGIN
                                --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                                SET @UserClause += ' ( T_HDR.created_by = '
                                                    + CONVERT(NVARCHAR,
                                                    @CURRENT_EMP_MKEY)
                                                    +
                                ' AND CONVERT(int,T_HDR.assigned_to) != '
                                                    + CONVERT(NVARCHAR,
                                                    @CURRENT_EMP_MKEY)
                                                    +
                                ' AND T_HDR.status IN (''COMPLETED'',''Completed''))';
                                SET @hasUserClause = 1;
                            END
                        ELSE
                            --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                            SET @UserClause += ' OR ( T_HDR.created_by = '
                                                + CONVERT(NVARCHAR,
                                                @CURRENT_EMP_MKEY)
                                                +
                            ' AND CONVERT(int,T_HDR.assigned_to) != '
                                                + CONVERT(NVARCHAR,
                                                @CURRENT_EMP_MKEY)
                                                +
                            ' AND T_HDR.status IN (''COMPLETED'',''Completed''))';
                    END

					IF @filter = 'CANCELCLOSE'
					BEGIN
						IF @hasUserClause = 0
							BEGIN
								SET @UserClause += ' ( T_HDR.created_by = '
													+ CONVERT(NVARCHAR,
													@CURRENT_EMP_MKEY)
													+
								' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
								--OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
								--SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
								SET @hasUserClause = 1;
							END
						ELSE
							--SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
							SET @UserClause += ' OR ( T_HDR.created_by = '
												+ CONVERT(NVARCHAR,
												@CURRENT_EMP_MKEY)
												+
							' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'') ) ';
					--OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
					END
				END
				-- end @UserClause
				
				--@PriorityClause
				IF( @filter = 'High'
                     OR @filter = 'Low'
                     OR @filter = 'Medium' )
				BEGIN
					/*Priority Filter */
					IF @filter = 'High'
					BEGIN
						IF @hasPriorityClause = 0
						BEGIN
							--SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
							SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
							SET @hasPriorityClause = 1;
						END
						ELSE
							--SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
							SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
					END

					IF @filter = 'Low'
					BEGIN
						IF @hasPriorityClause = 0
						BEGIN
							--SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
							SET @PriorityClause += ' ( LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
							SET @hasPriorityClause = 1;
						END
						ELSE
							--SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
							SET @PriorityClause += ' OR ( LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
					END

					IF @filter = 'Medium'
					BEGIN
						IF @hasPriorityClause = 0
						BEGIN
							--SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
							SET @PriorityClause +=' (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';
							SET @hasPriorityClause = 1;
						END
						ELSE
							--SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
							SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'') ';
					END
					/* End Priority */
				END
				--SET @hasWhereClause = 0;
				
				--@TypeClause
				IF ( @filter = 'RECURRING'
				OR @filter = 'Approval'
				OR @filter = 'COMPLIANCE'
				OR @filter = 'GENERAL'
				OR @filter = 'SYSTEM'
				OR @filter = 'Email'
				OR @filter = 'RERA COMPLAIN' )
				BEGIN
				/*Type Filter*/
					IF @filter = 'RECURRING'
					BEGIN
						SELECT @TaskTypeMkey = master_mkey
						FROM   type_mst
						WHERE  type_code = 'TASK_TYPE'
						AND type_desc = @filter
						AND delete_flag = 'N';

						IF @hasTypeClause = 0
						BEGIN
							SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
							SET @hasTypeClause = 1;
						END
						ELSE
							SET @TypeClause += ' OR ( TASK_TYPE = '+ @TaskTypeMkey + ') ';
					END

					IF @filter = 'Approval'
					BEGIN
						SELECT @TaskTypeMkey = master_mkey
						FROM   type_mst
						WHERE  type_code = 'TASK_TYPE'
						AND type_desc = @filter
						AND delete_flag = 'N';

						IF @hasTypeClause = 0
						BEGIN
							SET @TypeClause += ' ( TASK_TYPE = ' + @TaskTypeMkey + ') ';
							SET @hasTypeClause = 1;
						END
						ELSE
							SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
					END

					IF @filter = 'COMPLIANCE'
					BEGIN
						SELECT @TaskTypeMkey = master_mkey
						FROM   type_mst
						WHERE  type_code = 'TASK_TYPE'
						AND type_desc = @filter
						AND delete_flag = 'N';

						IF @hasTypeClause = 0
						BEGIN
							SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
							SET @hasTypeClause = 1;
						END
						ELSE
							SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
					END

					IF @filter = 'GENERAL'
					BEGIN
						SELECT @TaskTypeMkey = master_mkey
						FROM   type_mst
						WHERE  type_code = 'TASK_TYPE'
						AND type_desc = @filter
						AND delete_flag = 'N';

						IF @hasTypeClause = 0
						BEGIN
							SET @TypeClause += ' ( TASK_TYPE = ' + @TaskTypeMkey + ') ';
							SET @hasTypeClause = 1;
						END
						ELSE
							SET @TypeClause +=' OR ( TASK_TYPE = ' + @TaskTypeMkey + ') ';
					END

					IF @filter = 'SYSTEM'
					BEGIN
						SELECT @TaskTypeMkey = master_mkey
						FROM   type_mst
						WHERE  type_code = 'TASK_TYPE'
						AND type_desc = @filter
						AND delete_flag = 'N';

						IF @hasTypeClause = 0
						BEGIN
							SET @TypeClause += ' (TASK_TYPE = '+ @TaskTypeMkey + ') ';
							SET @hasTypeClause = 1;
						END
						ELSE
							SET @TypeClause += 'OR ( TASK_TYPE = ' + @TaskTypeMkey + ') ';
					END

					IF @filter = 'Email'
					BEGIN
						SELECT @TaskTypeMkey = master_mkey
						FROM   type_mst
						WHERE  type_code = 'TASK_TYPE'
						AND type_desc = @filter
						AND delete_flag = 'N';

						IF @hasTypeClause = 0
						BEGIN
							SET @TypeClause +=' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
							SET @hasTypeClause = 1;
						END
						ELSE
							SET @TypeClause +=' OR ( TASK_TYPE = '+ @TaskTypeMkey + ') ';
					END

					IF @filter = 'RERA COMPLAIN'
					BEGIN
						SELECT @TaskTypeMkey = master_mkey
						FROM   type_mst
						WHERE  type_code = 'TASK_TYPE'
						AND type_desc = @filter
						AND delete_flag = 'N';

					IF @hasTypeClause = 0
					BEGIN
						SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
						SET @hasTypeClause = 1;
					END
					ELSE
						SET @TypeClause += ' OR ( TASK_TYPE = ' + @TaskTypeMkey + ') ';
					END
					/*End Type Filter*/
				END
			
				--SET @hasWhereClause = 0;
				--end @@TypeClause

				-- @STATUSClause
				IF ( @filter = 'Pending'
					OR @filter = 'Review'
					OR @filter = 'Completed'
					OR @filter = 'Cancelled' )
					BEGIN
						/*Status Filter*/
						IF @filter = 'Pending'
						BEGIN
							IF @hasSTATUSClause = 0
							BEGIN
								SET @STATUSClause += '( STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE()  
													and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
								SET @hasSTATUSClause = 1;
							END
							ELSE
								SET @STATUSClause +=' OR ( STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE()  
													and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
						END

						IF @filter = 'Review'
						BEGIN
							IF @hasSTATUSClause = 0
							BEGIN
								SET @STATUSClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
								SET @hasSTATUSClause = 1;
							END
							ELSE
								SET @STATUSClause += ' OR ( T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
						END

						IF @filter = 'Completed'
						BEGIN
							IF @hasSTATUSClause = 0
							BEGIN
								SET @STATUSClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
								SET @hasSTATUSClause = 1;
							END
							ELSE
								SET @STATUSClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
						END

						IF @filter = 'Cancelled'
						BEGIN
							IF @hasSTATUSClause = 0
							BEGIN
								SET @STATUSClause +=' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
								SET @hasSTATUSClause = 1;
							END
							ELSE
								SET @STATUSClause += ' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
						END
						/*End Status Filter*/
					END
				--SET @hasWhereClause = 0;
				-- end @STATUSClause

				-- @DurationClause
				IF( @filter = 'Today'
				OR @filter = 'Overdue'
				OR @filter = 'Future'
				OR @filter = 'Next 3 Days'
				OR @filter = 'Next 7 Days'
				OR @filter = 'Next 2 Weeks'
				OR @filter = 'Next Month' )
				BEGIN
					IF @filter = 'Today'
					BEGIN
						IF @hasDurationClause = 0
						BEGIN
							SET @DurationClause += ' (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103))
												AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') '
							--' ( T_HDR.ASSIGNED_TO = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' OR T_HDR.RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +
							--					')  AND CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) ';
										--	AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'',''Close Initiated'' ,''Cancel Initiated'') ';
							SET @hasDurationClause = 1;
						END
						ELSE
						BEGIN
							SET @DurationClause += ' OR ( CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103))
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') '; 
							--AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'',''Close Initiated'' ,''Cancel Initiated'') ';
						END
					END

					IF @filter = 'Overdue'
					BEGIN
						IF @hasDurationClause = 0
						BEGIN
							SET @DurationClause +=' (T_HDR.COMPLETION_DATE < convert(DATETIME, convert(VARCHAR, getdate(), 103), 103))
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
									--			(T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
								--				+') AND T_HDR.COMPLETION_DATE < convert(DATETIME, convert(VARCHAR, getdate(), 103), 103) ';
											--     AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
							SET @hasDurationClause = 1;
						END
						ELSE
							SET @DurationClause += ' OR ( T_HDR.COMPLETION_DATE < convert(DATETIME, convert(VARCHAR, getdate(), 103), 103))
														AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
							-- OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
							--AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
					END

					IF @filter = 'Future'
					BEGIN
						IF @hasDurationClause = 0
						BEGIN
							SET @DurationClause += ' (T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103))
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') '
							--' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) 
							--+ '  OR T_HDR.ASSIGNED_TO = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
							----+ ' )   AND  T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')  
							--+ ' and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
							SET @hasDurationClause = 1;
						END
						ELSE
							SET @DurationClause += ' OR (T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103))
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
					END

					IF @filter = 'Next 3 Days'
					BEGIN
						IF @hasDurationClause = 0
						BEGIN
							--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
							SET @DurationClause +=' (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) 
												   AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
							SET @hasDurationClause = 1;
						END
						ELSE
							--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
							SET @DurationClause +=' OR (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) 
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
					END

					IF @filter = 'Next 7 Days'
					BEGIN
						IF @hasDurationClause = 0
						BEGIN
							--SET @DurationClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
							--            and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
							SET @DurationClause += ' (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
							SET @hasDurationClause = 1;
						END
						ELSE
							--SET @DurationClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
							--            and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
							SET @DurationClause += ' OR (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
					END

					IF @filter = 'Next 2 Weeks'
					BEGIN
						IF @hasDurationClause = 0
						BEGIN
						--SET @DurationClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
							SET @DurationClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = '
							+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
							+
							' AND  T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) '
							;
							SET @hasDurationClause = 1;
						END
						ELSE
							--SET @DurationClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
							SET @DurationClause +=' OR (T_HDR.RESPOSIBLE_EMP_MKEY = '
							+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
							+
							' AND  T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
					END

					IF @filter = 'Next Month'
					BEGIN
						IF @hasDurationClause = 0
						BEGIN
							--SET @DurationClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
							--SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
							SET @DurationClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = '
							+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
							+
							' AND  T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   
								AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
							SET @hasDurationClause = 1;
						END
						ELSE
							--SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
							--SET @DurationClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
							SET @DurationClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = '
							+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
							+
							' AND  T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   
							AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
					END

					IF ( Isnumeric(@filter) = 1 )
					BEGIN
						IF @hasDurationClause = 0
						BEGIN
							--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
							SET @WhereClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY,' + CONVERT(NVARCHAR, @filter) + ' , GETDATE())) 
												  AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
							--' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+
							--' AND  T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY,' + CONVERT(NVARCHAR, @filter) + ' , GETDATE())) ';
							SET @hasDurationClause = 1;
						END
						ELSE
							--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
							SET @WhereClause +=' AND (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY,'+ CONVERT(NVARCHAR, @filter) + ', GETDATE())) 
												 AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
						END
				/*End Duration Filter*/
				END
				--SET @hasWhereClause = 0;
				-- end @DurationClause
				
				SET @start = @end + 1;
				PRINT '@UserClause : '+ @UserClause
			END
	END
			
			IF ( @PriorityClause != '' OR @PriorityClause != NULL)
			BEGIN
				SET @sql += ' AND ( ' + @PriorityClause + ' ) ';  
				SET @CONCATFILETR = 1;
			END	
			IF ( @DurationClause != '' OR @DurationClause != NULL)
			BEGIN
				SET @sql += ' AND ( ' + @DurationClause + ' ) '; 
				SET @CONCATFILETR = 1;
			END
			IF ( @STATUSClause != '' OR @STATUSClause != NULL)
			BEGIN
				SET @sql += ' AND ( ' + @STATUSClause + ' ) '; 
				SET @CONCATFILETR = 1;
			END
			IF ( @TypeClause != '' OR @TypeClause != NULL)
			BEGIN
				SET @sql += ' AND ( ' + @TypeClause + ' ) ';
				SET @CONCATFILETR = 1;
			END
			IF ( @UserClause != '' OR @UserClause != NULL)
			BEGIN
				SET @sql += ' AND ( ' + @UserClause + ' ) ';  
				SET @CONCATFILETR = 1;
			END
			ELSE
			BEGIN
				SET @sql += ' and ( T_HDR.RESPOSIBLE_EMP_MKEY =  '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' 
							 OR T_HDR.assigned_to = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + '
							 OR T_HDR.created_by = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' ) ';
			END
			--IF ( @CONCATFILETR = 1 )
			--BEGIN
			--	--SET @sql += ' AND ( ' + @TypeClause + ' AND ' + @PriorityClause + ' AND ' + @STATUSClause + ' AND ' + @DurationClause + ' AND ' + @UserClause + '  ) ';
			--	--print 'print '+ ' AND ( ' + @TypeClause + ' AND ' + @PriorityClause + ' AND ' + @STATUSClause + ' AND ' + @DurationClause + ' AND ' + @UserClause + '  ) ';
			--	--print '@sql: '+ @sql;
			--END
			--ELSE IF ( @CONCATFILETR = 0 )
			--BEGIN
			----print '@WhereClause is not null';
			--	SET @sql += ' AND ( 1 != 1 ) ';
			--END
			--IF( @USER_FILTER IS NULL
			--		OR @USER_FILTER = 'Default'
			--		OR @USER_FILTER = ''
			--		OR @filter IS NOT NULL )
			--BEGIN
			--	SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = '
			--	+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
			--	SET @hasWhereClause = 1;
			--	SET @sql += ' AND  ' + @WhereClause + '  ';
			--END
			
			print '@sql123: '+ @sql
		EXEC Sp_executesql	@sql;

		EXEC Sp_dashboard_count @CURRENT_EMP_MKEY;
-----------------------------------------------------------------------------------------------------
--   /* @PriorityFilter */
--   IF ( @PriorityFilter IS NOT NULL
--        AND @PriorityFilter <> '' )
--     BEGIN
--         SET @start = 1;
--         SET @hasWhereClause = 0;
--         WHILE @start <= Len(@PriorityFilter)
--           BEGIN
--               SET @end = Charindex(',', @PriorityFilter, @start);
--               IF @end = 0
--                 SET @end = Len(@PriorityFilter) + 1;
--               SET @filter = Ltrim(Rtrim(Substring(@PriorityFilter, @start,@end - @start )) );
--               -- Append the priority condition
--               IF @filter = 'High'
--                 BEGIN
--                     IF @hasWhereClause = 0
--                       BEGIN
--                           --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
--                           SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
--                           SET @hasWhereClause = 1;
--                       END
--                     ELSE
--                       --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
--                       SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
--                 END
--               IF @filter = 'Low'
--                 BEGIN
--                     IF @hasWhereClause = 0
--                       BEGIN
--                           --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
--                           SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
--                           SET @hasWhereClause = 1;
--                       END
--                     ELSE
--                       --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
--                       SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
--          END
--               IF @filter = 'Medium'
--                 BEGIN
--                     IF @hasWhereClause = 0
--                       BEGIN
--                           --SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
--                           SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';
--                           SET @hasWhereClause = 1;
--                       END
--                     ELSE
--                       --SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
--                       SET @PriorityClause += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
--                 END
--               SET @start = @end + 1;
--           END
--    If (@hasWhereClause = 1)
--    Begin
--      SET @sql += ' AND ( ' + @PriorityClause + ' ) ';
--    End
--    Else if (@hasWhereClause = 0 and @PriorityClause is not null or @PriorityClause != null)
--    Begin
--    print '@PriorityFilter';
--      SET @sql += ' AND ( 1 != 1 ) ';
--    End
--     END
--   -----------------------------------------------------------------------------------------------------
--   /* @TypeFilter */
--   IF ( @TypeFilter IS NOT NULL
--        AND @TypeFilter <> '' )
--     BEGIN
--         SET @start = 1;
--         SET @hasWhereClause = 0;
--         WHILE @start <= Len(@TypeFilter)
--           BEGIN
--               SET @end = Charindex(',', @TypeFilter, @start);
--               IF @end = 0
--                 SET @end = Len(@TypeFilter) + 1;
--               SET @filter = Ltrim(Rtrim(Substring(@TypeFilter, @start, @end - @start)));
--               IF @filter = 'RECURRING'
--                 BEGIN
--                     SELECT @TaskTypeMkey = master_mkey
--                     FROM   type_mst
--                     WHERE  type_code = 'TASK_TYPE'
--                            AND type_desc = @filter and DELETE_FLAG = 'N';
--                     IF @hasWhereClause = 0
--                       BEGIN
--                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
--                           SET @hasWhereClause = 1;
--                       END
--                     ELSE
--                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
--                 END
--               IF @filter = 'Approval'
--                 BEGIN
--                     SELECT @TaskTypeMkey = master_mkey
--                     FROM   type_mst
--                     WHERE  type_code = 'TASK_TYPE'
--                            AND type_desc = @filter and DELETE_FLAG = 'N';
--                     IF @hasWhereClause = 0
--                       BEGIN
--                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
--                           SET @hasWhereClause = 1;
--                       END
--                     ELSE
--                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
--                 END
--               IF @filter = 'COMPLIANCE'
--                 BEGIN
--                     SELECT @TaskTypeMkey = master_mkey
--                     FROM   type_mst
--                     WHERE  type_code = 'TASK_TYPE'
--                            AND type_desc = @filter and DELETE_FLAG = 'N';
--                     IF @hasWhereClause = 0
--                       BEGIN
--                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') '
--                           ;
--                           SET @hasWhereClause = 1;
--                       END
--                     ELSE
--                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
--                 END
--               IF @filter = 'GENERAL'
--                 BEGIN
--                     SELECT @TaskTypeMkey = master_mkey
--                     FROM   type_mst
--                     WHERE  type_code = 'TASK_TYPE'
--                            AND type_desc = @filter and DELETE_FLAG = 'N';
--                     IF @hasWhereClause = 0
--                       BEGIN
--                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
--                           SET @hasWhereClause = 1;
--                       END
--                     ELSE
--                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
--                 END
--               IF @filter = 'SYSTEM'
--                 BEGIN
--                     SELECT @TaskTypeMkey = master_mkey
--                     FROM   type_mst
--                     WHERE  type_code = 'TASK_TYPE'
--                            AND type_desc = @filter and DELETE_FLAG = 'N';
--                     IF @hasWhereClause = 0
--                       BEGIN
--                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
--                           SET @hasWhereClause = 1;
--                       END
--                     ELSE
--                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
--                 END
--               IF @filter = 'Email'
--                 BEGIN
--                     SELECT @TaskTypeMkey = master_mkey
--                     FROM   type_mst
--                     WHERE  type_code = 'TASK_TYPE'
--                            AND type_desc = @filter and DELETE_FLAG = 'N';
--                     IF @hasWhereClause = 0
--                       BEGIN
--                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey +') ';
--                           SET @hasWhereClause = 1;
--                       END
--                     ELSE
--                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
--                 END
--               IF @filter = 'RERA COMPLAIN'
--                 BEGIN
--                     SELECT @TaskTypeMkey = master_mkey
--                     FROM   type_mst
--                     WHERE  type_code = 'TASK_TYPE'
--                            AND type_desc = @filter and DELETE_FLAG = 'N';
--                     IF @hasWhereClause = 0
--                       BEGIN
--                           SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
--                           SET @hasWhereClause = 1;
--                       END
--                     ELSE
--                       SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey +') ';
--                 END
--               SET @start = @end + 1;
--           END
--    If (@hasWhereClause = 1)
--    Begin
--      SET @sql += ' AND ( ' + @TypeClause + ' ) ';
--    End
--    Else if (@hasWhereClause = 0 and @TypeClause is not null or @TypeClause != null)
--    Begin
--      print '@@TypeClause';
--      SET @sql += ' AND ( 1 != 1 ) ';
--    End
--     END
--   -----------------------------------------------------------------------------------------------------
--   /* @STATUS_FILTER */
--   IF ( @STATUS_FILTER IS NOT NULL
--        AND @STATUS_FILTER <> '' )
--  BEGIN
--  SET @start = 1;
--  SET @hasWhereClause = 0;
--  WHILE @start <= Len(@STATUS_FILTER)
--  BEGIN
--    SET @end = Charindex(',', @STATUS_FILTER, @start);
--    IF @end = 0
--      SET @end = Len(@STATUS_FILTER) + 1;
--    SET @filter = Ltrim(Rtrim(Substring(@STATUS_FILTER, @start, @end - @start)));
--    IF @filter = 'Pending'
--    BEGIN
--      IF @hasWhereClause = 0
--      BEGIN
--        SET @STATUSClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
--                    and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
--        SET @hasWhereClause = 1;
--      END
--    ELSE
--      SET @STATUSClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
--                  and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
--    END
--    IF @filter = 'Review'
--    BEGIN
--      IF @hasWhereClause = 0
--      BEGIN
--        SET @STATUSClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
--        SET @hasWhereClause = 1;
--      END
--      ELSE
--        SET @STATUSClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
--    END
--    IF @filter = 'Completed'
--    BEGIN
--      IF @hasWhereClause = 0
--      BEGIN
--        SET @STATUSClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
--        SET @hasWhereClause = 1;
--      END
--    ELSE
--        SET @STATUSClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
--    END
--    IF @filter = 'Cancelled'
--    BEGIN
--      IF @hasWhereClause = 0
--      BEGIN
--        SET @STATUSClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
--        SET @hasWhereClause = 1;
--      END
--      ELSE
--        SET @STATUSClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
--    END
--    SET @start = @end + 1;
--  END
--      If (@hasWhereClause = 1)
--      Begin
--        SET @sql += ' AND ( ' + @STATUSClause + ' ) ';
--      End
--    Else if (@hasWhereClause = 0 and @STATUSClause is not null or @STATUSClause != null)
--    Begin
--    --print '@STATUSClause is not null11';
--      SET @sql += ' AND ( 1 != 1 ) ';
--    End
--    END
-------------------------------------------------------------------------------------------------------
--IF ( @DURATION_FILTER IS NOT NULL
--        AND @DURATION_FILTER <> '' )
--  BEGIN
--  SET @start = 1;
--  SET @hasWhereClause = 0;
--  WHILE @start <= Len(@DURATION_FILTER)
--  BEGIN
--    SET @end = Charindex(',', @DURATION_FILTER, @start);
--    IF @end = 0
--      SET @end = Len(@DURATION_FILTER) + 1;
--    SET @filter = Ltrim(Rtrim(Substring(@DURATION_FILTER, @start, @end - @start)));
--    IF @filter = 'Today'
--    BEGIN
--      IF @hasWhereClause = 0
--        BEGIN
--          SET @DurationClause += ' (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
--                      AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
--          SET @hasWhereClause = 1;
--        END
--        ELSE
--          begin
--          SET @DurationClause += ' OR (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) 
--                      AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
--          end
--    END
--    IF @filter = 'Overdue'
--    BEGIN
--      IF @hasWhereClause = 0
--      BEGIN
--        SET @DurationClause +=' (T_HDR.completion_date < GETDATE() 
--                  AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
--        SET @hasWhereClause = 1;
--      END
--    ELSE
--      SET @DurationClause += ' OR (T_HDR.completion_date < GETDATE() 
--                  AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
--    END
--    IF @filter = 'Future'
--    BEGIN
--      IF @hasWhereClause = 0
--      BEGIN
--        SET @DurationClause += ' (T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
--                  and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
--        SET @hasWhereClause = 1;
--      END
--    ELSE
--        SET @DurationClause += ' OR ((T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
--                and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103)) ';
--    END
--    IF @filter = 'Next 3 Days'
--    BEGIN
--      IF @hasWhereClause = 0
--      BEGIN
--        --SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
--        SET @DurationClause +=' (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
--        SET @hasWhereClause = 1;
--      END
--      ELSE
--        --SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
--        SET @DurationClause +=' OR (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) ';
--    END
--    IF @filter = 'Next 7 Days'
--    BEGIN
--      IF @hasWhereClause = 0
--      BEGIN
--        --SET @DurationClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
--        --            and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
--        SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
--        SET @hasWhereClause = 1;
--      END
--    ELSE
--      --SET @DurationClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
--      --            and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
--      SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
--    END
--    IF @filter = 'Next 2 Weeks'
--    BEGIN
--      IF @hasWhereClause = 0
--      BEGIN
--        --SET @DurationClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
--        SET @DurationClause +=' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
--        SET @hasWhereClause = 1;
--      END
--    ELSE
--        --SET @DurationClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
--        SET @DurationClause +=' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
--    END
--    IF @filter = 'Next Month'
--    BEGIN
--      IF @hasWhereClause = 0
--      BEGIN
--        --SET @DurationClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
--        --SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
--        SET @DurationClause += ' ( T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
--        SET @hasWhereClause = 1;
--      END
--      ELSE
--        --SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
--        --SET @DurationClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
--        SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
--    END
--    SET @start = @end + 1;
--  END
--      If (@hasWhereClause = 1)
--      Begin
--        SET @sql += ' AND ( ' + @DurationClause + ' ) ';
--      End
--      Else if (@hasWhereClause = 0 and @DurationClause is not null or @DurationClause != null)
--      Begin
--      print '@DurationClause is not null';
--        SET @sql += ' AND ( 1 != 1 ) ';
--      End
--    END
END 

---------------------------------------------------------------------------------------------

GO
/****** Object:  StoredProcedure [dbo].[SP_GET_ACTIONS_NT]    Script Date: 01-07-2025 15:29:45 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--exec SP_GET_ACTIONS_NT 1,926,'WORK IN PROGRESS',926,1
--		exec SP_GET_ACTIONS_NT 424,926,'SUB TASK CREATED',926,1
--		exec SP_GET_ACTIONS_NT 1225,928,'SUB TASK CREATED','926',1
ALTER PROCEDURE [dbo].[SP_GET_ACTIONS_NT](@TASK_MKEY         INT,
                                          @CURRENT_EMP_MKEY  INT,
                                          @CURR_ACTION       NVARCHAR(100),
                                          @Session_User_Id   INT = NULL,
                                          @Business_Group_Id INT = NULL)
AS
  BEGIN
      DECLARE @dCount    INT,
              @dAllCount INT

      IF( @CURR_ACTION = 'WIP'
           OR @CURR_ACTION = 'PROGRESS UPDATED'
           OR @CURR_ACTION = 'WORK IN PROCESS'
           OR @CURR_ACTION = 'RE-WORK'
           OR @CURR_ACTION = 'WORK IN PROGRESS'
           OR @CURR_ACTION = 'CREATED' )
        BEGIN
            SELECT mkey,
                   type_desc
            FROM   v_status
            WHERE  mkey IN ( 75, 70, 69, 72 )
        END

      --or @CURR_ACTION= 'SUB TASK CREATED'
      IF( @CURR_ACTION = 'COMPLETED'
           OR @CURR_ACTION = 'CANCELLED'
           OR @CURR_ACTION = 'CANCELED'
           OR @CURR_ACTION = 'CANCEL' )
        BEGIN
            SELECT mkey,
                   type_desc
            FROM   v_status
            WHERE  mkey IN ( 0 )
        END

      IF( @CURR_ACTION = 'SUB TASK CREATED' )
        BEGIN
		print 'inside subtask'
            SELECT @dCount = Count(*)
            FROM   task_hdr
            WHERE  task_parent_id = @TASK_MKEY
                   AND mkey != @TASK_MKEY

            SELECT @dAllCount = Count(*)
            FROM   task_hdr
            WHERE  task_parent_id = @TASK_MKEY
                   AND status IN ( 'COMPLETED', 'Cancel', 'Close' )

            IF( @dCount = @dAllCount )
              BEGIN
			  print ' @dCount = @dAllCount'
                  SELECT @dCount = Count(*)
                  FROM   task_hdr
                  WHERE  mkey = @TASK_MKEY
                         AND resposible_emp_mkey = @CURRENT_EMP_MKEY

                  IF( @dCount > 0 )
                    BEGIN
                        SELECT mkey,
                               type_desc
                        FROM   v_status
                        WHERE  mkey IN ( 75, 70, 69, 72 )
                    END
                  ELSE
                    BEGIN
                        SELECT mkey,
                               type_desc
                        FROM   v_status
                        WHERE  mkey IN ( 0 )
                    END
              END
            ELSE
              BEGIN
			  print ' @dCount != @dAllCount'
                  SELECT mkey,
                         type_desc
                  FROM   v_status
                  WHERE  mkey IN ( 0 )
              END
        END

      IF( @CURR_ACTION = 'CLOSE INITIATED' )
        BEGIN
		print '@CURR_ACTION = CLOSE INITIATED';
            SELECT @dCount = Count(*)
            FROM   task_hdr
            WHERE  mkey = @TASK_MKEY
                   AND resposible_emp_mkey = @CURRENT_EMP_MKEY

            IF( @dCount > 0 )
              BEGIN
                  SELECT mkey,
                         type_desc
                  FROM   v_status
                  WHERE  mkey IN ( 71, 82 )
              END
            ELSE
              BEGIN
                  SELECT mkey,
                         type_desc
                  FROM   v_status
                  WHERE  mkey IN ( 0 )
              END
        END

      IF( @CURR_ACTION = 'Cancel Initiated' )
        BEGIN
            SELECT @dCount = Count(*)
            FROM   task_hdr
            WHERE  mkey = @TASK_MKEY
                   AND resposible_emp_mkey = @CURRENT_EMP_MKEY

            IF( @dCount > 0 )
              BEGIN
                  SELECT mkey,
                         type_desc
                  FROM   v_status
                  WHERE  mkey IN ( 73, 82 )
              END
            ELSE
              BEGIN
                  SELECT mkey,
                         type_desc
                  FROM   v_status
                  WHERE  mkey IN ( 0 )
              END
        END
					SELECT  * 
					FROM (
						SELECT 'History' as [Type],--CONVERT(datetime,trl.CREATION_DATE) CREATION_DATE,
									progress_perc
									,case when ACTION_TYPE like  '%TASK%CREATED%' then DESCRIPTION_COMMENT 
									when DESCRIPTION_COMMENT   like  '%Task Updated%' then DESCRIPTION_COMMENT 
									 when ACTION_TYPE like  '%Progress%' then 'Status- ['+ trl.status + ' ] 
									 Remarks:- [' + DESCRIPTION_COMMENT + '] Percentage: ['+ convert(nvarchar(100),PROGRESS_PERC)+' ]'
									else CONVERT(nvarchar(max),action_type +' '+  DESCRIPTION_COMMENT 
									+' '+ convert(nvarchar(100),PROGRESS_PERC) +' '+ 
									action_type +' '+ dbo.[Initcap](trl.status)) end  STATUS
									--,case when trl.DESCRIPTION_COMMENT is not null then else action_type  end  STATUS
									,
									case when ACTION_TYPE like  '%TASK%CREATED%' then DESCRIPTION_COMMENT 
									when DESCRIPTION_COMMENT   like  '%Task Updated%' then DESCRIPTION_COMMENT 
									when ACTION_TYPE like  '%Progress%' then trl.status
									else thdr.status end as TASK_STATUS

									,thdr.STATUS_PERC AS Progress_Percentage
									,dbo.[Initcap](action_type)              ACTION_TYPE
									,dbo.[Initcap](description_comment)      COMMENT
									,thdr.task_type as Task_Type
									,tmst.TYPE_DESC as Task_Type_Name
									,Isnull(file_name, '')                   FILE_NAME
									,Isnull(file_path, '')                   FILE_PATH
									,trl.created_by                                        CREATED_BY_ID,
								   createdby.emp_full_name                               CREATED_BY_NAME,
								   CASE
									 WHEN trl.creation_date IS NULL THEN ''
									 ELSE Format(trl.creation_date, 'yyyy-MM-dd HH:mm:ss')
								   END                                                   AS CREATION_DATE,
								   Isnull(CONVERT(VARCHAR(50), trl.last_updated_by), '') AS LAST_UPDATED_BY,
								   Isnull(updatedby.emp_full_name, '')                   UPDATED_BY_NAME,
								   CASE
									 WHEN trl.last_update_date IS NULL THEN ''
									 ELSE Format(trl.last_update_date, 'yyyy-MM-dd HH:mm:ss')
								   END                                                   AS LAST_UPDATE_DATE
							FROM   task_action_trl trl  JOIN employee_mst createdby
									 ON trl.created_by = createdby.mkey
							Left JOIN TASK_HDR thdr on trl.TASK_MKEY = thdr.MKEY and thdr.DELETE_FLAG = 'N'
							Left JOIN TYPE_MST tmst on tmst.MKEY = thdr.TASK_TYPE and tmst.DELETE_FLAG = 'N'
								   LEFT JOIN employee_mst updatedby
										  ON trl.last_updated_by = updatedby.mkey
							WHERE  trl.delete_flag = 'N'
									AND trl.mkey = @TASK_MKEY
						Union all
						Select 'Movement' as [Type],--MHST.CREATION_DATE,
						0 as progress_perc
								--,'Level '+ CONVERT(NVARCHAR,FROM_LEVEL)+ ' ' + CURRENT_STATUS +' To '+ ' Level '+CONVERT(NVARCHAR,TO_LEVEL)+ ' ' + UPDATED_STATUS as [Status]
								--,ISNULL('Level '+ CONVERT(NVARCHAR,FROM_LEVEL)+ ' ' + CURRENT_STATUS +' To '+ ' Level '+CONVERT(NVARCHAR,TO_LEVEL)+ ' ' + UPDATED_STATUS, concat('The level ', TO_LEVEL,' is added'))  as [Status]
								,case when CURRENT_STATUS = 'Updated Task' then CURRENT_STATUS else 
								ISNULL('Level '+ CONVERT(NVARCHAR,FROM_LEVEL)+ ' ' + CURRENT_STATUS +' To '+ ' Level '
								+ CONVERT(NVARCHAR,TO_LEVEL)+ ' ' + UPDATED_STATUS
								, concat('The level ', TO_LEVEL,' is added')) end  as [Status]
								,thdr.status as TASK_STATUS
								,thdr.STATUS_PERC AS Progress_Percentage
								,null as ACTION_TYPE
								,COMMENT as Comment
								,thdr.task_type as Task_Type
								,tmst.TYPE_DESC as Task_Type_Name
								,null as [FILE_NAME]
								,null as FILE_PATH
								,MHST.created_by                                        CREATED_BY_ID,
								   createdby.emp_full_name                               CREATED_BY_NAME,
								   CASE
									 WHEN MHST.creation_date IS NULL THEN ''
									 ELSE Format(MHST.creation_date, 'yyyy-MM-dd HH:mm:ss')
								   END                                                   AS CREATION_DATE,
								   Isnull(CONVERT(VARCHAR(50), MHST.last_updated_by), '') AS LAST_UPDATED_BY,
								   Isnull(updatedby.emp_full_name, '')                   UPDATED_BY_NAME,
								   CASE
									 WHEN MHST.last_update_date IS NULL THEN ''
									 ELSE Format(MHST.last_update_date, 'yyyy-MM-dd HH:mm:ss')
								   END                                                   AS LAST_UPDATE_DATE
						From TASK_SANCTIONING_DEPARTMENT_TRL_MOVEMENT_HISTORY MHST JOIN employee_mst createdby
									 ON MHST.created_by = createdby.mkey
						Left JOIN TASK_HDR thdr on MHST.TASK_MKEY = thdr.MKEY and thdr.DELETE_FLAG = 'N'
						Left JOIN TYPE_MST tmst on tmst.MKEY = thdr.TASK_TYPE and tmst.DELETE_FLAG = 'N'
								   LEFT JOIN employee_mst updatedby
										  ON MHST.last_updated_by = updatedby.mkey
						where MHST.TASK_MKEY = @TASK_MKEY
					) ActionType
					ORDER BY ActionType.CREATION_DATE 
	   --SELECT CONVERT(VARCHAR(50), creation_date, 103)CREATION_DATE,
      --    progress_perc,
      --    dbo.[Initcap](status)                   STATUS,
      --    dbo.[Initcap](action_type)              ACTION_TYPE,
      --    dbo.[Initcap](description_comment)      COMMENT,
      --    Isnull(file_name, '')                   FILE_NAME,
      --    Isnull(file_path, '')                   FILE_PATH
      --FROM   task_action_trl
      --WHERE  delete_flag = 'N'
      --    AND mkey = @TASK_MKEY
      --ORDER  BY sr_no DESC
  END
--EXEC [SP_GET_ACTIONS_NT] 1,926,'SUB TASK CREATED'
--SELECT CREATION_DATE,PROGRESS_PERC,STATUS,ACTION_TYPE,DESCRIPTION_COMMENT COMMENT,ISNULL(FILE_NAME,'NA') FILE_NAME FROM TASK_ACTION_TRL ORDER BY SR_NO DESC --SELECT * FROM TASK_ACTION_TRL



----------------------------------------------------------------------------

GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_DETAILS_BY_MKEY_NT]    Script Date: 01-07-2025 16:24:25 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	exec SP_TASK_DETAILS_BY_MKEY_NT 1,926,0
--exec SP_TASK_DETAILS_BY_MKEY_NT 1,926,1
ALTER procedure [dbo].[SP_TASK_DETAILS_BY_MKEY_NT](@HDR_MKEY VARCHAR(250),@Session_User_Id          INT = null,  
@Business_Group_Id	  INT = null)
AS
  BEGIN
      DECLARE @DAY INT

      SET @DAY=0

      SELECT T_HDR.mkey,
             T_HDR.task_no,
             T_HDR.isnode,
             T_HDR.task_parent_id,
             T_HDR.task_main_node_id,
			 T_HDR.Task_Type,
             T_HDR.status,
             T_HDR.status_perc,
             T_HDR.task_created_by,
             T_HDR.approver_id,
             T_HDR.approve_action_date,
			 T_HDR.ASSIGNED_TO,
			 E_MST.EMP_FULL_NAME			AS 'Assigned_To_Name',
             T_MST.type_desc                           CAREGORY,
             T_HDR.project_id                          PROJECT_MKEY,
			 T_HDR.sub_project_id                    AS BUILDING_MKEY,
             P_MST.type_desc                           'PROJECT',
			 P_MST.type_desc                           'Project_Name',
             S_P_MST.type_desc                         'Sub_PROJECT',
			 S_P_MST.type_desc						AS 'Building_Name',
             T_HDR.caregory                            CATEGORY_MKEY,
             T_HDR.creation_date,
             T_HDR.task_name,
             T_HDR.task_description,
             E_MST.emp_full_name,

			 --When Task owner created the task
			 case when T_HDR.TASK_CREATED_BY = @Session_User_Id  /* Inside Task Owner login*/
			 and T_HDR.STATUS in ('CREATED','SUB TASK CREATED','WORK IN PROGRESS') and T_HDR.STATUS_PERC = 0.0 then 'Y' 
			 /*Task owner created the task and it is currently on created status and progress is 0%  then all tabs are enabled for task owner 
			 and task owner can add tabs list like Checklist, Authority, Outcome and Compliance via remark but with 0%  progress and WIP status update.  
			 Otherwise any progress between 0% to 100% with WIP status will lead to disable all tabs for task owner.*/ 

			 --When Task owner created the task 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id) /* Inside assignee login */
			 and T_HDR.STATUS_PERC between 0.0 and 100.0 /* Inside assignee login also all tabs are enabled because progress % is 0, however when assignee change 
			 the progress percent % between 0% to 100% then tabs are disabled for the task owner,but enabled at the assignee side. 
			 Assignee can able to update all tabs  */
			 and T_HDR.STATUS in ('CREATED','SUB TASK CREATED','WORK IN PROGRESS') Then 'Y'  

			 --When Task owner created the task 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id and T_HDR.TASK_CREATED_BY = @Session_User_Id) /* Inside assignee login */
			 --and T_HDR.STATUS_PERC between 0.0 and 100.0 
			 /* Inside assignee login also all tabs are enabled because progress % is 0, however when assignee change 
			 the progress percent % between 0% to 100% then tabs are disabled for the task owner,but enabled at the assignee side. 
			 Assignee can able to update all tabs  */
			 and T_HDR.STATUS not in  ('CANCEL','CANCELLED','CLOSE','COMPLETED') Then 'Y'  
			 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 /*When Assignee change to close initiate(100%) */
							-- Inside assignee login 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id) 
			 and T_HDR.STATUS_PERC = 100.0 
			 and  T_HDR.STATUS in ('CLOSE INITIATED')  then 'N'
			 /* If an assignee changes the status to cancel initiate or close initiate it means progress % is whether 0% or 100% so, 
			 in this scenario all tabs are disabled to the assignee side. Assignee will never change any of tab/s 
			 and inside the task owner log in all tabs are enabled for the task owner. Task owner can update all tabs. */
			 
			 /* When Assignee change to  cancel initiate (0%) Inside assignee login */
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id)
			 and T_HDR.STATUS in ('CANCEL INITIATED')  then 'N' 
			 /* If an assignee changes the status to cancel initiate or close initiate it means progress % is whether 0% or 100% so, 
			 in this scenario all tabs are disabled to the assignee side. Assignee will never change any of tab/s 
			 and inside the task owner log in all tabs are enabled for the task owner. Task owner can update all tabs. */

			 /*When Assignee change to close initiate(100%) or cancel initiate (0%) */
			  --Inside Task Owner login 
			 when  T_HDR.TASK_CREATED_BY = @Session_User_Id	 
			 and T_HDR.STATUS_PERC between 0.0 and 100.0 and T_HDR.STATUS in ('CLOSE INITIATED','CANCEL INITIATED')  then 'Y' 
			 /* Now inside task owner log in all tabs are enabled and task owner can do all changes in tabs and the status which are visible 
			 to the task owner is Cancel or Close and Re-work as per the assignee action if assignee triggered Close initiate then task owner can see 
			 the Close or if Cancel Initiate is triggered by the assignee then task owner can see Cancel and re-work is by default */
			 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 /*When Task owner change status to re-work  */
			 ---Inside Task Owner login
			 WHEN  T_HDR.TASK_CREATED_BY= @Session_User_Id	
			 and T_HDR.STATUS in ('RE-WORK')  then 'N' /*-- When task owner change status to re-work instead of Close or Cancel then all tabs are disabled 
														at task owner side now task owner is not able to do any changes inside any tab.*/
			 /* When Task owner change status to re-work */
			 --- Inside assignee login
			 WHEN  (T_HDR.ASSIGNED_TO = @Session_User_Id) 
			 and T_HDR.STATUS in ('RE-WORK')  then 'Y' /* When the task owner gives a task to re-work to the assignee then status will change to re-work for the assignee 
														 and now all tabs are enabled for assignee and can do any changes inside any tab.*/
	 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 WHEN  (T_HDR.TASK_CREATED_BY = @Session_User_Id) or (T_HDR.ASSIGNED_TO = @Session_User_Id)
			 and T_HDR.STATUS in ('CANCEL','CANCELLED','CLOSE')  then 'N' /* When task owner can do Cancel or Close instead of re-work 
																			 then all tabs are disabled for task owner as well as assignee */
 ---------------------------------------------------------------------------------------------------------------------------------------------------
			WHEN  (T_HDR.TASK_CREATED_BY = @Session_User_Id) and (T_HDR.ASSIGNED_TO = @Session_User_Id)
			 and T_HDR.STATUS not in ('CANCEL','CANCELLED','CLOSE')  then 'Y' /* When Task Owner and Assignee are same then enabled  */
---------------------------------------------------------------------------------------------------------------------------------------------------
			 ELSE 'N'
			 end as 'Process_Flag',
             T_HDR.tags,
             CONVERT(VARCHAR(10), completion_date, 120)COMPLETION_DATE,
             --Isnull(file_name, '')                     [FILE_NAME],
             --Isnull(file_path, '')                     FILE_PATH,
             T_HDR.resposible_emp_mkey
			,ISNULL(RTrim(T_HDR.Priority),'') AS [Priority] 
			,ISNULL(CONVERT(NVARCHAR(20), T_HDR.Tentative_Start_Date),null) AS Tentative_Start_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Tentative_End_Date),null) AS Tentative_End_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Actual_Start_Date),null) AS Actual_Start_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Actual_End_Date),null) AS Actual_End_Date
      FROM   task_hdr T_HDR
             JOIN employee_mst E_MST
               ON E_MST.mkey = T_HDR.assigned_to
             LEFT JOIN type_mst T_MST
                    ON T_MST.master_mkey = T_HDR.caregory
             --AND T_MST.TYPE_CODE='CATEGORY'
             LEFT JOIN type_mst P_MST
                    ON P_MST.master_mkey = T_HDR.project_id
             LEFT JOIN type_mst S_P_MST
                    ON S_P_MST.master_mkey = T_HDR.sub_project_id
             --LEFT JOIN task_media_trl T_MEDIA
             --       ON T_MEDIA.mkey = T_HDR.mkey
             --          AND T_MEDIA.delete_flag = 'N'
      WHERE  T_HDR.mkey = @HDR_MKEY;
  END

-----------------------------------------------------------------------



GO
/****** Object:  StoredProcedure [dbo].[SP_UPDATE_SCHEDULED_MSP]    Script Date: 01-07-2025 17:19:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

    
    
ALTER PROCEDURE [dbo].[SP_UPDATE_SCHEDULED_MSP] (@Parameter1 VARCHAR(100) = NULL,     -- Prooject ID
                                                @Parameter2 VARCHAR(100) = NULL,     -- Sub Project ID
                                                @Parameter3 VARCHAR(100) = NULL,     
                                                @Parameter4 VARCHAR(100) = NULL,     
                                                @Parameter5 VARCHAR(100) = NULL,     
                                                @Parameter6 VARCHAR(100) = NULL,   -- Session User ID  
                                                @Parameter7 VARCHAR(100) = NULL  -- Group ID
)     
AS     
  BEGIN     
      DECLARE @DCount            INT,     
              @ROOT_MKEY         INT,     
              @ROOT_NUMBER       NVARCHAR(50),     
              @Mkey              INT,     
              @WBS               NVARCHAR(50),     
              @Name              NVARCHAR(500),     
              @Duration          NVARCHAR(100),     
              @Start_Date        DATETIME,     
              @Finish_Date       DATETIME,     
              @Predecessors      NVARCHAR(100),     
              @Resource_Names    NVARCHAR(100),     
              @Text1             NVARCHAR(100),     
              @Outline_Level     INT,     
              @Number1           INT,     
              @Unique_ID         INT,     
			  @Percent_Complete  NUMERIC(18,2),    
              @Created_By        INT,     
              @Creation_Date     DATETIME,     
              @CreatorID         INT,     
              @AssigneeID        INT,     
              @TaskMkey          INT,     
              @Task_Parent_ID    INT,     
              @Task_Main_Node_ID INT,     
              @Task_No           NVARCHAR(20),
			  @Task_Type         INT,
			  @Category			 INT,
			  @FileName			NVARCHAR(255),
			  @MPP_NAME			NVARCHAR(255)
      DECLARE @lastIndex INT     
    
      SET @DCount=0     
    
      SET @lastIndex=0     
    
			SELECT @Task_Type = MASTER_MKEY FROM TYPE_MST WHERE DELETE_FLAG = 'N' AND TYPE_CODE = 'TASK_TYPE' AND TYPE_DESC = 'MSP';
			SELECT @Category = MASTER_MKEY FROM TYPE_MST WHERE TYPE_CODE='CATEGORY' And TYPE_DESC ='PUBLIC' and DELETE_FLAG = 'N';

			set @Parameter1=isnull(@Parameter1,'0')    
    
			set @Parameter2=isnull(@Parameter2,'0')    
    
			update msp_default_migration_table set remarks='Error : Resource Not Found'    
			FROM   msp_default_migration_table MT     
								 LEFT JOIN employee_mst EMP     
										ON MT.resource_names = EMP.emp_full_name     
								 LEFT JOIN employee_mst Creator     
										ON MT.text1 = Creator.emp_full_name     
			where (isnull(Creator.mkey,0) = 0 or isnull(EMP.mkey,0) = 0); 
			
			
			Select WBS ,count(WBS) as Count_Wbs 
			INTO   #tempCWBS
			from TASK_HDR 
			where PROJECT_ID = @Parameter1 and  SUB_PROJECT_ID = @Parameter2
			and Is_Scheduled is not null
			group by WBS 
			having COUNT(WBS) > 1

			UPDATE msp_default_migration_table
			SET    remarks = 'Error : Duplicate WBS'
			FROM   msp_default_migration_table MT
				JOIN #tempCWBS temp
				ON MT.WBS = temp.WBS

			DROP TABLE #tempCWBS;
    
		SELECT Outline_Level,
             Count(wbs) C_Outline_Level
      INTO   #tempOutLineLevel
      FROM   msp_default_migration_table
	  WHERE  Outline_Level = 0
      GROUP  BY Outline_Level
      HAVING Count(Outline_Level) > 1;

      UPDATE msp_default_migration_table
      SET    remarks = 'Error : OutLine Level Cannot be 0'
      FROM   msp_default_migration_table MT
             JOIN #tempOutLineLevel temp
               ON MT.Outline_Level = temp.Outline_Level;

		DROP TABLE #tempOutLineLevel;

		SELECT  Charindex('.',WBS) 'WBSRoot', Len(WBS) LenWBS,WBS into #tempWBSRoot
		FROM   msp_default_migration_table
		where Outline_Level = 1

		UPDATE msp_default_migration_table
		SET    remarks = 'Error : Outline level 1 is not root parent of WBS'
		FROM   msp_default_migration_table MT
				JOIN #tempWBSRoot temp
				ON MT.WBS = temp.WBS and temp.WBSRoot > 0;;

		DROP TABLE #tempWBSRoot;

		SELECT @DCount = Isnull(Count(*), 0)     
		FROM   msp_default_migration_table MT     
		WHERE  remarks like '%Error%'    
          
  IF( @DCount <= 0 )     
  BEGIN     
    
      SELECT @DCount = Isnull(Count(*), 0)     
      FROM   msp_default_migration_table MT     
      WHERE  outline_level = 1     
             --AND unique_id = 1     
    
      --order by Unique_id      
      IF( @DCount > 0 )     
        BEGIN     
    
            SELECT @WBS = wbs,     
                   @Name = NAME,     
                   @Duration = duration,     
                   @Start_Date = start_date,     
                   @Finish_Date = finish_date,     
                   @Predecessors = predecessors,     
                   @Resource_Names = resource_names,     
                   @Text1 = text1,     
                   @Outline_Level = outline_level,     
                   @Number1 = number1,     
                   @Unique_ID = unique_id,     
                   @Percent_Complete=Percent_Complete,    
                   @Created_By = MT.created_by,     
                   @Creation_Date = MT.creation_date,     
                   @AssigneeID = emp.mkey,     
                   @CreatorID = Creator.mkey,
				   @FileName = [FileName],
				   @MPP_NAME = mpp_name
            FROM   msp_default_migration_table MT     
                   LEFT JOIN employee_mst EMP     
                          ON MT.resource_names = EMP.emp_full_name     
                   LEFT JOIN employee_mst Creator     
                          ON MT.text1 = Creator.emp_full_name     
            WHERE  outline_level = 1   
    
            IF( @Number1 > 0 )/* CHECK WHETHER PROJECT ALREADY DEFINED*/     
              BEGIN     
    
                  SELECT @ROOT_MKEY = mkey,     
                         @ROOT_NUMBER = task_no,     
                         @Task_Main_Node_ID = mkey     
                  FROM   task_hdr     
                  WHERE  mkey = @Number1     
    
                  INSERT INTO task_hdr_h     
                  SELECT Getdate(), *     
                  FROM   task_hdr     
                  WHERE  mkey = @Number1;    
    
                  UPDATE task_hdr     
                  SET    task_name = @Name,     
                         task_description = @Name,     
                         assigned_to = @AssigneeID,     
                         task_created_by = @CreatorID,     
						 created_by = @CreatorID,
                         start_date = @start_date,     
                         completion_date = @Finish_Date,     
                         Is_Scheduled = 'Y',     
                         wbs = @WBS,     
                         duration = @Duration,     
                         sch_start_date = @Start_Date,     
                         finish_date = @Finish_Date,     
                         predecessors = @Predecessors,     
                         resource_names = @Resource_Names,     
                         text1 = @Text1,     
                         outline_level = @Outline_Level,     
                         number1 = @Number1,     
                         unique_id = @Unique_ID,    
						 Percent_Complete=@Percent_Complete,
						 STATUS_PERC =ISNULL(@Percent_Complete,0.0),
						 task_type = @Task_Type,
						 ATTRIBUTE4 = @FileName ,
						 ATTRIBUTE5	= 	@MPP_NAME,
						 LAST_UPDATED_BY =  @Parameter6,
						 LAST_UPDATE_DATE = GETDATE()
                  WHERE  mkey = @Number1     
                         AND (    
                         status NOT IN ( 'COMPLETED', 'CANCEL' )     
                         or predecessors > 0 )    
                         AND Is_Scheduled = 'Y';    
    
                  UPDATE msp_default_migration_table     
                  SET    process_flag = 'Y',     
                         remarks = 'Task_No Updated Successfully'     
                  WHERE  unique_id = @Unique_ID     
                         AND outline_level = @Outline_Level     
              END     
            ELSE/* PROJECT NOT DEFINED SO CREATE A ROOT TASK WITH DETAILS*/     
              BEGIN     
                  DECLARE @TableOutput_TASK_DETAILS TABLE     
                    (     
                       mkey              INT,     
                       task_parent_id    NVARCHAR(20),     
                       task_main_node_id NVARCHAR(20),     
                       task_no           NVARCHAR(20)     
                    )     
				 print 'INM'+ @Resource_Names;
    
                  INSERT INTO @TableOutput_TASK_DETAILS     
                  EXEC [dbo].[Sp_insert_task_details]     
                    '0000',     
                    @Name,     
                    @Name,     
                    @Category,     
                    @Parameter1,     
                    @Parameter2,     
                    @Finish_Date,     
					@AssigneeID,  
                   -- @Resource_Names,     
                    'Scheduled',     
                    'N',     
                    --@START_DATE          DATETIME,       
                    '1900-01-01 00:00:00.000',     
                    '1900-01-01 00:00:00.000',     
                    0,     
                    'WIP',     
                    '0',     
                    @CreatorID,     
					1,   
					@TASK_TYPE,  
					'',     
                    '',     
                    '',     
                    '',     
                    @FileName ,
                    @MPP_NAME,     
                    @CreatorID,     
                    '1900-01-01 00:00:00.000',     
                    @CreatorID,     
                    '1900-01-01 00:00:00.000'     
    
   print 'INsert ed'+@Resource_Names  
    
                  --select * from task_hdr      
                  SELECT @TaskMkey = mkey,     
                         @Task_Parent_ID = task_parent_id,     
                         @Task_Main_Node_ID = task_main_node_id,     
                         @Task_No = task_no     
                  FROM   @TableOutput_TASK_DETAILS     
    
                  UPDATE task_hdr     
                  SET    start_date = @start_date,     
                         Is_Scheduled = 'Y',     
                         wbs = @WBS,     
                         duration = @Duration,     
                         sch_start_date = @Start_Date,     
                         finish_date = @Finish_Date,     
                         predecessors = @Predecessors,     
                         resource_names = @Resource_Names,     
                         text1 = @Text1,     
                         outline_level = @Outline_Level,     
                         number1 = @Number1,     
                         unique_id = @Unique_ID,    
						Percent_Complete=@Percent_Complete  ,   
						 ATTRIBUTE4 = @FileName ,
						 ATTRIBUTE5	= 	@MPP_NAME,
						 LAST_UPDATED_BY =  @Parameter6,
						 LAST_UPDATE_DATE = GETDATE()
                  WHERE  mkey = @TaskMkey     
    
                  UPDATE msp_default_migration_table     
                  SET    number1 = @TaskMkey,     
                         process_flag = 'Y',     
                         remarks = 'Created Successfully--Task_No-->'     
                                   + @Task_No     
                  WHERE  unique_id = @Unique_ID     
                         AND outline_level = @Outline_Level     
              END     
    
            /*Logic For SubTask Creation */     
            DECLARE pcursurbreak CURSOR FOR     
              SELECT wbs,     
                     NAME,     
                     duration,     
                     start_date,     
                     finish_date,     
                     predecessors,     
                     resource_names,     
                     text1,     
                     outline_level,     
                     number1,     
                     unique_id,    
					Percent_Complete,     
                     --MT.created_by,     
					Creator.mkey   created_by,  
                     MT.creation_date,     
                     Creator.mkey     'CreatorID',     
                     emp.mkey 'AssigneeID' ,
					 [FILENAME], 
					 mpp_name
              FROM   msp_default_migration_table MT     
                     LEFT JOIN employee_mst EMP     
                            ON MT.resource_names = EMP.emp_full_name     
                     LEFT JOIN employee_mst Creator     
                            ON MT.text1 = Creator.emp_full_name     
              WHERE  outline_level > 1     
                     AND Isnull(process_flag, 'N') = 'N'     
              ORDER  BY MT.mkey,     
                        unique_id     
    
            OPEN pcursurbreak     
    
            FETCH next FROM pcursurbreak INTO @WBS, @Name, @Duration,     
            @Start_Date,     
            @Finish_Date, @Predecessors, @Resource_Names, @Text1, @Outline_Level,     
            @Number1, @Unique_ID,@Percent_Complete, @Created_By, @Creation_Date, @CreatorID,     
            @AssigneeID,  @FileName ,@MPP_NAME
    
    WHILE @@FETCH_STATUS = 0     
              BEGIN     
              print '@Number1-->'+cast(@Number1 as varchar)    
                  IF( @Number1 <= 0 )     
                    BEGIN     
                        SET @lastIndex=0;     
                        SET @TaskMkey=0;     
                        SET @Task_Parent_ID=0;     
                        SET @Task_No=''     
                        SET @lastIndex = ( Len(@WBS) ) - Charindex('.', Reverse(@WBS))     
    
                        SELECT @Task_No = Substring(@WBS, 0, @lastindex + 1)     
    
                        SELECT @TaskMkey = number1     
                        FROM   msp_default_migration_table     
                        WHERE  wbs = '' + @Task_No + ''     
    
                        PRINT '@TaskMkey-->'     
                              + Cast(@TaskMkey AS VARCHAR)     
    
                        SELECT @TaskMkey = mkey,     
                               @Task_Parent_ID = mkey,     
                               @ROOT_NUMBER = task_no     
                        FROM   task_hdr     
                        WHERE  mkey = @TaskMkey     
    
                        IF( @TaskMkey = 0 )     
                          BEGIN     
                              SET @ROOT_NUMBER='';     
                              SET @Task_Parent_ID=0;     
                          END     
                        ELSE IF( @TaskMkey > 0 )     
                          BEGIN     
                              --select * from [TEMPLATE_TASK_DETAILS]      
                              DECLARE @TableOutput_TASK_NODE_DETAILS TABLE     
                                (     
                                   mkey              INT,     
                                   task_parent_id    NVARCHAR(20),     
                                   task_main_node_id NVARCHAR(20),     
                                   task_no           NVARCHAR(20)     
                                )     
				print 'in insert sub node'  
                              INSERT INTO @TableOutput_TASK_NODE_DETAILS     
                              EXEC [dbo].[Sp_insert_task_node_details]     
                                @Task_Parent_ID,     
                                @Name,     
                                @Name,     
                                @Category,     
                                @Parameter1,     
                                @Parameter2,     
                                @Finish_Date,     
                                @Resource_Names,     
                                'Scheduled',     
                                'N',     
                                '1900-01-01 00:00:00.000',     
                                '1900-01-01 00:00:00.000',     
                                @Task_Parent_ID,     
                                @Task_Main_Node_ID,     
                                @ROOT_NUMBER,     
								@Task_Type,-- Task_type  
                                'WIP',     
                                '0',     
                                @CreatorID, -- Task Created by     
                                1,   -- @APPROVER_ID   
                                '',      -- @IS_ARCHIVE
                                '',     
                                '',     
                                '',     
								@FileName , -- @ATTRIBUTE4
								@MPP_NAME,  -- @ATTRIBUTE5
                                @CreatorID,  -- @CREATED_BY    
                                '1900-01-01 00:00:00.000',     
                                @CreatorID,     
                                '1900-01-01 00:00:00.000',     
                                @Task_Parent_ID ,  
        'Low'  
        print 'Sub node inserted'  
    
                              SELECT @TaskMkey = mkey,     
                                     @Task_Parent_ID = task_parent_id,     
                                     @Task_Main_Node_ID = task_main_node_id,     
                                     @Task_No = task_no     
     FROM   @TableOutput_TASK_NODE_DETAILS     
    
                              UPDATE task_hdr     
                              SET    start_date = @start_date,     
                                     Is_Scheduled = 'Y',     
                                     wbs = @WBS,     
                                     duration = @Duration,     
                                     sch_start_date = @Start_Date,     
                                     finish_date = @Finish_Date,     
                                     predecessors = @Predecessors,     
                                     resource_names = @Resource_Names,     
                                     text1 = @Text1,     
                                     outline_level = @Outline_Level,     
                                     number1 = @Number1,     
                                     unique_id = @Unique_ID,    
									 Percent_Complete=@Percent_Complete,
									 STATUS_PERC=ISNULL(@Percent_Complete,0.0) ,
									 ATTRIBUTE4 = @FileName ,
									ATTRIBUTE5	= 	@MPP_NAME,
									LAST_UPDATED_BY =  @Parameter6,
									LAST_UPDATE_DATE = GETDATE()
                              WHERE  mkey = @TaskMkey     
    
                              UPDATE msp_default_migration_table     
                              SET    number1 = @TaskMkey,     
                                     process_flag = 'Y',     
                          remarks = 'Created Successfully--Task_No-->'   
                                    + @Task_No     
                              WHERE  unique_id = @Unique_ID     
                                     AND outline_level = @Outline_Level     
                          END     
    
                        PRINT 'for @WBS' + @WBS + '-->@ROOT_NUMBER is '     
                              + @ROOT_NUMBER     
    
                        PRINT 'for @WBS @Task_Parent_ID '     
                              + Cast(@Task_Parent_ID AS VARCHAR)     
    
                        PRINT 'for @WBS @Task_Main_Node_ID '     
                              + Cast(@Task_Main_Node_ID AS VARCHAR)     
                    END     
                  ELSE IF( @Number1 > 0 )/*Start update logic*/     
                    BEGIN     
                        PRINT 'update'     
    
                        INSERT INTO task_hdr_h     
                        SELECT Getdate(),     
                               *     
                        FROM   task_hdr     
                        WHERE  mkey = @Number1     
    
                        UPDATE task_hdr     
                        SET    task_name = @Name,     
                               task_description = @Name,     
                               assigned_to = @AssigneeID,     
                               task_created_by = @CreatorID,
							   created_by = @CreatorID,
                               start_date = @start_date,     
                               completion_date = @Finish_Date,     
                               Is_Scheduled = 'Y',     
                               wbs = @WBS,     
                               duration = @Duration,     
                               sch_start_date = @Start_Date,     
                               finish_date = @Finish_Date,     
                               predecessors = @Predecessors,     
                               resource_names = @Resource_Names,     
                               text1 = @Text1,     
                               outline_level = @Outline_Level,     
                               number1 = @Number1,     
                               unique_id = @Unique_ID,    
								Percent_Complete=@Percent_Complete ,
								STATUS_PERC=ISNULL(@Percent_Complete,0.0) ,
								ATTRIBUTE4 = @FileName ,
								ATTRIBUTE5	= 	@MPP_NAME,
								LAST_UPDATED_BY =  @Parameter6,
								LAST_UPDATE_DATE = GETDATE()
                        WHERE  mkey = @Number1     
                               AND (status NOT IN ( 'COMPLETED', 'CANCEL' )     
                                or isnull(predecessors,'0')!='0')    
                               AND Is_Scheduled = 'Y'     
    
                        UPDATE msp_default_migration_table     
                        SET    process_flag = 'Y',     
                               remarks = 'Task_No Updated Successfully'     
                        WHERE  unique_id = @Unique_ID     
                               AND outline_level = @Outline_Level     
                    END     
    
                  FETCH next FROM pcursurbreak INTO @WBS, @Name, @Duration,     
                  @Start_Date,     
                  @Finish_Date, @Predecessors, @Resource_Names, @Text1,     
                  @Outline_Level,     
                  @Number1, @Unique_ID,@Percent_Complete, @Created_By, @Creation_Date, @CreatorID,     
                  @AssigneeID,  @FileName ,@MPP_NAME     
              END     
    
            CLOSE pcursurbreak     
    
            DEALLOCATE pcursurbreak     
        END     
   END    
   select * from MSP_Default_Migration_Table    
  -- delete from  MSP_Default_Migration_Table    
  truncate table MSP_Default_Migration_Table
  END     
--exec [SP_INSERT_SCHEDULED_MSP]  323,324    
--select * from task_hdr where mkey>237  and task_main_node_id=238    
--UPDATE task_hdr SET TASK_NAME='TEST',TASK_DESCRIPTION='TEST',PROJECT_ID=1,SUB_PROJECT_id=0,Is_Scheduled='N',RESPOSIBLE_EMP_MKEY=0,CREATED_BY=0,TASK_CREATED_BY=0,ASSIGNED_TO=0 WHERE MKEY=235    
--update task_hdr set SUB_PROJECT_ID=0 where  mkey>237  and task_main_node_id=238    
--SELECT * FROM TYPE_MST WHERE TYPE_CODE='PROJECT'    
--select * from MSP_Default_Migration_Table      
/*      
declare @x nvarchar(20)       
set @x= '1.2'      
 DECLARE @lastIndex int      
       SET @lastIndex = (LEN(@x)) -  CHARINDEX('.', REVERSE(@x))       
    
     select SUBSTRING(@x, 0, @lastindex + 1)       
           
select REVERSE(@x)      
SELECT RIGHT(@x , CHARINDEX ('.' ,REVERSE(@x))-1)      
select SUBSTRING(@x,len(@x),CHARINDEX('.',@x)-1 )      
*/ 

--------------------------------------------------------------------------------------

GO
/****** Object:  StoredProcedure [dbo].[SP_GET_TASK_PROJECTS_BY_TASK_TYPE_NT]    Script Date: 02-07-2025 13:00:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- exec SP_GET_TASK_PROJECTS_BY_TASK_TYPE_NT 'Approval', null,null,null,null,null,null,null,null,null,null,null,null,926
-- exec SP_GET_TASK_PROJECTS_BY_TASK_TYPE_NT  'Compliance', NULL,NULL,null,null,null,null,null,null,null,null,null,null,926,1
-- exec SP_GET_TASK_PROJECTS_BY_TASK_TYPE_NT  'Milestones', NULL,NULL,null,null,null,null,null,null,null,null,null,null,926,1

ALTER PROCEDURE [dbo].[SP_GET_TASK_PROJECTS_BY_TASK_TYPE_NT]
    @TASK_TYPE NVARCHAR(255),
	-- Common for all task type
    @ProjectMkey NVARCHAR(255) = NULL,
    @BuildingMkey NVARCHAR(255) = NULL,
    @FILTER VARCHAR(MAX) = NULL,
    -- Approval filter
	@BUILDING_TYPE NVARCHAR(MAX) = NULL,
    @BUILDING_STANDARD NVARCHAR(MAX) = NULL,
    @STATUTORY_AUTHORITY NVARCHAR(MAX) = NULL,
	-- Compliance Filter
	@ResponsibleDepart NVARCHAR(MAX) = NULL,
    @JobRole NVARCHAR(MAX) = NULL,
    @ResponsiblePerson NVARCHAR(MAX)= NULL,
	@RaisedAt NVARCHAR(MAX) = NULL,
	@RaisedAtBefore NVARCHAR(MAX) = NULL,
	@Status NVARCHAR(MAX) = NULL,
    @Session_User_Id INT = NULL,  
    @Business_Group_Id INT = NULL
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @sql NVARCHAR(MAX) = NULL,
                @WhereClause NVARCHAR(MAX) = NULL,
                @TaskTypeMkey INT;

        -- Create temporary tables instead of table variables
        IF OBJECT_ID('tempdb..#TableOutputProjectMkey') IS NOT NULL DROP TABLE #TableOutputProjectMkey;
        CREATE TABLE #TableOutputProjectMkey (mkey INT);

        IF OBJECT_ID('tempdb..#TableOutputBuildingMkey') IS NOT NULL DROP TABLE #TableOutputBuildingMkey;
        CREATE TABLE #TableOutputBuildingMkey (mkey INT);

        IF OBJECT_ID('tempdb..#TableOutputBUILDING_TYPE') IS NOT NULL DROP TABLE #TableOutputBUILDING_TYPE;
        CREATE TABLE #TableOutputBUILDING_TYPE (mkey INT);

        IF OBJECT_ID('tempdb..#TableOutputBUILDING_STANDARD') IS NOT NULL DROP TABLE #TableOutputBUILDING_STANDARD;
        CREATE TABLE #TableOutputBUILDING_STANDARD (mkey INT);

        IF OBJECT_ID('tempdb..#TableOutputSTATUTORY_AUTHORITY') IS NOT NULL DROP TABLE #TableOutputSTATUTORY_AUTHORITY;
        CREATE TABLE #TableOutputSTATUTORY_AUTHORITY (mkey INT);

		-- Compliance
		  IF OBJECT_ID('tempdb..#TableOutputResponsibleDepart') IS NOT NULL DROP TABLE #TableOutputResponsibleDepart;
        CREATE TABLE #TableOutputResponsibleDepart (mkey INT);

		  IF OBJECT_ID('tempdb..#TableOutputJobRole') IS NOT NULL DROP TABLE #TableOutputJobRole;
        CREATE TABLE #TableOutputJobRole (mkey INT);

		  IF OBJECT_ID('tempdb..#TableOutputResponsiblePerson') IS NOT NULL DROP TABLE #TableOutputResponsiblePerson;
        CREATE TABLE #TableOutputResponsiblePerson (mkey INT);

		  IF OBJECT_ID('tempdb..#TableOutputRaisedAt') IS NOT NULL DROP TABLE #TableOutputRaisedAt;
        CREATE TABLE #TableOutputRaisedAt (mkey INT);

		  IF OBJECT_ID('tempdb..#TableOutputRaisedAtBefore') IS NOT NULL DROP TABLE #TableOutputRaisedAtBefore;
        CREATE TABLE #TableOutputRaisedAtBefore (mkey INT);

        -- Populate #TableOutputProjectMkey
        INSERT INTO #TableOutputProjectMkey
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(@ProjectMkey, ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);
        -- Populate #TableOutputBuildingMkey
        INSERT INTO #TableOutputBuildingMkey
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(@BuildingMkey, ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);
        -- Populate #TableOutputBUILDING_TYPE
        INSERT INTO #TableOutputBUILDING_TYPE
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(CAST(@BUILDING_TYPE AS NVARCHAR(max)), ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);
        -- Populate #TableOutputBUILDING_STANDARD
        INSERT INTO #TableOutputBUILDING_STANDARD
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(CAST(@BUILDING_STANDARD AS VARCHAR), ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);
        -- Populate #TableOutputSTATUTORY_AUTHORITY
        INSERT INTO #TableOutputSTATUTORY_AUTHORITY
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(@STATUTORY_AUTHORITY, ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);
		/******/
		 INSERT INTO #TableOutputResponsibleDepart
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(CAST(@ResponsibleDepart AS NVARCHAR(max)), ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);
		 INSERT INTO #TableOutputJobRole
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(CAST(@JobRole AS NVARCHAR(max)), ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);
		 INSERT INTO #TableOutputResponsiblePerson
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
        FROM (
            SELECT CAST('<M>' + REPLACE(CAST(@ResponsiblePerson AS NVARCHAR(max)), ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);
		 INSERT INTO #TableOutputRaisedAt
        SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
		FROM (
            SELECT CAST('<M>' + REPLACE(CAST(@RaisedAt AS NVARCHAR(max)), ',', '</M><M>') + '</M>' AS XML) AS CVS
        ) AS A
        CROSS APPLY CVS.nodes('/M') AS Split(a);
		 INSERT INTO #TableOutputRaisedAtBefore
			SELECT TRY_CAST(Split.a.value('.', 'VARCHAR(100)') AS INT)
			FROM (
			SELECT CAST('<M>' + REPLACE(CAST(@RaisedAtBefore AS NVARCHAR(max)), ',', '</M><M>') + '</M>' AS XML) AS CVS
			) AS A
			CROSS APPLY CVS.nodes('/M') AS Split(a);
		/******/
        IF @TASK_TYPE = 'APPROVAL'
        BEGIN
		
		SELECT @TaskTypeMkey = MKEY
        FROM TYPE_MST
        WHERE TYPE_CODE = 'Task_Type' AND DELETE_FLAG = 'N' AND TYPE_DESC = 'Approval';

		set @sql = 'SELECT thdr.mkey as Sr_No, thdr.mkey,Isnull(TMST.type_desc, ''NA'') CATEGORY
					,thdr.task_no,dbo.[Initcap](Isnull(CREATOR.emp_full_name, ''NA'')) CREATOR,
					dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, ''NA'')) RESPONSIBLE,
					dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, ''NA'')) ACTIONABLE,
					thdr.creation_date,  
					athdr.BUILDING_TYPE,athdr.BUILDING_STANDARD,athdr.STATUTORY_AUTHORITY,
					CASE                      
					WHEN thdr.status IN ( ''CREATED'' ) THEN ''Not Started''                      
					WHEN thdr.status LIKE ''%SUB TASK CREATED%'' THEN ''Not Started''                      
					WHEN thdr.status LIKE ''%SUBTASK CREATED%'' THEN ''Not Started''                      
					WHEN thdr.status IN ( ''WORK IN PROGRESS'', ''CLOSE INITIATED'', ''CANCEL INITIATED'', ''RE-WORK'' ) THEN ''In Progress''                      
					WHEN thdr.status IN ( ''CLOSE'', ''COMPLETED'' ) THEN ''Completed''                      ELSE ''Others''                    
					END AS Dashboard_Status, 
					thdr.completion_date AS COMPLETION_DATE,                    
					dbo.[Initcap](thdr.task_name) AS TASK_NAME,                    
					thdr.task_description,                    
					thdr.tags,                    
					dbo.[Initcap](thdr.status) AS STATUS,                   
					CASE                      
					WHEN Isnull(CREATOR.first_name, ''NA'') != Isnull(RESPONSIBLE.first_name, ''NA'') 
					THEN dbo.[Initcap](Isnull(CREATOR.first_name, ''NA'')) + '' > '' + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, ''NA''))                      
					ELSE dbo.[Initcap](Isnull(CREATOR.first_name, ''NA''))                    
					END AS RESPONSIBLE_TAG,                   
					dbo.[Initcap](Isnull(TProject.type_desc, '''')) AS PROJECT_NAME,                    
					dbo.Tasknamestring(thdr.mkey) AS TASK_HISTORY,                    
					Isnull(Rtrim(thdr.[priority]), '''') AS [Priority],                    
					Isnull(thdr.percent_complete, ''0'') AS Progress_Percentage,                    
					Isnull(parent_counts.parenttaskcount, 0) AS SubTask_Count,                    
					thdr.CREATED_BY     
					FROM TASK_HDR thdr
					INNER JOIN PROJECT_TRL_APPROVAL_ABBR Ahdr ON thdr.MKEY = Ahdr.TASK_NO_MKEY
					INNER JOIN PROJECT_HDR phdr ON phdr.MKEY = Ahdr.HEADER_MKEY AND phdr.DELETE_FLAG = ''N''
					INNER JOIN APPROVAL_TEMPLATE_HDR athdr ON athdr.MKEY = Ahdr.APPROVAL_MKEY AND Ahdr.DELETE_FLAG = ''N''
					LEFT JOIN EMPLOYEE_MST emst ON thdr.ASSIGNED_TO = emst.MKEY AND emst.DELETE_FLAG = ''N''
					LEFT JOIN employee_mst CREATOR ON CREATOR.mkey = thdr.created_by AND CREATOR.delete_flag = ''N''             
					LEFT JOIN employee_mst RESPONSIBLE ON RESPONSIBLE.mkey = thdr.assigned_to AND RESPONSIBLE.delete_flag = ''N''             
					LEFT JOIN employee_mst ACTIONABLE ON ACTIONABLE.mkey = thdr.resposible_emp_mkey AND ACTIONABLE.delete_flag = ''N''
					LEFT JOIN TYPE_MST TProject ON TProject.TYPE_CODE = ''Project'' AND TProject.MASTER_MKEY = thdr.PROJECT_ID AND TProject.DELETE_FLAG = ''N''
					LEFT JOIN TYPE_MST TBuilding ON TBuilding.TYPE_CODE = ''Project'' AND TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID AND TBuilding.DELETE_FLAG = ''N''
					LEFT JOIN type_mst TMST ON TMST.master_mkey = thdr.CAREGORY AND TMST.type_code = ''CATEGORY'' AND TMST.delete_flag = ''N''  
					LEFT JOIN (SELECT task_parent_id, Count(*) AS ParentTaskCount                        
					FROM task_hdr WHERE task_parent_id IS NOT NULL AND mkey NOT IN (task_parent_id) AND delete_flag = ''N''                        
					GROUP BY task_parent_id) parent_counts ON thdr.mkey = parent_counts.task_parent_id';
                 set @WhereClause =' WHERE thdr.TASK_TYPE = ' + CONVERT(NVARCHAR, @TaskTypeMkey) + '
                      AND thdr.DELETE_FLAG = ''N''
                      AND Ahdr.DELETE_FLAG = ''N''
                      AND phdr.DELETE_FLAG = ''N''
                      AND athdr.DELETE_FLAG = ''N''
					  AND (thdr.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @Session_User_Id) + '
                      OR thdr.CREATED_BY = ' + CONVERT(NVARCHAR, @Session_User_Id) + ') ';
					if 	ISNULL(@ProjectMkey, '') <> ''	
					begin
						set @WhereClause += ' and thdr.PROJECT_ID In (SELECT mkey FROM #TableOutputProjectMkey)';
					end

					if 	ISNULL(@BuildingMkey, '') <> ''	
					begin
						set @WhereClause += ' and thdr.SUB_PROJECT_ID in (SELECT mkey FROM #TableOutputBuildingMkey)';
					end

					if 	ISNULL(@BUILDING_TYPE, '') <> ''	
					begin
						set @WhereClause += ' and athdr.BUILDING_TYPE In (SELECT mkey FROM #TableOutputBUILDING_TYPE)';
					end

					if 	ISNULL(@BUILDING_STANDARD, '') <> ''	
					begin
						set @WhereClause += ' and athdr.BUILDING_STANDARD in (SELECT mkey FROM #TableOutputBUILDING_STANDARD)';
					end
					if 	ISNULL(@STATUTORY_AUTHORITY, '') <> ''	
					begin
						set @WhereClause += ' and athdr.STATUTORY_AUTHORITY in (SELECT mkey FROM #TableOutputSTATUTORY_AUTHORITY)';
					end
					 
        END
		Else IF @TASK_TYPE = 'COMPLIANCE' --(SELECT type_desc FROM TYPE_MST	WHERE TYPE_CODE = 'Compliance' AND DELETE_FLAG = 'N') 
		Begin
			SELECT @TaskTypeMkey = MKEY
			FROM TYPE_MST
			WHERE TYPE_CODE = 'Task_Type' AND DELETE_FLAG = 'N' AND TYPE_DESC = 'COMPLIANCE';

			Set @sql = 'SELECT  thdr.mkey as Sr_No, thdr.mkey,Isnull(TMST.type_desc, ''NA'') CATEGORY
					,thdr.task_no,dbo.[Initcap](Isnull(CREATOR.emp_full_name, ''NA'')) CREATOR
					,dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, ''NA'')) RESPONSIBLE,
						dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, ''NA'')) ACTIONABLE,thdr.creation_date,                    
						CASE WHEN thdr.status IN ( ''CREATED'' ) THEN ''Not Started''                      
						WHEN thdr.status LIKE ''%SUB TASK CREATED%'' THEN ''Not Started'' WHEN thdr.status LIKE ''%SUBTASK CREATED%'' THEN ''Not Started''                      
						WHEN thdr.status IN ( ''WORK IN PROGRESS'', ''CLOSE INITIATED'', ''CANCEL INITIATED'', ''RE-WORK'' ) THEN ''In Progress''                      
						WHEN thdr.status IN ( ''CLOSE'', ''COMPLETED'' ) THEN ''Completed'' ELSE ''Others'' END AS Dashboard_Status, 
						thdr.completion_date AS COMPLETION_DATE, dbo.[Initcap](thdr.task_name) AS TASK_NAME,                    
						thdr.task_description,thdr.tags,dbo.[Initcap](thdr.status) AS STATUS, CASE                      
						WHEN Isnull(CREATOR.first_name, ''NA'') != Isnull(RESPONSIBLE.first_name, ''NA'') 
						THEN dbo.[Initcap](Isnull(CREATOR.first_name, ''NA'')) + '' > '' + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, ''NA''))                      
						ELSE dbo.[Initcap](Isnull(CREATOR.first_name, ''NA'')) END AS RESPONSIBLE_TAG,                   
						dbo.[Initcap](Isnull(TProject.type_desc, '''')) AS PROJECT_NAME,dbo.Tasknamestring(thdr.mkey) AS TASK_HISTORY,  
						Isnull(Rtrim(thdr.[priority]), '''') AS [Priority],Isnull(thdr.percent_complete, ''0'') AS Progress_Percentage,                    
						Isnull(parent_counts.parenttaskcount, 0) AS SubTask_Count,
						chdr.RESPONSIBLE_DEPARTMENT,chdr.JOB_ROLE,chdr.RESPONSIBLE_PERSON,chdr.STATUS as ComplianceSTATUS,chdr.RAISED_AT
						,chdr.RAISED_AT_BEFORE,thdr.CREATED_BY            
				from COMPLIANCE_HDR chdr left join TASK_HDR thdr on thdr.MKEY = chdr.TASK_NO_MKEY
				LEFT JOIN employee_mst CREATOR ON CREATOR.mkey = thdr.created_by AND CREATOR.delete_flag = ''N''             
				LEFT JOIN employee_mst RESPONSIBLE ON RESPONSIBLE.mkey = thdr.assigned_to AND RESPONSIBLE.delete_flag = ''N''             
				LEFT JOIN employee_mst ACTIONABLE ON ACTIONABLE.mkey = thdr.resposible_emp_mkey AND ACTIONABLE.delete_flag = ''N''
				Inner JOIN TYPE_MST TProject ON TProject.TYPE_CODE = ''Project'' AND TProject.MASTER_MKEY = thdr.PROJECT_ID AND TProject.DELETE_FLAG = ''N''
				Inner JOIN TYPE_MST TBuilding ON TBuilding.TYPE_CODE = ''Project'' AND TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID AND TBuilding.DELETE_FLAG = ''N''
				left join TYPE_MST Dmst on chdr.RESPONSIBLE_DEPARTMENT = Dmst.MASTER_MKEY and Dmst.TYPE_CODE=''DEPARTMENT'' AND Dmst.DELETE_FLAG = ''N''
				LEFT JOIN type_mst TMST ON TMST.master_mkey = thdr.CAREGORY AND TMST.type_code = ''CATEGORY'' AND TMST.delete_flag = ''N''  
				left join employee_mst Rmst on rmst.MKEY = chdr.RESPONSIBLE_PERSON and Rmst.DELETE_FLAG = ''N''
				left join TYPE_MST Jmst on chdr.JOB_ROLE = Jmst.MASTER_MKEY and Jmst.TYPE_CODE=''JOBROLE'' AND Jmst.DELETE_FLAG = ''N''
				left JOIN APPROVAL_TEMPLATE_HDR RaisedHDR ON RaisedHDR.MKEY = chdr.RAISED_AT and RaisedHDR.DELETE_FLAG = ''N''
				left JOIN APPROVAL_TEMPLATE_HDR RaisedBeforeHDR ON RaisedBeforeHDR.MKEY = chdr.RAISED_AT_BEFORE and RaisedBeforeHDR.DELETE_FLAG = ''N''
				LEFT JOIN (SELECT task_parent_id, Count(*) AS ParentTaskCount                        
				FROM task_hdr WHERE task_parent_id IS NOT NULL AND mkey NOT IN (task_parent_id) AND delete_flag = ''N''                        
				GROUP BY task_parent_id) parent_counts ON thdr.mkey = parent_counts.task_parent_id';

					Set @WhereClause =' Where chdr.TASK_TYPE = ' + CONVERT(NVARCHAR, @TaskTypeMkey) + '';
					
					if 	ISNULL(@ProjectMkey, '') <> ''	
					begin
						set @WhereClause += ' and chdr.PROPERTY In (SELECT mkey FROM #TableOutputProjectMkey)';
					end

					if 	ISNULL(@BuildingMkey, '') <> ''	
					begin
						set @WhereClause += ' and chdr.BUILDING in (SELECT mkey FROM #TableOutputBuildingMkey)';
					end

					if 	ISNULL(@ResponsibleDepart, '') <> ''	
					begin
						set @WhereClause += ' and RESPONSIBLE_DEPARTMENT in (SELECT mkey FROM #TableOutputResponsibleDepart)';
					end

					if 	ISNULL(@ResponsiblePerson, '') <> ''	
					begin
						set @WhereClause += ' and chdr.RESPONSIBLE_PERSON in (SELECT mkey FROM #TableOutputResponsiblePerson)';
						--print 'responsible: '+ ' and chdr.RESPONSIBLE_PERSON in (SELECT mkey FROM #TableOutputResponsiblePerson)'; 
					end
					if 	ISNULL(@JobRole, '') <> ''	
					begin
						set @WhereClause += ' and chdr.JOB_ROLE in (SELECT mkey FROM #TableOutputJobRole)';
					end
					if 	ISNULL(@RaisedAt, '') <> ''	
					begin
						set @WhereClause += ' and chdr.RAISED_AT in (SELECT mkey FROM #TableOutputRaisedAt)';
					end

					if 	ISNULL(@RaisedAtBefore, '') <> ''	
					begin
						set @WhereClause += ' and chdr.RAISED_AT_BEFORE in (SELECT mkey FROM #TableOutputRaisedAtBefore)';
					end

					if 	ISNULL(@Status, '') <> ''	
					begin
						set @WhereClause += ' and chdr.STATUS in ('''+ REPLACE('I,N', ',', ''',''') + ''')';
					end
		end
		Else IF @TASK_TYPE = 'Milestones' --(SELECT type_desc FROM TYPE_MST	WHERE TYPE_CODE = 'Compliance' AND DELETE_FLAG = 'N') 
		BEGIN
				SELECT @TaskTypeMkey = MKEY
				FROM TYPE_MST
				WHERE TYPE_CODE = 'Task_Type' AND DELETE_FLAG = 'N' AND TYPE_DESC = 'MSP';
			Set @sql = '
						SELECT thdr.mkey as Sr_No, thdr.mkey,Isnull(TMST.type_desc, ''NA'') CATEGORY
						,thdr.task_no,dbo.[Initcap](Isnull(CREATOR.emp_full_name, ''NA'')) CREATOR
						,dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, ''NA'')) RESPONSIBLE,
						dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, ''NA'')) ACTIONABLE,thdr.creation_date,                    
						CASE WHEN thdr.status IN ( ''CREATED'' ) THEN ''Not Started''                      
						WHEN thdr.status LIKE ''%SUB TASK CREATED%'' THEN ''Not Started'' WHEN thdr.status LIKE ''%SUBTASK CREATED%'' THEN ''Not Started''                      
						WHEN thdr.status IN ( ''WORK IN PROGRESS'', ''CLOSE INITIATED'', ''CANCEL INITIATED'', ''RE-WORK'' ) THEN ''In Progress''                      
						WHEN thdr.status IN ( ''CLOSE'', ''COMPLETED'' ) THEN ''Completed'' ELSE ''Others'' END AS Dashboard_Status, 
						thdr.completion_date AS COMPLETION_DATE, dbo.[Initcap](thdr.task_name) AS TASK_NAME,                    
						thdr.task_description,thdr.tags,dbo.[Initcap](thdr.status) AS STATUS, CASE                      
						WHEN Isnull(CREATOR.first_name, ''NA'') != Isnull(RESPONSIBLE.first_name, ''NA'') 
						THEN dbo.[Initcap](Isnull(CREATOR.first_name, ''NA'')) + '' > '' + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, ''NA''))                      
						ELSE dbo.[Initcap](Isnull(CREATOR.first_name, ''NA'')) END AS RESPONSIBLE_TAG, 
						dbo.[Initcap](Isnull(TProject.type_desc, '''')) AS PROJECT_NAME,dbo.Tasknamestring(thdr.mkey) AS TASK_HISTORY,  
						Isnull(Rtrim(thdr.[priority]), '''') AS [Priority],Isnull(thdr.percent_complete, ''0'') AS Progress_Percentage,
						Isnull(parent_counts.parenttaskcount, 0) AS SubTask_Count
						FROM TASK_HDR thdr
						LEFT JOIN employee_mst CREATOR ON CREATOR.mkey = thdr.created_by AND CREATOR.delete_flag = ''N''             
						LEFT JOIN employee_mst RESPONSIBLE ON RESPONSIBLE.mkey = thdr.assigned_to AND RESPONSIBLE.delete_flag = ''N''             
						LEFT JOIN employee_mst ACTIONABLE ON ACTIONABLE.mkey = thdr.resposible_emp_mkey AND ACTIONABLE.delete_flag = ''N''
						Inner JOIN TYPE_MST TProject ON TProject.TYPE_CODE = ''Project'' AND TProject.MASTER_MKEY = thdr.PROJECT_ID AND TProject.DELETE_FLAG = ''N''
						Inner JOIN TYPE_MST TBuilding ON TBuilding.TYPE_CODE = ''Project'' AND TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID AND TBuilding.DELETE_FLAG = ''N''
						LEFT JOIN type_mst TMST ON TMST.master_mkey = thdr.CAREGORY AND TMST.type_code = ''CATEGORY'' AND TMST.delete_flag = ''N''  
						LEFT JOIN (SELECT task_parent_id, Count(*) AS ParentTaskCount                        
						FROM task_hdr WHERE task_parent_id IS NOT NULL AND mkey NOT IN (task_parent_id) AND delete_flag = ''N''
						GROUP BY task_parent_id) parent_counts ON thdr.mkey = parent_counts.task_parent_id';
						--WHERE Is_Scheduled IS NOT NULL AND thdr.DELETE_FLAG = ''N'' 
						--AND TASK_CREATED_BY = '+ @Session_User_Id +' OR CREATED_BY = '+ @Session_User_Id +' AND TASK_TYPE = '+ @TaskTypeMkey +' ';

						Set @WhereClause =' Where Is_Scheduled IS NOT NULL AND thdr.DELETE_FLAG = ''N'' 
											AND thdr.TASK_TYPE = ' + CONVERT(NVARCHAR, @TaskTypeMkey) + '';
					
						if 	ISNULL(@ProjectMkey, '') <> ''	
						begin
							set @WhereClause += ' and thdr.PROPERTY In (SELECT mkey FROM #TableOutputProjectMkey)';
						end

						if 	ISNULL(@BuildingMkey, '') <> ''	
						begin
							set @WhereClause += ' and thdr.BUILDING in (SELECT mkey FROM #TableOutputBuildingMkey)';
						end
		END
			IF @FILTER = 'Today'
			BEGIN
				SET @WhereClause += ' And (CONVERT(VARCHAR, thdr.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
										AND thdr.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
			END
			IF @FILTER = 'Pending'
			BEGIN
				SET @WhereClause +=' AND (STATUS_PERC = 0.0 AND thdr.completion_date < GETDATE() 
										and thdr.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
			END
			IF @FILTER = 'Review'
			BEGIN
				SET @WhereClause += ' AND (thdr.STATUS IN (''Close Initiated'',''Cancel Initiated''))';
			END
			IF @FILTER = 'Completed'
			BEGIN
				SET @WhereClause += ' And (thdr.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
			END
			IF @FILTER = 'Cancelled'
			BEGIN
				SET @WhereClause +=' AND (thdr.status IN (''CANCEL'', ''CANCELLED'')) ';
			END
			IF @FILTER = 'Overdue'
			BEGIN
				SET @WhereClause += ' And (thdr.completion_date < GETDATE() AND thdr.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'')) ';
			END
			IF @FILTER = 'Future'
			BEGIN
				SET @WhereClause +=' AND (thdr.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')) 
										and thdr.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
			END
			
			
			if (((@ProjectMkey != null or @BuildingMkey != null))  -- (@ProjectMkey != '' or @BuildingMkey != '') OR
				OR (@WhereClause  is not null OR @WhereClause  != null))
			Begin
		
				Set @sql +=' '+ @WhereClause + ' order by thdr.PROJECT_ID, thdr.SUB_PROJECT_ID,thdr.MKEY; ';
				print '@sql: '+ @sql ;
			End
			Else
			Begin
		
				set @sql += ' WHERE thdr.DELETE_FLAG = ''N'' And (RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR,@Session_User_Id) +' 
						OR thdr.CREATED_BY = '+CONVERT(NVARCHAR, @Session_User_Id) +' )
						Order by thdr.PROJECT_ID, thdr.SUB_PROJECT_ID,thdr.MKEY; ';
			End
			
			EXEC Sp_executesql @sql;
			-- End 

			-- Filter count
			Select 'Todays' as DurationFilter,Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where 
			CASE
				WHEN @TaskTypeMkey != 0    THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
			AND	CASE
					WHEN ISNULL(@ProjectMkey, '') <> '' THEN
						CASE WHEN thdr.PROJECT_ID in (SELECT mkey FROM #TableOutputProjectMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN ISNULL(@BuildingMkey , '') <> '' THEN 
						CASE WHEN thdr.SUB_PROJECT_ID in (SELECT mkey FROM #TableOutputBuildingMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			And (CONVERT(VARCHAR, thdr.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103)
			AND thdr.status not IN ('CANCEL', 'COMPLETED','CANCELLED'))
			
			Union 
			
			Select 'Pending' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where 
			CASE
				WHEN @TaskTypeMkey != 0    THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
				AND	CASE
					WHEN ISNULL(@ProjectMkey, '') <> '' THEN
						CASE WHEN thdr.PROJECT_ID in (SELECT mkey FROM #TableOutputProjectMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN ISNULL(@BuildingMkey, '') <> '' THEN 
						CASE WHEN thdr.SUB_PROJECT_ID in (SELECT mkey FROM #TableOutputBuildingMkey)  THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			AND (STATUS_PERC = 0.0 AND thdr.completion_date < GETDATE() 
			and thdr.status IN ('CREATED', 'SUB TASK CREATED','WORK IN PROGRESS','RE-WORK'))
			
			Union 
			
			Select 'Review' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where 
			CASE
				WHEN @TaskTypeMkey != 0    THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
			AND	CASE
					WHEN ISNULL(@ProjectMkey, '') <> '' THEN  
						CASE WHEN thdr.PROJECT_ID in (SELECT mkey FROM #TableOutputProjectMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN ISNULL(@BuildingMkey, '') <> '' THEN  
						CASE WHEN thdr.SUB_PROJECT_ID in (SELECT mkey FROM #TableOutputBuildingMkey)  THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			AND (thdr.STATUS IN ('Close Initiated','Cancel Initiated'))
			
			Union 
			
			Select 'Overdue' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where
			CASE
				WHEN @TaskTypeMkey != 0    THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
			AND	CASE
					WHEN ISNULL(@ProjectMkey, '') <> '' THEN 
						CASE WHEN thdr.PROJECT_ID in (SELECT mkey FROM #TableOutputProjectMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN ISNULL(@BuildingMkey, '') <> '' THEN 
						CASE WHEN thdr.SUB_PROJECT_ID in (SELECT mkey FROM #TableOutputBuildingMkey)  THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			And (thdr.completion_date < GETDATE() AND thdr.status not IN ('CANCEL', 'COMPLETED','CANCELLED')) 
			
			Union 
			
			Select 'Future' as DurationFilter, Count(*) DurationCount
			From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.ASSIGNED_TO = emst.MKEY
			left join TYPE_MST TProject on TProject.MASTER_MKEY = thdr.PROJECT_ID 
			left join TYPE_MST TBuilding on TBuilding.MASTER_MKEY = thdr.SUB_PROJECT_ID
			Where 
			CASE
				WHEN @TaskTypeMkey != 0  THEN 
					CASE WHEN thdr.TASK_TYPE = @TaskTypeMkey THEN 1 ELSE 0 END
				ELSE 1 
				END = 1
			AND	CASE
					WHEN ISNULL(@ProjectMkey, '') <> '' THEN
						CASE WHEN thdr.PROJECT_ID in (SELECT mkey FROM #TableOutputProjectMkey) THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			AND	CASE
					WHEN ISNULL(@BuildingMkey, '') <> '' THEN 
						CASE WHEN thdr.SUB_PROJECT_ID in (SELECT mkey FROM #TableOutputBuildingMkey)  THEN 1 ELSE 0 END
					ELSE 1 
					END = 1
			And (RESPOSIBLE_EMP_MKEY = @Session_User_Id OR thdr.CREATED_BY = @Session_User_Id ) 
			AND (thdr.STATUS NOT IN ('COMPLETED','CANCELLED','Close Initiated','Cancel Initiated')) 
			and thdr.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103); 

        -- Final execution
        --PRINT '@sql: ' + @sql;
        --EXEC sp_executesql @sql;

        -- Return summary counts for filters (if needed) here...
        -- You can retain your UNION queries for 'Todays', 'Pending', etc., after this

    END TRY
    BEGIN CATCH
        SELECT
            ERROR_NUMBER() AS ERRORNUMBER,
            ERROR_SEVERITY() AS ERRORSEVERITY,
            ERROR_STATE() AS ERRORSTATE,
            ERROR_PROCEDURE() AS ERRORPROCEDURE,
            ERROR_LINE() AS ERRORLINE,
            ERROR_MESSAGE() AS ERRORMESSAGE;

        DECLARE @ERROR_MESSAGE VARCHAR(MAX) = NULL;
        SET @ERROR_MESSAGE = ERROR_MESSAGE();

        EXEC Sp_p_tms_insert_error_des
            @Session_User_Id,
            'TMS',
            'Get Task Projects',
            @ERROR_MESSAGE,
            'Get';
    END CATCH
END


---------------------------------------------------------------------------------------


GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_DASHBOARD_NT]    Script Date: 02-07-2025 15:18:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--    EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT',926,1
--   EXEC SP_TASK_DASHBOARD_NT 926,5,926,2
ALTER PROCEDURE [dbo].[SP_TASK_DASHBOARD_NT] (@CURRENT_EMP_MKEY  INT,
                                              @USER_FILTER       VARCHAR(max) =NULL,--'ALLOCATEDBYME,ALLOCATEDTOME,COMPLETEDBYME,COMPLETEDFORME,CANCELCLOSE',
                                              @Session_User_Id   INT,
                                              @Business_Group_Id INT)
--@STATUS_FILTER     NVARCHAR(max) = NULL,--'Completed,Cancelled,Pending,Review',
--@DURATION_FILTER   NVARCHAR(max) = NULL, -- Today,Future,Overdue,Next 3 Days,Next 7 Days,Next 2 Weeks,Next Month,
--@PriorityFilter    VARCHAR(max) =NULL,--'High,Medium,Low',
-- @TypeFilter        VARCHAR(max) =NULL,--'RECURRING,APPROVAL,COMPLIANCE,APPROVAL,GENERAL,SYSTEM,EMAIL,RERA COMPLAIN';
AS
  BEGIN
      DECLARE @DAY INT

      SET @DAY=0;

      DECLARE @sql NVARCHAR(max) = '';
      DECLARE @start INT = 1,
              @end   INT;
      DECLARE @hasWhereClause BIT = 0,@hasUserClause BIT = 0,@hasPriorityClause BIT = 0,@hasTypeClause BIT = 0,@hasSTATUSClause BIT = 0
	  ,@hasDurationClause BIT = 0;
      DECLARE @WhereClause    NVARCHAR(max) = '',
              @filter         VARCHAR(500),
              @TaskTypeMkey   NVARCHAR(50),
			  @PriorityClause NVARCHAR(max) = '',
              @TypeClause     NVARCHAR(max) = '',
              @STATUSClause   NVARCHAR(max) = '',
              @DurationClause NVARCHAR(max) = '',
			  @UserClause	  NVARCHAR(max) = '',
			  @CONCATFILETR BIT  = 0;

      SET @sql = 'SELECT  T_HDR.mkey as Sr_No, T_HDR.mkey,Isnull(TMST.type_desc, ''NA'') CATEGORY,T_HDR.task_no
				 ,dbo.[Initcap](Isnull(CREATOR.emp_full_name, ''NA'')) CREATOR,   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, ''NA'')) RESPONSIBLE
				 ,dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, ''NA'')) ACTIONABLE,   T_HDR.creation_date,
				 CASE WHEN T_HDR.status IN ( ''CREATED'' ) THEN ''Not Started'' WHEN T_HDR.status LIKE ''%SUB TASK CREATED%'' THEN ''Not Started''                        
				 WHEN T_HDR.status LIKE ''%SUBTASK CREATED%'' THEN ''Not Started''                         
				 WHEN T_HDR.status IN ( ''WORK IN PROGRESS'', ''CLOSE INITIATED'', ''CANCEL INITIATED'', ''RE-WORK'' ) THEN ''In Progress''                         
				 WHEN T_HDR.status IN ( ''CLOSE'', ''COMPLETED'' ) THEN ''Completed''                      ELSE ''Others''                    END AS Dashboard_Status,   
				 T_HDR.completion_date AS COMPLETION_DATE,                       dbo.[Initcap](T_HDR.task_name) AS TASK_NAME,                       
				 T_HDR.task_description,T_HDR.tags,dbo.[Initcap](T_HDR.status) AS STATUS,
				 CASE
				 WHEN Isnull(CREATOR.first_name, ''NA'') != Isnull(RESPONSIBLE.first_name, ''NA'') 
				 THEN dbo.[Initcap](Isnull(CREATOR.first_name, ''NA'')) + '' > '' + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, ''NA''))                         
				 ELSE dbo.[Initcap](Isnull(CREATOR.first_name, ''NA''))                       END AS RESPONSIBLE_TAG,                      
				 dbo.[Initcap](Isnull(PMST.type_desc, '''')) AS PROJECT_NAME,                       dbo.Tasknamestring(T_HDR.mkey) AS TASK_HISTORY,                       
				 Isnull(Rtrim(T_HDR.[priority]), '''') AS [Priority],                       
				 Isnull(T_HDR.percent_complete, ''0'') AS Progress_Percentage,                       
				 Isnull(parent_counts.parenttaskcount, 0) AS SubTask_Count,                       
				 T_HDR.CREATED_BY                
				 FROM task_hdr T_HDR                
				 LEFT JOIN employee_mst CREATOR ON CREATOR.mkey = T_HDR.created_by AND CREATOR.delete_flag = ''N''                
				 LEFT JOIN employee_mst RESPONSIBLE ON RESPONSIBLE.mkey = T_HDR.assigned_to AND RESPONSIBLE.delete_flag = ''N''                
				 LEFT JOIN employee_mst ACTIONABLE ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey AND ACTIONABLE.delete_flag = ''N''               
				 LEFT JOIN type_mst TMST ON TMST.master_mkey = T_HDR.caregory AND TMST.type_code = ''CATEGORY'' AND TMST.delete_flag = ''N''               
				 LEFT JOIN type_mst PMST ON PMST.master_mkey = T_HDR.project_id AND PMST.type_code = ''PROJECT'' AND PMST.delete_flag = ''N''               
				 LEFT JOIN (SELECT task_parent_id, Count(*) AS ParentTaskCount                          
				 FROM task_hdr WHERE task_parent_id IS NOT NULL AND mkey NOT IN (task_parent_id) AND delete_flag = ''N''                           
				 GROUP BY task_parent_id) parent_counts ON T_HDR.mkey = parent_counts.task_parent_id
				 WHERE Isnull(T_HDR.status_flag, ''A'') IN (''A'') AND T_HDR.delete_flag = ''N'' '    ;

    /* @USER_FILTER */
    IF ( @USER_FILTER <> ''
         AND @USER_FILTER IS NOT NULL ) -- @USER_FILTER is not null OR
	BEGIN
		WHILE @start <= Len(@USER_FILTER)
			BEGIN
                SET @end = Charindex(',', @USER_FILTER, @start);

                IF @end = 0
				SET @end = Len(@USER_FILTER) + 1;

                SET @filter = Ltrim(Rtrim(Substring(@USER_FILTER, @start, @end - @start)));
				--SET @hasUserClause = 0;
				-- @UserClause
                IF ( @filter = 'Default'
                      OR @filter = 'ALLOCATEDBYME'
                      OR @filter = 'ALLOCATEDTOME'
                      OR @filter = 'COMPLETEDBYME'
                      OR @filter = 'COMPLETEDFORME'
                      OR @filter = 'CANCELCLOSE' )
				BEGIN
					IF @filter = 'Default'
					BEGIN
						IF @hasUserClause = 0
						BEGIN
							--SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
							SET @UserClause	+= ' ( T_HDR.RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) + ' )	
													and (T_HDR.STATUS not in (''CANCEL'',''CANCELLED'',''CLOSE'',''COMPLETED'',''Completed''))';
							SET @hasUserClause = 1;
						END
							ELSE
                            BEGIN
								SET @UserClause +=' OR ( T_HDR.RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+')
													and (T_HDR.STATUS not in (''CANCEL'',''CANCELLED'',''CLOSE'',''COMPLETED'',''Completed''))';
                            END
                        END

					IF @filter = 'ALLOCATEDBYME'
					BEGIN
                        IF @hasUserClause = 0
						BEGIN
                                --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                                SET @UserClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+ ')
													and (T_HDR.STATUS not in (''CANCEL'',''CANCELLED'',''CLOSE'',''COMPLETED'',''Completed''))';
													--OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+ ')
                                SET @hasUserClause = 1;
                        END
						ELSE
                        BEGIN
                                SET @UserClause +=' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+' )
													and (T_HDR.STATUS not in (''CANCEL'',''CANCELLED'',''CLOSE'',''COMPLETED''))';
													--OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+')
                        END
                    END

                    IF @filter = 'ALLOCATEDTOME'
                    BEGIN
                        IF @hasUserClause = 0
                            BEGIN
                                SET @UserClause += ' ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +'
												and T_HDR.STATUS not in (''CANCEL'',''CANCELLED'',''CLOSE'',''COMPLETED'',''Completed''))';
                               -- + ' OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+')';
                                --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                                SET @hasUserClause = 1;
                            END
                        ELSE
                            --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                            SET @UserClause +=' OR ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +'
												and T_HDR.STATUS not in (''CANCEL'',''CANCELLED'',''CLOSE'',''COMPLETED'',''Completed''))';
											--+ ' OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +')';
                    END
					
                    IF @filter = 'COMPLETEDBYME'
                    BEGIN
                        IF @hasUserClause = 0
                            BEGIN
                                SET @UserClause +=
                                ' ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                                +
                                ' AND T_HDR.status IN (''COMPLETED'',''Completed''))';
                                --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                                SET @hasUserClause = 1;
                            END
                        ELSE
                            --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                            SET @UserClause +=
                            ' OR ( CONVERT(int,T_HDR.assigned_to) = '
                            + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                            + ' AND T_HDR.status IN (''COMPLETED'',''Completed''))';
                    END

                    IF @filter = 'COMPLETEDFORME'
                    BEGIN
                        IF @hasUserClause = 0
                            BEGIN
                                --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                                SET @UserClause += ' ( T_HDR.created_by = '
                                                    + CONVERT(NVARCHAR,
                                                    @CURRENT_EMP_MKEY)
                                                    +
                                ' AND CONVERT(int,T_HDR.assigned_to) != '
                                                    + CONVERT(NVARCHAR,
                                                    @CURRENT_EMP_MKEY)
                                                    +
                                ' AND T_HDR.status IN (''COMPLETED'',''Completed''))';
                                SET @hasUserClause = 1;
                            END
                        ELSE
                            --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                            SET @UserClause += ' OR ( T_HDR.created_by = '
                                                + CONVERT(NVARCHAR,
                                                @CURRENT_EMP_MKEY)
                                                +
                            ' AND CONVERT(int,T_HDR.assigned_to) != '
                                                + CONVERT(NVARCHAR,
                                                @CURRENT_EMP_MKEY)
                                                +
                            ' AND T_HDR.status IN (''COMPLETED'',''Completed''))';
                    END

					IF @filter = 'CANCELCLOSE'
					BEGIN
						IF @hasUserClause = 0
							BEGIN
								SET @UserClause += ' ( T_HDR.created_by = '
													+ CONVERT(NVARCHAR,
													@CURRENT_EMP_MKEY)
													+
								' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
								--OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
								--SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
								SET @hasUserClause = 1;
							END
						ELSE
							--SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
							SET @UserClause += ' OR ( T_HDR.created_by = '
												+ CONVERT(NVARCHAR,
												@CURRENT_EMP_MKEY)
												+
							' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'') ) ';
					--OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
					END
				END
				-- end @UserClause
				
				--@PriorityClause
				IF( @filter = 'High'
                     OR @filter = 'Low'
                     OR @filter = 'Medium' )
				BEGIN
					/*Priority Filter */
					IF @filter = 'High'
					BEGIN
						IF @hasPriorityClause = 0
						BEGIN
							--SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
							SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
							SET @hasPriorityClause = 1;
						END
						ELSE
							--SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
							SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
					END

					IF @filter = 'Low'
					BEGIN
						IF @hasPriorityClause = 0
						BEGIN
							--SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
							SET @PriorityClause += ' ( LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
							SET @hasPriorityClause = 1;
						END
						ELSE
							--SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
							SET @PriorityClause += ' OR ( LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
					END

					IF @filter = 'Medium'
					BEGIN
						IF @hasPriorityClause = 0
						BEGIN
							--SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
							SET @PriorityClause +=' (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';
							SET @hasPriorityClause = 1;
						END
						ELSE
							--SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
							SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'') ';
					END
					/* End Priority */
				END
				--SET @hasWhereClause = 0;
				
				--@TypeClause
				IF ( @filter = 'RECURRING'
				OR @filter = 'Approval'
				OR @filter = 'COMPLIANCE'
				OR @filter = 'GENERAL'
				OR @filter = 'SYSTEM'
				OR @filter = 'Email'
				OR @filter = 'RERA COMPLAIN' )
				BEGIN
				/*Type Filter*/
					IF @filter = 'RECURRING'
					BEGIN
						SELECT @TaskTypeMkey = master_mkey
						FROM   type_mst
						WHERE  type_code = 'TASK_TYPE'
						AND type_desc = @filter
						AND delete_flag = 'N';

						IF @hasTypeClause = 0
						BEGIN
							SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
							SET @hasTypeClause = 1;
						END
						ELSE
							SET @TypeClause += ' OR ( TASK_TYPE = '+ @TaskTypeMkey + ') ';
					END

					IF @filter = 'Approval'
					BEGIN
						SELECT @TaskTypeMkey = master_mkey
						FROM   type_mst
						WHERE  type_code = 'TASK_TYPE'
						AND type_desc = @filter
						AND delete_flag = 'N';

						IF @hasTypeClause = 0
						BEGIN
							SET @TypeClause += ' ( TASK_TYPE = ' + @TaskTypeMkey + ') ';
							SET @hasTypeClause = 1;
						END
						ELSE
							SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
					END

					IF @filter = 'COMPLIANCE'
					BEGIN
						SELECT @TaskTypeMkey = master_mkey
						FROM   type_mst
						WHERE  type_code = 'TASK_TYPE'
						AND type_desc = @filter
						AND delete_flag = 'N';

						IF @hasTypeClause = 0
						BEGIN
							SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
							SET @hasTypeClause = 1;
						END
						ELSE
							SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
					END

					IF @filter = 'GENERAL'
					BEGIN
						SELECT @TaskTypeMkey = master_mkey
						FROM   type_mst
						WHERE  type_code = 'TASK_TYPE'
						AND type_desc = @filter
						AND delete_flag = 'N';

						IF @hasTypeClause = 0
						BEGIN
							SET @TypeClause += ' ( TASK_TYPE = ' + @TaskTypeMkey + ') ';
							SET @hasTypeClause = 1;
						END
						ELSE
							SET @TypeClause +=' OR ( TASK_TYPE = ' + @TaskTypeMkey + ') ';
					END

					IF @filter = 'SYSTEM'
					BEGIN
						SELECT @TaskTypeMkey = master_mkey
						FROM   type_mst
						WHERE  type_code = 'TASK_TYPE'
						AND type_desc = @filter
						AND delete_flag = 'N';

						IF @hasTypeClause = 0
						BEGIN
							SET @TypeClause += ' (TASK_TYPE = '+ @TaskTypeMkey + ') ';
							SET @hasTypeClause = 1;
						END
						ELSE
							SET @TypeClause += 'OR ( TASK_TYPE = ' + @TaskTypeMkey + ') ';
					END

					IF @filter = 'Email'
					BEGIN
						SELECT @TaskTypeMkey = master_mkey
						FROM   type_mst
						WHERE  type_code = 'TASK_TYPE'
						AND type_desc = @filter
						AND delete_flag = 'N';

						IF @hasTypeClause = 0
						BEGIN
							SET @TypeClause +=' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
							SET @hasTypeClause = 1;
						END
						ELSE
							SET @TypeClause +=' OR ( TASK_TYPE = '+ @TaskTypeMkey + ') ';
					END

					IF @filter = 'RERA COMPLAIN'
					BEGIN
						SELECT @TaskTypeMkey = master_mkey
						FROM   type_mst
						WHERE  type_code = 'TASK_TYPE'
						AND type_desc = @filter
						AND delete_flag = 'N';

					IF @hasTypeClause = 0
					BEGIN
						SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
						SET @hasTypeClause = 1;
					END
					ELSE
						SET @TypeClause += ' OR ( TASK_TYPE = ' + @TaskTypeMkey + ') ';
					END
					/*End Type Filter*/
				END
			
				--SET @hasWhereClause = 0;
				--end @@TypeClause

				-- @STATUSClause
				IF ( @filter = 'Pending'
					OR @filter = 'Review'
					OR @filter = 'Completed'
					OR @filter = 'Cancelled' )
					BEGIN
						/*Status Filter*/
						IF @filter = 'Pending'
						BEGIN
							IF @hasSTATUSClause = 0
							BEGIN
								SET @STATUSClause += '( STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE()  
													and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
								SET @hasSTATUSClause = 1;
							END
							ELSE
								SET @STATUSClause +=' OR ( STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE()  
													and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
						END

						IF @filter = 'Review'
						BEGIN
							IF @hasSTATUSClause = 0
							BEGIN
								SET @STATUSClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
								SET @hasSTATUSClause = 1;
							END
							ELSE
								SET @STATUSClause += ' OR ( T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
						END

						IF @filter = 'Completed'
						BEGIN
							IF @hasSTATUSClause = 0
							BEGIN
								SET @STATUSClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
								SET @hasSTATUSClause = 1;
							END
							ELSE
								SET @STATUSClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
						END

						IF @filter = 'Cancelled'
						BEGIN
							IF @hasSTATUSClause = 0
							BEGIN
								SET @STATUSClause +=' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
								SET @hasSTATUSClause = 1;
							END
							ELSE
								SET @STATUSClause += ' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
						END
						/*End Status Filter*/
					END
				--SET @hasWhereClause = 0;
				-- end @STATUSClause

				-- @DurationClause
				IF( @filter = 'Today'
				OR @filter = 'Overdue'
				OR @filter = 'Future'
				OR @filter = 'Next 3 Days'
				OR @filter = 'Next 7 Days'
				OR @filter = 'Next 2 Weeks'
				OR @filter = 'Next Month' 
				or Isnumeric(@filter) = 1)
				BEGIN
					IF @filter = 'Today'
					BEGIN
						IF @hasDurationClause = 0
						BEGIN
							SET @DurationClause += ' (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103))
												AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') '
							--' ( T_HDR.ASSIGNED_TO = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' OR T_HDR.RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +
							--					')  AND CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) ';
										--	AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'',''Close Initiated'' ,''Cancel Initiated'') ';
							SET @hasDurationClause = 1;
						END
						ELSE
						BEGIN
							SET @DurationClause += ' OR ( CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103))
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') '; 
							--AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'',''Close Initiated'' ,''Cancel Initiated'') ';
						END
					END

					IF @filter = 'Overdue'
					BEGIN
						IF @hasDurationClause = 0
						BEGIN
							SET @DurationClause +=' (T_HDR.COMPLETION_DATE < convert(DATETIME, convert(VARCHAR, getdate(), 103), 103))
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
									--			(T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
								--				+') AND T_HDR.COMPLETION_DATE < convert(DATETIME, convert(VARCHAR, getdate(), 103), 103) ';
											--     AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
							SET @hasDurationClause = 1;
						END
						ELSE
							SET @DurationClause += ' OR ( T_HDR.COMPLETION_DATE < convert(DATETIME, convert(VARCHAR, getdate(), 103), 103))
														AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
							-- OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
							--AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
					END

					IF @filter = 'Future'
					BEGIN
						IF @hasDurationClause = 0
						BEGIN
							SET @DurationClause += ' (T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103))
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') '
							--' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) 
							--+ '  OR T_HDR.ASSIGNED_TO = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
							----+ ' )   AND  T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')  
							--+ ' and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
							SET @hasDurationClause = 1;
						END
						ELSE
							SET @DurationClause += ' OR (T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103))
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
					END

					IF @filter = 'Next 3 Days'
					BEGIN
						IF @hasDurationClause = 0
						BEGIN
							--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
							SET @DurationClause +=' (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) 
												   AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
							SET @hasDurationClause = 1;
						END
						ELSE
							--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
							SET @DurationClause +=' OR (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) 
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
					END

					IF @filter = 'Next 7 Days'
					BEGIN
						IF @hasDurationClause = 0
						BEGIN
							--SET @DurationClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
							--            and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
							SET @DurationClause += ' (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
							SET @hasDurationClause = 1;
						END
						ELSE
							--SET @DurationClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
							--            and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
							SET @DurationClause += ' OR (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
					END

					IF @filter = 'Next 2 Weeks'
					BEGIN
						IF @hasDurationClause = 0
						BEGIN
						--SET @DurationClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
							SET @DurationClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = '
							+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
							+
							' AND  T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) '
							;
							SET @hasDurationClause = 1;
						END
						ELSE
							--SET @DurationClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
							SET @DurationClause +=' OR (T_HDR.RESPOSIBLE_EMP_MKEY = '
							+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
							+
							' AND  T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
					END

					IF @filter = 'Next Month'
					BEGIN
						IF @hasDurationClause = 0
						BEGIN
							--SET @DurationClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
							--SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
							SET @DurationClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = '
							+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
							+
							' AND  T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   
								AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
							SET @hasDurationClause = 1;
						END
						ELSE
							--SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
							--SET @DurationClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
							SET @DurationClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = '
							+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
							+
							' AND  T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   
							AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
					END

					IF ( Isnumeric(@filter) = 1 )
					BEGIN
					
						IF @hasDurationClause = 0
						BEGIN
						
							--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
							--SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY,' + CONVERT(NVARCHAR, @filter) + ' , GETDATE())) 
							--					  AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
							SET @DurationClause += '(T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, ' + CONVERT(NVARCHAR, @filter) + ', GETDATE())) 
										AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') '

							--' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+
							--' AND  T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY,' + CONVERT(NVARCHAR, @filter) + ' , GETDATE())) ';
							SET @hasDurationClause = 1;
						END
						ELSE
							print 'Isnumeric(@filter)outside: '+ convert(nvarchar,Isnumeric(@filter) )
							--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
							--SET @DurationClause +=' AND (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY,'+ CONVERT(NVARCHAR, @filter) + ', GETDATE())) 
							--					 AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
							SET @DurationClause += 'or (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, ' + CONVERT(NVARCHAR, @filter) + ', GETDATE())) 
												   AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') '
						END
				/*End Duration Filter*/
				END
				--SET @hasWhereClause = 0;
				-- end @DurationClause
				
				SET @start = @end + 1;
				PRINT '@UserClause : '+ @UserClause
			END
	END
			
			IF ( @PriorityClause != '' OR @PriorityClause != NULL)
			BEGIN
				SET @sql += ' AND ( ' + @PriorityClause + ' ) ';  
				SET @CONCATFILETR = 1;
			END	
			IF ( @DurationClause != '' OR @DurationClause != NULL)
			BEGIN
				print '@DurationClauseinside: '+ convert(nvarchar,Isnumeric(@filter) )
				SET @sql += ' AND ( ' + @DurationClause + ' ) '; 
				SET @CONCATFILETR = 1;
			END
			IF ( @STATUSClause != '' OR @STATUSClause != NULL)
			BEGIN
				SET @sql += ' AND ( ' + @STATUSClause + ' ) '; 
				SET @CONCATFILETR = 1;
			END
			IF ( @TypeClause != '' OR @TypeClause != NULL)
			BEGIN
				SET @sql += ' AND ( ' + @TypeClause + ' ) ';
				SET @CONCATFILETR = 1;
			END
			IF ( @UserClause != '' OR @UserClause != NULL)
			BEGIN
				SET @sql += ' AND ( ' + @UserClause + ' ) ';  
				SET @CONCATFILETR = 1;
			END
			ELSE
			BEGIN
				SET @sql += ' and ( T_HDR.RESPOSIBLE_EMP_MKEY =  '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +  
							 --OR T_HDR.assigned_to = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + '
							' OR T_HDR.created_by = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' ) ';
			END
			--IF ( @CONCATFILETR = 1 )
			--BEGIN
			--	--SET @sql += ' AND ( ' + @TypeClause + ' AND ' + @PriorityClause + ' AND ' + @STATUSClause + ' AND ' + @DurationClause + ' AND ' + @UserClause + '  ) ';
			--	--print 'print '+ ' AND ( ' + @TypeClause + ' AND ' + @PriorityClause + ' AND ' + @STATUSClause + ' AND ' + @DurationClause + ' AND ' + @UserClause + '  ) ';
			--	--print '@sql: '+ @sql;
			--END
			--ELSE IF ( @CONCATFILETR = 0 )
			--BEGIN
			----print '@WhereClause is not null';
			--	SET @sql += ' AND ( 1 != 1 ) ';
			--END
			--IF( @USER_FILTER IS NULL
			--		OR @USER_FILTER = 'Default'
			--		OR @USER_FILTER = ''
			--		OR @filter IS NOT NULL )
			--BEGIN
			--	SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = '
			--	+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
			--	SET @hasWhereClause = 1;
			--	SET @sql += ' AND  ' + @WhereClause + '  ';
			--END
			
			print '@sql123: '+ @sql
		EXEC Sp_executesql	@sql;

		EXEC Sp_dashboard_count @CURRENT_EMP_MKEY;

END 

------------------------------------------------------------------------------------
04-07-2025


GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_SCHEDULED_MSP]    Script Date: 04-07-2025 18:09:32 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[SP_INSERT_SCHEDULED_MSP](@Parameter1 VARCHAR(100) = NULL,
                                                --[Project]       
                                                @Parameter2 VARCHAR(100) = NULL,
                                                --Building      
                                                @Parameter3 VARCHAR(100) = NULL,
                                                --TASK_NO         
                                                @Parameter4 VARCHAR(100) = NULL,
                                                --TASK_DESC      
                                                @Parameter5 VARCHAR(100) = NULL,
                                                --DURATION        
                                                @Parameter6 VARCHAR(100) = NULL,
                                                --START       
                                                @Parameter7 VARCHAR(100) = NULL
--FINISH       
)
AS
  BEGIN
      SET nocount ON;

      --BEGIN try
         -- BEGIN TRANSACTION;

          DECLARE @DCount            INT,
                  @ROOT_MKEY         INT,
                  @ROOT_NUMBER       NVARCHAR(50),
                  @Mkey              INT,
                  @WBS               NVARCHAR(50),
                  @Name              NVARCHAR(500),
                  @Duration          NVARCHAR(100),
                  @Start_Date        DATETIME,
                  @Finish_Date       DATETIME,
                  @Predecessors      NVARCHAR(100),
                  @Resource_Names    NVARCHAR(100),
                  @Text1             NVARCHAR(100),
                  @Outline_Level     INT,
                  @Number1           INT,
                  @Unique_ID         INT,
                  @Percent_Complete  NUMERIC(18, 2),
                  @Created_By        INT,
                  @Creation_Date     DATETIME,
                  @CreatorID         INT,
                  @AssigneeID        INT,
                  @TaskMkey          INT,
                  @Task_Parent_ID    INT,
                  @Task_Main_Node_ID INT,
                  @Task_No           NVARCHAR(20),
                  @Task_Type         INT,
                  @Category          INT,
                  @FileName          NVARCHAR(255),
                  @MPP_NAME          NVARCHAR(255)
          DECLARE @lastIndex INT

          SET @DCount = 0;
          SET @lastIndex = 0;

          SELECT @Task_Type = master_mkey
          FROM   type_mst
          WHERE  delete_flag = 'N'
                 AND type_code = 'TASK_TYPE'
                 AND type_desc = 'MSP';

          SELECT @Category = master_mkey
          FROM   type_mst
          WHERE  type_code = 'CATEGORY'
                 AND type_desc = 'PUBLIC'
                 AND delete_flag = 'N';

          SET @Parameter1=Isnull(@Parameter1, '0');
          SET @Parameter2=Isnull(@Parameter2, '0');

          UPDATE msp_default_migration_table
          SET    remarks = 'Error : Resource Not Found'
          FROM   msp_default_migration_table MT
                 LEFT JOIN employee_mst EMP
                        ON MT.resource_names = EMP.emp_full_name
                 LEFT JOIN employee_mst Creator
                        ON MT.text1 = Creator.emp_full_name
          WHERE  ( Isnull(Creator.mkey, 0) = 0
                    OR Isnull(EMP.mkey, 0) = 0 );

          -- TO check null value in wbs 
          UPDATE msp_default_migration_table
          SET    remarks = 'Error : WBS is null'
          FROM   msp_default_migration_table MT
          WHERE  MT.wbs IS NULL
                  OR MT.wbs = ''

          -- end 
          SELECT wbs,
                 Count(wbs) C_WBS
          INTO   #tempwbs
          FROM   msp_default_migration_table
          GROUP  BY wbs
          HAVING Count(wbs) > 1;

          UPDATE msp_default_migration_table
          SET    remarks = 'Error : Duplicate WBS No'
          FROM   msp_default_migration_table MT
                 JOIN #tempwbs temp
                   ON MT.wbs = temp.wbs;

          DROP TABLE #tempwbs;
		  ------------------------------------------------------
		  -- to check the Percent_Complete null 
		  select wbs,count(WBS) C_WBS into #tempPercent
          FROM   msp_default_migration_table MT
          WHERE Percent_Complete IS NULL OR Percent_Complete = NULL OR ISNUMERIC(Percent_Complete) = 0 or Percent_Complete = '' 
		  group by wbs
		  having count(WBS) > 0

          UPDATE msp_default_migration_table
          SET    remarks = 'Error : Percent Complete column cannt be null or empty'
          FROM   msp_default_migration_table MT
				join #tempPercent temp  ON MT.wbs = temp.wbs;
		  --------------------------------------------------

          SELECT @DCount = Count(*)
          FROM   msp_default_migration_table
          WHERE  outline_level = 1

          IF( @DCount <= 0
               OR @DCount > 1 )
            BEGIN
                UPDATE msp_default_migration_table
                SET    remarks = 'Error : Outline Level 1 is not define';
            END

          SET @DCount = 0;

          SELECT wbs,
                 Count(wbs) AS Count_Wbs
          INTO   #tempcwbs
          FROM   task_hdr
          WHERE  project_id = @Parameter1
                 AND sub_project_id = @Parameter2
                 AND is_scheduled IS NOT NULL
          GROUP  BY wbs
          HAVING Count(wbs) >= 1

          UPDATE msp_default_migration_table
          SET    remarks = 'Error : Duplicate WBS in PROJECT_ID: '
                           + @Parameter1 + ' and  SUB_PROJECT_ID: '
                           + @Parameter2 + ' '
          FROM   msp_default_migration_table MT
                 JOIN #tempcwbs temp
                   ON MT.wbs = temp.wbs

          DROP TABLE #tempcwbs;

          --end  Duplicate WBS
          SELECT unique_id,
                 Count(unique_id) C_unique_id
          INTO   #tempuniqueid
          FROM   msp_default_migration_table
          GROUP  BY unique_id
          HAVING Count(unique_id) > 1;

          UPDATE msp_default_migration_table
          SET    remarks = 'Error : Duplicate unique_id'
          FROM   msp_default_migration_table MT
                 JOIN #tempuniqueid temp
                   ON MT.unique_id = temp.unique_id

          DROP TABLE #tempuniqueid;

          SELECT outline_level,
                 Count(wbs) C_Outline_Level
          INTO   #tempoutlinelevel
          FROM   msp_default_migration_table
          WHERE  outline_level = 0
          GROUP  BY outline_level
          HAVING Count(outline_level) >= 1;

          UPDATE msp_default_migration_table
          SET    remarks = 'Error : OutLine Level Cannot be 0'
          FROM   msp_default_migration_table MT
                 JOIN #tempoutlinelevel temp
                   ON MT.outline_level = temp.outline_level;

          DROP TABLE #tempoutlinelevel;

		  SELECT  Charindex('.',WBS) 'WBSRoot', Len(WBS) LenWBS,WBS into #tempWBSRoot
          FROM   msp_default_migration_table
          where Outline_Level = 1

		  UPDATE msp_default_migration_table
          SET    remarks = 'Error : Outline level 1 is not root parent of WBS'
          FROM   msp_default_migration_table MT
                 JOIN #tempWBSRoot temp
                   ON MT.WBS = temp.WBS and temp.WBSRoot > 0;;

          DROP TABLE #tempWBSRoot;


          SELECT @DCount = Isnull(Count(*), 0)
          FROM   msp_default_migration_table MT
          WHERE  remarks LIKE '%Error%';

          IF( @DCount <= 0 )
            BEGIN
			print '@DCount <= 0: ' + convert(nvarchar,@DCount);
                SELECT @DCount = Isnull(Count(*), 0)
                FROM   msp_default_migration_table MT
                WHERE  outline_level = 1

                --AND unique_id = 1     
                --order by Unique_id      
                IF( @DCount > 0 )
                  BEGIN
                      SELECT @WBS = wbs,
                             @Name = NAME,
                             @Duration = duration,
                             @Start_Date = start_date,
                             @Finish_Date = finish_date,
                             @Predecessors = predecessors,
                             @Resource_Names = resource_names,
                             @Text1 = text1,
                             @Outline_Level = outline_level,
                             @Number1 = number1,
                             @Unique_ID = unique_id,
                             @Percent_Complete = percent_complete,
                             @Created_By = MT.created_by,
                             @Creation_Date = MT.creation_date,
                             @AssigneeID = emp.mkey,
                             @CreatorID = Creator.mkey,
                             @FileName = [filename],
                             @MPP_NAME = mpp_name
                      FROM   msp_default_migration_table MT
                             LEFT JOIN employee_mst EMP
                                    ON MT.resource_names = EMP.emp_full_name
                             LEFT JOIN employee_mst Creator
                                    ON MT.text1 = Creator.emp_full_name
                      WHERE  outline_level = 1

                      IF( @Number1 > 0 )
                        /* CHECK WHETHER PROJECT ALREADY DEFINED*/
                        BEGIN
							
                            SELECT @ROOT_MKEY = mkey,
                                   @ROOT_NUMBER = task_no,
                                   @Task_Main_Node_ID = mkey
                            FROM   task_hdr
                            WHERE  mkey = @Number1

                            INSERT INTO task_hdr_h
                            SELECT Getdate(),
                                   *
                            FROM   task_hdr
                            WHERE  mkey = @Number1
							
							print '@Number1 > 0 UPDATE task_hdr: '+ convert(nvarchar, @Number1);
                            
							UPDATE task_hdr
                            SET    task_name = @Name,
                                   task_description = @Name,
                                   assigned_to = @AssigneeID,
                                   task_created_by = @CreatorID,
                                   start_date = @start_date,
                                   completion_date = @Finish_Date,
                                   is_scheduled = 'Y',
                                   wbs = @WBS,
                                   duration = @Duration,
                                   sch_start_date = @Start_Date,
                                   finish_date = @Finish_Date,
                                   predecessors = @Predecessors,
                                   resource_names = @Resource_Names,
								   Priority = 'Low',
                                   text1 = @Text1,
                                   outline_level = @Outline_Level,
                                   number1 = @Number1,
                                   unique_id = @Unique_ID,
                                   percent_complete = @Percent_Complete,
                                   task_type = @Task_Type,
                                   attribute4 = @FileName,
                                   attribute5 = @MPP_NAME
                            WHERE  mkey = @Number1
                                   AND ( status NOT IN ( 'COMPLETED', 'CANCEL' )
                                          OR predecessors > 0 )
                                   AND is_scheduled = 'Y';

                            UPDATE msp_default_migration_table
                            SET    process_flag = 'Y',
                                   remarks = 'Task_No Updated Successfully'
                            WHERE  unique_id = @Unique_ID
                                   AND outline_level = @Outline_Level;
                        END
                      ELSE
                        /* PROJECT NOT DEFINED SO CREATE A ROOT TASK WITH DETAILS*/
                        BEGIN
						print 'else @Number1 > 0 UPDATE task_hdr: '+ convert(nvarchar, @Name)+ ' filename '+ @FileName ;
                            DECLARE @TableOutput_TASK_DETAILS TABLE
                              (
                                 mkey              INT,
                                 task_parent_id    NVARCHAR(20),
                                 task_main_node_id NVARCHAR(20),
                                 task_no           NVARCHAR(20)
                              )

                            PRINT 'INM' + @Resource_Names;

                            INSERT INTO @TableOutput_TASK_DETAILS
                            EXEC [dbo].[Sp_insert_task_details]
                              '0000',
                              @Name,
                              @Name,
                              @Category,
                              @Parameter1,
                              @Parameter2,
                              @Finish_Date,
                              @AssigneeID,
                              -- @Resource_Names,     
                              'Scheduled',
                              'N',
                              --@START_DATE          DATETIME,       
                              '1900-01-01 00:00:00.000',
                              '1900-01-01 00:00:00.000',
                              0,
                              'WIP',
                              '0',
                              @CreatorID,
                              1,
                              @TASK_TYPE,
                              '',
                              '',
                              '',
                              '',
                              @FileName,
                              @MPP_NAME,
                              @CreatorID,
                              '1900-01-01 00:00:00.000',
                              @CreatorID,
                              '1900-01-01 00:00:00.000'

                            PRINT 'INsert ed' + @Resource_Names;

                            --select * from task_hdr      
                            SELECT @TaskMkey = mkey,
                                   @Task_Parent_ID = task_parent_id,
                                   @Task_Main_Node_ID = task_main_node_id,
                                   @Task_No = task_no
                            FROM   @TableOutput_TASK_DETAILS

                            UPDATE task_hdr
                            SET    start_date = @start_date,
                                   is_scheduled = 'Y',
                                   wbs = @WBS,
                                   duration = @Duration,
                                   sch_start_date = @Start_Date,
                                   finish_date = @Finish_Date,
                                   predecessors = @Predecessors,
                                   resource_names = @Resource_Names,
                                   text1 = @Text1,
                                   outline_level = @Outline_Level,
                                   number1 = @Number1,
                                   unique_id = @Unique_ID,
                                   percent_complete = @Percent_Complete,
                                   attribute4 = @FileName,
                                   attribute5 = @MPP_NAME
                            WHERE  mkey = @TaskMkey;

                            UPDATE msp_default_migration_table
                            SET    number1 = @TaskMkey,
                                   process_flag = 'Y',
                                   remarks = 'Created Successfully--Task_No-->'
                                             + @Task_No
                            WHERE  unique_id = @Unique_ID
                                   AND outline_level = @Outline_Level;
                        END

                      /*Logic For SubTask Creation */
                      DECLARE pcursurbreak CURSOR FOR
                        SELECT wbs,
                               NAME,
                               duration,
                               start_date,
                               finish_date,
                               predecessors,
                               resource_names,
                               text1,
                               outline_level,
                               number1,
                               unique_id,
                               percent_complete,
                               --MT.created_by,     
                               Creator.mkey created_by,
                               MT.creation_date,
                               Creator.mkey 'CreatorID',
                               emp.mkey     'AssigneeID',
                               [filename],
                               mpp_name
                        FROM   msp_default_migration_table MT
                               LEFT JOIN employee_mst EMP
                                      ON MT.resource_names = EMP.emp_full_name
                               LEFT JOIN employee_mst Creator
                                      ON MT.text1 = Creator.emp_full_name
                        WHERE  outline_level > 1
                               AND Isnull(process_flag, 'N') = 'N'
                        ORDER  BY MT.mkey,
                                  unique_id

                      OPEN pcursurbreak

                      FETCH next FROM pcursurbreak INTO @WBS, @Name, @Duration,
                      @Start_Date,
                      @Finish_Date, @Predecessors, @Resource_Names, @Text1,
                      @Outline_Level
                      ,
                      @Number1, @Unique_ID, @Percent_Complete, @Created_By,
                      @Creation_Date
                      ,
                      @CreatorID, @AssigneeID, @FileName, @MPP_NAME

                      WHILE @@FETCH_STATUS = 0
                        BEGIN
                            PRINT '@Number1-->' + Cast(@Number1 AS VARCHAR)

                            IF( @Number1 <= 0 )
                              BEGIN
								PRINT 'inside @Number1-->' + Cast(@Number1 AS VARCHAR)
                                  SET @lastIndex=0;
                                  SET @TaskMkey=0;
                                  SET @Task_Parent_ID=0;
                                  SET @Task_No=''
                                  SET @lastIndex = ( Len(@WBS) ) -
                                                   Charindex('.', Reverse(
                                                   @WBS))

                                  SELECT @Task_No = Substring(@WBS, 0,
                                                    @lastindex + 1)

                                  SELECT @TaskMkey = number1
                                  FROM   msp_default_migration_table
                                  WHERE  wbs = '' + @Task_No + ''

                                  PRINT '@TaskMkey--> '+ convert(nvarchar,@TaskMkey)
                                        + Cast(@TaskMkey AS VARCHAR)

                                  SELECT @TaskMkey = mkey,
                                         @Task_Parent_ID = mkey,
                                         @ROOT_NUMBER = task_no
                                  FROM   task_hdr
                                  WHERE  mkey = @TaskMkey

                                  IF( @TaskMkey = 0 )
                                    BEGIN
                                        SET @ROOT_NUMBER='';
                                        SET @Task_Parent_ID=0;
                                    END
                                  ELSE IF( @TaskMkey > 0 )
                                    BEGIN
                                        --select * from [TEMPLATE_TASK_DETAILS]      
                                        DECLARE @TableOutput_TASK_NODE_DETAILS
                                        TABLE
                                          (
                                             mkey              INT,
                                             task_parent_id    NVARCHAR(20),
                                             task_main_node_id NVARCHAR(20),
                                             task_no           NVARCHAR(20)
                                          )

                                        PRINT 'in insert sub node'

                                        INSERT INTO
                                        @TableOutput_TASK_NODE_DETAILS
                                        EXEC [dbo].[Sp_insert_task_node_details]
                                          @Task_Parent_ID,
                                          @Name,
                                          @Name,
                                          @Category,
                                          @Parameter1,
                                          @Parameter2,
                                          @Finish_Date,
                                          @Resource_Names,
                                          'Scheduled',
                                          'N',
                                          '1900-01-01 00:00:00.000',
                                          '1900-01-01 00:00:00.000',
                                          @Task_Parent_ID,
                                          @Task_Main_Node_ID,
                                          @ROOT_NUMBER,
                                          @Task_Type,-- Task_type  
                                          'WIP',
                                          '0',
                                          @CreatorID,
                                          1,
                                          '',
                                          '',
                                          '',
                                          '',
                                          @FileName,-- @ATTRIBUTE4
                                          @MPP_NAME,-- @ATTRIBUTE5    
                                          @CreatorID,
                                          '1900-01-01 00:00:00.000',
                                          @CreatorID,
                                          '1900-01-01 00:00:00.000',
                                          @Task_Parent_ID,
                                          'Low'

                                        PRINT 'Sub node inserted'

                                        SELECT @TaskMkey = mkey,
                                               @Task_Parent_ID = task_parent_id,
                                               @Task_Main_Node_ID =
                                               task_main_node_id,
                                               @Task_No = task_no
                                        FROM   @TableOutput_TASK_NODE_DETAILS

                                        UPDATE task_hdr
                                        SET    start_date = @start_date,
                                               is_scheduled = 'Y',
                                               wbs = @WBS,
                                               duration = @Duration,
                                               sch_start_date = @Start_Date,
                                               finish_date = @Finish_Date,
                                               predecessors = @Predecessors,
                                               resource_names = @Resource_Names,
                                               text1 = @Text1,
                                               outline_level = @Outline_Level,
                                               number1 = @Number1,
                                               unique_id = @Unique_ID,
                                               percent_complete = @Percent_Complete,
											   STATUS_PERC = ISNULL(@Percent_Complete,0.0),
                                               attribute4 = @FileName,
                                               attribute5 = @MPP_NAME
                                        WHERE  mkey = @TaskMkey

                                        UPDATE msp_default_migration_table
                                        SET    number1 = @TaskMkey,
                                               process_flag = 'Y',
                                    remarks = 'Created Successfully--Task_No-->'
                                              + @Task_No
                                        WHERE  unique_id = @Unique_ID
                                               AND outline_level =
                                                   @Outline_Level
                                    END

                                  PRINT 'for @WBS' + @WBS +
                                        '-->@ROOT_NUMBER is '
                                        + @ROOT_NUMBER

                                  PRINT 'for @WBS @Task_Parent_ID '
                                        + Cast(@Task_Parent_ID AS VARCHAR)

                                  PRINT 'for @WBS @Task_Main_Node_ID '
                                        + Cast(@Task_Main_Node_ID AS VARCHAR)
                              END
                            ELSE IF( @Number1 > 0 )/*Start update logic*/
                              BEGIN
                                  PRINT 'update'

                                  INSERT INTO task_hdr_h
                                  SELECT Getdate(),
                                         *
                                  FROM   task_hdr
                                  WHERE  mkey = @Number1

                                  UPDATE task_hdr
                                  SET    task_name = @Name,
                                         task_description = @Name,
                                         assigned_to = @AssigneeID,
                                         task_created_by = @CreatorID,
                                         start_date = @start_date,
                                         completion_date = @Finish_Date,
                                         is_scheduled = 'Y',
                                         wbs = @WBS,
                                         duration = @Duration,
                                         sch_start_date = @Start_Date,
                                         finish_date = @Finish_Date,
                                         predecessors = @Predecessors,
                                         resource_names = @Resource_Names,
                                         text1 = @Text1,
                                         outline_level = @Outline_Level,
                                         number1 = @Number1,
                                         unique_id = @Unique_ID,
                                         percent_complete = @Percent_Complete,
                                         attribute4 = @FileName,
                                         attribute5 = @MPP_NAME
                                  WHERE  mkey = @Number1
                                         AND ( status NOT IN (
                                               'COMPLETED', 'CANCEL' )
                                                OR Isnull(predecessors, '0') !=
                                                   '0' )
                                         AND is_scheduled = 'Y'

                                  UPDATE msp_default_migration_table
                                  SET    process_flag = 'Y',
                              remarks = 'Task_No Updated Successfully'
                                  WHERE  unique_id = @Unique_ID
                                         AND outline_level = @Outline_Level
                              END
							  Else
								Begin
									print 'Not inserted';
								END
                            FETCH next FROM pcursurbreak INTO @WBS, @Name,
                            @Duration,
                            @Start_Date,
                            @Finish_Date, @Predecessors, @Resource_Names, @Text1
                            ,
                            @Outline_Level
                            ,
                            @Number1, @Unique_ID, @Percent_Complete, @Created_By
                            ,
                            @Creation_Date
                            ,
                            @CreatorID, @AssigneeID, @FileName, @MPP_NAME
                        END

                      CLOSE pcursurbreak

                      DEALLOCATE pcursurbreak
                  END
            END

		 --   IF( @DCount = 0 )		
			--Begin
			--	IF EXISTS (SELECT 1
   --                  FROM   msp_default_migration_table A
   --                  WHERE  NOT EXISTS (SELECT 1
   --                                     FROM   task_hdr B
   --                                     WHERE  A.wbs = B.wbs
   --                                            AND is_scheduled IS NOT NULL
   --                                            AND B.project_id = @Parameter1
   --                                            AND B.sub_project_id = @Parameter2)
   --                          OR Isnull(process_flag, 'N') = 'N')
			--	BEGIN
			--		UPDATE msp_default_migration_table
			--		SET remarks = 'Error: Due to incomplete insert, all rows not inserted';

			--		--THROW 50001, 'Incomplete inserts detected. Rolling back transaction.',1;
			--	END
			--End
          SELECT * FROM   msp_default_migration_table

          -- delete from  MSP_Default_Migration_Table    
       --  TRUNCATE TABLE msp_default_migration_table

         -- COMMIT TRANSACTION;
      --END try

     -- BEGIN catch
         -- ROLLBACK TRANSACTION;

          -- Optionally update remarks here for debugging or log errors
         -- DECLARE @ErrorMessage NVARCHAR(4000) = Error_message();

          --RAISERROR('Transaction failed: %s',16,1,@ErrorMessage);
      --END catch;
  END
--exec [SP_INSERT_SCHEDULED_MSP]  323,324    
--select * from task_hdr where mkey>237  and task_main_node_id=238    
--UPDATE task_hdr SET TASK_NAME='TEST',TASK_DESCRIPTION='TEST',PROJECT_ID=1,SUB_PROJECT_id=0,Is_Scheduled='N',RESPOSIBLE_EMP_MKEY=0,CREATED_BY=0,TASK_CREATED_BY=0,ASSIGNED_TO=0 WHERE MKEY=235    
--update task_hdr set SUB_PROJECT_ID=0 where  mkey>237  and task_main_node_id=238    
--SELECT * FROM TYPE_MST WHERE TYPE_CODE='PROJECT'    
--select * from MSP_Default_Migration_Table      
/*      
declare @x nvarchar(20)       
set @x= '1.2'      
 DECLARE @lastIndex int      
       SET @lastIndex = (LEN(@x)) -  CHARINDEX('.', REVERSE(@x))       
    
     select SUBSTRING(@x, 0, @lastindex + 1)       
           
select REVERSE(@x)      
SELECT RIGHT(@x , CHARINDEX ('.' ,REVERSE(@x))-1)      
select SUBSTRING(@x,len(@x),CHARINDEX('.',@x)-1 )      
*/


--------------------------------------------------------------------------------------------

GO
/****** Object:  StoredProcedure [dbo].[SP_UPDATE_SCHEDULED_MSP]    Script Date: 04-07-2025 18:33:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

    
    
ALTER PROCEDURE [dbo].[SP_UPDATE_SCHEDULED_MSP] (@Parameter1 VARCHAR(100) = NULL,     -- Prooject ID
                                                @Parameter2 VARCHAR(100) = NULL,     -- Sub Project ID
                                                @Parameter3 VARCHAR(100) = NULL,     
                                                @Parameter4 VARCHAR(100) = NULL,     
                                                @Parameter5 VARCHAR(100) = NULL,     
                                                @Parameter6 VARCHAR(100) = NULL,   -- Session User ID  
                                                @Parameter7 VARCHAR(100) = NULL  -- Group ID
)     
AS     
  BEGIN     
      DECLARE @DCount            INT,     
              @ROOT_MKEY         INT,     
              @ROOT_NUMBER       NVARCHAR(50),     
              @Mkey              INT,     
              @WBS               NVARCHAR(50),     
              @Name              NVARCHAR(500),     
              @Duration          NVARCHAR(100),     
              @Start_Date        DATETIME,     
              @Finish_Date       DATETIME,     
              @Predecessors      NVARCHAR(100),     
              @Resource_Names    NVARCHAR(100),     
              @Text1             NVARCHAR(100),     
              @Outline_Level     INT,     
              @Number1           INT,     
              @Unique_ID         INT,     
			  @Percent_Complete  NUMERIC(18,2),    
              @Created_By        INT,     
              @Creation_Date     DATETIME,     
              @CreatorID         INT,     
              @AssigneeID        INT,     
              @TaskMkey          INT,     
              @Task_Parent_ID    INT,     
              @Task_Main_Node_ID INT,     
              @Task_No           NVARCHAR(20),
			  @Task_Type         INT,
			  @Category			 INT,
			  @FileName			NVARCHAR(255),
			  @MPP_NAME			NVARCHAR(255)
      DECLARE @lastIndex INT     
    
      SET @DCount=0     
    
      SET @lastIndex=0     
    
			SELECT @Task_Type = MASTER_MKEY FROM TYPE_MST WHERE DELETE_FLAG = 'N' AND TYPE_CODE = 'TASK_TYPE' AND TYPE_DESC = 'MSP';
			SELECT @Category = MASTER_MKEY FROM TYPE_MST WHERE TYPE_CODE='CATEGORY' And TYPE_DESC ='PUBLIC' and DELETE_FLAG = 'N';

			set @Parameter1=isnull(@Parameter1,'0')    
    
			set @Parameter2=isnull(@Parameter2,'0')    
    
			update msp_default_migration_table set remarks='Error : Resource Not Found'    
			FROM   msp_default_migration_table MT     
								 LEFT JOIN employee_mst EMP     
										ON MT.resource_names = EMP.emp_full_name     
								 LEFT JOIN employee_mst Creator     
										ON MT.text1 = Creator.emp_full_name     
			where (isnull(Creator.mkey,0) = 0 or isnull(EMP.mkey,0) = 0); 
			
			
			Select WBS ,count(WBS) as Count_Wbs 
			INTO   #tempCWBS
			from TASK_HDR 
			where PROJECT_ID = @Parameter1 and  SUB_PROJECT_ID = @Parameter2
			and Is_Scheduled is not null
			group by WBS 
			having COUNT(WBS) > 1

			UPDATE msp_default_migration_table
			SET    remarks = 'Error : Duplicate WBS'
			FROM   msp_default_migration_table MT
				JOIN #tempCWBS temp
				ON MT.WBS = temp.WBS

			DROP TABLE #tempCWBS;
    
		SELECT Outline_Level,
             Count(wbs) C_Outline_Level
      INTO   #tempOutLineLevel
      FROM   msp_default_migration_table
	  WHERE  Outline_Level = 0
      GROUP  BY Outline_Level
      HAVING Count(Outline_Level) > 1;

      UPDATE msp_default_migration_table
      SET    remarks = 'Error : OutLine Level Cannot be 0'
      FROM   msp_default_migration_table MT
             JOIN #tempOutLineLevel temp
               ON MT.Outline_Level = temp.Outline_Level;

		DROP TABLE #tempOutLineLevel;

		------------------------------------------------------
		  -- to check the Percent_Complete null 
		  select wbs,count(WBS) C_WBS into #tempPercent
          FROM   msp_default_migration_table MT
          WHERE Percent_Complete IS NULL OR Percent_Complete = NULL OR ISNUMERIC(Percent_Complete) = 0 or Percent_Complete = '' 
		  group by wbs
		  having count(WBS) > 0

          UPDATE msp_default_migration_table
          SET    remarks = 'Error : Percent Complete column cannt be null or empty'
          FROM   msp_default_migration_table MT
				join #tempPercent temp  ON MT.wbs = temp.wbs;
		  --------------------------------------------------
		  --------------------------------------------------


		SELECT  Charindex('.',WBS) 'WBSRoot', Len(WBS) LenWBS,WBS into #tempWBSRoot
		FROM   msp_default_migration_table
		where Outline_Level = 1

		UPDATE msp_default_migration_table
		SET    remarks = 'Error : Outline level 1 is not root parent of WBS'
		FROM   msp_default_migration_table MT
				JOIN #tempWBSRoot temp
				ON MT.WBS = temp.WBS and temp.WBSRoot > 0;;

		DROP TABLE #tempWBSRoot;

		SELECT @DCount = Isnull(Count(*), 0)     
		FROM   msp_default_migration_table MT     
		WHERE  remarks like '%Error%'    
          
  IF( @DCount <= 0 )     
  BEGIN     
    
      SELECT @DCount = Isnull(Count(*), 0)     
      FROM   msp_default_migration_table MT     
      WHERE  outline_level = 1     
             --AND unique_id = 1     
    
      --order by Unique_id      
      IF( @DCount > 0 )     
        BEGIN     
    
            SELECT @WBS = wbs,     
                   @Name = NAME,     
                   @Duration = duration,     
                   @Start_Date = start_date,     
                   @Finish_Date = finish_date,     
                   @Predecessors = predecessors,     
                   @Resource_Names = resource_names,     
                   @Text1 = text1,     
                   @Outline_Level = outline_level,     
                   @Number1 = number1,     
                   @Unique_ID = unique_id,     
                   @Percent_Complete=Percent_Complete,    
                   @Created_By = MT.created_by,     
                   @Creation_Date = MT.creation_date,     
                   @AssigneeID = emp.mkey,     
                   @CreatorID = Creator.mkey,
				   @FileName = [FileName],
				   @MPP_NAME = mpp_name
            FROM   msp_default_migration_table MT     
                   LEFT JOIN employee_mst EMP     
                          ON MT.resource_names = EMP.emp_full_name     
                   LEFT JOIN employee_mst Creator     
                          ON MT.text1 = Creator.emp_full_name     
            WHERE  outline_level = 1   
    
            IF( @Number1 > 0 )/* CHECK WHETHER PROJECT ALREADY DEFINED*/     
              BEGIN     
    
                  SELECT @ROOT_MKEY = mkey,     
                         @ROOT_NUMBER = task_no,     
                         @Task_Main_Node_ID = mkey     
                  FROM   task_hdr     
                  WHERE  mkey = @Number1     
    
                  INSERT INTO task_hdr_h     
                  SELECT Getdate(), *     
                  FROM   task_hdr     
                  WHERE  mkey = @Number1;    
    
                  UPDATE task_hdr     
                  SET    task_name = @Name,     
                         task_description = @Name,     
                         assigned_to = @AssigneeID,     
                         task_created_by = @CreatorID,     
						 created_by = @CreatorID,
                         start_date = @start_date,     
                         completion_date = @Finish_Date,     
                         Is_Scheduled = 'Y',     
                         wbs = @WBS,     
                         duration = @Duration,     
                         sch_start_date = @Start_Date,     
                         finish_date = @Finish_Date,     
                         predecessors = @Predecessors,     
                         resource_names = @Resource_Names,     
                         text1 = @Text1,     
                         outline_level = @Outline_Level,     
                         number1 = @Number1,     
                         unique_id = @Unique_ID,    
						 Percent_Complete=@Percent_Complete,
						 STATUS_PERC =ISNULL(@Percent_Complete,0.0),
						 task_type = @Task_Type,
						 ATTRIBUTE4 = @FileName ,
						 ATTRIBUTE5	= 	@MPP_NAME,
						 LAST_UPDATED_BY =  @Parameter6,
						 LAST_UPDATE_DATE = GETDATE(),
						 [Priority] = 'Low'
                  WHERE  mkey = @Number1     
                         AND (    
                         status NOT IN ( 'COMPLETED', 'CANCEL' )     
                         or predecessors > 0 )    
                         AND Is_Scheduled = 'Y';    
    
                  UPDATE msp_default_migration_table     
                  SET    process_flag = 'Y',     
                         remarks = 'Task_No Updated Successfully'     
                  WHERE  unique_id = @Unique_ID     
                         AND outline_level = @Outline_Level     
              END     
            ELSE/* PROJECT NOT DEFINED SO CREATE A ROOT TASK WITH DETAILS*/     
              BEGIN     
                  DECLARE @TableOutput_TASK_DETAILS TABLE     
                    (     
                       mkey              INT,     
                       task_parent_id    NVARCHAR(20),     
                       task_main_node_id NVARCHAR(20),     
                       task_no           NVARCHAR(20)     
                    )     
				 print 'INM'+ @Resource_Names;
    
                  INSERT INTO @TableOutput_TASK_DETAILS     
                  EXEC [dbo].[Sp_insert_task_details]     
                    '0000',     
                    @Name,     
                    @Name,     
                    @Category,     
                    @Parameter1,     
                    @Parameter2,     
                    @Finish_Date,     
					@AssigneeID,  
                   -- @Resource_Names,     
                    'Scheduled',     
                    'N',     
                    --@START_DATE          DATETIME,       
                    '1900-01-01 00:00:00.000',     
                    '1900-01-01 00:00:00.000',     
                    0,     
                    'WIP',     
                    '0',     
                    @CreatorID,     
					1,   
					@TASK_TYPE,  
					'',     
                    '',     
                    '',     
                    '',     
                    @FileName ,
                    @MPP_NAME,     
                    @CreatorID,     
                    '1900-01-01 00:00:00.000',     
                    @CreatorID,     
                    '1900-01-01 00:00:00.000'     
    
   print 'INsert ed'+@Resource_Names  
    
                  --select * from task_hdr      
                  SELECT @TaskMkey = mkey,     
                         @Task_Parent_ID = task_parent_id,     
                         @Task_Main_Node_ID = task_main_node_id,     
                         @Task_No = task_no     
                  FROM   @TableOutput_TASK_DETAILS     
    
                  UPDATE task_hdr     
                  SET    start_date = @start_date,     
                         Is_Scheduled = 'Y',     
                         wbs = @WBS,     
                         duration = @Duration,     
                         sch_start_date = @Start_Date,     
                         finish_date = @Finish_Date,     
                         predecessors = @Predecessors,     
                         resource_names = @Resource_Names,     
                         text1 = @Text1,     
                         outline_level = @Outline_Level,     
                         number1 = @Number1,     
                         unique_id = @Unique_ID,    
						 Percent_Complete=@Percent_Complete,   
						 STATUS_PERC =ISNULL(@Percent_Complete,0.0), 
						 Priority = 'Low',
						 ATTRIBUTE4 = @FileName ,
						 ATTRIBUTE5	= 	@MPP_NAME,
						 LAST_UPDATED_BY =  @Parameter6,
						 LAST_UPDATE_DATE = GETDATE()
                  WHERE  mkey = @TaskMkey;
    
                  UPDATE msp_default_migration_table     
                  SET    number1 = @TaskMkey,     
                         process_flag = 'Y',     
                         remarks = 'Created Successfully--Task_No-->'     
                                   + @Task_No     
                  WHERE  unique_id = @Unique_ID     
                         AND outline_level = @Outline_Level;     
              END     
    
            /*Logic For SubTask Creation */     
            DECLARE pcursurbreak CURSOR FOR     
              SELECT wbs,     
                     NAME,     
                     duration,     
                     start_date,     
                     finish_date,     
                     predecessors,     
                     resource_names,     
                     text1,     
                     outline_level,     
                     number1,     
                     unique_id,    
					Percent_Complete,     
                     --MT.created_by,     
					Creator.mkey   created_by,  
                     MT.creation_date,     
                     Creator.mkey     'CreatorID',     
                     emp.mkey 'AssigneeID' ,
					 [FILENAME], 
					 mpp_name
              FROM   msp_default_migration_table MT     
                     LEFT JOIN employee_mst EMP     
                            ON MT.resource_names = EMP.emp_full_name     
                     LEFT JOIN employee_mst Creator     
                            ON MT.text1 = Creator.emp_full_name     
              WHERE  outline_level > 1     
                     AND Isnull(process_flag, 'N') = 'N'     
              ORDER  BY MT.mkey,     
                        unique_id     
    
            OPEN pcursurbreak     
    
            FETCH next FROM pcursurbreak INTO @WBS, @Name, @Duration,     
            @Start_Date,     
            @Finish_Date, @Predecessors, @Resource_Names, @Text1, @Outline_Level,     
            @Number1, @Unique_ID,@Percent_Complete, @Created_By, @Creation_Date, @CreatorID,     
            @AssigneeID,  @FileName ,@MPP_NAME
    
    WHILE @@FETCH_STATUS = 0     
              BEGIN     
              print '@Number1-->'+cast(@Number1 as varchar)    
                  IF( @Number1 <= 0 )     
                    BEGIN     
                        SET @lastIndex=0;     
                        SET @TaskMkey=0;     
                        SET @Task_Parent_ID=0;     
                        SET @Task_No=''     
                        SET @lastIndex = ( Len(@WBS) ) - Charindex('.', Reverse(@WBS))     
    
                        SELECT @Task_No = Substring(@WBS, 0, @lastindex + 1)     
    
                        SELECT @TaskMkey = number1     
                        FROM   msp_default_migration_table     
                        WHERE  wbs = '' + @Task_No + ''     
    
                        PRINT '@TaskMkey-->'     
                              + Cast(@TaskMkey AS VARCHAR)     
    
                        SELECT @TaskMkey = mkey,     
                               @Task_Parent_ID = mkey,     
                               @ROOT_NUMBER = task_no     
                        FROM   task_hdr     
                        WHERE  mkey = @TaskMkey     
    
                        IF( @TaskMkey = 0 )     
                          BEGIN     
                              SET @ROOT_NUMBER='';     
                              SET @Task_Parent_ID=0;     
                          END     
                        ELSE IF( @TaskMkey > 0 )     
                          BEGIN     
                              --select * from [TEMPLATE_TASK_DETAILS]      
                              DECLARE @TableOutput_TASK_NODE_DETAILS TABLE     
                                (     
                                   mkey              INT,     
                                   task_parent_id    NVARCHAR(20),     
                                   task_main_node_id NVARCHAR(20),     
                                   task_no           NVARCHAR(20)     
                                )     
				print 'in insert sub node'  
                              INSERT INTO @TableOutput_TASK_NODE_DETAILS     
                              EXEC [dbo].[Sp_insert_task_node_details]     
                                @Task_Parent_ID,     
                                @Name,     
                                @Name,     
                                @Category,     
                                @Parameter1,     
                                @Parameter2,     
                                @Finish_Date,     
                                @Resource_Names,     
                                'Scheduled',     
                                'N',     
                                '1900-01-01 00:00:00.000',     
                                '1900-01-01 00:00:00.000',     
                                @Task_Parent_ID,     
                                @Task_Main_Node_ID,     
                                @ROOT_NUMBER,     
								@Task_Type,-- Task_type  
                                'WIP',     
                                '0',     
                                @CreatorID, -- Task Created by     
                                1,   -- @APPROVER_ID   
                                '',      -- @IS_ARCHIVE
                                '',     
                                '',     
                                '',     
								@FileName , -- @ATTRIBUTE4
								@MPP_NAME,  -- @ATTRIBUTE5
                                @CreatorID,  -- @CREATED_BY    
                                '1900-01-01 00:00:00.000',     
                                @CreatorID,     
                                '1900-01-01 00:00:00.000',     
                                @Task_Parent_ID ,  
        'Low'  
        print 'Sub node inserted'  
    
								SELECT @TaskMkey = mkey,     
                                     @Task_Parent_ID = task_parent_id,     
                                     @Task_Main_Node_ID = task_main_node_id,     
                                     @Task_No = task_no     
								FROM   @TableOutput_TASK_NODE_DETAILS     
    
                              UPDATE task_hdr     
                              SET    start_date = @start_date,     
                                     Is_Scheduled = 'Y',     
                                     wbs = @WBS,     
                                     duration = @Duration,     
                                     sch_start_date = @Start_Date,     
                                     finish_date = @Finish_Date,     
                                     predecessors = @Predecessors,     
                                     resource_names = @Resource_Names,     
                                     text1 = @Text1,     
                                     outline_level = @Outline_Level,     
                                     number1 = @Number1,     
                                     unique_id = @Unique_ID,    
									 Percent_Complete=@Percent_Complete,
									 STATUS_PERC=ISNULL(@Percent_Complete,0.0) ,
									 ATTRIBUTE4 = @FileName ,
									ATTRIBUTE5	= 	@MPP_NAME,
									LAST_UPDATED_BY =  @Parameter6,
									LAST_UPDATE_DATE = GETDATE()
                              WHERE  mkey = @TaskMkey     
    
                              UPDATE msp_default_migration_table     
                              SET    number1 = @TaskMkey,     
                                     process_flag = 'Y',     
                          remarks = 'Created Successfully--Task_No-->'   
                                    + @Task_No     
                              WHERE  unique_id = @Unique_ID     
                                     AND outline_level = @Outline_Level     
                          END     
    
                        PRINT 'for @WBS' + @WBS + '-->@ROOT_NUMBER is '     
                              + @ROOT_NUMBER     
    
                        PRINT 'for @WBS @Task_Parent_ID '     
                              + Cast(@Task_Parent_ID AS VARCHAR)     
    
                        PRINT 'for @WBS @Task_Main_Node_ID '     
                              + Cast(@Task_Main_Node_ID AS VARCHAR)     
                    END     
                  ELSE IF( @Number1 > 0 )/*Start update logic*/     
                    BEGIN     
                        PRINT 'update'     
    
                        INSERT INTO task_hdr_h     
                        SELECT Getdate(),     
                               *     
                        FROM   task_hdr     
                        WHERE  mkey = @Number1     
    
                        UPDATE task_hdr     
                        SET    task_name = @Name,     
                               task_description = @Name,     
                               assigned_to = @AssigneeID,     
                               task_created_by = @CreatorID,
							   created_by = @CreatorID,
                               start_date = @start_date,     
                               completion_date = @Finish_Date,     
                               Is_Scheduled = 'Y',     
                               wbs = @WBS,     
                               duration = @Duration,     
                               sch_start_date = @Start_Date,     
                               finish_date = @Finish_Date,     
                               predecessors = @Predecessors,     
                               resource_names = @Resource_Names,     
                               text1 = @Text1,     
                               outline_level = @Outline_Level,     
                               number1 = @Number1,     
                               unique_id = @Unique_ID,    
								Percent_Complete=@Percent_Complete ,
								STATUS_PERC=ISNULL(@Percent_Complete,0.0) ,
								ATTRIBUTE4 = @FileName ,
								ATTRIBUTE5	= 	@MPP_NAME,
								LAST_UPDATED_BY =  @Parameter6,
								LAST_UPDATE_DATE = GETDATE()
                        WHERE  mkey = @Number1     
                               AND (status NOT IN ( 'COMPLETED', 'CANCEL' )     
                                or isnull(predecessors,'0')!='0')    
                               AND Is_Scheduled = 'Y'     
    
                        UPDATE msp_default_migration_table     
                        SET    process_flag = 'Y',     
                               remarks = 'Task_No Updated Successfully'     
                        WHERE  unique_id = @Unique_ID     
                               AND outline_level = @Outline_Level     
                    END     
    
                  FETCH next FROM pcursurbreak INTO @WBS, @Name, @Duration,     
                  @Start_Date,     
                  @Finish_Date, @Predecessors, @Resource_Names, @Text1,     
                  @Outline_Level,     
                  @Number1, @Unique_ID,@Percent_Complete, @Created_By, @Creation_Date, @CreatorID,     
                  @AssigneeID,  @FileName ,@MPP_NAME     
              END     
    
            CLOSE pcursurbreak     
    
            DEALLOCATE pcursurbreak     
        END     
   END    
   select * from MSP_Default_Migration_Table    
  -- delete from  MSP_Default_Migration_Table    
  truncate table MSP_Default_Migration_Table
  END     
--exec [SP_INSERT_SCHEDULED_MSP]  323,324    
--select * from task_hdr where mkey>237  and task_main_node_id=238    
--UPDATE task_hdr SET TASK_NAME='TEST',TASK_DESCRIPTION='TEST',PROJECT_ID=1,SUB_PROJECT_id=0,Is_Scheduled='N',RESPOSIBLE_EMP_MKEY=0,CREATED_BY=0,TASK_CREATED_BY=0,ASSIGNED_TO=0 WHERE MKEY=235    
--update task_hdr set SUB_PROJECT_ID=0 where  mkey>237  and task_main_node_id=238    
--SELECT * FROM TYPE_MST WHERE TYPE_CODE='PROJECT'    
--select * from MSP_Default_Migration_Table      
/*      
declare @x nvarchar(20)       
set @x= '1.2'      
 DECLARE @lastIndex int      
       SET @lastIndex = (LEN(@x)) -  CHARINDEX('.', REVERSE(@x))       
    
     select SUBSTRING(@x, 0, @lastindex + 1)       
           
select REVERSE(@x)      
SELECT RIGHT(@x , CHARINDEX ('.' ,REVERSE(@x))-1)      
select SUBSTRING(@x,len(@x),CHARINDEX('.',@x)-1 )      
*/ 


-----------------------------------------------------------------------


05-07-2025

USE [TaskManagement_UAT2]
GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_DASHBOARD_NT]    Script Date: 05-07-2025 15:21:37 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--    EXEC SP_TASK_DASHBOARD_NT 926,'DEFAULT',926,1
--   EXEC SP_TASK_DASHBOARD_NT 926,5,926,2
ALTER PROCEDURE [dbo].[SP_TASK_DASHBOARD_NT] (@CURRENT_EMP_MKEY  INT,
                                              @USER_FILTER       VARCHAR(max) =NULL,--'ALLOCATEDBYME,ALLOCATEDTOME,COMPLETEDBYME,COMPLETEDFORME,CANCELCLOSE',
                                              @Session_User_Id   INT,
                                              @Business_Group_Id INT)
--@STATUS_FILTER     NVARCHAR(max) = NULL,--'Completed,Cancelled,Pending,Review',
--@DURATION_FILTER   NVARCHAR(max) = NULL, -- Today,Future,Overdue,Next 3 Days,Next 7 Days,Next 2 Weeks,Next Month,
--@PriorityFilter    VARCHAR(max) =NULL,--'High,Medium,Low',
-- @TypeFilter        VARCHAR(max) =NULL,--'RECURRING,APPROVAL,COMPLIANCE,APPROVAL,GENERAL,SYSTEM,EMAIL,RERA COMPLAIN';
AS
  set nocount on
  BEGIN

      DECLARE @DAY INT

      SET @DAY=0;

      DECLARE @sql NVARCHAR(max) = '';
      DECLARE @start INT = 1,
              @end   INT;
      DECLARE @hasWhereClause BIT = 0,@hasUserClause BIT = 0,@hasPriorityClause BIT = 0,@hasTypeClause BIT = 0,@hasSTATUSClause BIT = 0
	  ,@hasDurationClause BIT = 0;
      DECLARE @WhereClause    NVARCHAR(max) = '',
              @filter         VARCHAR(500),
              @TaskTypeMkey   NVARCHAR(50),
			  @PriorityClause NVARCHAR(max) = '',
              @TypeClause     NVARCHAR(max) = '',
              @STATUSClause   NVARCHAR(max) = '',
              @DurationClause NVARCHAR(max) = '',
			  @UserClause	  NVARCHAR(max) = '',
			  @CONCATFILETR BIT  = 0;

      SET @sql = 'SELECT  T_HDR.mkey as Sr_No, T_HDR.mkey,Isnull(TMST.type_desc, ''NA'') CATEGORY,T_HDR.task_no
				 ,dbo.[Initcap](Isnull(CREATOR.emp_full_name, ''NA'')) CREATOR,   dbo.[Initcap](Isnull(RESPONSIBLE.emp_full_name, ''NA'')) RESPONSIBLE
				 ,dbo.[Initcap](Isnull(ACTIONABLE.emp_full_name, ''NA'')) ACTIONABLE,   T_HDR.creation_date,
				 CASE WHEN T_HDR.status IN ( ''CREATED'' ) THEN ''Not Started'' WHEN T_HDR.status LIKE ''%SUB TASK CREATED%'' THEN ''Not Started''                        
				 WHEN T_HDR.status LIKE ''%SUBTASK CREATED%'' THEN ''Not Started''                         
				 WHEN T_HDR.status IN ( ''WORK IN PROGRESS'', ''CLOSE INITIATED'', ''CANCEL INITIATED'', ''RE-WORK'' ) THEN ''In Progress''                         
				 WHEN T_HDR.status IN ( ''CLOSE'', ''COMPLETED'' ) THEN ''Completed''                      ELSE ''Others''                    END AS Dashboard_Status,   
				 T_HDR.completion_date AS COMPLETION_DATE,                       dbo.[Initcap](T_HDR.task_name) AS TASK_NAME,                       
				 T_HDR.task_description,T_HDR.tags,dbo.[Initcap](T_HDR.status) AS STATUS,
				 CASE
				 WHEN Isnull(CREATOR.first_name, ''NA'') != Isnull(RESPONSIBLE.first_name, ''NA'') 
				 THEN dbo.[Initcap](Isnull(CREATOR.first_name, ''NA'')) + '' > '' + dbo.[Initcap](Isnull(RESPONSIBLE.first_name, ''NA''))                         
				 ELSE dbo.[Initcap](Isnull(CREATOR.first_name, ''NA''))                       END AS RESPONSIBLE_TAG,                      
				 dbo.[Initcap](Isnull(PMST.type_desc, '''')) AS PROJECT_NAME,                       dbo.Tasknamestring(T_HDR.mkey) AS TASK_HISTORY,                       
				 Isnull(Rtrim(T_HDR.[priority]), '''') AS [Priority],                       
				 Isnull(T_HDR.STATUS_PERC, ''0'') AS Progress_Percentage,                       
				 Isnull(parent_counts.parenttaskcount, 0) AS SubTask_Count,                       
				 T_HDR.CREATED_BY                
				 FROM task_hdr T_HDR                
				 LEFT JOIN employee_mst CREATOR ON CREATOR.mkey = T_HDR.created_by AND CREATOR.delete_flag = ''N''                
				 LEFT JOIN employee_mst RESPONSIBLE ON RESPONSIBLE.mkey = T_HDR.assigned_to AND RESPONSIBLE.delete_flag = ''N''                
				 LEFT JOIN employee_mst ACTIONABLE ON ACTIONABLE.mkey = T_HDR.resposible_emp_mkey AND ACTIONABLE.delete_flag = ''N''               
				 LEFT JOIN type_mst TMST ON TMST.master_mkey = T_HDR.caregory AND TMST.type_code = ''CATEGORY'' AND TMST.delete_flag = ''N''               
				 LEFT JOIN type_mst PMST ON PMST.master_mkey = T_HDR.project_id AND PMST.type_code = ''PROJECT'' AND PMST.delete_flag = ''N''               
				 LEFT JOIN (SELECT task_parent_id, Count(*) AS ParentTaskCount                          
				 FROM task_hdr WHERE task_parent_id IS NOT NULL AND mkey NOT IN (task_parent_id) AND delete_flag = ''N''                           
				 GROUP BY task_parent_id) parent_counts ON T_HDR.mkey = parent_counts.task_parent_id
				 WHERE Isnull(T_HDR.status_flag, ''A'') IN (''A'') AND T_HDR.delete_flag = ''N'' '    ;

    /* @USER_FILTER */
    IF ( @USER_FILTER <> ''
         AND @USER_FILTER IS NOT NULL ) -- @USER_FILTER is not null OR
	BEGIN
		WHILE @start <= Len(@USER_FILTER)
			BEGIN
                SET @end = Charindex(',', @USER_FILTER, @start);

                IF @end = 0
				SET @end = Len(@USER_FILTER) + 1;

                SET @filter = Ltrim(Rtrim(Substring(@USER_FILTER, @start, @end - @start)));
				--SET @hasUserClause = 0;
				-- @UserClause
                IF ( @filter = 'Default'
                      OR @filter = 'ALLOCATEDBYME'
                      OR @filter = 'ALLOCATEDTOME'
                      OR @filter = 'COMPLETEDBYME'
                      OR @filter = 'COMPLETEDFORME'
                      OR @filter = 'CANCELCLOSE' )
				BEGIN
					IF @filter = 'Default'
					BEGIN
						IF @hasUserClause = 0
						BEGIN
							--SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
							SET @UserClause	+= ' ( T_HDR.RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) + ' )	
													and (T_HDR.STATUS not in (''CANCEL'',''CANCELLED'',''CLOSE'',''COMPLETED'',''Completed''))';
							SET @hasUserClause = 1;
						END
							ELSE
                            BEGIN
								SET @UserClause +=' OR ( T_HDR.RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+')
													and (T_HDR.STATUS not in (''CANCEL'',''CANCELLED'',''CLOSE'',''COMPLETED'',''Completed''))';
                            END
                        END

					IF @filter = 'ALLOCATEDBYME'
					BEGIN
                        IF @hasUserClause = 0
						BEGIN
                                --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' )';
                                SET @UserClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+ ')
													and (T_HDR.STATUS not in (''CANCEL'',''CANCELLED'',''CLOSE'',''COMPLETED'',''Completed''))';
													-- OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+ ')
                                SET @hasUserClause = 1;
                        END
						ELSE
                        BEGIN
                                SET @UserClause +=' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)+' )
													and (T_HDR.STATUS not in (''CANCEL'',''CANCELLED'',''CLOSE'',''COMPLETED''))';
													--OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+')
                        END
                    END

                    IF @filter = 'ALLOCATEDTOME'
                    BEGIN
                        IF @hasUserClause = 0
                            BEGIN
                                SET @UserClause += ' ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +'
													OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+')
												and T_HDR.STATUS not in (''CANCEL'',''CANCELLED'',''CLOSE'',''COMPLETED'',''Completed'')';
                               -- + ' OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+')';
                                --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                                SET @hasUserClause = 1;
                            END
                        ELSE
                            --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ')';
                            SET @UserClause +=' OR ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +'
												OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+')
												and T_HDR.STATUS not in (''CANCEL'',''CANCELLED'',''CLOSE'',''COMPLETED'',''Completed'')';
											--+ ' OR T_HDR.resposible_emp_mkey = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +')';
                    END
					
                    IF @filter = 'COMPLETEDBYME'
                    BEGIN
                        IF @hasUserClause = 0
                            BEGIN
                                SET @UserClause +=
                                ' ( CONVERT(int,T_HDR.assigned_to) = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                                +
                                ' AND T_HDR.status IN (''COMPLETED'',''Completed''))';
                                --SET @sql += ' AND ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                                SET @hasUserClause = 1;
                            END
                        ELSE
                            --SET @sql += ' OR ( T_HDR.assigned_to = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                            SET @UserClause +=
                            ' OR ( CONVERT(int,T_HDR.assigned_to) = '
                            + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
                            + ' AND T_HDR.status IN (''COMPLETED'',''Completed''))';
                    END

                    IF @filter = 'COMPLETEDFORME'
                    BEGIN
                        IF @hasUserClause = 0
                            BEGIN
                                --SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED''))';
                                SET @UserClause += ' ( T_HDR.created_by = ' + CONVERT(NVARCHAR,@CURRENT_EMP_MKEY) 
												+ ' AND CONVERT(int,T_HDR.assigned_to) != ' + CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)
                                                + ') AND T_HDR.status IN (''COMPLETED'',''Completed'')';
                                SET @hasUserClause = 1;
                            END
                        ELSE
                            --SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.assigned_to != ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''COMPLETED'')) ';
                            SET @UserClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)
                                                +' AND CONVERT(int,T_HDR.assigned_to) != '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)
                                                + ') AND T_HDR.status IN (''COMPLETED'',''Completed'')';
                    END

					IF @filter = 'CANCELCLOSE'
					BEGIN
						IF @hasUserClause = 0
							BEGIN
								SET @UserClause += ' ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)
													+ ' OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY)
													+ ') AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')';
								-- OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
								--SET @sql += ' AND ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED''))';
								SET @hasUserClause = 1;
							END
						ELSE
							--SET @sql += ' OR ( T_HDR.created_by = ' + @CURRENT_EMP_MKEY + ' OR T_HDR.resposible_emp_mkey = ' + @CURRENT_EMP_MKEY + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
							SET @UserClause += ' OR ( T_HDR.created_by = '+ CONVERT(NVARCHAR,@CURRENT_EMP_MKEY)
											+  ' OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY)
											+  ') AND T_HDR.status IN (''CANCEL'', ''CANCELLED'') ';
					--OR T_HDR.resposible_emp_mkey = ' + CONVERT(nvarchar,@CURRENT_EMP_MKEY) + ' AND T_HDR.status IN (''CANCEL'', ''CANCELLED'')
					END
				END
				-- end @UserClause
				
				--@PriorityClause
				IF( @filter = 'High'
                     OR @filter = 'Low'
                     OR @filter = 'Medium' )
				BEGIN
					/*Priority Filter */
					IF @filter = 'High'
					BEGIN
						IF @hasPriorityClause = 0
						BEGIN
							--SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
							SET @PriorityClause += ' (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
							SET @hasPriorityClause = 1;
						END
						ELSE
							--SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''High''';
							SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''High'')';
					END

					IF @filter = 'Low'
					BEGIN
						IF @hasPriorityClause = 0
						BEGIN
							--SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
							SET @PriorityClause += ' ( LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
							SET @hasPriorityClause = 1;
						END
						ELSE
							--SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Low''';
							SET @PriorityClause += ' OR ( LTRIM(RTRIM(T_HDR.[priority])) = ''Low'')';
					END

					IF @filter = 'Medium'
					BEGIN
						IF @hasPriorityClause = 0
						BEGIN
							--SET @sql += ' AND LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
							SET @PriorityClause +=' (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'')';
							SET @hasPriorityClause = 1;
						END
						ELSE
							--SET @sql += ' OR LTRIM(RTRIM(T_HDR.[priority])) = ''Medium''';
							SET @PriorityClause += ' OR (LTRIM(RTRIM(T_HDR.[priority])) = ''Medium'') ';
					END
					/* End Priority */
				END
				--SET @hasWhereClause = 0;
				
				--@TypeClause
				IF ( @filter = 'RECURRING'
				OR @filter = 'Approval'
				OR @filter = 'COMPLIANCE'
				OR @filter = 'GENERAL'
				OR @filter = 'SYSTEM'
				OR @filter = 'Email'
				OR @filter = 'RERA COMPLAIN' )
				BEGIN
				/*Type Filter*/
					IF @filter = 'RECURRING'
					BEGIN
						SELECT @TaskTypeMkey = master_mkey
						FROM   type_mst
						WHERE  type_code = 'TASK_TYPE'
						AND type_desc = @filter
						AND delete_flag = 'N';

						IF @hasTypeClause = 0
						BEGIN
							SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
							SET @hasTypeClause = 1;
						END
						ELSE
							SET @TypeClause += ' OR ( TASK_TYPE = '+ @TaskTypeMkey + ') ';
					END

					IF @filter = 'Approval'
					BEGIN
						SELECT @TaskTypeMkey = master_mkey
						FROM   type_mst
						WHERE  type_code = 'TASK_TYPE'
						AND type_desc = @filter
						AND delete_flag = 'N';

						IF @hasTypeClause = 0
						BEGIN
							SET @TypeClause += ' ( TASK_TYPE = ' + @TaskTypeMkey + ') ';
							SET @hasTypeClause = 1;
						END
						ELSE
							SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
					END

					IF @filter = 'COMPLIANCE'
					BEGIN
						SELECT @TaskTypeMkey = master_mkey
						FROM   type_mst
						WHERE  type_code = 'TASK_TYPE'
						AND type_desc = @filter
						AND delete_flag = 'N';

						IF @hasTypeClause = 0
						BEGIN
							SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
							SET @hasTypeClause = 1;
						END
						ELSE
							SET @TypeClause += ' OR (TASK_TYPE = ' + @TaskTypeMkey + ') ';
					END

					IF @filter = 'GENERAL'
					BEGIN
						SELECT @TaskTypeMkey = master_mkey
						FROM   type_mst
						WHERE  type_code = 'TASK_TYPE'
						AND type_desc = @filter
						AND delete_flag = 'N';

						IF @hasTypeClause = 0
						BEGIN
							SET @TypeClause += ' ( TASK_TYPE = ' + @TaskTypeMkey + ') ';
							SET @hasTypeClause = 1;
						END
						ELSE
							SET @TypeClause +=' OR ( TASK_TYPE = ' + @TaskTypeMkey + ') ';
					END

					IF @filter = 'SYSTEM'
					BEGIN
						SELECT @TaskTypeMkey = master_mkey
						FROM   type_mst
						WHERE  type_code = 'TASK_TYPE'
						AND type_desc = @filter
						AND delete_flag = 'N';

						IF @hasTypeClause = 0
						BEGIN
							SET @TypeClause += ' (TASK_TYPE = '+ @TaskTypeMkey + ') ';
							SET @hasTypeClause = 1;
						END
						ELSE
							SET @TypeClause += 'OR ( TASK_TYPE = ' + @TaskTypeMkey + ') ';
					END

					IF @filter = 'Email'
					BEGIN
						SELECT @TaskTypeMkey = master_mkey
						FROM   type_mst
						WHERE  type_code = 'TASK_TYPE'
						AND type_desc = @filter
						AND delete_flag = 'N';

						IF @hasTypeClause = 0
						BEGIN
							SET @TypeClause +=' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
							SET @hasTypeClause = 1;
						END
						ELSE
							SET @TypeClause +=' OR ( TASK_TYPE = '+ @TaskTypeMkey + ') ';
					END

					IF @filter = 'RERA COMPLAIN'
					BEGIN
						SELECT @TaskTypeMkey = master_mkey
						FROM   type_mst
						WHERE  type_code = 'TASK_TYPE'
						AND type_desc = @filter
						AND delete_flag = 'N';

					IF @hasTypeClause = 0
					BEGIN
						SET @TypeClause += ' (TASK_TYPE = ' + @TaskTypeMkey + ') ';
						SET @hasTypeClause = 1;
					END
					ELSE
						SET @TypeClause += ' OR ( TASK_TYPE = ' + @TaskTypeMkey + ') ';
					END
					/*End Type Filter*/
				END
			
				--SET @hasWhereClause = 0;
				--end @@TypeClause

				-- @STATUSClause
				IF ( @filter = 'Pending'
					OR @filter = 'Review'
					OR @filter = 'Completed'
					OR @filter = 'Cancelled' )
					BEGIN
						/*Status Filter*/
						IF @filter = 'Pending'
						BEGIN
							IF @hasSTATUSClause = 0
							BEGIN
								SET @STATUSClause += '( STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE()  
													and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
								SET @hasSTATUSClause = 1;
							END
							ELSE
								SET @STATUSClause +=' OR ( STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE()  
													and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
						END

						IF @filter = 'Review'
						BEGIN
							IF @hasSTATUSClause = 0
							BEGIN
								SET @STATUSClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
								SET @hasSTATUSClause = 1;
							END
							ELSE
								SET @STATUSClause += ' OR ( T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
						END

						IF @filter = 'Completed'
						BEGIN
							IF @hasSTATUSClause = 0
							BEGIN
								SET @STATUSClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
								SET @hasSTATUSClause = 1;
							END
							ELSE
								SET @STATUSClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
						END

						IF @filter = 'Cancelled'
						BEGIN
							IF @hasSTATUSClause = 0
							BEGIN
								SET @STATUSClause +=' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
								SET @hasSTATUSClause = 1;
							END
							ELSE
								SET @STATUSClause += ' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
						END
						/*End Status Filter*/
					END
				--SET @hasWhereClause = 0;
				-- end @STATUSClause

				-- @DurationClause
				IF( @filter = 'Today'
				OR @filter = 'Overdue'
				OR @filter = 'Future'
				OR @filter = 'Next 3 Days'
				OR @filter = 'Next 7 Days'
				OR @filter = 'Next 2 Weeks'
				OR @filter = 'Next Month' 
				or Isnumeric(@filter) = 1)
				BEGIN
					IF @filter = 'Today'
					BEGIN
						IF @hasDurationClause = 0
						BEGIN
							SET @DurationClause += ' (CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103))
												AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') '
							--' ( T_HDR.ASSIGNED_TO = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' OR T_HDR.RESPOSIBLE_EMP_MKEY = '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) +
							--					')  AND CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103) ';
										--	AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'',''Close Initiated'' ,''Cancel Initiated'') ';
							SET @hasDurationClause = 1;
						END
						ELSE
						BEGIN
							SET @DurationClause += ' OR ( CONVERT(VARCHAR, T_HDR.completion_date, 103) = CONVERT(VARCHAR, GETDATE(), 103))
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') '; 
							--AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'',''Close Initiated'' ,''Cancel Initiated'') ';
						END
					END

					IF @filter = 'Overdue'
					BEGIN
						IF @hasDurationClause = 0
						BEGIN
							SET @DurationClause +=' (T_HDR.COMPLETION_DATE < convert(DATETIME, convert(VARCHAR, getdate(), 103), 103))
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
									--			(T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
								--				+') AND T_HDR.COMPLETION_DATE < convert(DATETIME, convert(VARCHAR, getdate(), 103), 103) ';
											--     AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
							SET @hasDurationClause = 1;
						END
						ELSE
							SET @DurationClause += ' OR ( T_HDR.COMPLETION_DATE < convert(DATETIME, convert(VARCHAR, getdate(), 103), 103))
														AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
							-- OR (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
							--AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
					END

					IF @filter = 'Future'
					BEGIN
						IF @hasDurationClause = 0
						BEGIN
							SET @DurationClause += ' (T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103))
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') '
							--' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) 
							--+ '  OR T_HDR.ASSIGNED_TO = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
							----+ ' )   AND  T_HDR.STATUS NOT IN (''COMPLETED'',''CANCELLED'',''Close Initiated'',''Cancel Initiated'')  
							--+ ' and T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103) ';
							SET @hasDurationClause = 1;
						END
						ELSE
							SET @DurationClause += ' OR (T_HDR.COMPLETION_DATE > convert(datetime,convert(varchar,getdate(),103),103))
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
					END

					IF @filter = 'Next 3 Days'
					BEGIN
						IF @hasDurationClause = 0
						BEGIN
							--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
							SET @DurationClause +=' (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) 
												   AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
							SET @hasDurationClause = 1;
						END
						ELSE
							--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
							SET @DurationClause +=' OR (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 3, GETDATE())) 
													AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
					END

					IF @filter = 'Next 7 Days'
					BEGIN
						IF @hasDurationClause = 0
						BEGIN
							--SET @DurationClause += '(STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
							--            and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
							SET @DurationClause += ' (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
							SET @hasDurationClause = 1;
						END
						ELSE
							--SET @DurationClause +=' OR (STATUS_PERC = 0.0 AND T_HDR.completion_date < GETDATE() 
							--            and T_HDR.status IN (''CREATED'', ''SUB TASK CREATED'',''WORK IN PROGRESS'',''RE-WORK'')) ';
							SET @DurationClause += ' OR (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 7, GETDATE())) ';
					END

					IF @filter = 'Next 2 Weeks'
					BEGIN
						IF @hasDurationClause = 0
						BEGIN
						--SET @DurationClause +=' (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
							SET @DurationClause +=' (T_HDR.RESPOSIBLE_EMP_MKEY = '
							+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
							+
							' AND  T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) '
							;
							SET @hasDurationClause = 1;
						END
						ELSE
							--SET @DurationClause += ' OR (T_HDR.status IN (''COMPLETED'') AND STATUS_PERC = 100) ';
							SET @DurationClause +=' OR (T_HDR.RESPOSIBLE_EMP_MKEY = '
							+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
							+
							' AND  T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, 14, GETDATE())) ';
					END

					IF @filter = 'Next Month'
					BEGIN
						IF @hasDurationClause = 0
						BEGIN
							--SET @DurationClause += ' (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
							--SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
							SET @DurationClause += ' (T_HDR.RESPOSIBLE_EMP_MKEY = '
							+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
							+
							' AND  T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   
								AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
							SET @hasDurationClause = 1;
						END
						ELSE
							--SET @DurationClause += ' OR ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(MONTH, 1, GETDATE()))';
							--SET @DurationClause +=' OR (T_HDR.status IN (''CANCEL'', ''CANCELLED'')) ';
							SET @DurationClause += ' OR (T_HDR.RESPOSIBLE_EMP_MKEY = '
							+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)
							+
							' AND  T_HDR.completion_date BETWEEN DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE())+1, 0)   
							AND DATEADD(MONTH, DATEDIFF(MONTH, -1, GETDATE())+1, -1) )';
					END

					IF ( Isnumeric(@filter) = 1 )
					BEGIN
					
						IF @hasDurationClause = 0
						BEGIN
						
							--SET @DurationClause +=' (T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'')) ';
							--SET @DurationClause += ' ( T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY,' + CONVERT(NVARCHAR, @filter) + ' , GETDATE())) 
							--					  AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
							SET @DurationClause += '(T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, ' + CONVERT(NVARCHAR, @filter) + ', GETDATE())) 
										AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') '

							--' (T_HDR.RESPOSIBLE_EMP_MKEY = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY)+
							--' AND  T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY,' + CONVERT(NVARCHAR, @filter) + ' , GETDATE())) ';
							SET @hasDurationClause = 1;
						END
						ELSE
							print 'Isnumeric(@filter)outside: '+ convert(nvarchar,Isnumeric(@filter) )
							--SET @DurationClause += ' OR T_HDR.STATUS IN (''Close Initiated'',''Cancel Initiated'') ';
							--SET @DurationClause +=' AND (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY,'+ CONVERT(NVARCHAR, @filter) + ', GETDATE())) 
							--					 AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') ';
							SET @DurationClause += 'or (T_HDR.completion_date BETWEEN GETDATE()-1 AND DATEADD(DAY, ' + CONVERT(NVARCHAR, @filter) + ', GETDATE())) 
												   AND T_HDR.status not IN (''CANCEL'', ''COMPLETED'',''CANCELLED'') '
						END
				/*End Duration Filter*/
				END
				--SET @hasWhereClause = 0;
				-- end @DurationClause
				
				SET @start = @end + 1;
				PRINT '@UserClause : '+ @UserClause
			END
	END
			
			IF ( @PriorityClause != '' OR @PriorityClause != NULL)
			BEGIN
				SET @sql += ' AND ( ' + @PriorityClause + ' ) ';  
				SET @CONCATFILETR = 1;
			END	
			IF ( @DurationClause != '' OR @DurationClause != NULL)
			BEGIN
				print '@DurationClauseinside: '+ convert(nvarchar,Isnumeric(@filter) )
				SET @sql += ' AND ( ' + @DurationClause + ' ) '; 
				SET @CONCATFILETR = 1;
			END
			IF ( @STATUSClause != '' OR @STATUSClause != NULL)
			BEGIN
				SET @sql += ' AND ( ' + @STATUSClause + ' ) '; 
				SET @CONCATFILETR = 1;
			END
			IF ( @TypeClause != '' OR @TypeClause != NULL)
			BEGIN
				SET @sql += ' AND ( ' + @TypeClause + ' ) ';
				SET @CONCATFILETR = 1;
			END
			IF ( @UserClause != '' OR @UserClause != NULL)
			BEGIN
				SET @sql += ' AND ( ' + @UserClause + ' ) ';  
				SET @CONCATFILETR = 1;
			END
			ELSE
			BEGIN
				SET @sql += ' and ( T_HDR.RESPOSIBLE_EMP_MKEY =  '+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )'; 
							 --OR T_HDR.assigned_to = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + '
							--' OR T_HDR.created_by = ' + CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' ) ';
			END
			--IF ( @CONCATFILETR = 1 )
			--BEGIN
			--	--SET @sql += ' AND ( ' + @TypeClause + ' AND ' + @PriorityClause + ' AND ' + @STATUSClause + ' AND ' + @DurationClause + ' AND ' + @UserClause + '  ) ';
			--	--print 'print '+ ' AND ( ' + @TypeClause + ' AND ' + @PriorityClause + ' AND ' + @STATUSClause + ' AND ' + @DurationClause + ' AND ' + @UserClause + '  ) ';
			--	--print '@sql: '+ @sql;
			--END
			--ELSE IF ( @CONCATFILETR = 0 )
			--BEGIN
			----print '@WhereClause is not null';
			--	SET @sql += ' AND ( 1 != 1 ) ';
			--END
			--IF( @USER_FILTER IS NULL
			--		OR @USER_FILTER = 'Default'
			--		OR @USER_FILTER = ''
			--		OR @filter IS NOT NULL )
			--BEGIN
			--	SET @WhereClause += ' ( T_HDR.RESPOSIBLE_EMP_MKEY = '
			--	+ CONVERT(NVARCHAR, @CURRENT_EMP_MKEY) + ' )';
			--	SET @hasWhereClause = 1;
			--	SET @sql += ' AND  ' + @WhereClause + '  ';
			--END
			
			print '@sql123: '+ @sql
		EXEC Sp_executesql	@sql;

		EXEC Sp_dashboard_count @CURRENT_EMP_MKEY;

END 

------------------------------------------------------------------------------------

GO
/****** Object:  StoredProcedure [dbo].[SP_UPDATE_SCHEDULED_MSP]    Script Date: 05-07-2025 15:33:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

    
    
ALTER PROCEDURE [dbo].[SP_UPDATE_SCHEDULED_MSP] (@Parameter1 VARCHAR(100) = NULL,     -- Prooject ID
                                                @Parameter2 VARCHAR(100) = NULL,     -- Sub Project ID
                                                @Parameter3 VARCHAR(100) = NULL,     
                                                @Parameter4 VARCHAR(100) = NULL,     
                                                @Parameter5 VARCHAR(100) = NULL,     
                                                @Parameter6 VARCHAR(100) = NULL,   -- Session User ID  
                                                @Parameter7 VARCHAR(100) = NULL  -- Group ID
)     
AS     
  BEGIN     
      DECLARE @DCount            INT,     
              @ROOT_MKEY         INT,     
              @ROOT_NUMBER       NVARCHAR(50),     
              @Mkey              INT,     
              @WBS               NVARCHAR(50),     
              @Name              NVARCHAR(500),     
              @Duration          NVARCHAR(100),     
              @Start_Date        DATETIME,     
              @Finish_Date       DATETIME,     
              @Predecessors      NVARCHAR(100),     
              @Resource_Names    NVARCHAR(100),     
              @Text1             NVARCHAR(100),     
              @Outline_Level     INT,     
              @Number1           INT,     
              @Unique_ID         INT,     
			  @Percent_Complete  NUMERIC(18,2),    
              @Created_By        INT,     
              @Creation_Date     DATETIME,     
              @CreatorID         INT,     
              @AssigneeID        INT,     
              @TaskMkey          INT,     
              @Task_Parent_ID    INT,     
              @Task_Main_Node_ID INT,     
              @Task_No           NVARCHAR(20),
			  @Task_Type         INT,
			  @Category			 INT,
			  @FileName			NVARCHAR(255),
			  @MPP_NAME			NVARCHAR(255)
      DECLARE @lastIndex INT     
    
      SET @DCount=0     
    
      SET @lastIndex=0     
    
			SELECT @Task_Type = MASTER_MKEY FROM TYPE_MST WHERE DELETE_FLAG = 'N' AND TYPE_CODE = 'TASK_TYPE' AND TYPE_DESC = 'MSP';
			SELECT @Category = MASTER_MKEY FROM TYPE_MST WHERE TYPE_CODE='CATEGORY' And TYPE_DESC ='PUBLIC' and DELETE_FLAG = 'N';

			set @Parameter1=isnull(@Parameter1,'0')    
    
			set @Parameter2=isnull(@Parameter2,'0')    
    
			update msp_default_migration_table set remarks='Error : Resource Not Found'    
			FROM   msp_default_migration_table MT     
								 LEFT JOIN employee_mst EMP     
										ON MT.resource_names = EMP.emp_full_name     
								 LEFT JOIN employee_mst Creator     
										ON MT.text1 = Creator.emp_full_name     
			where (isnull(Creator.mkey,0) = 0 or isnull(EMP.mkey,0) = 0); 
			
			
			Select WBS ,count(WBS) as Count_Wbs 
			INTO   #tempCWBS
			from TASK_HDR 
			where PROJECT_ID = @Parameter1 and  SUB_PROJECT_ID = @Parameter2
			and Is_Scheduled is not null
			group by WBS 
			having COUNT(WBS) > 1

			UPDATE msp_default_migration_table
			SET    remarks = 'Error : Duplicate WBS'
			FROM   msp_default_migration_table MT
				JOIN #tempCWBS temp
				ON MT.WBS = temp.WBS

			DROP TABLE #tempCWBS;
    
		SELECT Outline_Level,
             Count(wbs) C_Outline_Level
      INTO   #tempOutLineLevel
      FROM   msp_default_migration_table
	  WHERE  Outline_Level = 0
      GROUP  BY Outline_Level
      HAVING Count(Outline_Level) > 1;

      UPDATE msp_default_migration_table
      SET    remarks = 'Error : OutLine Level Cannot be 0'
      FROM   msp_default_migration_table MT
             JOIN #tempOutLineLevel temp
               ON MT.Outline_Level = temp.Outline_Level;

		DROP TABLE #tempOutLineLevel;

		------------------------------------------------------
		  -- to check the Percent_Complete null 
		  select wbs,count(WBS) C_WBS into #tempPercent
          FROM   msp_default_migration_table MT
          WHERE Percent_Complete IS NULL OR Percent_Complete = NULL 
		  OR ISNUMERIC(Percent_Complete) = 0 or Percent_Complete = '' 
		  or CONVERT(decimal,Percent_Complete) > 100
		  --OR (ISNUMERIC(Percent_Complete) = 1 and  Percent_Complete > 100)
		  group by wbs
		  having count(WBS) > 0

          UPDATE msp_default_migration_table
          SET    remarks = 'Error : Percent Complete column should be a valid percentage'
          FROM   msp_default_migration_table MT
				join #tempPercent temp  ON MT.wbs = temp.wbs;
		  --------------------------------------------------
		  --------------------------------------------------


		SELECT  Charindex('.',WBS) 'WBSRoot', Len(WBS) LenWBS,WBS into #tempWBSRoot
		FROM   msp_default_migration_table
		where Outline_Level = 1

		UPDATE msp_default_migration_table
		SET    remarks = 'Error : Outline level 1 is not root parent of WBS'
		FROM   msp_default_migration_table MT
				JOIN #tempWBSRoot temp
				ON MT.WBS = temp.WBS and temp.WBSRoot > 0;;

		DROP TABLE #tempWBSRoot;

		SELECT @DCount = Isnull(Count(*), 0)     
		FROM   msp_default_migration_table MT     
		WHERE  remarks like '%Error%'    
          
  IF( @DCount <= 0 )     
  BEGIN     
    
      SELECT @DCount = Isnull(Count(*), 0)     
      FROM   msp_default_migration_table MT     
      WHERE  outline_level = 1     
             --AND unique_id = 1     
    
      --order by Unique_id      
      IF( @DCount > 0 )     
        BEGIN     
    
            SELECT @WBS = wbs,     
                   @Name = NAME,     
                   @Duration = duration,     
                   @Start_Date = start_date,     
                   @Finish_Date = finish_date,     
                   @Predecessors = predecessors,     
                   @Resource_Names = resource_names,     
                   @Text1 = text1,     
                   @Outline_Level = outline_level,     
                   @Number1 = number1,     
                   @Unique_ID = unique_id,     
                   @Percent_Complete=Percent_Complete,    
                   @Created_By = MT.created_by,     
                   @Creation_Date = MT.creation_date,     
                   @AssigneeID = emp.mkey,     
                   @CreatorID = Creator.mkey,
				   @FileName = [FileName],
				   @MPP_NAME = mpp_name
            FROM   msp_default_migration_table MT     
                   LEFT JOIN employee_mst EMP     
                          ON MT.resource_names = EMP.emp_full_name     
                   LEFT JOIN employee_mst Creator     
                          ON MT.text1 = Creator.emp_full_name     
            WHERE  outline_level = 1   
    
            IF( @Number1 > 0 )/* CHECK WHETHER PROJECT ALREADY DEFINED*/     
              BEGIN     
    
                  SELECT @ROOT_MKEY = mkey,     
                         @ROOT_NUMBER = task_no,     
                         @Task_Main_Node_ID = mkey     
                  FROM   task_hdr     
                  WHERE  mkey = @Number1     
    
                  INSERT INTO task_hdr_h     
                  SELECT Getdate(), *     
                  FROM   task_hdr     
                  WHERE  mkey = @Number1;    
    
                  UPDATE task_hdr     
                  SET    task_name = @Name,     
                         task_description = @Name,     
                         assigned_to = @AssigneeID,     
                         task_created_by = @CreatorID,     
						 created_by = @CreatorID,
                         start_date = @start_date,     
                         completion_date = @Finish_Date,     
                         Is_Scheduled = 'Y',     
                         wbs = @WBS,     
                         duration = @Duration,     
                         sch_start_date = @Start_Date,     
                         finish_date = @Finish_Date,     
                         predecessors = @Predecessors,     
                         resource_names = @Resource_Names,     
                         text1 = @Text1,     
                         outline_level = @Outline_Level,     
                         number1 = @Number1,     
                         unique_id = @Unique_ID,    
						-- Percent_Complete=@Percent_Complete,
						 STATUS_PERC =ISNULL(@Percent_Complete,0.0),
						 task_type = @Task_Type,
						 ATTRIBUTE4 = @FileName ,
						 ATTRIBUTE5	= 	@MPP_NAME,
						 LAST_UPDATED_BY =  @Parameter6,
						 LAST_UPDATE_DATE = GETDATE(),
						 [Priority] = 'Low'
                  WHERE  mkey = @Number1     
                         AND (    
                         status NOT IN ( 'COMPLETED', 'CANCEL' )     
                         or predecessors > 0 )    
                         AND Is_Scheduled = 'Y';    
    
                  UPDATE msp_default_migration_table     
                  SET    process_flag = 'Y',     
                         remarks = 'Task_No Updated Successfully'     
                  WHERE  unique_id = @Unique_ID     
                         AND outline_level = @Outline_Level     
              END     
            ELSE/* PROJECT NOT DEFINED SO CREATE A ROOT TASK WITH DETAILS*/     
              BEGIN     
                  DECLARE @TableOutput_TASK_DETAILS TABLE     
                    (     
                       mkey              INT,     
                       task_parent_id    NVARCHAR(20),     
                       task_main_node_id NVARCHAR(20),     
                       task_no           NVARCHAR(20)     
                    )     
				 print 'INM'+ @Resource_Names;
    
                  INSERT INTO @TableOutput_TASK_DETAILS     
                  EXEC [dbo].[Sp_insert_task_details]     
                    '0000',     
                    @Name,     
                    @Name,     
                    @Category,     
                    @Parameter1,     
                    @Parameter2,     
                    @Finish_Date,     
					@AssigneeID,  
                   -- @Resource_Names,     
                    'Scheduled',     
                    'N',     
                    --@START_DATE          DATETIME,       
                    '1900-01-01 00:00:00.000',     
                    '1900-01-01 00:00:00.000',     
                    0,     
                    'WIP',     
                    '0',     
                    @CreatorID,     
					1,   
					@TASK_TYPE,  
					'',     
                    '',     
                    '',     
                    '',     
                    @FileName ,
                    @MPP_NAME,     
                    @CreatorID,     
                    '1900-01-01 00:00:00.000',     
                    @CreatorID,     
                    '1900-01-01 00:00:00.000'     
    
   print 'INsert ed'+@Resource_Names  
    
                  --select * from task_hdr      
                  SELECT @TaskMkey = mkey,     
                         @Task_Parent_ID = task_parent_id,     
                         @Task_Main_Node_ID = task_main_node_id,     
                         @Task_No = task_no     
                  FROM   @TableOutput_TASK_DETAILS     
    
                  UPDATE task_hdr     
                  SET    start_date = @start_date,     
                         Is_Scheduled = 'Y',     
                         wbs = @WBS,     
                         duration = @Duration,     
                         sch_start_date = @Start_Date,     
                         finish_date = @Finish_Date,     
                         predecessors = @Predecessors,     
                         resource_names = @Resource_Names,     
                         text1 = @Text1,     
                         outline_level = @Outline_Level,     
                         number1 = @Number1,     
                         unique_id = @Unique_ID,    
						-- Percent_Complete=@Percent_Complete,   
						 STATUS_PERC =ISNULL(@Percent_Complete,0.0), 
						 Priority = 'Low',
						 ATTRIBUTE4 = @FileName ,
						 ATTRIBUTE5	= 	@MPP_NAME,
						 LAST_UPDATED_BY =  @Parameter6,
						 LAST_UPDATE_DATE = GETDATE()
                  WHERE  mkey = @TaskMkey;
    
                  UPDATE msp_default_migration_table     
                  SET    number1 = @TaskMkey,     
                         process_flag = 'Y',     
                         remarks = 'Created Successfully--Task_No-->'     
                                   + @Task_No     
                  WHERE  unique_id = @Unique_ID     
                         AND outline_level = @Outline_Level;     
              END     
    
            /*Logic For SubTask Creation */     
            DECLARE pcursurbreak CURSOR FOR     
              SELECT wbs,     
                     NAME,     
                     duration,     
                     start_date,     
                     finish_date,     
                     predecessors,     
                     resource_names,     
                     text1,     
                     outline_level,     
                     number1,     
                     unique_id,    
					Percent_Complete,     
                     --MT.created_by,     
					Creator.mkey   created_by,  
                     MT.creation_date,     
                     Creator.mkey     'CreatorID',     
                     emp.mkey 'AssigneeID' ,
					 [FILENAME], 
					 mpp_name
              FROM   msp_default_migration_table MT     
                     LEFT JOIN employee_mst EMP     
                            ON MT.resource_names = EMP.emp_full_name     
                     LEFT JOIN employee_mst Creator     
                            ON MT.text1 = Creator.emp_full_name     
              WHERE  outline_level > 1     
                     AND Isnull(process_flag, 'N') = 'N'     
              ORDER  BY MT.mkey,     
                        unique_id     
    
            OPEN pcursurbreak     
    
            FETCH next FROM pcursurbreak INTO @WBS, @Name, @Duration,     
            @Start_Date,     
            @Finish_Date, @Predecessors, @Resource_Names, @Text1, @Outline_Level,     
            @Number1, @Unique_ID,@Percent_Complete, @Created_By, @Creation_Date, @CreatorID,     
            @AssigneeID,  @FileName ,@MPP_NAME
    
    WHILE @@FETCH_STATUS = 0     
              BEGIN     
              print '@Number1-->'+cast(@Number1 as varchar)    
                  IF( @Number1 <= 0 )     
                    BEGIN     
                        SET @lastIndex=0;     
                        SET @TaskMkey=0;     
                        SET @Task_Parent_ID=0;     
                        SET @Task_No=''     
                        SET @lastIndex = ( Len(@WBS) ) - Charindex('.', Reverse(@WBS))     
    
                        SELECT @Task_No = Substring(@WBS, 0, @lastindex + 1)     
    
                        SELECT @TaskMkey = number1     
                        FROM   msp_default_migration_table     
                        WHERE  wbs = '' + @Task_No + ''     
    
                        PRINT '@TaskMkey-->'     
                              + Cast(@TaskMkey AS VARCHAR)     
    
                        SELECT @TaskMkey = mkey,     
                               @Task_Parent_ID = mkey,     
                               @ROOT_NUMBER = task_no     
                        FROM   task_hdr     
                        WHERE  mkey = @TaskMkey     
    
                        IF( @TaskMkey = 0 )     
                          BEGIN     
                              SET @ROOT_NUMBER='';     
                              SET @Task_Parent_ID=0;     
                          END     
                        ELSE IF( @TaskMkey > 0 )     
                          BEGIN     
                              --select * from [TEMPLATE_TASK_DETAILS]      
                              DECLARE @TableOutput_TASK_NODE_DETAILS TABLE     
                                (     
                                   mkey              INT,     
                                   task_parent_id    NVARCHAR(20),     
                                   task_main_node_id NVARCHAR(20),     
                                   task_no           NVARCHAR(20)     
                                )     
				print 'in insert sub node'  
                              INSERT INTO @TableOutput_TASK_NODE_DETAILS     
                              EXEC [dbo].[Sp_insert_task_node_details]     
                                @Task_Parent_ID,     
                                @Name,     
                                @Name,     
                                @Category,     
                                @Parameter1,     
                                @Parameter2,     
                                @Finish_Date,     
                                @Resource_Names,     
                                'Scheduled',     
                                'N',     
                                '1900-01-01 00:00:00.000',     
                                '1900-01-01 00:00:00.000',     
                                @Task_Parent_ID,     
                                @Task_Main_Node_ID,     
                                @ROOT_NUMBER,     
								@Task_Type,-- Task_type  
                                'WIP',     
                                '0',     
                                @CreatorID, -- Task Created by     
                                1,   -- @APPROVER_ID   
                                '',      -- @IS_ARCHIVE
                                '',     
                                '',     
                                '',     
								@FileName , -- @ATTRIBUTE4
								@MPP_NAME,  -- @ATTRIBUTE5
                                @CreatorID,  -- @CREATED_BY    
                                '1900-01-01 00:00:00.000',     
                                @CreatorID,     
                                '1900-01-01 00:00:00.000',     
                                @Task_Parent_ID ,  
        'Low'  
        print 'Sub node inserted'  
    
								SELECT @TaskMkey = mkey,     
                                     @Task_Parent_ID = task_parent_id,     
                                     @Task_Main_Node_ID = task_main_node_id,     
                                     @Task_No = task_no     
								FROM   @TableOutput_TASK_NODE_DETAILS     
    
                              UPDATE task_hdr     
                              SET    start_date = @start_date,     
                                     Is_Scheduled = 'Y',     
                                     wbs = @WBS,     
                                     duration = @Duration,     
                                     sch_start_date = @Start_Date,     
                                     finish_date = @Finish_Date,     
                                     predecessors = @Predecessors,     
                                     resource_names = @Resource_Names,     
                                     text1 = @Text1,     
                                     outline_level = @Outline_Level,     
                                     number1 = @Number1,     
                                     unique_id = @Unique_ID,    
									-- Percent_Complete=@Percent_Complete,
									 STATUS_PERC=ISNULL(@Percent_Complete,0.0) ,
									 ATTRIBUTE4 = @FileName ,
									ATTRIBUTE5	= 	@MPP_NAME,
									LAST_UPDATED_BY =  @Parameter6,
									LAST_UPDATE_DATE = GETDATE()
                              WHERE  mkey = @TaskMkey     
    
                              UPDATE msp_default_migration_table     
                              SET    number1 = @TaskMkey,     
                                     process_flag = 'Y',     
                          remarks = 'Created Successfully--Task_No-->'   
                                    + @Task_No     
                              WHERE  unique_id = @Unique_ID     
                                     AND outline_level = @Outline_Level     
                          END     
    
                        PRINT 'for @WBS' + @WBS + '-->@ROOT_NUMBER is '     
                              + @ROOT_NUMBER     
    
                        PRINT 'for @WBS @Task_Parent_ID '     
                              + Cast(@Task_Parent_ID AS VARCHAR)     
    
                        PRINT 'for @WBS @Task_Main_Node_ID '     
                              + Cast(@Task_Main_Node_ID AS VARCHAR)     
                    END     
                  ELSE IF( @Number1 > 0 )/*Start update logic*/     
                    BEGIN     
                        PRINT 'update'     
    
                        INSERT INTO task_hdr_h     
                        SELECT Getdate(),     
                               *     
                        FROM   task_hdr     
                        WHERE  mkey = @Number1     
    
                        UPDATE task_hdr     
                        SET    task_name = @Name,     
                               task_description = @Name,     
                               assigned_to = @AssigneeID,     
                               task_created_by = @CreatorID,
							   created_by = @CreatorID,
                               start_date = @start_date,     
                               completion_date = @Finish_Date,     
                               Is_Scheduled = 'Y',     
                               wbs = @WBS,     
                               duration = @Duration,     
                               sch_start_date = @Start_Date,     
                               finish_date = @Finish_Date,     
                               predecessors = @Predecessors,     
                               resource_names = @Resource_Names,     
                               text1 = @Text1,     
                               outline_level = @Outline_Level,     
                               number1 = @Number1,     
                               unique_id = @Unique_ID,    
							--	Percent_Complete=@Percent_Complete ,
								STATUS_PERC=ISNULL(@Percent_Complete,0.0) ,
								ATTRIBUTE4 = @FileName ,
								ATTRIBUTE5	= 	@MPP_NAME,
								LAST_UPDATED_BY =  @Parameter6,
								LAST_UPDATE_DATE = GETDATE()
                        WHERE  mkey = @Number1     
                               AND (status NOT IN ( 'COMPLETED', 'CANCEL' )     
                                or isnull(predecessors,'0')!='0')    
                               AND Is_Scheduled = 'Y'     
    
                        UPDATE msp_default_migration_table     
                        SET    process_flag = 'Y',     
                               remarks = 'Task_No Updated Successfully'     
                        WHERE  unique_id = @Unique_ID     
                               AND outline_level = @Outline_Level     
                    END     
    
                  FETCH next FROM pcursurbreak INTO @WBS, @Name, @Duration,     
                  @Start_Date,     
                  @Finish_Date, @Predecessors, @Resource_Names, @Text1,     
                  @Outline_Level,     
                  @Number1, @Unique_ID,@Percent_Complete, @Created_By, @Creation_Date, @CreatorID,     
                  @AssigneeID,  @FileName ,@MPP_NAME     
              END     
    
            CLOSE pcursurbreak     
    
            DEALLOCATE pcursurbreak     
        END     
   END    
   select * from MSP_Default_Migration_Table    
  -- delete from  MSP_Default_Migration_Table    
  truncate table MSP_Default_Migration_Table
  END     
--exec [SP_INSERT_SCHEDULED_MSP]  323,324    
--select * from task_hdr where mkey>237  and task_main_node_id=238    
--UPDATE task_hdr SET TASK_NAME='TEST',TASK_DESCRIPTION='TEST',PROJECT_ID=1,SUB_PROJECT_id=0,Is_Scheduled='N',RESPOSIBLE_EMP_MKEY=0,CREATED_BY=0,TASK_CREATED_BY=0,ASSIGNED_TO=0 WHERE MKEY=235    
--update task_hdr set SUB_PROJECT_ID=0 where  mkey>237  and task_main_node_id=238    
--SELECT * FROM TYPE_MST WHERE TYPE_CODE='PROJECT'    
--select * from MSP_Default_Migration_Table      
/*      
declare @x nvarchar(20)       
set @x= '1.2'      
 DECLARE @lastIndex int      
       SET @lastIndex = (LEN(@x)) -  CHARINDEX('.', REVERSE(@x))       
    
     select SUBSTRING(@x, 0, @lastindex + 1)       
           
select REVERSE(@x)      
SELECT RIGHT(@x , CHARINDEX ('.' ,REVERSE(@x))-1)      
select SUBSTRING(@x,len(@x),CHARINDEX('.',@x)-1 )      
*/ 


-----------------------------------------------------------------------

GO
/****** Object:  StoredProcedure [dbo].[SP_INSERT_SCHEDULED_MSP]    Script Date: 05-07-2025 15:37:54 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[SP_INSERT_SCHEDULED_MSP](@Parameter1 VARCHAR(100) = NULL,
                                                --[Project]       
                                                @Parameter2 VARCHAR(100) = NULL,
                                                --Building      
                                                @Parameter3 VARCHAR(100) = NULL,
                                                --TASK_NO         
                                                @Parameter4 VARCHAR(100) = NULL,
                                                --TASK_DESC      
                                                @Parameter5 VARCHAR(100) = NULL,
                                                --DURATION        
                                                @Parameter6 VARCHAR(100) = NULL,
                                                --START       
                                                @Parameter7 VARCHAR(100) = NULL
--FINISH       
)
AS
  BEGIN
      SET nocount ON;

      --BEGIN try
         -- BEGIN TRANSACTION;

          DECLARE @DCount            INT,
                  @ROOT_MKEY         INT,
                  @ROOT_NUMBER       NVARCHAR(50),
                  @Mkey              INT,
                  @WBS               NVARCHAR(50),
                  @Name              NVARCHAR(500),
                  @Duration          NVARCHAR(100),
                  @Start_Date        DATETIME,
                  @Finish_Date       DATETIME,
                  @Predecessors      NVARCHAR(100),
                  @Resource_Names    NVARCHAR(100),
                  @Text1             NVARCHAR(100),
                  @Outline_Level     INT,
                  @Number1           INT,
                  @Unique_ID         INT,
                  @Percent_Complete  NUMERIC(18, 2),
                  @Created_By        INT,
                  @Creation_Date     DATETIME,
                  @CreatorID         INT,
                  @AssigneeID        INT,
                  @TaskMkey          INT,
                  @Task_Parent_ID    INT,
                  @Task_Main_Node_ID INT,
                  @Task_No           NVARCHAR(20),
                  @Task_Type         INT,
                  @Category          INT,
                  @FileName          NVARCHAR(255),
                  @MPP_NAME          NVARCHAR(255)
          DECLARE @lastIndex INT

          SET @DCount = 0;
          SET @lastIndex = 0;

          SELECT @Task_Type = master_mkey
          FROM   type_mst
          WHERE  delete_flag = 'N'
                 AND type_code = 'TASK_TYPE'
                 AND type_desc = 'MSP';

          SELECT @Category = master_mkey
          FROM   type_mst
          WHERE  type_code = 'CATEGORY'
                 AND type_desc = 'PUBLIC'
                 AND delete_flag = 'N';

          SET @Parameter1=Isnull(@Parameter1, '0');
          SET @Parameter2=Isnull(@Parameter2, '0');

          UPDATE msp_default_migration_table
          SET    remarks = 'Error : Resource Not Found'
          FROM   msp_default_migration_table MT
                 LEFT JOIN employee_mst EMP
                        ON MT.resource_names = EMP.emp_full_name
                 LEFT JOIN employee_mst Creator
                        ON MT.text1 = Creator.emp_full_name
          WHERE  ( Isnull(Creator.mkey, 0) = 0
                    OR Isnull(EMP.mkey, 0) = 0 );

          -- TO check null value in wbs 
          UPDATE msp_default_migration_table
          SET    remarks = 'Error : WBS is null'
          FROM   msp_default_migration_table MT
          WHERE  MT.wbs IS NULL
                  OR MT.wbs = ''
          -- end 
          
		  SELECT wbs,
                 Count(wbs) C_WBS
          INTO   #tempwbs
          FROM   msp_default_migration_table
          GROUP  BY wbs
          HAVING Count(wbs) > 1;

          UPDATE msp_default_migration_table
          SET    remarks = 'Error : Duplicate WBS No'
          FROM   msp_default_migration_table MT
                 JOIN #tempwbs temp
                   ON MT.wbs = temp.wbs;

          DROP TABLE #tempwbs;
		  ------------------------------------------------------
		  -- to check the Percent_Complete null 
		  select wbs,count(WBS) C_WBS into #tempPercent
          FROM   msp_default_migration_table MT
          WHERE Percent_Complete IS NULL OR Percent_Complete = NULL 
		  OR ISNUMERIC(Percent_Complete) = 0 or Percent_Complete = '' 
		  OR (ISNUMERIC(Percent_Complete) = 0 and  Percent_Complete > 100)
		  group by wbs
		  having count(WBS) > 0

          UPDATE msp_default_migration_table
          SET    remarks = 'Error : Percent Complete column should be a valid percentage'
          FROM   msp_default_migration_table MT
				join #tempPercent temp  ON MT.wbs = temp.wbs;
		  --------------------------------------------------

          SELECT @DCount = Count(*)
          FROM   msp_default_migration_table
          WHERE  outline_level = 1

          IF( @DCount <= 0
               OR @DCount > 1 )
            BEGIN
                UPDATE msp_default_migration_table
                SET    remarks = 'Error : Outline Level 1 is not define';
            END

          SET @DCount = 0;

          SELECT wbs,
                 Count(wbs) AS Count_Wbs
          INTO   #tempcwbs
          FROM   task_hdr
          WHERE  project_id = @Parameter1
                 AND sub_project_id = @Parameter2
                 AND is_scheduled IS NOT NULL
          GROUP  BY wbs
          HAVING Count(wbs) >= 1

          UPDATE msp_default_migration_table
          SET    remarks = 'Error : Duplicate WBS in PROJECT_ID: '
                           + @Parameter1 + ' and  SUB_PROJECT_ID: '
                           + @Parameter2 + ' '
          FROM   msp_default_migration_table MT
                 JOIN #tempcwbs temp
                   ON MT.wbs = temp.wbs

          DROP TABLE #tempcwbs;

          --end  Duplicate WBS
          SELECT unique_id,
                 Count(unique_id) C_unique_id
          INTO   #tempuniqueid
          FROM   msp_default_migration_table
          GROUP  BY unique_id
          HAVING Count(unique_id) > 1;

          UPDATE msp_default_migration_table
          SET    remarks = 'Error : Duplicate unique_id'
          FROM   msp_default_migration_table MT
                 JOIN #tempuniqueid temp
                   ON MT.unique_id = temp.unique_id

          DROP TABLE #tempuniqueid;

          SELECT outline_level,
                 Count(wbs) C_Outline_Level
          INTO   #tempoutlinelevel
          FROM   msp_default_migration_table
          WHERE  outline_level = 0
          GROUP  BY outline_level
          HAVING Count(outline_level) >= 1;

          UPDATE msp_default_migration_table
          SET    remarks = 'Error : OutLine Level Cannot be 0'
          FROM   msp_default_migration_table MT
                 JOIN #tempoutlinelevel temp
                   ON MT.outline_level = temp.outline_level;

          DROP TABLE #tempoutlinelevel;

		  SELECT  Charindex('.',WBS) 'WBSRoot', Len(WBS) LenWBS,WBS into #tempWBSRoot
          FROM   msp_default_migration_table
          where Outline_Level = 1

		  UPDATE msp_default_migration_table
          SET    remarks = 'Error : Outline level 1 is not root parent of WBS'
          FROM   msp_default_migration_table MT
                 JOIN #tempWBSRoot temp
                   ON MT.WBS = temp.WBS and temp.WBSRoot > 0;;

          DROP TABLE #tempWBSRoot;


          SELECT @DCount = Isnull(Count(*), 0)
          FROM   msp_default_migration_table MT
          WHERE  remarks LIKE '%Error%';

          IF( @DCount <= 0 )
            BEGIN
			print '@DCount <= 0: ' + convert(nvarchar,@DCount);
                SELECT @DCount = Isnull(Count(*), 0)
                FROM   msp_default_migration_table MT
                WHERE  outline_level = 1

                --AND unique_id = 1     
                --order by Unique_id      
                IF( @DCount > 0 )
                  BEGIN
                      SELECT @WBS = wbs,
                             @Name = NAME,
                             @Duration = duration,
                             @Start_Date = start_date,
                             @Finish_Date = finish_date,
                             @Predecessors = predecessors,
                             @Resource_Names = resource_names,
                             @Text1 = text1,
                             @Outline_Level = outline_level,
                             @Number1 = number1,
                             @Unique_ID = unique_id,
                             @Percent_Complete = percent_complete,
                             @Created_By = MT.created_by,
                             @Creation_Date = MT.creation_date,
                             @AssigneeID = emp.mkey,
                             @CreatorID = Creator.mkey,
                             @FileName = [filename],
                             @MPP_NAME = mpp_name
                      FROM   msp_default_migration_table MT
                             LEFT JOIN employee_mst EMP
                                    ON MT.resource_names = EMP.emp_full_name
                             LEFT JOIN employee_mst Creator
                                    ON MT.text1 = Creator.emp_full_name
                      WHERE  outline_level = 1

                      IF( @Number1 > 0 )
                        /* CHECK WHETHER PROJECT ALREADY DEFINED*/
                        BEGIN
							
                            SELECT @ROOT_MKEY = mkey,
                                   @ROOT_NUMBER = task_no,
                                   @Task_Main_Node_ID = mkey
                            FROM   task_hdr
                            WHERE  mkey = @Number1

                            INSERT INTO task_hdr_h
                            SELECT Getdate(),
                                   *
                            FROM   task_hdr
                            WHERE  mkey = @Number1
							
							print '@Number1 > 0 UPDATE task_hdr: '+ convert(nvarchar, @Number1);
                            
							UPDATE task_hdr
                            SET    task_name = @Name,
                                   task_description = @Name,
                                   assigned_to = @AssigneeID,
                                   task_created_by = @CreatorID,
                                   start_date = @start_date,
                                   completion_date = @Finish_Date,
                                   is_scheduled = 'Y',
                                   wbs = @WBS,
                                   duration = @Duration,
                                   sch_start_date = @Start_Date,
                                   finish_date = @Finish_Date,
                                   predecessors = @Predecessors,
                                   resource_names = @Resource_Names,
								   Priority = 'Low',
                                   text1 = @Text1,
                                   outline_level = @Outline_Level,
                                   number1 = @Number1,
                                   unique_id = @Unique_ID,
                                   STATUS_PERC = @Percent_Complete,
                                   task_type = @Task_Type,
                                   attribute4 = @FileName,
                                   attribute5 = @MPP_NAME
                            WHERE  mkey = @Number1
                                   AND ( status NOT IN ( 'COMPLETED', 'CANCEL' )
                                          OR predecessors > 0 )
                                   AND is_scheduled = 'Y';

                            UPDATE msp_default_migration_table
                            SET    process_flag = 'Y',
                                   remarks = 'Task_No Updated Successfully'
                            WHERE  unique_id = @Unique_ID
                                   AND outline_level = @Outline_Level;
                        END
                      ELSE
                        /* PROJECT NOT DEFINED SO CREATE A ROOT TASK WITH DETAILS*/
                        BEGIN
						print 'else @Number1 > 0 UPDATE task_hdr: '+ convert(nvarchar, @Name)+ ' filename '+ @FileName ;
                            DECLARE @TableOutput_TASK_DETAILS TABLE
                              (
                                 mkey              INT,
                                 task_parent_id    NVARCHAR(20),
                                 task_main_node_id NVARCHAR(20),
                                 task_no           NVARCHAR(20)
                              )

                            PRINT 'INM' + @Resource_Names;

                            INSERT INTO @TableOutput_TASK_DETAILS
                            EXEC [dbo].[Sp_insert_task_details]
                              '0000',
                              @Name,
                              @Name,
                              @Category,
                              @Parameter1,
                              @Parameter2,
                              @Finish_Date,
                              @AssigneeID,
                              -- @Resource_Names,     
                              'Scheduled',
                              'N',
                              --@START_DATE          DATETIME,       
                              '1900-01-01 00:00:00.000',
                              '1900-01-01 00:00:00.000',
                              0,
                              'WIP',
                              '0',
                              @CreatorID,
                              1,
                              @TASK_TYPE,
                              '',
                              '',
                              '',
                              '',
                              @FileName,
                              @MPP_NAME,
                              @CreatorID,
                              '1900-01-01 00:00:00.000',
                              @CreatorID,
                              '1900-01-01 00:00:00.000'

                            PRINT 'INsert ed' + @Resource_Names;

                            --select * from task_hdr      
                            SELECT @TaskMkey = mkey,
                                   @Task_Parent_ID = task_parent_id,
                                   @Task_Main_Node_ID = task_main_node_id,
                                   @Task_No = task_no
                            FROM   @TableOutput_TASK_DETAILS

                            UPDATE task_hdr
                            SET    start_date = @start_date,
                                   is_scheduled = 'Y',
                                   wbs = @WBS,
                                   duration = @Duration,
                                   sch_start_date = @Start_Date,
                                   finish_date = @Finish_Date,
                                   predecessors = @Predecessors,
                                   resource_names = @Resource_Names,
                                   text1 = @Text1,
                                   outline_level = @Outline_Level,
                                   number1 = @Number1,
                                   unique_id = @Unique_ID,
                                   STATUS_PERC = @Percent_Complete,
                                   attribute4 = @FileName,
                                   attribute5 = @MPP_NAME
                            WHERE  mkey = @TaskMkey;

                            UPDATE msp_default_migration_table
                            SET    number1 = @TaskMkey,
                                   process_flag = 'Y',
                                   remarks = 'Created Successfully--Task_No-->'
                                             + @Task_No
                            WHERE  unique_id = @Unique_ID
                                   AND outline_level = @Outline_Level;
                        END

                      /*Logic For SubTask Creation */
                      DECLARE pcursurbreak CURSOR FOR
                        SELECT wbs,
                               NAME,
                               duration,
                               start_date,
                               finish_date,
                               predecessors,
                               resource_names,
                               text1,
                               outline_level,
                               number1,
                               unique_id,
                               percent_complete,
                               --MT.created_by,     
                               Creator.mkey created_by,
                               MT.creation_date,
                               Creator.mkey 'CreatorID',
                               emp.mkey     'AssigneeID',
                               [filename],
                               mpp_name
                        FROM   msp_default_migration_table MT
                               LEFT JOIN employee_mst EMP
                                      ON MT.resource_names = EMP.emp_full_name
                               LEFT JOIN employee_mst Creator
                                      ON MT.text1 = Creator.emp_full_name
                        WHERE  outline_level > 1
                               AND Isnull(process_flag, 'N') = 'N'
                        ORDER  BY MT.mkey,
                                  unique_id

                      OPEN pcursurbreak

                      FETCH next FROM pcursurbreak INTO @WBS, @Name, @Duration,
                      @Start_Date,
                      @Finish_Date, @Predecessors, @Resource_Names, @Text1,
                      @Outline_Level,@Number1, @Unique_ID, @Percent_Complete, @Created_By,
                      @Creation_Date
                      ,
                      @CreatorID, @AssigneeID, @FileName, @MPP_NAME

                      WHILE @@FETCH_STATUS = 0
                        BEGIN
                            PRINT '@Number1-->' + Cast(@Number1 AS VARCHAR)

                            IF( @Number1 <= 0 )
                              BEGIN
								PRINT 'inside @Number1-->' + Cast(@Number1 AS VARCHAR)
                                  SET @lastIndex=0;
                                  SET @TaskMkey=0;
                                  SET @Task_Parent_ID=0;
                                  SET @Task_No=''
                                  SET @lastIndex = ( Len(@WBS) ) -
                                                   Charindex('.', Reverse(
                                                   @WBS))

                                  SELECT @Task_No = Substring(@WBS, 0,
                                                    @lastindex + 1)

                                  SELECT @TaskMkey = number1
                                  FROM   msp_default_migration_table
                                  WHERE  wbs = '' + @Task_No + ''

                                  PRINT '@TaskMkey--> '+ convert(nvarchar,@TaskMkey)
                                        + Cast(@TaskMkey AS VARCHAR)

                                  SELECT @TaskMkey = mkey,
                                         @Task_Parent_ID = mkey,
                                         @ROOT_NUMBER = task_no
                                  FROM   task_hdr
                                  WHERE  mkey = @TaskMkey

                                  IF( @TaskMkey = 0 )
                                    BEGIN
                                        SET @ROOT_NUMBER='';
                                        SET @Task_Parent_ID=0;
                                    END
                                  ELSE IF( @TaskMkey > 0 )
                                    BEGIN
                                        --select * from [TEMPLATE_TASK_DETAILS]      
                                        DECLARE @TableOutput_TASK_NODE_DETAILS
                                        TABLE
                                          (
                                             mkey              INT,
                                             task_parent_id    NVARCHAR(20),
                                             task_main_node_id NVARCHAR(20),
                                             task_no           NVARCHAR(20)
                                          )

                                        PRINT 'in insert sub node'

                                        INSERT INTO
                                        @TableOutput_TASK_NODE_DETAILS
                                        EXEC [dbo].[Sp_insert_task_node_details]
                                          @Task_Parent_ID,
                                          @Name,
                                          @Name,
                                          @Category,
                                          @Parameter1,
                                          @Parameter2,
                                          @Finish_Date,
                                          @Resource_Names,
                                          'Scheduled',
                                          'N',
                                          '1900-01-01 00:00:00.000',
                                          '1900-01-01 00:00:00.000',
                                          @Task_Parent_ID,
                                          @Task_Main_Node_ID,
                                          @ROOT_NUMBER,
                                          @Task_Type,-- Task_type  
                                          'WIP',
                                          '0',
                                          @CreatorID,
                                          1,
                                          '',
                                          '',
                                          '',
                                          '',
                                          @FileName,-- @ATTRIBUTE4
                                          @MPP_NAME,-- @ATTRIBUTE5    
                                          @CreatorID,
                                          '1900-01-01 00:00:00.000',
                                          @CreatorID,
                                          '1900-01-01 00:00:00.000',
                                          @Task_Parent_ID,
                                          'Low'

                                        PRINT 'Sub node inserted'

                                        SELECT @TaskMkey = mkey,
                                               @Task_Parent_ID = task_parent_id,
                                               @Task_Main_Node_ID =
                                               task_main_node_id,
                                               @Task_No = task_no
                                        FROM   @TableOutput_TASK_NODE_DETAILS

                                        UPDATE task_hdr
                                        SET    start_date = @start_date,
                                               is_scheduled = 'Y',
                                               wbs = @WBS,
                                               duration = @Duration,
                                               sch_start_date = @Start_Date,
                                               finish_date = @Finish_Date,
                                               predecessors = @Predecessors,
                                               resource_names = @Resource_Names,
                                               text1 = @Text1,
                                               outline_level = @Outline_Level,
                                               number1 = @Number1,
                                               unique_id = @Unique_ID,
                                              -- percent_complete = @Percent_Complete,
											   STATUS_PERC = ISNULL(@Percent_Complete,0.0),
                                               attribute4 = @FileName,
                                               attribute5 = @MPP_NAME
                                        WHERE  mkey = @TaskMkey

                                        UPDATE msp_default_migration_table
                                        SET    number1 = @TaskMkey,
                                               process_flag = 'Y',
                                    remarks = 'Created Successfully--Task_No-->'
                                              + @Task_No
                                        WHERE  unique_id = @Unique_ID
                                               AND outline_level =
                                                   @Outline_Level
                                    END

                                  PRINT 'for @WBS' + @WBS +
                                        '-->@ROOT_NUMBER is '
                                        + @ROOT_NUMBER

                                  PRINT 'for @WBS @Task_Parent_ID '
                                        + Cast(@Task_Parent_ID AS VARCHAR)

                                  PRINT 'for @WBS @Task_Main_Node_ID '
                                        + Cast(@Task_Main_Node_ID AS VARCHAR)
                              END
                            ELSE IF( @Number1 > 0 )/*Start update logic*/
                              BEGIN
                                  PRINT 'update'

                                  INSERT INTO task_hdr_h
                                  SELECT Getdate(),
                                         *
                                  FROM   task_hdr
                                  WHERE  mkey = @Number1

                                  UPDATE task_hdr
                                  SET    task_name = @Name,
                                         task_description = @Name,
                                         assigned_to = @AssigneeID,
                                         task_created_by = @CreatorID,
                                         start_date = @start_date,
                                         completion_date = @Finish_Date,
                                         is_scheduled = 'Y',
                                         wbs = @WBS,
                                         duration = @Duration,
                                         sch_start_date = @Start_Date,
                                         finish_date = @Finish_Date,
                                         predecessors = @Predecessors,
                                         resource_names = @Resource_Names,
                                         text1 = @Text1,
                                         outline_level = @Outline_Level,
                                         number1 = @Number1,
                                         unique_id = @Unique_ID,
                                         STATUS_PERC = @Percent_Complete,
                                         attribute4 = @FileName,
                                         attribute5 = @MPP_NAME
                                  WHERE  mkey = @Number1
                                         AND ( status NOT IN (
                                               'COMPLETED', 'CANCEL' )
                                                OR Isnull(predecessors, '0') !=
                                                   '0' )
                                         AND is_scheduled = 'Y'

                                  UPDATE msp_default_migration_table
                                  SET    process_flag = 'Y',
                              remarks = 'Task_No Updated Successfully'
                                  WHERE  unique_id = @Unique_ID
                                         AND outline_level = @Outline_Level
                              END
							  Else
								Begin
									print 'Not inserted';
								END
                            
							FETCH next FROM pcursurbreak INTO @WBS, @Name,
                            @Duration,
                            @Start_Date,
                            @Finish_Date, @Predecessors, @Resource_Names, @Text1
                            ,
                            @Outline_Level
                            ,
                            @Number1, @Unique_ID, @Percent_Complete, @Created_By
                            ,
                            @Creation_Date
                            ,
                            @CreatorID, @AssigneeID, @FileName, @MPP_NAME
                        END

                      CLOSE pcursurbreak

                      DEALLOCATE pcursurbreak
                  END
            END

		 --   IF( @DCount = 0 )		
			--Begin
			--	IF EXISTS (SELECT 1
   --                  FROM   msp_default_migration_table A
   --                  WHERE  NOT EXISTS (SELECT 1
   --                                     FROM   task_hdr B
   --                                     WHERE  A.wbs = B.wbs
   --                                            AND is_scheduled IS NOT NULL
   --                                            AND B.project_id = @Parameter1
   --                                            AND B.sub_project_id = @Parameter2)
   --                          OR Isnull(process_flag, 'N') = 'N')
			--	BEGIN
			--		UPDATE msp_default_migration_table
			--		SET remarks = 'Error: Due to incomplete insert, all rows not inserted';

			--		--THROW 50001, 'Incomplete inserts detected. Rolling back transaction.',1;
			--	END
			--End
          SELECT * FROM   msp_default_migration_table

          -- delete from  MSP_Default_Migration_Table    
         TRUNCATE TABLE msp_default_migration_table

         -- COMMIT TRANSACTION;
      --END try

     -- BEGIN catch
         -- ROLLBACK TRANSACTION;

          -- Optionally update remarks here for debugging or log errors
         -- DECLARE @ErrorMessage NVARCHAR(4000) = Error_message();

          --RAISERROR('Transaction failed: %s',16,1,@ErrorMessage);
      --END catch;
  END
--exec [SP_INSERT_SCHEDULED_MSP]  323,324    
--select * from task_hdr where mkey>237  and task_main_node_id=238    
--UPDATE task_hdr SET TASK_NAME='TEST',TASK_DESCRIPTION='TEST',PROJECT_ID=1,SUB_PROJECT_id=0,Is_Scheduled='N',RESPOSIBLE_EMP_MKEY=0,CREATED_BY=0,TASK_CREATED_BY=0,ASSIGNED_TO=0 WHERE MKEY=235    
--update task_hdr set SUB_PROJECT_ID=0 where  mkey>237  and task_main_node_id=238    
--SELECT * FROM TYPE_MST WHERE TYPE_CODE='PROJECT'    
--select * from MSP_Default_Migration_Table      
/*      
declare @x nvarchar(20)       
set @x= '1.2'      
 DECLARE @lastIndex int      
       SET @lastIndex = (LEN(@x)) -  CHARINDEX('.', REVERSE(@x))       
    
     select SUBSTRING(@x, 0, @lastindex + 1)       
           
select REVERSE(@x)      
SELECT RIGHT(@x , CHARINDEX ('.' ,REVERSE(@x))-1)      
select SUBSTRING(@x,len(@x),CHARINDEX('.',@x)-1 )      
*/


--------------------------------------------------------------------------------------------

GO
/****** Object:  StoredProcedure [dbo].[SP_GET_SCHEDULED_MSP]    Script Date: 05-07-2025 15:39:30 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--EXEC SP_GET_SCHEDULED_MSP 157,461,926,1
-- exec  SP_GET_SCHEDULED_MSP 214,325,926,1
ALTER PROCEDURE [dbo].[SP_GET_SCHEDULED_MSP]
	-- Add the parameters for the stored procedure here
	@ProjectMkey int,
	@BuildingMkey int,
	@Session_User_Id   INT,  
	@Business_Group_Id INT

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
		Select WBS,TASK_NAME as Name,Duration,Start_Date,Finish_Date
		,Predecessors, isnull(emst.EMP_FULL_NAME,'') as Resource_Names,isnull(emst.EMP_FULL_NAME,'') as Text1,Outline_Level,thdr.MKEY as Number1,Unique_ID
		,CONVERT(nvarchar(100),STATUS_PERC) as Percent_Complete
		From TASK_HDR thdr Left Join EMPLOYEE_MST emst on thdr.Resource_Names = emst.EMP_FULL_NAME and emst.DELETE_FLAG = 'N'
		Where Is_Scheduled is not null 
		And thdr.DELETE_FLAG = 'N' 
		And thdr.PROJECT_ID = @ProjectMkey 
		And thdr.SUB_PROJECT_ID = @BuildingMkey;
END


------------------------------------------------------------------------------------
Date:  07-07-2025


GO
/****** Object:  StoredProcedure [dbo].[SP_TASK_DETAILS_BY_MKEY_NT]    Script Date: 07-07-2025 18:02:22 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	exec SP_TASK_DETAILS_BY_MKEY_NT 1039,2693,0
--exec SP_TASK_DETAILS_BY_MKEY_NT 1,926,1
ALTER procedure [dbo].[SP_TASK_DETAILS_BY_MKEY_NT](@HDR_MKEY VARCHAR(250),@Session_User_Id          INT = null,  
@Business_Group_Id	  INT = null)
AS
  BEGIN
      DECLARE @DAY INT

      SET @DAY=0

      SELECT T_HDR.mkey,
             T_HDR.task_no,
             T_HDR.isnode,
             T_HDR.task_parent_id,
             T_HDR.task_main_node_id,
			 T_HDR.Task_Type,
             T_HDR.status,
             T_HDR.status_perc,
             T_HDR.task_created_by,
             T_HDR.approver_id,
             T_HDR.approve_action_date,
			 T_HDR.ASSIGNED_TO,
			 E_MST.EMP_FULL_NAME			AS 'Assigned_To_Name',
             T_MST.type_desc                           CAREGORY,
             T_HDR.project_id                          PROJECT_MKEY,
			 T_HDR.sub_project_id                    AS BUILDING_MKEY,
             P_MST.type_desc                           'PROJECT',
			 P_MST.type_desc                           'Project_Name',
             S_P_MST.type_desc                         'Sub_PROJECT',
			 S_P_MST.type_desc						AS 'Building_Name',
             T_HDR.caregory                            CATEGORY_MKEY,
             T_HDR.creation_date,
             T_HDR.task_name,
             T_HDR.task_description,
             E_MST.emp_full_name,

			 --When Task owner created the task
			 case when T_HDR.TASK_CREATED_BY = @Session_User_Id  /* Inside Task Owner login*/
			 and T_HDR.STATUS in ('CREATED','SUB TASK CREATED','WORK IN PROGRESS') and T_HDR.STATUS_PERC = 0.0 then 'Y' 
			 /*Task owner created the task and it is currently on created status and progress is 0%  then all tabs are enabled for task owner 
			 and task owner can add tabs list like Checklist, Authority, Outcome and Compliance via remark but with 0%  progress and WIP status update.  
			 Otherwise any progress between 0% to 100% with WIP status will lead to disable all tabs for task owner.*/ 

			 --When Task owner created the task 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id) /* Inside assignee login */
			 and T_HDR.STATUS_PERC between 0.0 and 100.0 /* Inside assignee login also all tabs are enabled because progress % is 0, however when assignee change 
			 the progress percent % between 0% to 100% then tabs are disabled for the task owner,but enabled at the assignee side. 
			 Assignee can able to update all tabs  */
			 and T_HDR.STATUS in ('CREATED','SUB TASK CREATED','WORK IN PROGRESS') Then 'Y'  

			 --When Task owner created the task 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id and T_HDR.TASK_CREATED_BY = @Session_User_Id) /* Inside assignee login */
			 --and T_HDR.STATUS_PERC between 0.0 and 100.0 
			 /* Inside assignee login also all tabs are enabled because progress % is 0, however when assignee change 
			 the progress percent % between 0% to 100% then tabs are disabled for the task owner,but enabled at the assignee side. 
			 Assignee can able to update all tabs  */
			 and T_HDR.STATUS not in  ('CANCEL','CANCELLED','CLOSE','COMPLETED') Then 'Y'  
			 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 /*When Assignee change to close initiate(100%) */
							-- Inside assignee login 
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id) 
			 and T_HDR.STATUS_PERC = 100.0 
			 and  T_HDR.STATUS in ('CLOSE INITIATED')  then 'N'
			 /* If an assignee changes the status to cancel initiate or close initiate it means progress % is whether 0% or 100% so, 
			 in this scenario all tabs are disabled to the assignee side. Assignee will never change any of tab/s 
			 and inside the task owner log in all tabs are enabled for the task owner. Task owner can update all tabs. */
			 
			 /* When Assignee change to  cancel initiate (0%) Inside assignee login */
			 when (T_HDR.ASSIGNED_TO = @Session_User_Id)
			 and T_HDR.STATUS in ('CANCEL INITIATED')  then 'N' 
			 /* If an assignee changes the status to cancel initiate or close initiate it means progress % is whether 0% or 100% so, 
			 in this scenario all tabs are disabled to the assignee side. Assignee will never change any of tab/s 
			 and inside the task owner log in all tabs are enabled for the task owner. Task owner can update all tabs. */

			 /*When Assignee change to close initiate(100%) or cancel initiate (0%) */
			  --Inside Task Owner login 
			 when  T_HDR.TASK_CREATED_BY = @Session_User_Id	 
			 and T_HDR.STATUS_PERC between 0.0 and 100.0 and T_HDR.STATUS in ('CLOSE INITIATED','CANCEL INITIATED')  then 'Y' 
			 /* Now inside task owner log in all tabs are enabled and task owner can do all changes in tabs and the status which are visible 
			 to the task owner is Cancel or Close and Re-work as per the assignee action if assignee triggered Close initiate then task owner can see 
			 the Close or if Cancel Initiate is triggered by the assignee then task owner can see Cancel and re-work is by default */
			 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 /*When Task owner change status to re-work  */
			 ---Inside Task Owner login
			 WHEN  T_HDR.TASK_CREATED_BY= @Session_User_Id	
			 and T_HDR.STATUS in ('RE-WORK')  then 'N' /*-- When task owner change status to re-work instead of Close or Cancel then all tabs are disabled 
														at task owner side now task owner is not able to do any changes inside any tab.*/
			 /* When Task owner change status to re-work */
			 --- Inside assignee login
			 WHEN  (T_HDR.ASSIGNED_TO = @Session_User_Id) 
			 and T_HDR.STATUS in ('RE-WORK')  then 'Y' /* When the task owner gives a task to re-work to the assignee then status will change to re-work for the assignee 
														 and now all tabs are enabled for assignee and can do any changes inside any tab.*/
	 ---------------------------------------------------------------------------------------------------------------------------------------------------
			 WHEN  (T_HDR.TASK_CREATED_BY = @Session_User_Id) or (T_HDR.ASSIGNED_TO = @Session_User_Id)
			 and T_HDR.STATUS in ('CANCEL','CANCELLED','CLOSE')  then 'N' /* When task owner can do Cancel or Close instead of re-work 
																			 then all tabs are disabled for task owner as well as assignee */
 ---------------------------------------------------------------------------------------------------------------------------------------------------
			WHEN  (T_HDR.TASK_CREATED_BY = @Session_User_Id) and (T_HDR.ASSIGNED_TO = @Session_User_Id)
			 and T_HDR.STATUS not in ('CANCEL','CANCELLED','CLOSE')  then 'Y' /* When Task Owner and Assignee are same then enabled  */
---------------------------------------------------------------------------------------------------------------------------------------------------
			 ELSE 'N'
			 end as 'Process_Flag',
             T_HDR.tags,
             CONVERT(VARCHAR(10), T_HDR.completion_date, 120)COMPLETION_DATE,
			 CONVERT(VARCHAR(10), parentHDR.COMPLETION_DATE, 120)  as Task_Parent_Completion_Date,
             --Isnull(file_name, '')                     [FILE_NAME],
             --Isnull(file_path, '')                     FILE_PATH,
             T_HDR.resposible_emp_mkey
			,ISNULL(RTrim(T_HDR.Priority),'') AS [Priority] 
			,ISNULL(CONVERT(NVARCHAR(20), T_HDR.Tentative_Start_Date),null) AS Tentative_Start_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Tentative_End_Date),null) AS Tentative_End_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Actual_Start_Date),null) AS Actual_Start_Date
			,ISNULL(CONVERT(NVARCHAR(20),T_HDR.Actual_End_Date),null) AS Actual_End_Date
      FROM   task_hdr T_HDR
			join TASK_HDR parentHDR on T_HDR.TASK_PARENT_ID = parentHDR.MKEY
             JOIN employee_mst E_MST
               ON E_MST.mkey = T_HDR.assigned_to
             LEFT JOIN type_mst T_MST
                    ON T_MST.master_mkey = T_HDR.caregory
             --AND T_MST.TYPE_CODE='CATEGORY'
             LEFT JOIN type_mst P_MST
                    ON P_MST.master_mkey = T_HDR.project_id
             LEFT JOIN type_mst S_P_MST
                    ON S_P_MST.master_mkey = T_HDR.sub_project_id
             --LEFT JOIN task_media_trl T_MEDIA
             --       ON T_MEDIA.mkey = T_HDR.mkey
             --          AND T_MEDIA.delete_flag = 'N'
      WHERE  T_HDR.mkey = @HDR_MKEY;
  END


----------------------------------------------------

Date 08-07-2025


GO
/****** Object:  StoredProcedure [dbo].[SP_GET_TASK_CHECKLIST_NT]    Script Date: 08-07-2025 16:11:14 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:    
-- Create date: 
-- Description:  
--  EXEC SP_GET_TASK_CHECKLIST_NT 440,443, 307,'ffg','fgfg',926
-- =============================================
 ALTER PROCEDURE [dbo].[SP_GET_TASK_CHECKLIST_NT]
  -- Add the parameters for the stored procedure here
  @PROPERTY_MKEY INT,
  @BUILDING_MKEY INT,
  @TASK_MKEY     INT,
  @API_NAME      NVARCHAR(200),
  @API_METHOD    NVARCHAR(100),
  @USER_ID       INT,
  @Session_User_Id          INT = NULL,  
@Business_Group_Id	  INT = NULL
AS
  BEGIN
      SET nocount ON;

      BEGIN try

	  SELECT CTRL.mkey,
                 CTRL.sr_no,
                 THDR.project_id                                           AS                 PROPERTY_MKEY,
                 THDR.sub_project_id                                       AS                 BUILDING_MKEY,
				 CTRL.DOCUMENT_MKEY,
				 CTRL.DOCUMENT_MKEY					AS Doc_Cat_mkey,
				 CTRL.DOCUMENT_NAME					as Doc_Cat_Name,
				 DocMST.MKEY						as Doc_Type_Mkey,
				 MST.TYPE_DESC						as  Doc_Type_Name,
				 CTRL.document_mkey											AS DOC_MKEY,
				 MST.TYPE_DESC as  Doc_Cat_Name,
                 CASE WHEN DocMST.DOC_NAME IS NULL THEN (SELECT TYPE_DESC FROM TYPE_MST WHERE MKEY = CTRL.DOCUMENT_MKEY) ELSE DocMST.DOC_NAME END AS  document_name,
				 CTRL.DOCUMENT_NAME as  Doc_Cat_Name,
                 CTRL.document_category,
				 MST.TYPE_DESC                                             AS
                 [TYPE_DESC],
                 CTRL.app_check,
				 Isnull(CONVERT(VARCHAR(50), CTRL.created_by), '')         AS
                 CREATED_BY_ID,
                 Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS
                 CREATED_BY_NAME,
                 CASE
                   WHEN CTRL.creation_date IS NULL THEN ''
                   ELSE Format(CTRL.creation_date, 'yyyy-MM-dd HH:mm:ss')
                 END                                                       AS
                 CREATION_DATE,
                 Isnull(CONVERT(VARCHAR(50), CTRL.last_updated_by), '')    AS
                 LAST_UPDATED_BY,
                 Isnull(updatedby.emp_full_name, '')
                 UPDATED_BY_NAME
                 ,
                 CASE
                   WHEN CTRL.last_update_date IS NULL THEN ''
                   ELSE Format(CTRL.last_update_date, 'yyyy-MM-dd HH:mm:ss')
                 END                                                       AS
                 LAST_UPDATE_DATE
		 FROM   task_checklist_trl CTRL
                 INNER JOIN task_hdr THDR
                        ON CTRL.mkey = THDR.mkey
				INNER JOIN TYPE_MST MST ON MST.MASTER_MKEY =  CTRL.DOCUMENT_CATEGORY AND MST.DELETE_FLAG = 'N'
				LEFT JOIN TYPE_MST INSTRMST ON INSTRMST.MKEY =  CTRL.DOCUMENT_CATEGORY AND MST.DELETE_FLAG = 'N'
				LEFT JOIN TYPE_MST DMST ON DMST.MKEY =  CTRL.DOCUMENT_MKEY AND MST.DELETE_FLAG = 'N'
				LEFT JOIN DOC_TEMPLATE_HDR DocMST ON DocMST.TYPE_MST_DOC_TYPE_MKEY =  DMST.MKEY AND DocMST.DELETE_FLAG = 'N'
                INNER JOIN employee_mst createdby
                         ON CTRL.created_by = createdby.mkey
                 LEFT JOIN employee_mst updatedby
                        ON CTRL.last_updated_by = updatedby.mkey
		where CTRL.DOCUMENT_MKEY is not null and CTRL.DOCUMENT_NAME is not null
		and CTRL.DOCUMENT_CATEGORY is not null 
		AND CTRL.mkey = @TASK_MKEY
		AND CTRL.DELETE_FLAG = 'N'
		AND THDR.DELETE_FLAG = 'N'
		AND MST.DELETE_FLAG = 'N'
		AND createdby.DELETE_FLAG = 'N'
		ORDER BY SR_NO,CONVERT(INT, CTRL.document_category);
      
      END try

      BEGIN catch
          -------------------------------------------------------------------------------------------------------------------------------            
          SELECT Error_number()    AS ERRORNUMBER,
                 Error_severity()  AS ERRORSEVERITY,
                 Error_state()     AS ERRORSTATE,
                 Error_procedure() AS ERRORPROCEDURE,
                 Error_line()      AS ERRORLINE,
                 Error_message()   AS ERRORMESSAGE;

          -------------------------------------------------------------------------------------------------------------------------------  
          DECLARE @ERROR_MESSAGE VARCHAR(max) = NULL;

          SET @ERROR_MESSAGE = Error_message();

          -------------------------------------------------------------------------------------------------------------------------------  
          EXEC Sp_p_tms_insert_error_des
            @USER_ID,
            'TMS',
            @API_NAME,
            @ERROR_MESSAGE,
            @API_METHOD;
      -------------------------------------------------------------------------------------------------------------------------------  
      END catch
  END 


-------------------------------------------------------------------------------------------------

ALTER VIEW [dbo].[V_Doc_Type_NT] AS  
SELECT [TYPE].MKEY AS DOC_TYPE_MKEY,[TYPE].TYPE_DESC AS DOC_TYPE_NAME
		,CAT.MKEY AS Doc_Category_Mkey,CAT.TYPE_DESC AS Doc_Category_Name
		,Isnull(CONVERT(VARCHAR(50), [TYPE].created_by), '') AS CREATED_BY_ID    
		,Isnull(CONVERT(VARCHAR(50), createdby.emp_full_name), '') AS CREATED_BY_NAME    
		,CASE    
		WHEN [TYPE].creation_date IS NULL THEN    
		''    
		ELSE    
		Format([TYPE].creation_date, 'yyyy-MM-dd HH:mm:ss')    
		END AS CREATION_DATE    
		,Isnull(CONVERT(VARCHAR(50), [TYPE].last_updated_by), '') AS LAST_UPDATED_BY    
		,Isnull(updatedby.emp_full_name, '') UPDATED_BY_NAME    
		,CASE    
		WHEN [TYPE].last_update_date IS NULL THEN    
		''    
		ELSE    
		Format([TYPE].last_update_date, 'yyyy-MM-dd HH:mm:ss')    
		END AS LAST_UPDATE_DATE    
		,[TYPE].DELETE_FLAG  
		FROM TYPE_MST [TYPE]  INNER JOIN TYPE_MST CAT ON CAT.MKEY = [TYPE].PARENT_ID
		INNER JOIN EMPLOYEE_MST createdby ON createdby.mkey= [TYPE].CREATED_BY
		LEFT JOIN  EMPLOYEE_MST updatedby ON [TYPE].LAST_UPDATED_BY = updatedby.mkey    
		WHERE [TYPE].TYPE_CODE = 'DOC_TYPE' AND CAT.TYPE_CODE = 'DOC_CATEGORY'
